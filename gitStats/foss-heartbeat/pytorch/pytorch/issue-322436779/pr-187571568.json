{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "id": 187571568, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg3NTcxNTY4", "html_url": "https://github.com/pytorch/pytorch/pull/7508", "diff_url": "https://github.com/pytorch/pytorch/pull/7508.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7508.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7508", "number": 7508, "state": "closed", "locked": false, "title": "[C++ API] Remove virtual forward and implement Sequential based on Any(Module)", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "This PR removes the virtual `forward()` method from the base module class, thus freeing submodules from any constraints w.r.t. the signature of their `forward()` method. This will enable the majority of modules to give their `forward()` a signature that best matches their module.\r\n\r\nOf course, a virtual `forward()` has its merits: one can call a module's `forward()` when one only has a pointer to a `Module` (the base class). In our API, this is useful in one and only one case: `Sequential`. To work around the fact that we have no `forward()` to call on a `Module*`, we employ type erasure techniques borrowed from `std::any`. More precisely:\r\n\r\n1. I've created an `Any` abstraction that models `std::any` (C++17) and allows type erasure of a single plain value.\r\n2. I've then created an `AnyModule` class, that:\r\n    1. Uses the same type erasure technique to erase the concrete type of a module,\r\n    2. Erases but stores the parameter types of the concrete module's `forward()`, and casts `Any`s passed at runtime to these stored types. \r\n\r\nThis leads to the following API:\r\n\r\n```\r\nSequential model(Linear(2, 3), Linear(3, 4), Linear(4, 5));\r\nmodel.forward<Variable>(variable);\r\n```\r\n\r\nHere, `forward` accepts any arguments and forwards them to the first module. The types are checked at runtime. Because the return type of the last module passed to `Sequential` is also erased, `forward` is templatized over the return type  of the last module. This is somewhat unfortunate, but is the only intrusion to the user API besides the dynamic type checking. It may be a good idea to let the return type default to `Variable`, but I fear lots of users will run into exceptions when they don't know this and return something else instead, so maybe being explicit is more helpful.\r\n\r\nI've written lots of tests for `Any`, `AnyModule` and `Sequential`, that also give you an idea of what the API looks like. Note that:\r\n\r\n1. `Sequential` and `AnyModule` are part of the public API,\r\n2. `Any` would ideally not be public, but has to be because it's returned by `Sequential`. I limit this fact by making `Any`'s constructor private and making construction possible only via a friend function in the `detail` namespace, which should hopefully deter users from using this for their own code.\r\n\r\nI have also removed all existing containers from autogradpp.\r\n\r\nNote: even though there is a shit ton of template programming going on, I believe the final `Sequential` container hides most of this complexity. Please suggest where more `static_assert`s or other things that can prevent template error spew could be placed.\r\n\r\n__Bonus__: if you have any suggestions on how to simplify the code, especially the templaty parts, please suggest away!\r\n\r\n@apaszke @zdevito @ebetica @jgehring \r\n@smessmer please take a look at the template metaprogramming parts.\r\n\r\n### Future PRs\r\n\r\n1. Change the core modules to have more sensible `forward()`s instead of just `variable_list`\r\n2. Right now, all except the first module in the `Sequential` have to take a single argument. It would be nice if we could implement something so that when you return an `std::tuple` or some other type, we can automatically destructure it and thus allow multiple arguments in modules other than the first. Note that you can already take a `std::tuple` as the first argument, you'll just have to destructure it yourself.", "created_at": "2018-05-11T21:14:55Z", "updated_at": "2018-11-23T15:44:39Z", "closed_at": "2018-05-24T19:46:52Z", "merged_at": "2018-05-24T19:46:52Z", "merge_commit_sha": "b12164005fe60d58b7f613411ad8c9b6ae549946", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7508/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "head": {"label": "goldsborough:forward", "ref": "forward", "sha": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "repo": {"id": 115096378, "node_id": "MDEwOlJlcG9zaXRvcnkxMTUwOTYzNzg=", "name": "pytorch", "full_name": "goldsborough/pytorch", "private": false, "owner": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/goldsborough/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/goldsborough/pytorch", "forks_url": "https://api.github.com/repos/goldsborough/pytorch/forks", "keys_url": "https://api.github.com/repos/goldsborough/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/goldsborough/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/goldsborough/pytorch/teams", "hooks_url": "https://api.github.com/repos/goldsborough/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/goldsborough/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/goldsborough/pytorch/events", "assignees_url": "https://api.github.com/repos/goldsborough/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/goldsborough/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/goldsborough/pytorch/tags", "blobs_url": "https://api.github.com/repos/goldsborough/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/goldsborough/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/goldsborough/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/goldsborough/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/goldsborough/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/goldsborough/pytorch/languages", "stargazers_url": "https://api.github.com/repos/goldsborough/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/goldsborough/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/goldsborough/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/goldsborough/pytorch/subscription", "commits_url": "https://api.github.com/repos/goldsborough/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/goldsborough/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/goldsborough/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/goldsborough/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/goldsborough/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/goldsborough/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/goldsborough/pytorch/merges", "archive_url": "https://api.github.com/repos/goldsborough/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/goldsborough/pytorch/downloads", "issues_url": "https://api.github.com/repos/goldsborough/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/goldsborough/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/goldsborough/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/goldsborough/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/goldsborough/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/goldsborough/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/goldsborough/pytorch/deployments", "created_at": "2017-12-22T08:49:57Z", "updated_at": "2018-11-08T01:51:18Z", "pushed_at": "2018-11-17T00:54:35Z", "git_url": "git://github.com/goldsborough/pytorch.git", "ssh_url": "git@github.com:goldsborough/pytorch.git", "clone_url": "https://github.com/goldsborough/pytorch.git", "svn_url": "https://github.com/goldsborough/pytorch", "homepage": "http://pytorch.org", "size": 86862, "stargazers_count": 3, "watchers_count": 3, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 3, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "0fddfe6c21e4d31c3e5049a12a9314d82076550f", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2196, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7508"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/7508/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/d4df9b3f7c6dbe1c6852a1352f7fb1854defe454"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>This PR removes the virtual <code>forward()</code> method from the base module class, thus freeing submodules from any constraints w.r.t. the signature of their <code>forward()</code> method. This will enable the majority of modules to give their <code>forward()</code> a signature that best matches their module.</p>\n<p>Of course, a virtual <code>forward()</code> has its merits: one can call a module's <code>forward()</code> when one only has a pointer to a <code>Module</code> (the base class). In our API, this is useful in one and only one case: <code>Sequential</code>. To work around the fact that we have no <code>forward()</code> to call on a <code>Module*</code>, we employ type erasure techniques borrowed from <code>std::any</code>. More precisely:</p>\n<ol>\n<li>I've created an <code>Any</code> abstraction that models <code>std::any</code> (C++17) and allows type erasure of a single plain value.</li>\n<li>I've then created an <code>AnyModule</code> class, that:\n<ol>\n<li>Uses the same type erasure technique to erase the concrete type of a module,</li>\n<li>Erases but stores the parameter types of the concrete module's <code>forward()</code>, and casts <code>Any</code>s passed at runtime to these stored types.</li>\n</ol>\n</li>\n</ol>\n<p>This leads to the following API:</p>\n<pre><code>Sequential model(Linear(2, 3), Linear(3, 4), Linear(4, 5));\nmodel.forward&lt;Variable&gt;(variable);\n</code></pre>\n<p>Here, <code>forward</code> accepts any arguments and forwards them to the first module. The types are checked at runtime. Because the return type of the last module passed to <code>Sequential</code> is also erased, <code>forward</code> is templatized over the return type  of the last module. This is somewhat unfortunate, but is the only intrusion to the user API besides the dynamic type checking. It may be a good idea to let the return type default to <code>Variable</code>, but I fear lots of users will run into exceptions when they don't know this and return something else instead, so maybe being explicit is more helpful.</p>\n<p>I've written lots of tests for <code>Any</code>, <code>AnyModule</code> and <code>Sequential</code>, that also give you an idea of what the API looks like. Note that:</p>\n<ol>\n<li><code>Sequential</code> and <code>AnyModule</code> are part of the public API,</li>\n<li><code>Any</code> would ideally not be public, but has to be because it's returned by <code>Sequential</code>. I limit this fact by making <code>Any</code>'s constructor private and making construction possible only via a friend function in the <code>detail</code> namespace, which should hopefully deter users from using this for their own code.</li>\n</ol>\n<p>I have also removed all existing containers from autogradpp.</p>\n<p>Note: even though there is a shit ton of template programming going on, I believe the final <code>Sequential</code> container hides most of this complexity. Please suggest where more <code>static_assert</code>s or other things that can prevent template error spew could be placed.</p>\n<p><strong>Bonus</strong>: if you have any suggestions on how to simplify the code, especially the templaty parts, please suggest away!</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88510\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jgehring\">@jgehring</a><br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2373925\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smessmer\">@smessmer</a> please take a look at the template metaprogramming parts.</p>\n<h3>Future PRs</h3>\n<ol>\n<li>Change the core modules to have more sensible <code>forward()</code>s instead of just <code>variable_list</code></li>\n<li>Right now, all except the first module in the <code>Sequential</code> have to take a single argument. It would be nice if we could implement something so that when you return an <code>std::tuple</code> or some other type, we can automatically destructure it and thus allow multiple arguments in modules other than the first. Note that you can already take a <code>std::tuple</code> as the first argument, you'll just have to destructure it yourself.</li>\n</ol>", "body_text": "This PR removes the virtual forward() method from the base module class, thus freeing submodules from any constraints w.r.t. the signature of their forward() method. This will enable the majority of modules to give their forward() a signature that best matches their module.\nOf course, a virtual forward() has its merits: one can call a module's forward() when one only has a pointer to a Module (the base class). In our API, this is useful in one and only one case: Sequential. To work around the fact that we have no forward() to call on a Module*, we employ type erasure techniques borrowed from std::any. More precisely:\n\nI've created an Any abstraction that models std::any (C++17) and allows type erasure of a single plain value.\nI've then created an AnyModule class, that:\n\nUses the same type erasure technique to erase the concrete type of a module,\nErases but stores the parameter types of the concrete module's forward(), and casts Anys passed at runtime to these stored types.\n\n\n\nThis leads to the following API:\nSequential model(Linear(2, 3), Linear(3, 4), Linear(4, 5));\nmodel.forward<Variable>(variable);\n\nHere, forward accepts any arguments and forwards them to the first module. The types are checked at runtime. Because the return type of the last module passed to Sequential is also erased, forward is templatized over the return type  of the last module. This is somewhat unfortunate, but is the only intrusion to the user API besides the dynamic type checking. It may be a good idea to let the return type default to Variable, but I fear lots of users will run into exceptions when they don't know this and return something else instead, so maybe being explicit is more helpful.\nI've written lots of tests for Any, AnyModule and Sequential, that also give you an idea of what the API looks like. Note that:\n\nSequential and AnyModule are part of the public API,\nAny would ideally not be public, but has to be because it's returned by Sequential. I limit this fact by making Any's constructor private and making construction possible only via a friend function in the detail namespace, which should hopefully deter users from using this for their own code.\n\nI have also removed all existing containers from autogradpp.\nNote: even though there is a shit ton of template programming going on, I believe the final Sequential container hides most of this complexity. Please suggest where more static_asserts or other things that can prevent template error spew could be placed.\nBonus: if you have any suggestions on how to simplify the code, especially the templaty parts, please suggest away!\n@apaszke @zdevito @ebetica @jgehring\n@smessmer please take a look at the template metaprogramming parts.\nFuture PRs\n\nChange the core modules to have more sensible forward()s instead of just variable_list\nRight now, all except the first module in the Sequential have to take a single argument. It would be nice if we could implement something so that when you return an std::tuple or some other type, we can automatically destructure it and thus allow multiple arguments in modules other than the first. Note that you can already take a std::tuple as the first argument, you'll just have to destructure it yourself.", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "comments": 5, "review_comments": 70, "maintainer_can_modify": false, "commits": 2, "additions": 1489, "deletions": 231, "changed_files": 29}