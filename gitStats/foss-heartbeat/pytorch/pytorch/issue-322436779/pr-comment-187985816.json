{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187985816", "pull_request_review_id": 119873440, "id": 187985816, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk4NTgxNg==", "diff_hunk": "@@ -0,0 +1,138 @@\n+#pragma once\n+\n+#include <torch/csrc/utils/memory.h>\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <memory>\n+#include <typeinfo>\n+#include <utility>\n+\n+namespace torch {\n+class Any;\n+namespace detail {\n+template <typename T>\n+Any make_any(T&& value);\n+} // namespace detail\n+} // namespace torch\n+\n+namespace torch {\n+/// A simplified implementation of `std::any` or `boost::any` which stores a\n+/// type erased object, whose concrete value can be retrieved at runtime by\n+/// checking if the `typeid()` of a requested type matches the `typeid()` of the\n+/// object stored. It is simplified in that it does not handle copying, as we do\n+/// not require it for our use cases. Moves are sufficient.\n+class Any {\n+ public:\n+  /// Default construction is disallowed. Thus our invariant: an `Any` contains\n+  /// an object at all times, from its construction, to its destruction.\n+  Any() = delete;\n+\n+  /// Move construction and assignment is allowed, and follows the default\n+  /// behavior of move for `std::unique_ptr`.\n+  Any(Any&&) = default;\n+  Any& operator=(Any&&) = default;\n+\n+  /// Copy is disallowed, because we don't need it.\n+  Any(const Any& other) = delete;\n+  Any& operator=(const Any& other) = delete;\n+\n+  /// Returns the value contained in the `Any` if the type passed as template\n+  /// parameter matches the type of the object stored, and returns a null\n+  /// pointer otherwise.\n+  template <typename T>\n+  T* try_get() {", "path": "torch/csrc/api/include/torch/detail/any.h", "position": null, "original_position": 45, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "fe047cffdf6d61f87fd56f978cec286719ac01bc", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Tbh this was because `AnyModule::forward()` returns an `Any` and the `Any` is a temporary, so getting an lvalue reference to what it stores inside would result in injuries", "created_at": "2018-05-14T14:59:39Z", "updated_at": "2018-11-23T15:44:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187985816", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187985816"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r187985816"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>Tbh this was because <code>AnyModule::forward()</code> returns an <code>Any</code> and the <code>Any</code> is a temporary, so getting an lvalue reference to what it stores inside would result in injuries</p>", "body_text": "Tbh this was because AnyModule::forward() returns an Any and the Any is a temporary, so getting an lvalue reference to what it stores inside would result in injuries", "in_reply_to_id": 187787422}