{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188022024", "pull_request_review_id": 119912566, "id": 188022024, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODAyMjAyNA==", "diff_hunk": "@@ -148,4 +148,11 @@ std::shared_ptr<typename std::decay<Module>::type> make(Module&& module) {\n   ptr->reset_parameters();\n   return ptr;\n }\n+\n+/// A type trait whose `::value` member is true if `M` derives from `Module`.\n+template <typename M>\n+using is_module = std::is_base_of<Module, typename std::decay<M>::type>;\n+\n+template <typename M>\n+using enable_if_module = typename std::enable_if<is_module<M>::value>::type;", "path": "torch/csrc/api/include/torch/nn/module.h", "position": null, "original_position": 33, "commit_id": "d4df9b3f7c6dbe1c6852a1352f7fb1854defe454", "original_commit_id": "2d6b6dc74466732d280aee505915e4387b7f9dc0", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "body": "Without the `_t` prefix, convention is to not go into the `::type` member, i.e.\r\n\r\n    template <typename M>\r\n    using enable_if_module = std::enable_if<is_module<M>::value>;\r\n   \r\n    template <typename M>\r\n    using enable_if_module_t = typename enable_if_module<M>::type;", "created_at": "2018-05-14T16:45:49Z", "updated_at": "2018-11-23T15:44:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188022024", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7508", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188022024"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7508#discussion_r188022024"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7508"}}, "body_html": "<p>Without the <code>_t</code> prefix, convention is to not go into the <code>::type</code> member, i.e.</p>\n<pre><code>template &lt;typename M&gt;\nusing enable_if_module = std::enable_if&lt;is_module&lt;M&gt;::value&gt;;\n\ntemplate &lt;typename M&gt;\nusing enable_if_module_t = typename enable_if_module&lt;M&gt;::type;\n</code></pre>", "body_text": "Without the _t prefix, convention is to not go into the ::type member, i.e.\ntemplate <typename M>\nusing enable_if_module = std::enable_if<is_module<M>::value>;\n\ntemplate <typename M>\nusing enable_if_module_t = typename enable_if_module<M>::type;"}