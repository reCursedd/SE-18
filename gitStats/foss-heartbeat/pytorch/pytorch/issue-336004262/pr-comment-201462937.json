{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201462937", "pull_request_review_id": 135943123, "id": 201462937, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2MjkzNw==", "diff_hunk": "@@ -0,0 +1,514 @@\n+#include \"TensorIterator.h\"\n+\n+#include <ATen/ExpandUtils.h>\n+#include <ATen/Parallel.h>\n+#include <time.h>\n+\n+namespace at {\n+\n+void TensorIterator::reorder_dimensions() {\n+  // Sort the dimensions based on the sum-of-strides in ascending order. NOTE:\n+  // that this inverts the order of C-contiguous tensors. strides[0] is the\n+  // fastest moving dimension instead of strides[ndim - 1].\n+\n+  auto sum_of_strides = SmallVector<double, 6>(ndim(), 0.0);\n+  for (int dim = 0; dim < ndim(); dim++) {\n+    double sum = 0.0;\n+    for (const auto& op : operands_) {\n+      if (op.stride_.size() == 0) continue;\n+      sum += op.stride_[dim];\n+    }\n+\n+    // Weight each dimension by its index. Given two dimensions with equal\n+    // some of strides, this preserves the given relative ordering.\n+    sum += (ndim() - dim - 1) / (double)ndim();\n+\n+    sum_of_strides[dim] = sum;\n+  }\n+\n+  // initialize perm with 0, 1, 2, ...\n+  perm_.resize(ndim());\n+  std::iota(std::begin(perm_), std::end(perm_), 0);\n+\n+  std::sort(std::begin(perm_), std::end(perm_), [&](size_t i1, size_t i2) {\n+    return sum_of_strides[i1] < sum_of_strides[i2];\n+  });\n+\n+  auto reorder = [](IntList data, IntList perm_) {\n+    auto res = DimVector(data.size(), 0);\n+    for (size_t i = 0; i < perm_.size(); i++) {\n+      res[i] = data[perm_[i]];\n+    }\n+    return res;\n+  };\n+\n+  // Update shape and strides\n+  shape_ = reorder(shape_, perm_);\n+  for (auto& op : operands_) {\n+    if (op.stride_.size() > 0) {\n+      op.stride_ = reorder(op.stride_, perm_);\n+    }\n+  }\n+}\n+\n+template <typename F>\n+static std::tuple<ScalarType, Backend>\n+compute_result_type(at::ArrayRef<OperandInfo> operands, const F& predicate) {\n+  auto result_type = ScalarType::Undefined;\n+  auto backend = Backend::Undefined;\n+  for (auto& op : operands) {\n+    if (!op.tensor_->defined()) continue;\n+    if (!predicate(*op.tensor_)) continue;\n+    auto dtype = op.tensor_->type().scalarType();;\n+    result_type = (result_type == ScalarType::Undefined\n+        ? dtype\n+        : promoteTypes(result_type, dtype));\n+    backend = (backend == Backend::Undefined\n+        ? op.tensor_->type().backend()\n+        : backend);\n+  }\n+  return std::make_tuple(result_type, backend);\n+}\n+\n+void TensorIterator::compute_common_type() {\n+  // The result dtype is computed with the precedence:\n+  // 1) Tensors of rank one or higher\n+  // 2) Tensors of any rank that aren't wrapped numbers\n+  // 3) Any tensor", "path": "aten/src/ATen/native/TensorIterator.cpp", "position": null, "original_position": 77, "commit_id": "b2efd9cc7a5dcff977b0be9aff2ca3bc0cfa159d", "original_commit_id": "38d31d836a8c373b2f34acc35953c2ad910bca3e", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Yes", "created_at": "2018-07-10T19:17:18Z", "updated_at": "2018-11-23T15:47:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/8919#discussion_r201462937", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8919", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201462937"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8919#discussion_r201462937"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8919"}}, "body_html": "<p>Yes</p>", "body_text": "Yes", "in_reply_to_id": 201150085}