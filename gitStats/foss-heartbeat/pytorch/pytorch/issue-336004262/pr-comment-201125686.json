{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201125686", "pull_request_review_id": 135166498, "id": 201125686, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTEyNTY4Ng==", "diff_hunk": "@@ -0,0 +1,168 @@\n+#include \"ATen/native/BinaryOps.h\"\n+\n+#include <ATen/ATen.h>\n+#include <ATen/Dispatch.h>\n+#include <ATen/NativeFunctions.h>\n+#include <ATen/native/TensorIterator.h>\n+#include <time.h>\n+\n+namespace at {\n+namespace native {\n+\n+DispatchStub<add_fn> add_stub;\n+DispatchStub<add_fn> sub_stub;\n+DispatchStub<binary_fn> mul_stub;\n+DispatchStub<binary_fn> div_stub;\n+\n+Tensor& add_out(Tensor& result, const Tensor& self, const Tensor& other, Scalar alpha) {\n+  if (other.is_sparse()) {\n+    if (!result.defined()) {\n+      result = self.type().tensor();\n+    }\n+    if (!self.sizes().equals(other.sizes())) {\n+      AT_ERROR(\"sizes do not match\");\n+    }\n+    if (self.is_sparse()) {\n+      at::_sparse_add_out(result, self, other, alpha);\n+    } else {\n+      at::_sparse_dense_add_out(result, self, SparseTensorRef(other), alpha);\n+    }\n+    return result;\n+  } else if (self.is_sparse()) {\n+    AT_ERROR(\"add(sparse, dense) is not supported. Use add(dense, sparse) instead.\");\n+  }\n+  auto iter = TensorIterator::binary_op(self, other, result);\n+  add_stub(iter->backend(), *iter, alpha);\n+  return result;\n+}\n+\n+Tensor add(const Tensor& self, const Tensor& other, Scalar alpha) {\n+  Tensor result;\n+  return native::add_out(result, self, other, alpha);\n+}\n+\n+Tensor& add_(Tensor& self, const Tensor& other, Scalar alpha) {\n+  return native::add_out(self, self, other, alpha);\n+}\n+\n+Tensor& div_out(Tensor& result, const Tensor& self, const Tensor& other) {\n+  if (self.is_sparse()) {", "path": "aten/src/ATen/native/BinaryOps.cpp", "position": 45, "original_position": 49, "commit_id": "b2efd9cc7a5dcff977b0be9aff2ca3bc0cfa159d", "original_commit_id": "38d31d836a8c373b2f34acc35953c2ad910bca3e", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "what if !self.is_sparse() && other.is_sparse() ?  We can't have that case currently I think, but I believe we will soon.", "created_at": "2018-07-09T19:50:15Z", "updated_at": "2018-11-23T15:46:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/8919#discussion_r201125686", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8919", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201125686"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8919#discussion_r201125686"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8919"}}, "body_html": "<p>what if !self.is_sparse() &amp;&amp; other.is_sparse() ?  We can't have that case currently I think, but I believe we will soon.</p>", "body_text": "what if !self.is_sparse() && other.is_sparse() ?  We can't have that case currently I think, but I believe we will soon."}