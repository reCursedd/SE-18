{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201130445", "pull_request_review_id": 135166498, "id": 201130445, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTEzMDQ0NQ==", "diff_hunk": "@@ -0,0 +1,189 @@\n+#include <ATen/ATen.h>\n+#include <ATen/cuda/detail/OffsetCalculator.cuh>\n+#include <ATen/detail/FunctionTraits.h>\n+#include <ATen/native/TensorIterator.h>\n+\n+\n+// Marks a lambda as executable on both the host and device. The __host__\n+// attribute is important so that we can access static type information from\n+// the host, even if the function is typically only executed on the device.\n+#ifndef GPU_LAMBDA\n+#define GPU_LAMBDA __host__ __device__\n+#endif\n+\n+#ifdef __NVCC__\n+#define ASSERT_HOST_DEVICE_LAMBDA(type) \\\n+  static_assert(__nv_is_extended_host_device_lambda_closure_type(type), \\\n+                #type \" must be a __host__ __device__ lambda\")\n+#else\n+#define ASSERT_HOST_DEVICE_LAMBDA(type)\n+#endif\n+\n+\n+namespace at { namespace native {\n+\n+// NOTE: CUDA requires func_t to be passed by value, while ROCm fails to compile\n+// unless it's passed as a (const) reference.", "path": "aten/src/ATen/native/cuda/Loops.cuh", "position": null, "original_position": 26, "commit_id": "b2efd9cc7a5dcff977b0be9aff2ca3bc0cfa159d", "original_commit_id": "38d31d836a8c373b2f34acc35953c2ad910bca3e", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: I don't know how to interpret the \"(const)\"; is this saying it has to be a reference, but we want it to be a const reference, or that it has to be a const reference?", "created_at": "2018-07-09T20:07:16Z", "updated_at": "2018-11-23T15:47:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/8919#discussion_r201130445", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8919", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201130445"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8919#discussion_r201130445"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8919"}}, "body_html": "<p>nit: I don't know how to interpret the \"(const)\"; is this saying it has to be a reference, but we want it to be a const reference, or that it has to be a const reference?</p>", "body_text": "nit: I don't know how to interpret the \"(const)\"; is this saying it has to be a reference, but we want it to be a const reference, or that it has to be a const reference?"}