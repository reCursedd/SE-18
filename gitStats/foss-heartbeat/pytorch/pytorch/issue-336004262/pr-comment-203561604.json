{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203561604", "pull_request_review_id": 138476781, "id": 203561604, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU2MTYwNA==", "diff_hunk": "@@ -10,126 +10,145 @@ namespace at { namespace native { namespace {\n using namespace vec256;\n \n // all three operands contiguous\n-static inline bool is_binary_contiguous(const int64_t* strides, const int64_t* element_sizes) {\n-  return strides[0] == element_sizes[0] &&\n-         strides[1] == element_sizes[1] &&\n-         strides[2] == element_sizes[2];\n+template <typename traits>\n+static inline bool is_binary_contiguous(const int64_t* strides) {", "path": "aten/src/ATen/native/cpu/Loops.h", "position": null, "original_position": 9, "commit_id": "b2efd9cc7a5dcff977b0be9aff2ca3bc0cfa159d", "original_commit_id": "bdf5c0b6a9d1832f8f7c04bf116a02fde1ad1e93", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Yeah, it seems to lose track of the values of strides inside the statement:\r\n\r\n```\r\nif (is_binary_contiguous<traits>(strides)) {\r\n   ...\r\n}\r\n```\r\n\r\nWith a `const int64_t*` it specializes the body of the if-statement with the values of strides from the condition. This didn't seem to happen with an IntList. I didn't did deeper, so it's possible it can work with an IntList with a few other changes.", "created_at": "2018-07-18T23:24:23Z", "updated_at": "2018-11-23T15:47:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/8919#discussion_r203561604", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8919", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203561604"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8919#discussion_r203561604"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8919"}}, "body_html": "<p>Yeah, it seems to lose track of the values of strides inside the statement:</p>\n<pre><code>if (is_binary_contiguous&lt;traits&gt;(strides)) {\n   ...\n}\n</code></pre>\n<p>With a <code>const int64_t*</code> it specializes the body of the if-statement with the values of strides from the condition. This didn't seem to happen with an IntList. I didn't did deeper, so it's possible it can work with an IntList with a few other changes.</p>", "body_text": "Yeah, it seems to lose track of the values of strides inside the statement:\nif (is_binary_contiguous<traits>(strides)) {\n   ...\n}\n\nWith a const int64_t* it specializes the body of the if-statement with the values of strides from the condition. This didn't seem to happen with an IntList. I didn't did deeper, so it's possible it can work with an IntList with a few other changes.", "in_reply_to_id": 203204721}