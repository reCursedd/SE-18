{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206634594", "pull_request_review_id": 142084828, "id": 206634594, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjYzNDU5NA==", "diff_hunk": "@@ -0,0 +1,52 @@\n+#pragma once\n+\n+#include <torch/csrc/utils/tensor_flatten.h>\n+\n+#include <c10d/ProcessGroup.hpp>\n+\n+#include <ATen/ATen.h>\n+\n+#include <cstddef>\n+#include <memory>\n+#include <vector>\n+\n+namespace c10d {\n+inline void distBroadcastCoalesced(\n+    std::vector<at::Tensor>& tensors,\n+    int64_t bufferSize,\n+    ProcessGroup& processGroup) {\n+  auto tensorGroups = torch::utils::take_tensors(tensors, bufferSize);\n+  // We store single-element vectors in `flatTensors` because\n+  // `ProcessGroup::broadcast` takes a reference to a vector, which must be\n+  // alive until the `wait()` call on the returned `Work` completes.\n+  std::vector<std::vector<at::Tensor>> flatTensors;\n+  std::vector<std::shared_ptr<ProcessGroup::Work>> work;\n+  flatTensors.reserve(tensorGroups.size());\n+  work.reserve(tensorGroups.size());\n+  for (const auto& group : tensorGroups) {\n+    // Flatten each group of tensors (whose size equals `bufferSize`) into a\n+    // single tensor.\n+    flatTensors.push_back({torch::utils::flatten_dense_tensors(group.tensors)});\n+    BroadcastOptions broadcastOptions;\n+    broadcastOptions.rootRank = 0;\n+    broadcastOptions.rootTensor = 0;\n+    // Enqueue a work item and collect the `Work` (essntially a \"future\") so we\n+    // can `wait()` for its completion after we have collected all `Work` items.\n+    work.push_back(\n+        processGroup.broadcast(flatTensors.back(), broadcastOptions));\n+  }\n+  // Now loop through each group, wait for the broadcast to complete, and\n+  // un-flatten the broadcast tensor back into device-local individual tensors.\n+  for (size_t group = 0; group < tensorGroups.size(); ++group) {\n+    auto& tensors = tensorGroups[group].tensors;\n+    work[group]->wait();\n+    const auto synced =\n+        torch::utils::unflatten_dense_tensors(flatTensors[group][0], tensors);\n+    AT_ASSERT(synced.size() == tensors.size());\n+    for (size_t i = 0; i < synced.size(); ++i) {\n+      // Copy into the per-process tensors.\n+      tensors[i].copy_(synced[i]);", "path": "torch/csrc/distributed/c10d/ddp.h", "position": null, "original_position": 48, "commit_id": "5108147e91209b82dae82c17d42505ee97cbf500", "original_commit_id": "2cfa2a180f7028067b41cce566bcdff0910ba7bc", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "shall we do async copy here?", "created_at": "2018-07-31T18:23:01Z", "updated_at": "2018-11-23T15:48:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/9729#discussion_r206634594", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9729", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206634594"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9729#discussion_r206634594"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9729"}}, "body_html": "<p>shall we do async copy here?</p>", "body_text": "shall we do async copy here?"}