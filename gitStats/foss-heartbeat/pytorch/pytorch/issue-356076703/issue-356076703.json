{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11149", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11149/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11149/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11149/events", "html_url": "https://github.com/pytorch/pytorch/issues/11149", "id": 356076703, "node_id": "MDU6SXNzdWUzNTYwNzY3MDM=", "number": 11149, "title": "`mse_loss` always computes sum of squared errors if one of the inputs `requires_grad`", "user": {"login": "cheind", "id": 38565, "node_id": "MDQ6VXNlcjM4NTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/38565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheind", "html_url": "https://github.com/cheind", "followers_url": "https://api.github.com/users/cheind/followers", "following_url": "https://api.github.com/users/cheind/following{/other_user}", "gists_url": "https://api.github.com/users/cheind/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheind/subscriptions", "organizations_url": "https://api.github.com/users/cheind/orgs", "repos_url": "https://api.github.com/users/cheind/repos", "events_url": "https://api.github.com/users/cheind/events{/privacy}", "received_events_url": "https://api.github.com/users/cheind/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-31T18:08:54Z", "updated_at": "2018-08-31T18:21:34Z", "closed_at": "2018-08-31T18:20:55Z", "author_association": "NONE", "body_html": "<p>When one of the inputs to <code>torch.nn.functional.mse_loss</code> requires gradients the returned loss changes from elementwise mean to sum.</p>\n<pre><code>In [43]: import torch\n    ...: from torch.nn.functional import mse_loss\n    ...:\n    ...: x = torch.rand(1,2,3)\n    ...: y = torch.rand(1,2,3, requires_grad=True)\n    ...:\n    ...: print(mse_loss(x,y, reduction='elementwise_mean'))\n    ...: print(((x-y)**2).mean())\n    ...:\n    ...:\ntensor(0.7133, grad_fn=&lt;SumBackward0&gt;)\ntensor(0.1189, grad_fn=&lt;MeanBackward1&gt;)\n</code></pre>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.1<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0</p>\n<p>OS: Microsoft Windows 10 Home<br>\nGCC version: Could not collect<br>\nCMake version: version 3.7.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.0.176<br>\nGPU models and configuration: GPU 0: GeForce GTX 1070<br>\nNvidia driver version: 388.13<br>\ncuDNN version: Could not collect</p>", "body_text": "When one of the inputs to torch.nn.functional.mse_loss requires gradients the returned loss changes from elementwise mean to sum.\nIn [43]: import torch\n    ...: from torch.nn.functional import mse_loss\n    ...:\n    ...: x = torch.rand(1,2,3)\n    ...: y = torch.rand(1,2,3, requires_grad=True)\n    ...:\n    ...: print(mse_loss(x,y, reduction='elementwise_mean'))\n    ...: print(((x-y)**2).mean())\n    ...:\n    ...:\ntensor(0.7133, grad_fn=<SumBackward0>)\ntensor(0.1189, grad_fn=<MeanBackward1>)\n\nSystem Info\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 9.0\nOS: Microsoft Windows 10 Home\nGCC version: Could not collect\nCMake version: version 3.7.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1070\nNvidia driver version: 388.13\ncuDNN version: Could not collect", "body": "When one of the inputs to `torch.nn.functional.mse_loss` requires gradients the returned loss changes from elementwise mean to sum.\r\n\r\n```\r\nIn [43]: import torch\r\n    ...: from torch.nn.functional import mse_loss\r\n    ...:\r\n    ...: x = torch.rand(1,2,3)\r\n    ...: y = torch.rand(1,2,3, requires_grad=True)\r\n    ...:\r\n    ...: print(mse_loss(x,y, reduction='elementwise_mean'))\r\n    ...: print(((x-y)**2).mean())\r\n    ...:\r\n    ...:\r\ntensor(0.7133, grad_fn=<SumBackward0>)\r\ntensor(0.1189, grad_fn=<MeanBackward1>)\r\n```\r\n## System Info\r\n\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0\r\n\r\nOS: Microsoft Windows 10 Home\r\nGCC version: Could not collect\r\nCMake version: version 3.7.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: GPU 0: GeForce GTX 1070\r\nNvidia driver version: 388.13\r\ncuDNN version: Could not collect\r\n"}