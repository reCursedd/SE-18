{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406448259", "html_url": "https://github.com/pytorch/pytorch/issues/7096#issuecomment-406448259", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7096", "id": 406448259, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ0ODI1OQ==", "user": {"login": "mttbx", "id": 38148377, "node_id": "MDQ6VXNlcjM4MTQ4Mzc3", "avatar_url": "https://avatars3.githubusercontent.com/u/38148377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mttbx", "html_url": "https://github.com/mttbx", "followers_url": "https://api.github.com/users/mttbx/followers", "following_url": "https://api.github.com/users/mttbx/following{/other_user}", "gists_url": "https://api.github.com/users/mttbx/gists{/gist_id}", "starred_url": "https://api.github.com/users/mttbx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mttbx/subscriptions", "organizations_url": "https://api.github.com/users/mttbx/orgs", "repos_url": "https://api.github.com/users/mttbx/repos", "events_url": "https://api.github.com/users/mttbx/events{/privacy}", "received_events_url": "https://api.github.com/users/mttbx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T23:54:52Z", "updated_at": "2018-07-19T23:54:52Z", "author_association": "NONE", "body_html": "<p>yes, you are right, here's my new code!</p>\n<pre><code>import torch\nimport torch.multiprocessing as mp\nimport numpy.random as npr\nmp.set_start_method('spawn', force=True)\n\n\ndef train(q):\n    a=q.get()\n    print(a)\n\nif __name__ == '__main__':\n    num_processes = 4\n    q=mp.Queue()\n    for i in range(num_processes):\n        a=torch.zeros(npr.randint(1, 3)).cuda()\n        a.share_memory_()\n        q.put(a)\n\n\n    processes = []\n    for rank in range(num_processes):\n        p = mp.Process(target=train, args=(q,))\n        p.start()\n        processes.append(p)\n    for p in processes:\n      p.join()\n</code></pre>", "body_text": "yes, you are right, here's my new code!\nimport torch\nimport torch.multiprocessing as mp\nimport numpy.random as npr\nmp.set_start_method('spawn', force=True)\n\n\ndef train(q):\n    a=q.get()\n    print(a)\n\nif __name__ == '__main__':\n    num_processes = 4\n    q=mp.Queue()\n    for i in range(num_processes):\n        a=torch.zeros(npr.randint(1, 3)).cuda()\n        a.share_memory_()\n        q.put(a)\n\n\n    processes = []\n    for rank in range(num_processes):\n        p = mp.Process(target=train, args=(q,))\n        p.start()\n        processes.append(p)\n    for p in processes:\n      p.join()", "body": "yes, you are right, here's my new code!\r\n```\r\nimport torch\r\nimport torch.multiprocessing as mp\r\nimport numpy.random as npr\r\nmp.set_start_method('spawn', force=True)\r\n\r\n\r\ndef train(q):\r\n    a=q.get()\r\n    print(a)\r\n\r\nif __name__ == '__main__':\r\n    num_processes = 4\r\n    q=mp.Queue()\r\n    for i in range(num_processes):\r\n        a=torch.zeros(npr.randint(1, 3)).cuda()\r\n        a.share_memory_()\r\n        q.put(a)\r\n\r\n\r\n    processes = []\r\n    for rank in range(num_processes):\r\n        p = mp.Process(target=train, args=(q,))\r\n        p.start()\r\n        processes.append(p)\r\n    for p in processes:\r\n      p.join()\r\n```"}