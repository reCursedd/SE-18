{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7519", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7519/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7519/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7519/events", "html_url": "https://github.com/pytorch/pytorch/issues/7519", "id": 322495193, "node_id": "MDU6SXNzdWUzMjI0OTUxOTM=", "number": 7519, "title": "fold(unfold(x)) != x", "user": {"login": "nadavbh12", "id": 14809804, "node_id": "MDQ6VXNlcjE0ODA5ODA0", "avatar_url": "https://avatars1.githubusercontent.com/u/14809804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nadavbh12", "html_url": "https://github.com/nadavbh12", "followers_url": "https://api.github.com/users/nadavbh12/followers", "following_url": "https://api.github.com/users/nadavbh12/following{/other_user}", "gists_url": "https://api.github.com/users/nadavbh12/gists{/gist_id}", "starred_url": "https://api.github.com/users/nadavbh12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nadavbh12/subscriptions", "organizations_url": "https://api.github.com/users/nadavbh12/orgs", "repos_url": "https://api.github.com/users/nadavbh12/repos", "events_url": "https://api.github.com/users/nadavbh12/events{/privacy}", "received_events_url": "https://api.github.com/users/nadavbh12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-12T08:56:16Z", "updated_at": "2018-05-14T07:30:57Z", "closed_at": "2018-05-13T15:39:00Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>Shouldn\u2019t these operations be each other's inverse? If not, How do I inverse this operation?<br>\nI tried to run this on MNIST images, and visually I also see a difference at the edges of the digits.</p>\n<h2>Code example</h2>\n<pre lang=\"In[1]:\" data-meta=\"x = torch.rand(32, 3, 16, 16)\"><code>In[2]: torch.equal(F.fold(F.unfold(x, 3), x.shape[2], 3), x)\nOut[2]: False\n</code></pre>\n<h2>System Info</h2>\n<pre lang=\"PyTorch\" data-meta=\"version: 0.4.0\"><code>Is debug build: No\nCUDA used to build PyTorch: 8.0.61\n\nOS: Ubuntu 16.04.2 LTS\nGCC version: (Ubuntu 5.4.1-2ubuntu1~16.04) 5.4.1 20160904\nCMake version: version 3.6.3\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 8.0.61\nGPU models and configuration: \nGPU 0: GeForce GTX TITAN X\nGPU 1: GeForce GTX TITAN X\n\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/libcudnn.so.5.1.10\n/usr/lib/libcudnn_static.a\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.0)\n[pip] numpydoc (0.7.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] pytorch                   0.4.0           py36_cuda8.0.61_cudnn7.1.2_1    pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch\n</code></pre>", "body_text": "Issue description\nShouldn\u2019t these operations be each other's inverse? If not, How do I inverse this operation?\nI tried to run this on MNIST images, and visually I also see a difference at the edges of the digits.\nCode example\nIn[2]: torch.equal(F.fold(F.unfold(x, 3), x.shape[2], 3), x)\nOut[2]: False\n\nSystem Info\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\n\nOS: Ubuntu 16.04.2 LTS\nGCC version: (Ubuntu 5.4.1-2ubuntu1~16.04) 5.4.1 20160904\nCMake version: version 3.6.3\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 8.0.61\nGPU models and configuration: \nGPU 0: GeForce GTX TITAN X\nGPU 1: GeForce GTX TITAN X\n\nNvidia driver version: 384.111\ncuDNN version: Probably one of the following:\n/usr/lib/libcudnn.so.5.1.10\n/usr/lib/libcudnn_static.a\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.0)\n[pip] numpydoc (0.7.0)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] pytorch                   0.4.0           py36_cuda8.0.61_cudnn7.1.2_1    pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\n\r\nShouldn\u2019t these operations be each other's inverse? If not, How do I inverse this operation?\r\nI tried to run this on MNIST images, and visually I also see a difference at the edges of the digits.\r\n\r\n## Code example\r\n```In[1]: x = torch.rand(32, 3, 16, 16)\r\nIn[2]: torch.equal(F.fold(F.unfold(x, 3), x.shape[2], 3), x)\r\nOut[2]: False\r\n```\r\n\r\n## System Info\r\n```PyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 16.04.2 LTS\r\nGCC version: (Ubuntu 5.4.1-2ubuntu1~16.04) 5.4.1 20160904\r\nCMake version: version 3.6.3\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 8.0.61\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX TITAN X\r\nGPU 1: GeForce GTX TITAN X\r\n\r\nNvidia driver version: 384.111\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/libcudnn.so.5.1.10\r\n/usr/lib/libcudnn_static.a\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.0)\r\n[pip] numpydoc (0.7.0)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] pytorch                   0.4.0           py36_cuda8.0.61_cudnn7.1.2_1    pytorch\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n```"}