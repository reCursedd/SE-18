{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404978693", "html_url": "https://github.com/pytorch/pytorch/issues/9408#issuecomment-404978693", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9408", "id": 404978693, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk3ODY5Mw==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-13T23:29:34Z", "updated_at": "2018-07-14T03:00:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a></p>\n<ol>\n<li>I think we can name it <code>expand_at</code> instead</li>\n<li>Explicit expand might be useful for ops that does not support broadcast, such as <code>stack</code>, <code>cat</code>. Also useful in JIT:</li>\n</ol>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\na <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>)\n\n<span class=\"pl-en\">@torch.jit.script</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">x</span>):\n    new_shape <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(x.shape)\n    new_shape[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n    <span class=\"pl-k\">return</span> x.expand(new_shape)\n\n<span class=\"pl-c1\">print</span>(f(a))</pre></div>\n<p>Currently it gives</p>\n<pre><code>torch.jit.frontend.NotSupportedError: the only expressions allowed on the left hand side of assignments are variable names and starred expressions\n@torch.jit.script\ndef f(x):\n    new_shape = list(x.shape)\n    new_shape[2] = 10\n    ~~~~~~~~~~~ &lt;--- HERE\n    return x.expand(new_shape)\n</code></pre>\n<p>It seems to be easier to add a <code>expand_at</code> than add support for expressions to appear on the left hand side of assignments...</p>", "body_text": "@gchanan\n\nI think we can name it expand_at instead\nExplicit expand might be useful for ops that does not support broadcast, such as stack, cat. Also useful in JIT:\n\nimport torch\n\na = torch.randn(4,5,1,3,3)\n\n@torch.jit.script\ndef f(x):\n    new_shape = list(x.shape)\n    new_shape[2] = 10\n    return x.expand(new_shape)\n\nprint(f(a))\nCurrently it gives\ntorch.jit.frontend.NotSupportedError: the only expressions allowed on the left hand side of assignments are variable names and starred expressions\n@torch.jit.script\ndef f(x):\n    new_shape = list(x.shape)\n    new_shape[2] = 10\n    ~~~~~~~~~~~ <--- HERE\n    return x.expand(new_shape)\n\nIt seems to be easier to add a expand_at than add support for expressions to appear on the left hand side of assignments...", "body": "@gchanan \r\n1. I think we can name it `expand_at` instead\r\n2. Explicit expand might be useful for ops that does not support broadcast, such as `stack`, `cat`. Also useful in JIT:\r\n```python\r\nimport torch\r\n\r\na = torch.randn(4,5,1,3,3)\r\n\r\n@torch.jit.script\r\ndef f(x):\r\n    new_shape = list(x.shape)\r\n    new_shape[2] = 10\r\n    return x.expand(new_shape)\r\n\r\nprint(f(a))\r\n```\r\nCurrently it gives\r\n```\r\ntorch.jit.frontend.NotSupportedError: the only expressions allowed on the left hand side of assignments are variable names and starred expressions\r\n@torch.jit.script\r\ndef f(x):\r\n    new_shape = list(x.shape)\r\n    new_shape[2] = 10\r\n    ~~~~~~~~~~~ <--- HERE\r\n    return x.expand(new_shape)\r\n```\r\nIt seems to be easier to add a `expand_at` than add support for expressions to appear on the left hand side of assignments..."}