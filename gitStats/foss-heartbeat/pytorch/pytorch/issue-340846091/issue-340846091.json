{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9408", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9408/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9408/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9408/events", "html_url": "https://github.com/pytorch/pytorch/issues/9408", "id": 340846091, "node_id": "MDU6SXNzdWUzNDA4NDYwOTE=", "number": 9408, "title": "[jit][script] support tensor.expand([-1,-1,10,-1,-1])", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-07-13T00:58:06Z", "updated_at": "2018-10-06T05:11:53Z", "closed_at": "2018-10-06T05:11:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The topic of this issue has changed.</p>\n<p>Original content:<br>\n<del>Currently pytorch has <code>torch.expand</code> and <code>torch.expand_like</code>, which allow expanding the shape of a tensor to a fully specified shape(directly as in <code>expand</code> or indirectly as in <code>expand_like</code>). It would be more conveniently in some cases to write user code if we add a <code>torch.expand_dim</code>.</del></p>\n<p><del>For example, if you have a tensor <code>(5, 3, 1, 4, 8)</code>, doing a <code>tensor.expand_dim(2, 10)</code> gives a tensor of shape <code>(5, 3, 10, 4, 8)</code>.</del></p>\n<p><del><code>expand_dim</code> vs <code>expand</code> is like <code>flatten</code> vs <code>reshape</code>. There is no new function, just some convenience.</del></p>\n<p><del>Also, if the pytorch team confirm that this is contribute welcome, I can do the job to add it to ATen.</del></p>\n<p>New topic:</p>\n<p>It seems that the following code is not supported in JIT well</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>)\n\n<span class=\"pl-en\">@torch.jit.script</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">x</span>):\n    <span class=\"pl-k\">return</span> x.expand([<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">10</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n\nf(x)</pre></div>\n<p>Currently it gives RuntimeError <code>input: Assertion inputs_.size() == 1</code> failed.</p>", "body_text": "The topic of this issue has changed.\nOriginal content:\nCurrently pytorch has torch.expand and torch.expand_like, which allow expanding the shape of a tensor to a fully specified shape(directly as in expand or indirectly as in expand_like). It would be more conveniently in some cases to write user code if we add a torch.expand_dim.\nFor example, if you have a tensor (5, 3, 1, 4, 8), doing a tensor.expand_dim(2, 10) gives a tensor of shape (5, 3, 10, 4, 8).\nexpand_dim vs expand is like flatten vs reshape. There is no new function, just some convenience.\nAlso, if the pytorch team confirm that this is contribute welcome, I can do the job to add it to ATen.\nNew topic:\nIt seems that the following code is not supported in JIT well\nx = torch.randn(4,5,1,3,3)\n\n@torch.jit.script\ndef f(x):\n    return x.expand([-1,-1,10,-1,-1])\n\nf(x)\nCurrently it gives RuntimeError input: Assertion inputs_.size() == 1 failed.", "body": "The topic of this issue has changed. \r\n\r\nOriginal content:\r\n~~Currently pytorch has `torch.expand` and `torch.expand_like`, which allow expanding the shape of a tensor to a fully specified shape(directly as in `expand` or indirectly as in `expand_like`). It would be more conveniently in some cases to write user code if we add a `torch.expand_dim`.~~\r\n\r\n~~For example, if you have a tensor `(5, 3, 1, 4, 8)`, doing a `tensor.expand_dim(2, 10)` gives a tensor of shape `(5, 3, 10, 4, 8)`.~~\r\n\r\n~~`expand_dim` vs `expand` is like `flatten` vs `reshape`. There is no new function, just some convenience.~~\r\n\r\n~~Also, if the pytorch team confirm that this is contribute welcome, I can do the job to add it to ATen.~~\r\n\r\nNew topic:\r\n\r\nIt seems that the following code is not supported in JIT well\r\n\r\n```python\r\nx = torch.randn(4,5,1,3,3)\r\n\r\n@torch.jit.script\r\ndef f(x):\r\n    return x.expand([-1,-1,10,-1,-1])\r\n\r\nf(x)\r\n```\r\n\r\nCurrently it gives RuntimeError `input: Assertion inputs_.size() == 1` failed.\r\n"}