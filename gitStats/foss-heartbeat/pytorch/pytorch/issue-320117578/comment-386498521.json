{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386498521", "html_url": "https://github.com/pytorch/pytorch/issues/7271#issuecomment-386498521", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7271", "id": 386498521, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ5ODUyMQ==", "user": {"login": "jrwalsh1", "id": 9166900, "node_id": "MDQ6VXNlcjkxNjY5MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9166900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrwalsh1", "html_url": "https://github.com/jrwalsh1", "followers_url": "https://api.github.com/users/jrwalsh1/followers", "following_url": "https://api.github.com/users/jrwalsh1/following{/other_user}", "gists_url": "https://api.github.com/users/jrwalsh1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrwalsh1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrwalsh1/subscriptions", "organizations_url": "https://api.github.com/users/jrwalsh1/orgs", "repos_url": "https://api.github.com/users/jrwalsh1/repos", "events_url": "https://api.github.com/users/jrwalsh1/events{/privacy}", "received_events_url": "https://api.github.com/users/jrwalsh1/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-04T03:38:21Z", "updated_at": "2018-05-04T03:38:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The behavior is the same using <code>torch.DoubleTensor(y)</code> (or casting <code>x</code> to <code>float32</code> and using <code>FloatTensor</code>), and for <code>torch.from_numpy(y)</code>.  For example here is the output for <code>from_numpy</code> when casting <code>x</code> to <code>float32</code>:</p>\n<pre><code>initial numpy array:\n[[0.9438502  0.08854403 0.695371  ]\n [0.69999033 0.49960035 0.502703  ]\n [0.89180315 0.08895364 0.8474964 ]]\n---\nloaded numpy array:\n[[0.9438502  0.08854403 0.695371  ]\n [0.69999033 0.49960035 0.502703  ]\n [0.89180315 0.08895364 0.8474964 ]]\n---\ntorch tensor:\ntensor([[ 9.4385e-01,  8.8544e-02,  6.9537e-01],\n        [ 4.1576e-08,         nan,  1.6268e-38],\n        [ 1.9125e+08,  1.2008e-11, -3.4034e+32]])\n</code></pre>", "body_text": "The behavior is the same using torch.DoubleTensor(y) (or casting x to float32 and using FloatTensor), and for torch.from_numpy(y).  For example here is the output for from_numpy when casting x to float32:\ninitial numpy array:\n[[0.9438502  0.08854403 0.695371  ]\n [0.69999033 0.49960035 0.502703  ]\n [0.89180315 0.08895364 0.8474964 ]]\n---\nloaded numpy array:\n[[0.9438502  0.08854403 0.695371  ]\n [0.69999033 0.49960035 0.502703  ]\n [0.89180315 0.08895364 0.8474964 ]]\n---\ntorch tensor:\ntensor([[ 9.4385e-01,  8.8544e-02,  6.9537e-01],\n        [ 4.1576e-08,         nan,  1.6268e-38],\n        [ 1.9125e+08,  1.2008e-11, -3.4034e+32]])", "body": "The behavior is the same using `torch.DoubleTensor(y)` (or casting `x` to `float32` and using `FloatTensor`), and for `torch.from_numpy(y)`.  For example here is the output for `from_numpy` when casting `x` to `float32`:\r\n```\r\ninitial numpy array:\r\n[[0.9438502  0.08854403 0.695371  ]\r\n [0.69999033 0.49960035 0.502703  ]\r\n [0.89180315 0.08895364 0.8474964 ]]\r\n---\r\nloaded numpy array:\r\n[[0.9438502  0.08854403 0.695371  ]\r\n [0.69999033 0.49960035 0.502703  ]\r\n [0.89180315 0.08895364 0.8474964 ]]\r\n---\r\ntorch tensor:\r\ntensor([[ 9.4385e-01,  8.8544e-02,  6.9537e-01],\r\n        [ 4.1576e-08,         nan,  1.6268e-38],\r\n        [ 1.9125e+08,  1.2008e-11, -3.4034e+32]])\r\n```"}