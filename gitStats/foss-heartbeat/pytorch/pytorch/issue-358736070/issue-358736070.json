{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11466", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11466/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11466/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11466/events", "html_url": "https://github.com/pytorch/pytorch/pull/11466", "id": 358736070, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0Mzk5NzUw", "number": 11466, "title": "Check for maximum numel in NCCL broadcasting", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-10T18:15:49Z", "updated_at": "2018-11-23T15:50:53Z", "closed_at": "2018-09-10T21:40:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11466", "html_url": "https://github.com/pytorch/pytorch/pull/11466", "diff_url": "https://github.com/pytorch/pytorch/pull/11466.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11466.patch"}, "body_html": "<p>NCCL1 uses <code>int</code> as its numerical type for fields like <code>count</code>, which makes broadcasting tensors larger than <code>2 &lt;&lt; 31 - 1</code> impossible, and raises opaque error <code>invalid arguments</code>. NCCL2 greatly increase the limit on many platforms by using <code>size_t</code>. This patch statically detects this type, and raises properly if the broadcast tensor exceeds the limit.</p>\n<p>No test because I don't think our test suite should broadcast big tensors.</p>", "body_text": "NCCL1 uses int as its numerical type for fields like count, which makes broadcasting tensors larger than 2 << 31 - 1 impossible, and raises opaque error invalid arguments. NCCL2 greatly increase the limit on many platforms by using size_t. This patch statically detects this type, and raises properly if the broadcast tensor exceeds the limit.\nNo test because I don't think our test suite should broadcast big tensors.", "body": "NCCL1 uses `int` as its numerical type for fields like `count`, which makes broadcasting tensors larger than `2 << 31 - 1` impossible, and raises opaque error `invalid arguments`. NCCL2 greatly increase the limit on many platforms by using `size_t`. This patch statically detects this type, and raises properly if the broadcast tensor exceeds the limit.\r\n\r\nNo test because I don't think our test suite should broadcast big tensors."}