{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184792406", "pull_request_review_id": 116065799, "id": 184792406, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDc5MjQwNg==", "diff_hunk": "@@ -2157,6 +2157,42 @@ def test_diagonal_derivative_requires_grad(self):\n         d, = torch.autograd.grad(c, a, retain_graph=True, create_graph=True)\n         self.assertTrue(d.requires_grad)\n \n+    @staticmethod\n+    def _test_set_requires_grad_only_for_floats(self, cuda):\n+        dtypes = [torch.int64, torch.int32, torch.int16, torch.int8,\n+                  torch.float, torch.double]\n+        if cuda:\n+            dtypes.append(torch.half)\n+\n+        def f1():\n+            a.requires_grad_()\n+\n+        def f2():\n+            a.requires_grad = True\n+\n+        for dt in dtypes:\n+            def f3():\n+                torch.ones(1, dtype=dt, device='cuda' if cuda else 'cpu', requires_grad=True)\n+            a = torch.ones(1, dtype=dt, device='cuda' if cuda else 'cpu')\n+            a.requires_grad = False  # should always work\n+            a.requires_grad_(False)\n+\n+            for f in [f1, f2, f3]:\n+                a = torch.ones(1, dtype=dt, device='cuda' if cuda else 'cpu')\n+                if dt.is_floating_point:\n+                    f()", "path": "test/test_autograd.py", "position": null, "original_position": 27, "commit_id": "60bbf1944e96649eef735a3a162b8e4ef178d9ba", "original_commit_id": "04fcbd6205698114c2893e9a0e76dc1c49e12773", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you make those functions take `a` as an argument? I'd say that depending on the scoping rules of Python (that they see `a` that's defined at every loop iteration) is very confusing.", "created_at": "2018-04-27T20:00:18Z", "updated_at": "2018-11-23T15:43:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/7034#discussion_r184792406", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7034", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184792406"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7034#discussion_r184792406"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7034"}}, "body_html": "<p>Can you make those functions take <code>a</code> as an argument? I'd say that depending on the scoping rules of Python (that they see <code>a</code> that's defined at every loop iteration) is very confusing.</p>", "body_text": "Can you make those functions take a as an argument? I'd say that depending on the scoping rules of Python (that they see a that's defined at every loop iteration) is very confusing."}