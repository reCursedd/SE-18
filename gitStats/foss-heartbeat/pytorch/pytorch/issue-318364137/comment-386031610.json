{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386031610", "html_url": "https://github.com/pytorch/pytorch/pull/7034#issuecomment-386031610", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7034", "id": 386031610, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjAzMTYxMA==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-02T16:07:16Z", "updated_at": "2018-05-02T16:07:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This didn't change the constructors in <code>tensor_new.cpp</code>, e.g. <code>torch.tensor</code>.</p>\n<p>If you implemented this in those constructors, it would get a little awkward when combined with type inference, because you don't know the type of the tensor that will come out, e.g.:</p>\n<pre><code>def convert_to_tensors(data0, data1)\n  return torch.tensor(data0, requires_grad=True), torch.tensor(data1, requires_grad=True)\n</code></pre>\n<p>would not throw an error on `convert_to_tensors([0., 1.], [2., 3.]) but would on convert_to_tensors([0., 1.], [2, 3]).  Sometimes you want this fail-fast behavior, but sometimes not.</p>", "body_text": "This didn't change the constructors in tensor_new.cpp, e.g. torch.tensor.\nIf you implemented this in those constructors, it would get a little awkward when combined with type inference, because you don't know the type of the tensor that will come out, e.g.:\ndef convert_to_tensors(data0, data1)\n  return torch.tensor(data0, requires_grad=True), torch.tensor(data1, requires_grad=True)\n\nwould not throw an error on `convert_to_tensors([0., 1.], [2., 3.]) but would on convert_to_tensors([0., 1.], [2, 3]).  Sometimes you want this fail-fast behavior, but sometimes not.", "body": "This didn't change the constructors in `tensor_new.cpp`, e.g. `torch.tensor`.\r\n\r\nIf you implemented this in those constructors, it would get a little awkward when combined with type inference, because you don't know the type of the tensor that will come out, e.g.:\r\n\r\n```\r\ndef convert_to_tensors(data0, data1)\r\n  return torch.tensor(data0, requires_grad=True), torch.tensor(data1, requires_grad=True)\r\n```\r\n\r\nwould not throw an error on `convert_to_tensors([0., 1.], [2., 3.]) but would on convert_to_tensors([0., 1.], [2, 3]).  Sometimes you want this fail-fast behavior, but sometimes not."}