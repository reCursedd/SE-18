{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187193096", "pull_request_review_id": 118922390, "id": 187193096, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5MzA5Ng==", "diff_hunk": "@@ -0,0 +1,119 @@\n+#include <unistd.h>\n+\n+#include <condition_variable>\n+#include <iostream>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+\n+#include \"FileStore.hpp\"\n+\n+using namespace thd::refactor;\n+\n+class Semaphore {\n+ public:\n+  void post(int n = 1) {\n+    std::unique_lock<std::mutex> lock(m_);\n+    n_ += n;\n+    cv_.notify_all();\n+  }\n+\n+  void wait(int n = 1) {\n+    std::unique_lock<std::mutex> lock(m_);\n+    while (n_ < n) {\n+      cv_.wait(lock);\n+    }\n+    n_ -= n;\n+  }\n+\n+ protected:\n+  int n_ = 0;\n+  std::mutex m_;\n+  std::condition_variable cv_;\n+};\n+\n+void set(Store& store, const std::string& key, const std::string& value) {\n+  std::vector<char> data(value.size());\n+  data.assign(value.begin(), value.end());", "path": "torch/lib/THD2/test/FileStoreTest.cpp", "position": null, "original_position": 37, "commit_id": "111ef58035156203a38d4d0d60451a8cdc10dc59", "original_commit_id": "f9f7b412e1e25cd735ae4d2507f5c9c2ad6188c5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: I think you can do `data(value.begin(), value.end())` when constructing the vector. That would avoid unnecessary zero-fill that the current constructor does.", "created_at": "2018-05-09T22:21:52Z", "updated_at": "2018-11-23T15:43:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187193096", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7439", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187193096"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187193096"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7439"}}, "body_html": "<p>nit: I think you can do <code>data(value.begin(), value.end())</code> when constructing the vector. That would avoid unnecessary zero-fill that the current constructor does.</p>", "body_text": "nit: I think you can do data(value.begin(), value.end()) when constructing the vector. That would avoid unnecessary zero-fill that the current constructor does."}