{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187401894", "pull_request_review_id": 119176208, "id": 187401894, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQwMTg5NA==", "diff_hunk": "@@ -0,0 +1,120 @@\n+#include <unistd.h>\n+\n+#include <condition_variable>\n+#include <iostream>\n+#include <mutex>\n+#include <sstream>\n+#include <thread>\n+\n+#include \"FileStore.hpp\"\n+\n+using namespace c10d;\n+\n+class Semaphore {\n+ public:\n+  void post(int n = 1) {\n+    std::unique_lock<std::mutex> lock(m_);\n+    n_ += n;\n+    cv_.notify_all();\n+  }\n+\n+  void wait(int n = 1) {\n+    std::unique_lock<std::mutex> lock(m_);\n+    while (n_ < n) {\n+      cv_.wait(lock);\n+    }\n+    n_ -= n;\n+  }\n+\n+ protected:\n+  int n_ = 0;\n+  std::mutex m_;\n+  std::condition_variable cv_;\n+};\n+\n+void set(Store& store, const std::string& key, const std::string& value) {\n+  std::vector<uint8_t> data(value.begin(), value.end());\n+  store.set(key, data);\n+}\n+\n+void check(Store& store, const std::string& key, const std::string& expected) {\n+  auto tmp = store.get(key);\n+  auto actual = std::string((const char*) tmp.data(), tmp.size());\n+  if (actual != expected) {\n+    throw std::runtime_error(\"Expected \" + expected + \", got \" + actual);\n+  }\n+}\n+\n+std::string tmppath() {\n+  const char* tmpdir = getenv(\"TMPDIR\");\n+  if (tmpdir == nullptr) {\n+    tmpdir = \"/tmp\";\n+  }\n+\n+  // Create template\n+  std::vector<char> tmp(256);\n+  auto len = snprintf(tmp.data(), tmp.size(), \"%s/testXXXXXX\", tmpdir);\n+  tmp.resize(len);\n+\n+  // Create temporary file\n+  auto fd = mkstemp(&tmp[0]);\n+  if (fd == -1) {\n+    throw std::system_error(errno, std::system_category());\n+  }\n+  close(fd);\n+  return std::string(tmp.data(), tmp.size());\n+}\n+\n+int main(int argc, char** argv) {\n+  auto path = tmppath();\n+  std::cout << \"Using temporary file: \" << path << std::endl;\n+\n+  // Basic set/get\n+  {\n+    FileStore store(path);\n+    set(store, \"key0\", \"value0\");\n+    set(store, \"key1\", \"value1\");\n+    set(store, \"key2\", \"value2\");\n+    check(store, \"key0\", \"value0\");\n+    check(store, \"key1\", \"value1\");\n+    check(store, \"key2\", \"value2\");\n+  }\n+\n+  // Perform get on new instance\n+  {\n+    FileStore store(path);\n+    check(store, \"key0\", \"value0\");\n+  }\n+\n+  // Hammer on FileStore#add\n+  std::vector<std::thread> threads;\n+  const auto numThreads = 4;\n+  const auto numIterations = 100;\n+  Semaphore sem1, sem2;\n+  for (auto i = 0; i < numThreads; i++) {\n+    threads.push_back(std::move(std::thread([&] {\n+            FileStore store(path);\n+            sem1.post();\n+            sem2.wait();\n+            for (auto j = 0; j < numIterations; j++) {\n+              store.add(\"counter\", 1);\n+            }\n+          })));\n+  }\n+  sem1.wait(numThreads);\n+  sem2.post(numThreads);\n+  for (auto& thread : threads) {\n+    thread.join();\n+  }\n+\n+  // Check that the counter has the expected value\n+  {\n+    FileStore store(path);\n+    std::stringstream ss;\n+    ss << (numThreads * numIterations);\n+    check(store, \"counter\", ss.str());\n+  }\n+\n+  unlink(path.c_str());", "path": "torch/lib/c10d/test/FileStoreTest.cpp", "position": 118, "original_position": 118, "commit_id": "111ef58035156203a38d4d0d60451a8cdc10dc59", "original_commit_id": "111ef58035156203a38d4d0d60451a8cdc10dc59", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Oh one last thing. It would be good to use some RAII style thing for this temporary file, to ensure that it gets deleted even if the tests fail. Feel free to merge though.", "created_at": "2018-05-10T17:34:42Z", "updated_at": "2018-11-23T15:43:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187401894", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7439", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187401894"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187401894"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7439"}}, "body_html": "<p>Oh one last thing. It would be good to use some RAII style thing for this temporary file, to ensure that it gets deleted even if the tests fail. Feel free to merge though.</p>", "body_text": "Oh one last thing. It would be good to use some RAII style thing for this temporary file, to ensure that it gets deleted even if the tests fail. Feel free to merge though."}