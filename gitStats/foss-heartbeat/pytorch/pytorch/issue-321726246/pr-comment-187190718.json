{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187190718", "pull_request_review_id": 118922390, "id": 187190718, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5MDcxOA==", "diff_hunk": "@@ -0,0 +1,270 @@\n+#include \"FileStore.hpp\"\n+\n+#include <sys/file.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#include <sys/stat.h>\n+\n+#include <chrono>\n+#include <iostream>\n+#include <sstream>\n+#include <system_error>\n+#include <thread>\n+\n+#define SYSASSERT(rv) \\\n+  if ((rv) < 0) throw std::system_error(errno, std::system_category());\n+\n+#define SYSCHECK(expr) {                                                \\\n+    errno = 0; auto ___output = (expr); (void)___output;                \\\n+    SYSASSERT(errno);                                                   \\\n+  }\n+\n+namespace thd {\n+namespace refactor {\n+\n+namespace {\n+\n+// For a comprehensive overview of file locking methods,\n+// see: https://gavv.github.io/blog/file-locks/.\n+// We stick to flock(2) here because we don't care about\n+// locking byte ranges and don't want locks to be process-wide.\n+\n+// RAII wrapper around flock(2)\n+class Lock {\n+ public:\n+  explicit Lock(int fd, int operation) : fd_(fd) {\n+    flock(operation);\n+  }\n+\n+  ~Lock() {\n+    if (fd_ >= 0) {\n+      flock(LOCK_UN);\n+    }\n+  }\n+\n+  Lock(const Lock& that) = delete;\n+\n+  Lock(Lock&& other) noexcept {\n+    fd_ = other.fd_;\n+    other.fd_ = -1;\n+  }\n+\n+ protected:\n+  int fd_;\n+\n+  void flock(int operation) {\n+    while (true) {\n+      auto rv = ::flock(fd_, operation);\n+      if (rv == -1) {\n+        if (errno == EINTR) {\n+          continue;\n+        }\n+        throw std::system_error(errno, std::generic_category(), \"flock\");\n+      }\n+      break;\n+    }\n+  }\n+};\n+\n+class File {\n+ public:\n+  explicit File(const std::string& path, int flags) {\n+    while (true) {\n+      fd_ = ::open(path.c_str(), flags, 0644);\n+      if (fd_ < 0) {\n+        if (errno == EINTR) {\n+          continue;\n+        }\n+        throw std::system_error(\n+            errno,\n+            std::generic_category(),\n+            \"Unable to open \" + path);\n+      }\n+      break;\n+    }", "path": "torch/lib/THD2/FileStore.cpp", "position": null, "original_position": 84, "commit_id": "111ef58035156203a38d4d0d60451a8cdc10dc59", "original_commit_id": "f9f7b412e1e25cd735ae4d2507f5c9c2ad6188c5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice to have a helper for syscalls that would resume them upon EINTR. We could prepare the syscall with e.g. `std::bind` and give that as an argument to the helper. Doesn't have to be part of this PR ofc, just a suggestion", "created_at": "2018-05-09T22:09:48Z", "updated_at": "2018-11-23T15:43:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187190718", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7439", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187190718"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187190718"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7439"}}, "body_html": "<p>It would be nice to have a helper for syscalls that would resume them upon EINTR. We could prepare the syscall with e.g. <code>std::bind</code> and give that as an argument to the helper. Doesn't have to be part of this PR ofc, just a suggestion</p>", "body_text": "It would be nice to have a helper for syscalls that would resume them upon EINTR. We could prepare the syscall with e.g. std::bind and give that as an argument to the helper. Doesn't have to be part of this PR ofc, just a suggestion"}