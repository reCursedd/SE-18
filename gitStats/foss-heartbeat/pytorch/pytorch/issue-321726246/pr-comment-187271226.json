{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187271226", "pull_request_review_id": 119012437, "id": 187271226, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzI3MTIyNg==", "diff_hunk": "@@ -0,0 +1,284 @@\n+#include \"FileStore.hpp\"\n+\n+#include <sys/file.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#include <sys/stat.h>\n+\n+#include <chrono>\n+#include <functional>\n+#include <iostream>\n+#include <sstream>\n+#include <system_error>\n+#include <thread>\n+\n+#define SYSASSERT(rv) \\\n+  if ((rv) < 0) throw std::system_error(errno, std::system_category());\n+\n+#define SYSCHECK(expr) {                                                \\\n+    errno = 0; auto ___output = (expr); (void)___output;                \\\n+    SYSASSERT(errno);                                                   \\\n+  }\n+\n+namespace c10d {\n+\n+namespace {\n+\n+template<typename F>\n+typename std::result_of<F()>::type syscall(F fn) {\n+  while (true) {\n+    auto rv = fn();\n+    if (rv == -1) {\n+      if (errno == EINTR) {\n+        continue;\n+      }\n+    }\n+    return rv;\n+  }\n+}\n+\n+// For a comprehensive overview of file locking methods,\n+// see: https://gavv.github.io/blog/file-locks/.\n+// We stick to flock(2) here because we don't care about\n+// locking byte ranges and don't want locks to be process-wide.\n+\n+// RAII wrapper around flock(2)\n+class Lock {\n+ public:\n+  explicit Lock(int fd, int operation) : fd_(fd) {\n+    flock(operation);\n+  }\n+\n+  ~Lock() {\n+    unlock();\n+  }\n+\n+  Lock(const Lock& that) = delete;\n+\n+  Lock(Lock&& other) noexcept {\n+    fd_ = other.fd_;\n+    other.fd_ = -1;\n+  }\n+\n+  void unlock() {\n+    if (fd_ >= 0) {\n+      flock(LOCK_UN);\n+      fd_ = -1;\n+    }\n+  }\n+\n+ protected:\n+  int fd_;\n+\n+  void flock(int operation) {\n+    auto rv = syscall(std::bind(::flock, fd_, operation));\n+    if (rv < 0) {\n+      throw std::system_error(errno, std::generic_category(), \"flock\");\n+    }\n+  }\n+};\n+\n+class File {\n+ public:\n+  explicit File(const std::string& path, int flags) {\n+    fd_ = syscall(std::bind(::open, path.c_str(), flags, 0644));\n+    if (fd_ < 0) {\n+      throw std::system_error(\n+          errno,\n+          std::generic_category(),\n+          \"Unable to open \" + path);\n+    }\n+  }\n+\n+  ~File() {\n+    ::close(fd_);\n+  }\n+\n+  Lock lockShared() {\n+    return Lock(fd_, LOCK_SH);\n+  }\n+\n+  Lock lockExclusive() {\n+    return Lock(fd_, LOCK_EX);\n+  }\n+\n+  off_t seek(off_t offset, int whence) {\n+    auto rv = syscall(std::bind(lseek, fd_, offset, whence));\n+    SYSASSERT(rv);\n+    return rv;\n+  }\n+\n+  off_t tell() {\n+    auto rv = syscall(std::bind(lseek, fd_, 0, SEEK_CUR));\n+    SYSASSERT(rv);\n+    return rv;\n+  }\n+\n+  off_t size() {\n+    auto pos = tell();\n+    auto size = seek(0, SEEK_END);\n+    seek(pos, SEEK_SET);\n+    return size;\n+  }\n+\n+  void write(const void* buf, size_t count) {\n+    while (count > 0) {\n+      auto rv = syscall(std::bind(::write, fd_, buf, count));\n+      if (rv < 0) {\n+        throw std::system_error(errno, std::system_category());\n+      }\n+      buf = (uint8_t*) buf + count;\n+      count -= rv;\n+    }\n+  }\n+\n+  void read(void* buf, size_t count) {\n+    while (count > 0) {\n+      auto rv = syscall(std::bind(::read, fd_, buf, count));\n+      if (rv < 0) {\n+        throw std::system_error(errno, std::system_category());\n+      }\n+      buf = (uint8_t*) buf + count;\n+      count -= rv;\n+    }\n+  }\n+\n+  void write(const std::string& str) {\n+    uint32_t len = str.size();\n+    write(&len, sizeof(len));\n+    write(str.c_str(), len);\n+  }\n+\n+  void write(const std::vector<uint8_t>& data) {\n+    uint32_t len = data.size();\n+    write(&len, sizeof(len));\n+    write(data.data(), len);\n+  }\n+\n+  void read(std::string& str) {\n+    uint32_t len;\n+    read(&len, sizeof(len));\n+    std::vector<uint8_t> buf(len);\n+    read(buf.data(), len);\n+    str.assign(buf.begin(), buf.end());\n+  }\n+\n+  void read(std::vector<uint8_t>& data) {\n+    uint32_t len;\n+    read(&len, sizeof(len));\n+    data.resize(len);\n+    read(data.data(), len);\n+  }\n+\n+ protected:\n+  int fd_;\n+};\n+\n+off_t refresh(", "path": "torch/lib/c10d/FileStore.cpp", "position": 171, "original_position": 177, "commit_id": "111ef58035156203a38d4d0d60451a8cdc10dc59", "original_commit_id": "f9db6d9144d4e52a9033cc899617c693c82a9162", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Couldn't this be a method?", "created_at": "2018-05-10T08:33:14Z", "updated_at": "2018-11-23T15:43:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187271226", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7439", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187271226"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7439#discussion_r187271226"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7439"}}, "body_html": "<p>Couldn't this be a method?</p>", "body_text": "Couldn't this be a method?"}