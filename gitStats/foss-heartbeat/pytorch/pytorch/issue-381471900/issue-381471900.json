{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14088", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14088/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14088/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14088/events", "html_url": "https://github.com/pytorch/pytorch/issues/14088", "id": 381471900, "node_id": "MDU6SXNzdWUzODE0NzE5MDA=", "number": 14088, "title": "Dimensions issue", "user": {"login": "FiReTiTi", "id": 6014800, "node_id": "MDQ6VXNlcjYwMTQ4MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6014800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FiReTiTi", "html_url": "https://github.com/FiReTiTi", "followers_url": "https://api.github.com/users/FiReTiTi/followers", "following_url": "https://api.github.com/users/FiReTiTi/following{/other_user}", "gists_url": "https://api.github.com/users/FiReTiTi/gists{/gist_id}", "starred_url": "https://api.github.com/users/FiReTiTi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FiReTiTi/subscriptions", "organizations_url": "https://api.github.com/users/FiReTiTi/orgs", "repos_url": "https://api.github.com/users/FiReTiTi/repos", "events_url": "https://api.github.com/users/FiReTiTi/events{/privacy}", "received_events_url": "https://api.github.com/users/FiReTiTi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-16T07:00:23Z", "updated_at": "2018-11-16T07:12:13Z", "closed_at": "2018-11-16T07:04:31Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I have created an image data generator for my project, and using it I can train my model. It looks like something like that:</p>\n<pre><code>dim = 256\ngenerator = ImageDataGenerator.Generator(ChannelFirst=True)\ngenerator.setFlip(True)\ngenerator.setRotate90x(True)\ngenerator.LoadInputs(\"./myInputs/\")\ngenerator.LoadOutputs(\"./myOutputs/\")\ngenerator.setInputsDimensions(dim, dim)\ngenerator.setOutputsDimensions(dim, dim)\nBatchSize = 8\ngen = generator.PyTorch(BatchSize, InputsNormalizer=Processing.Normalize, OutputsNormalizer=Processing.NormalizeBasic)\ndl = DataLoader(gen, batch_size=BatchSize, shuffle=True, num_workers=4)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmyModel = myModel.to(device)\nloss_fn = torch.nn.MSELoss(size_average=False)\nlearning_rate = 1e-4\n\nfor epoch in range(13):\n    lossvalue = 0.0\n    for b, batch in enumerate(dl):\n\tX, Y = batch['input'].to(device), batch['output'].to(device)\t\t\n\tYpred = myModel(X)\n\n\tloss = loss_fn(Ypred, Y) # Compute and print loss\n\tlossvalue += loss.item()\n\n\tunet.zero_grad()\n\n\tloss.backward()\n\n\twith torch.no_grad(): # Update the weights using gradient descent.\n\t\tfor param in unet.parameters():\n\t\t\tparam -= learning_rate * param.grad\n    print(\"Epoch %d - loss = %f\" % (epoch, lossvalue))\nprint(\"Training Done!\")\n</code></pre>\n<p>So once I have created the image generator, it's a classical training.</p>\n<p>But then I create the exact same generator without the data augmentation, but it generates the exact same type of images, and I want to use it to test the prediction of my model after training.</p>\n<pre><code>generator = ImageDataGenerator.Generator(ChannelFirst=True)\ngenerator.LoadInputs(\"./myInputs/\")\ngenerator.LoadOutputs(\"./myOutputs/\")\ngenerator.setInputsDimensions(dim, dim)\ngenerator.setOutputsDimensions(dim, dim)\ngen = generator.PyTorch(BatchSize, InputsNormalizer=Processing.Normalize, OutputsNormalizer=Processing.NormalizeBasic)\ndl = DataLoader(gen, batch_size=BatchSize, shuffle=False, num_workers=4)\n\nfor b, batch in enumerate(dl):\n\tX, Y = batch['input'].to(device), batch['output'].to(device)\t\t\n\tZ = myModel(X)\n</code></pre>\n<p>But  Get the following error:</p>\n<pre><code>Traceback (most recent call last):\n  File \"Cluster.py\", line 125, in &lt;module&gt;\n    Z = myModel(X)\n  ....\nRuntimeError: Expected 4-dimensional input for 4-dimensional weight [8, 3, 3, 3], but got input of size [8, 2, 3, 256, 256] instead\n</code></pre>\n<p>So I use the same batch size and image dimensions, but they do not work anymore with my model.<br>\nWhat am I doing wrong?<br>\nThanks in advance.</p>", "body_text": "Hi,\nI have created an image data generator for my project, and using it I can train my model. It looks like something like that:\ndim = 256\ngenerator = ImageDataGenerator.Generator(ChannelFirst=True)\ngenerator.setFlip(True)\ngenerator.setRotate90x(True)\ngenerator.LoadInputs(\"./myInputs/\")\ngenerator.LoadOutputs(\"./myOutputs/\")\ngenerator.setInputsDimensions(dim, dim)\ngenerator.setOutputsDimensions(dim, dim)\nBatchSize = 8\ngen = generator.PyTorch(BatchSize, InputsNormalizer=Processing.Normalize, OutputsNormalizer=Processing.NormalizeBasic)\ndl = DataLoader(gen, batch_size=BatchSize, shuffle=True, num_workers=4)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmyModel = myModel.to(device)\nloss_fn = torch.nn.MSELoss(size_average=False)\nlearning_rate = 1e-4\n\nfor epoch in range(13):\n    lossvalue = 0.0\n    for b, batch in enumerate(dl):\n\tX, Y = batch['input'].to(device), batch['output'].to(device)\t\t\n\tYpred = myModel(X)\n\n\tloss = loss_fn(Ypred, Y) # Compute and print loss\n\tlossvalue += loss.item()\n\n\tunet.zero_grad()\n\n\tloss.backward()\n\n\twith torch.no_grad(): # Update the weights using gradient descent.\n\t\tfor param in unet.parameters():\n\t\t\tparam -= learning_rate * param.grad\n    print(\"Epoch %d - loss = %f\" % (epoch, lossvalue))\nprint(\"Training Done!\")\n\nSo once I have created the image generator, it's a classical training.\nBut then I create the exact same generator without the data augmentation, but it generates the exact same type of images, and I want to use it to test the prediction of my model after training.\ngenerator = ImageDataGenerator.Generator(ChannelFirst=True)\ngenerator.LoadInputs(\"./myInputs/\")\ngenerator.LoadOutputs(\"./myOutputs/\")\ngenerator.setInputsDimensions(dim, dim)\ngenerator.setOutputsDimensions(dim, dim)\ngen = generator.PyTorch(BatchSize, InputsNormalizer=Processing.Normalize, OutputsNormalizer=Processing.NormalizeBasic)\ndl = DataLoader(gen, batch_size=BatchSize, shuffle=False, num_workers=4)\n\nfor b, batch in enumerate(dl):\n\tX, Y = batch['input'].to(device), batch['output'].to(device)\t\t\n\tZ = myModel(X)\n\nBut  Get the following error:\nTraceback (most recent call last):\n  File \"Cluster.py\", line 125, in <module>\n    Z = myModel(X)\n  ....\nRuntimeError: Expected 4-dimensional input for 4-dimensional weight [8, 3, 3, 3], but got input of size [8, 2, 3, 256, 256] instead\n\nSo I use the same batch size and image dimensions, but they do not work anymore with my model.\nWhat am I doing wrong?\nThanks in advance.", "body": "Hi,\r\n\r\nI have created an image data generator for my project, and using it I can train my model. It looks like something like that:\r\n\r\n\r\n    dim = 256\r\n    generator = ImageDataGenerator.Generator(ChannelFirst=True)\r\n    generator.setFlip(True)\r\n    generator.setRotate90x(True)\r\n    generator.LoadInputs(\"./myInputs/\")\r\n    generator.LoadOutputs(\"./myOutputs/\")\r\n    generator.setInputsDimensions(dim, dim)\r\n    generator.setOutputsDimensions(dim, dim)\r\n    BatchSize = 8\r\n    gen = generator.PyTorch(BatchSize, InputsNormalizer=Processing.Normalize, OutputsNormalizer=Processing.NormalizeBasic)\r\n    dl = DataLoader(gen, batch_size=BatchSize, shuffle=True, num_workers=4)\r\n\r\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\r\n    myModel = myModel.to(device)\r\n    loss_fn = torch.nn.MSELoss(size_average=False)\r\n    learning_rate = 1e-4\r\n\r\n    for epoch in range(13):\r\n        lossvalue = 0.0\r\n        for b, batch in enumerate(dl):\r\n\t\tX, Y = batch['input'].to(device), batch['output'].to(device)\t\t\r\n\t\tYpred = myModel(X)\r\n\t\r\n\t\tloss = loss_fn(Ypred, Y) # Compute and print loss\r\n\t\tlossvalue += loss.item()\r\n\t\r\n\t\tunet.zero_grad()\r\n\t\r\n\t\tloss.backward()\r\n\t\r\n\t\twith torch.no_grad(): # Update the weights using gradient descent.\r\n\t\t\tfor param in unet.parameters():\r\n\t\t\t\tparam -= learning_rate * param.grad\r\n        print(\"Epoch %d - loss = %f\" % (epoch, lossvalue))\r\n    print(\"Training Done!\")\r\n\r\nSo once I have created the image generator, it's a classical training.\r\n\r\nBut then I create the exact same generator without the data augmentation, but it generates the exact same type of images, and I want to use it to test the prediction of my model after training.\r\n\r\n    generator = ImageDataGenerator.Generator(ChannelFirst=True)\r\n    generator.LoadInputs(\"./myInputs/\")\r\n    generator.LoadOutputs(\"./myOutputs/\")\r\n    generator.setInputsDimensions(dim, dim)\r\n    generator.setOutputsDimensions(dim, dim)\r\n    gen = generator.PyTorch(BatchSize, InputsNormalizer=Processing.Normalize, OutputsNormalizer=Processing.NormalizeBasic)\r\n    dl = DataLoader(gen, batch_size=BatchSize, shuffle=False, num_workers=4)\r\n\r\n\tfor b, batch in enumerate(dl):\r\n\t\tX, Y = batch['input'].to(device), batch['output'].to(device)\t\t\r\n\t\tZ = myModel(X)\r\n\r\nBut  Get the following error:\r\n\r\n    Traceback (most recent call last):\r\n      File \"Cluster.py\", line 125, in <module>\r\n        Z = myModel(X)\r\n      ....\r\n    RuntimeError: Expected 4-dimensional input for 4-dimensional weight [8, 3, 3, 3], but got input of size [8, 2, 3, 256, 256] instead\r\n\r\nSo I use the same batch size and image dimensions, but they do not work anymore with my model.\r\nWhat am I doing wrong?\r\nThanks in advance."}