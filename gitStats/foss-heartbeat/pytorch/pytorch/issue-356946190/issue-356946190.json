{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11242", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11242/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11242/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11242/events", "html_url": "https://github.com/pytorch/pytorch/issues/11242", "id": 356946190, "node_id": "MDU6SXNzdWUzNTY5NDYxOTA=", "number": 11242, "title": "Serious bug with torch.distributions.utils.broadcast_all", "user": {"login": "gbohner", "id": 8012445, "node_id": "MDQ6VXNlcjgwMTI0NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8012445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbohner", "html_url": "https://github.com/gbohner", "followers_url": "https://api.github.com/users/gbohner/followers", "following_url": "https://api.github.com/users/gbohner/following{/other_user}", "gists_url": "https://api.github.com/users/gbohner/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbohner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbohner/subscriptions", "organizations_url": "https://api.github.com/users/gbohner/orgs", "repos_url": "https://api.github.com/users/gbohner/repos", "events_url": "https://api.github.com/users/gbohner/events{/privacy}", "received_events_url": "https://api.github.com/users/gbohner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-04T19:32:09Z", "updated_at": "2018-09-04T19:45:54Z", "closed_at": "2018-09-04T19:45:54Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>A serious bug with  <code>torch.distributions.utils.broadcast_all</code></p>\n<p><a href=\"https://github.com/pytorch/pytorch/blob/v0.4.1/torch/distributions/utils.py#L49\">https://github.com/pytorch/pytorch/blob/v0.4.1/torch/distributions/utils.py#L49</a></p>\n<h2>Code example</h2>\n<p><code>torch.log(torch.distributions.utils.broadcast_all(torch.ones(1,4), torch.zeros(3,1,4))[0])</code></p>\n<p>Expected output would be an array of zeros with dimensions (3,1,4). Actual output is the correct size, but (surprisingly consistently produced) garbage:</p>\n<pre><code>tensor([[[   0.0000,    0.0000,    0.0000,    0.0000]],\n\n        [[ -99.8132,      -inf,  -99.1045,      -inf]],\n\n        [[-103.2789,  -93.2846,       nan,  -93.2846]]])\n</code></pre>\n<p>Note that if broadcast_all needs to broadcast every dimension, the bug doesn't occur, it seems to be dealing with singleton dimensions badly.</p>\n<p>Therefore<br>\n<code>torch.log(torch.distributions.utils.broadcast_all(torch.ones(1,4), torch.zeros(3,2,4))[0])</code><br>\nproduces the expected all zeros array.</p>\n<p>The bug is definitely with broadcast_all, as it happens for other operators, not just torch.log()</p>\n<h2>System Info</h2>\n<pre><code>conda list torch\npytorch                   0.4.1           py37_cuda8.0.61_cudnn7.1.2_1  [cuda80]  pytorch\ntorchvision               0.2.1                    py37_1    pytorch\n</code></pre>", "body_text": "Issue description\nA serious bug with  torch.distributions.utils.broadcast_all\nhttps://github.com/pytorch/pytorch/blob/v0.4.1/torch/distributions/utils.py#L49\nCode example\ntorch.log(torch.distributions.utils.broadcast_all(torch.ones(1,4), torch.zeros(3,1,4))[0])\nExpected output would be an array of zeros with dimensions (3,1,4). Actual output is the correct size, but (surprisingly consistently produced) garbage:\ntensor([[[   0.0000,    0.0000,    0.0000,    0.0000]],\n\n        [[ -99.8132,      -inf,  -99.1045,      -inf]],\n\n        [[-103.2789,  -93.2846,       nan,  -93.2846]]])\n\nNote that if broadcast_all needs to broadcast every dimension, the bug doesn't occur, it seems to be dealing with singleton dimensions badly.\nTherefore\ntorch.log(torch.distributions.utils.broadcast_all(torch.ones(1,4), torch.zeros(3,2,4))[0])\nproduces the expected all zeros array.\nThe bug is definitely with broadcast_all, as it happens for other operators, not just torch.log()\nSystem Info\nconda list torch\npytorch                   0.4.1           py37_cuda8.0.61_cudnn7.1.2_1  [cuda80]  pytorch\ntorchvision               0.2.1                    py37_1    pytorch", "body": "## Issue description\r\n\r\nA serious bug with  ```torch.distributions.utils.broadcast_all```\r\n\r\nhttps://github.com/pytorch/pytorch/blob/v0.4.1/torch/distributions/utils.py#L49\r\n\r\n## Code example\r\n\r\n```torch.log(torch.distributions.utils.broadcast_all(torch.ones(1,4), torch.zeros(3,1,4))[0])```\r\n\r\nExpected output would be an array of zeros with dimensions (3,1,4). Actual output is the correct size, but (surprisingly consistently produced) garbage:\r\n```\r\ntensor([[[   0.0000,    0.0000,    0.0000,    0.0000]],\r\n\r\n        [[ -99.8132,      -inf,  -99.1045,      -inf]],\r\n\r\n        [[-103.2789,  -93.2846,       nan,  -93.2846]]])\r\n```\r\n\r\nNote that if broadcast_all needs to broadcast every dimension, the bug doesn't occur, it seems to be dealing with singleton dimensions badly.\r\n\r\nTherefore\r\n```torch.log(torch.distributions.utils.broadcast_all(torch.ones(1,4), torch.zeros(3,2,4))[0])```\r\nproduces the expected all zeros array.\r\n\r\nThe bug is definitely with broadcast_all, as it happens for other operators, not just torch.log()\r\n\r\n## System Info\r\n```\r\nconda list torch\r\npytorch                   0.4.1           py37_cuda8.0.61_cudnn7.1.2_1  [cuda80]  pytorch\r\ntorchvision               0.2.1                    py37_1    pytorch\r\n```\r\n"}