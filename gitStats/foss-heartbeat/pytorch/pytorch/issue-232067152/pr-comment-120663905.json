{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/120663905", "pull_request_review_id": 42645437, "id": 120663905, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY2MzkwNQ==", "diff_hunk": "@@ -53,102 +40,70 @@ class UpsamplingNearest2d(_UpsamplingBase):\n           3  4\n         [torch.FloatTensor of size 1x1x2x2]\n \n-        >>> m = nn.UpsamplingNearest2d(scale_factor=2)\n+        >>> m = nn.Upsample(scale_factor=2, mode='bilinear')\n         >>> m(inp)\n         Variable containing:\n         (0 ,0 ,.,.) =\n-          1  1  2  2\n-          1  1  2  2\n-          3  3  4  4\n-          3  3  4  4\n+          1.0000  1.3333  1.6667  2.0000\n+          1.6667  2.0000  2.3333  2.6667\n+          2.3333  2.6667  3.0000  3.3333\n+          3.0000  3.3333  3.6667  4.0000\n         [torch.FloatTensor of size 1x1x4x4]\n \n-    \"\"\"\n-    def __init__(self, size=None, scale_factor=None):\n-        super(UpsamplingNearest2d, self).__init__(_pair(size), scale_factor)\n-\n-    def __init__(self, size=None, scale_factor=None):\n-        super(UpsamplingNearest2d, self).__init__(size, scale_factor)\n-        if self.scale_factor is not None and not isinstance(scale_factor, Integral):\n-            raise ValueError('scale_factor must be of integer type for neighest neighbor sampling')\n-        self.size = _pair(self.size) if self.size is not None else None\n-\n-    def forward(self, input):\n-        return F.upsample_nearest(input, self.size, self.scale_factor)\n-\n-\n-class UpsamplingBilinear2d(_UpsamplingBase):\n-    \"\"\"\n-    Applies a 2D bilinear upsampling to an input signal composed of several input\n-    channels.\n-\n-    To specify the scale, it takes either the :attr:`size` or the :attr:`scale_factor`\n-    as it's constructor argument.\n-\n-    When `size` is given, it is the output size of the image (h, w).\n-\n-    Args:\n-        size (tuple, optional): a tuple of ints (H_out, W_out) output sizes\n-        scale_factor (int, optional): the multiplier for the image height / width\n-\n-    Shape:\n-        - Input: :math:`(N, C, H_{in}, W_{in})`\n-        - Output: :math:`(N, C, H_{out}, W_{out})` where\n-          :math:`H_{out} = floor(H_{in} * scale\\_factor)`\n-          :math:`W_{out} = floor(W_{in}  * scale\\_factor)`\n-\n-    Examples::\n-\n         >>> inp\n         Variable containing:\n         (0 ,0 ,.,.) =\n           1  2\n           3  4\n         [torch.FloatTensor of size 1x1x2x2]\n \n-        >>> m = nn.UpsamplingBilinear2d(scale_factor=2)\n+        >>> m = nn.Upsample(scale_factor=2, mode='nearest')\n         >>> m(inp)\n         Variable containing:\n         (0 ,0 ,.,.) =\n-          1.0000  1.3333  1.6667  2.0000\n-          1.6667  2.0000  2.3333  2.6667\n-          2.3333  2.6667  3.0000  3.3333\n-          3.0000  3.3333  3.6667  4.0000\n+          1  1  2  2\n+          1  1  2  2\n+          3  3  4  4\n+          3  3  4  4\n         [torch.FloatTensor of size 1x1x4x4]\n \n-    \"\"\"\n-    def __init__(self, size=None, scale_factor=None):\n-        super(UpsamplingBilinear2d, self).__init__(_pair(size), scale_factor)\n \n-    def __init__(self, size=None, scale_factor=None):\n-        super(UpsamplingBilinear2d, self).__init__(size, scale_factor)\n+    \"\"\"\n \n-        if self.scale_factor is not None:\n-            self.scale_factor = F._check_bilinear_2d_scale_factor(self.scale_factor)\n-        self.size = _pair(self.size) if self.size is not None else None\n+    def __init__(self, size=None, scale_factor=None, mode='nearest'):\n+        super(Upsample, self).__init__()\n+        self.size = size\n+        self.scale_factor = scale_factor\n+        self.mode = mode\n \n     def forward(self, input):\n-        return F.upsample_bilinear(input, self.size, self.scale_factor)\n+        return F.upsample(input, self.size, self.scale_factor, self.mode)\n \n+    def __repr__(self):\n+        if self.scale_factor is not None:\n+            info = 'scale_factor=' + str(self.scale_factor)\n+        else:\n+            info = 'size=' + str(self.size)", "path": "torch/nn/modules/upsampling.py", "position": null, "original_position": 169, "commit_id": "0e09a5a197c7c94ec63026617875a92640253ec9", "original_commit_id": "a0234ffe047c96fd719e1f708446afccbf3899ff", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "added and merged to master", "created_at": "2017-06-07T15:43:22Z", "updated_at": "2018-11-23T15:33:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/1676#discussion_r120663905", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1676", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/120663905"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1676#discussion_r120663905"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1676"}}, "body_html": "<p>added and merged to master</p>", "body_text": "added and merged to master", "in_reply_to_id": 120546787}