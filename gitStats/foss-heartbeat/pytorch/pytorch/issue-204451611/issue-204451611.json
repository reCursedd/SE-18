{"url": "https://api.github.com/repos/pytorch/pytorch/issues/662", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/662/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/662/events", "html_url": "https://github.com/pytorch/pytorch/pull/662", "id": 204451611, "node_id": "MDExOlB1bGxSZXF1ZXN0MTA0MDQzNTYy", "number": 662, "title": "Refactor autograd package to separate Python dependencies.", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-31T23:10:00Z", "updated_at": "2018-11-23T15:32:26Z", "closed_at": "2017-02-14T00:00:17Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/662", "html_url": "https://github.com/pytorch/pytorch/pull/662", "diff_url": "https://github.com/pytorch/pytorch/pull/662.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/662.patch"}, "body_html": "<p>The core autograd Variable, Function, and Engine no longer depend on the<br>\nPython API. This let's us implement functions in C++. In the future, we<br>\ncan also multithread engine and release the GIL for most of the<br>\nnon-Python backwards.</p>\n<p>For now, the only Function implemented in C++ is batch normalization.</p>\n<p>The C++ API differs a bit from the Python API:</p>\n<ul>\n<li>Function only represents either a \"forward\" or \"backward\" operation. This is to ease support for \"double\" backwards and simplify the API.</li>\n<li>In C++, Function implementations operate on variables and return variables. Implementations are responsible for setting the creator appropriately.</li>\n<li>Variable extends Function (for now) so that it can be stored in the <code>previous_functions</code> vector.</li>\n</ul>\n<p>Most of the Python specific code is in <code>python_xxx.cpp</code> files. There is <code>python_function.cpp</code> for functions implemented in Python and <code>python_native_function.cpp</code> for functions implemented in C++ and exposed in Python.</p>", "body_text": "The core autograd Variable, Function, and Engine no longer depend on the\nPython API. This let's us implement functions in C++. In the future, we\ncan also multithread engine and release the GIL for most of the\nnon-Python backwards.\nFor now, the only Function implemented in C++ is batch normalization.\nThe C++ API differs a bit from the Python API:\n\nFunction only represents either a \"forward\" or \"backward\" operation. This is to ease support for \"double\" backwards and simplify the API.\nIn C++, Function implementations operate on variables and return variables. Implementations are responsible for setting the creator appropriately.\nVariable extends Function (for now) so that it can be stored in the previous_functions vector.\n\nMost of the Python specific code is in python_xxx.cpp files. There is python_function.cpp for functions implemented in Python and python_native_function.cpp for functions implemented in C++ and exposed in Python.", "body": "The core autograd Variable, Function, and Engine no longer depend on the\r\nPython API. This let's us implement functions in C++. In the future, we\r\ncan also multithread engine and release the GIL for most of the\r\nnon-Python backwards.\r\n\r\nFor now, the only Function implemented in C++ is batch normalization.\r\n\r\nThe C++ API differs a bit from the Python API:\r\n\r\n- Function only represents either a \"forward\" or \"backward\" operation. This is to ease support for \"double\" backwards and simplify the API.\r\n- In C++, Function implementations operate on variables and return variables. Implementations are responsible for setting the creator appropriately.\r\n- Variable extends Function (for now) so that it can be stored in the `previous_functions` vector.\r\n\r\nMost of the Python specific code is in `python_xxx.cpp` files. There is `python_function.cpp` for functions implemented in Python and `python_native_function.cpp` for functions implemented in C++ and exposed in Python."}