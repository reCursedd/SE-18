{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/315200881", "html_url": "https://github.com/pytorch/pytorch/pull/2043#issuecomment-315200881", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2043", "id": 315200881, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTIwMDg4MQ==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-13T21:00:16Z", "updated_at": "2017-07-13T21:08:02Z", "author_association": "COLLABORATOR", "body_html": "<p>First fix for <code>if_true</code>/<code>if_false</code> for ATen:</p>\n<pre><code>--- a/torch/lib/ATen/function_wrapper.py\n+++ b/torch/lib/ATen/function_wrapper.py\n@@ -1,6 +1,12 @@\n import re\n from code_template import CodeTemplate\n \n+import sys\n+if sys.version_info[0] == 3:\n+    string_type = str\n+else:\n+    string_type = basestring\n+\n@@ -276,8 +282,12 @@ def create_derived(backend_type_env, declarations):\n         if requires_checked_cast(argument):\n             return CHECKED_USE.get(argument['type'], '{}_').format(argument['name'])\n         elif argument['type'] == 'bool' and 'if_true' in argument:\n-            return '({}) ? \"{}\" : \"{}\"'.format(argument['name'],\n-                                               argument['if_true'], argument['if_false'])\n+            if isinstance(argument['if_true'], string_type):\n+                tpl = '({}) ? \"{}\" : \"{}\"'\n+            else:\n+                tpl = '({}) ? {} : {}'\n+            return tpl.format(argument['name'],\n+                       argument['if_true'], argument['if_false'])\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> please let me know how should I go about this (I can open a PR in ATen or maybe you want to just go ahead).</p>\n<p>The second error is related to ambiguous code generation given the signature in <code>cwrap</code>. In <code>pytorch/torch/lib/build/ATen/ATen/Type.h</code>, at lines 392 and 394 we get:</p>\n<pre><code>virtual Tensor &amp; var_out(const Tensor &amp; self, int64_t dim, bool unbiased, Tensor &amp; destination) ;\nvirtual Tensor &amp; var_out(const Tensor &amp; self, int64_t dim, bool keepdim, Tensor &amp; destination) ;\n</code></pre>\n<p>which is ambiguous. This is a case where we have two keyword arguments of the same time in Python and either of them can be specified. It looks to me like a corner case in need of a general fix.<br>\nWhat do you think?</p>", "body_text": "First fix for if_true/if_false for ATen:\n--- a/torch/lib/ATen/function_wrapper.py\n+++ b/torch/lib/ATen/function_wrapper.py\n@@ -1,6 +1,12 @@\n import re\n from code_template import CodeTemplate\n \n+import sys\n+if sys.version_info[0] == 3:\n+    string_type = str\n+else:\n+    string_type = basestring\n+\n@@ -276,8 +282,12 @@ def create_derived(backend_type_env, declarations):\n         if requires_checked_cast(argument):\n             return CHECKED_USE.get(argument['type'], '{}_').format(argument['name'])\n         elif argument['type'] == 'bool' and 'if_true' in argument:\n-            return '({}) ? \"{}\" : \"{}\"'.format(argument['name'],\n-                                               argument['if_true'], argument['if_false'])\n+            if isinstance(argument['if_true'], string_type):\n+                tpl = '({}) ? \"{}\" : \"{}\"'\n+            else:\n+                tpl = '({}) ? {} : {}'\n+            return tpl.format(argument['name'],\n+                       argument['if_true'], argument['if_false'])\n\n@zdevito please let me know how should I go about this (I can open a PR in ATen or maybe you want to just go ahead).\nThe second error is related to ambiguous code generation given the signature in cwrap. In pytorch/torch/lib/build/ATen/ATen/Type.h, at lines 392 and 394 we get:\nvirtual Tensor & var_out(const Tensor & self, int64_t dim, bool unbiased, Tensor & destination) ;\nvirtual Tensor & var_out(const Tensor & self, int64_t dim, bool keepdim, Tensor & destination) ;\n\nwhich is ambiguous. This is a case where we have two keyword arguments of the same time in Python and either of them can be specified. It looks to me like a corner case in need of a general fix.\nWhat do you think?", "body": "First fix for `if_true`/`if_false` for ATen:\r\n```\r\n--- a/torch/lib/ATen/function_wrapper.py\r\n+++ b/torch/lib/ATen/function_wrapper.py\r\n@@ -1,6 +1,12 @@\r\n import re\r\n from code_template import CodeTemplate\r\n \r\n+import sys\r\n+if sys.version_info[0] == 3:\r\n+    string_type = str\r\n+else:\r\n+    string_type = basestring\r\n+\r\n@@ -276,8 +282,12 @@ def create_derived(backend_type_env, declarations):\r\n         if requires_checked_cast(argument):\r\n             return CHECKED_USE.get(argument['type'], '{}_').format(argument['name'])\r\n         elif argument['type'] == 'bool' and 'if_true' in argument:\r\n-            return '({}) ? \"{}\" : \"{}\"'.format(argument['name'],\r\n-                                               argument['if_true'], argument['if_false'])\r\n+            if isinstance(argument['if_true'], string_type):\r\n+                tpl = '({}) ? \"{}\" : \"{}\"'\r\n+            else:\r\n+                tpl = '({}) ? {} : {}'\r\n+            return tpl.format(argument['name'],\r\n+                       argument['if_true'], argument['if_false'])\r\n```\r\n\r\n@zdevito please let me know how should I go about this (I can open a PR in ATen or maybe you want to just go ahead).\r\n\r\n\r\nThe second error is related to ambiguous code generation given the signature in `cwrap`. In `pytorch/torch/lib/build/ATen/ATen/Type.h`, at lines 392 and 394 we get:\r\n```\r\nvirtual Tensor & var_out(const Tensor & self, int64_t dim, bool unbiased, Tensor & destination) ;\r\nvirtual Tensor & var_out(const Tensor & self, int64_t dim, bool keepdim, Tensor & destination) ;\r\n```\r\nwhich is ambiguous. This is a case where we have two keyword arguments of the same time in Python and either of them can be specified. It looks to me like a corner case in need of a general fix.\r\nWhat do you think?"}