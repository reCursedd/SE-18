{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2043", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2043/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2043/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2043/events", "html_url": "https://github.com/pytorch/pytorch/pull/2043", "id": 241866300, "node_id": "MDExOlB1bGxSZXF1ZXN0MTI5Nzg0MzUz", "number": 2043, "title": "Wrap unbiased flag in var, std, varall, stdall", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-07-10T22:06:10Z", "updated_at": "2018-11-23T15:34:07Z", "closed_at": "2017-07-14T21:31:59Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2043", "html_url": "https://github.com/pytorch/pytorch/pull/2043", "diff_url": "https://github.com/pytorch/pytorch/pull/2043.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2043.patch"}, "body_html": "<p>Solves issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"225341175\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1412\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1412/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1412\">#1412</a></p>\n<p><code>var</code>, <code>std</code>, <code>varall</code> and <code>stdall</code> now accept an <code>unbiased</code> keyword argument.</p>\n<p>As pointed out by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> in the original issue, <code>TH</code> and <code>THC</code> have a <code>int flag</code> argument that is <code>0</code> for computing <code>var</code> without bias and <code>1</code> with bias. Since the Python and <code>autograd</code> API have an <code>unbiased</code> flag with opposite semantics, I added a new <code>cwrap</code> plugin (<code>NegatedArguments</code>), that negates the value of the unpacked argument before assignment.</p>", "body_text": "Solves issue #1412\nvar, std, varall and stdall now accept an unbiased keyword argument.\nAs pointed out by @fmassa in the original issue, TH and THC have a int flag argument that is 0 for computing var without bias and 1 with bias. Since the Python and autograd API have an unbiased flag with opposite semantics, I added a new cwrap plugin (NegatedArguments), that negates the value of the unpacked argument before assignment.", "body": "Solves issue #1412 \r\n\r\n`var`, `std`, `varall` and `stdall` now accept an `unbiased` keyword argument.\r\n\r\nAs pointed out by @fmassa in the original issue, `TH` and `THC` have a `int flag` argument that is `0` for computing `var` without bias and `1` with bias. Since the Python and `autograd` API have an `unbiased` flag with opposite semantics, I added a new `cwrap` plugin (`NegatedArguments`), that negates the value of the unpacked argument before assignment."}