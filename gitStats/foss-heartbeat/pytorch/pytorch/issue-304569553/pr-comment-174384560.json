{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174384560", "pull_request_review_id": 103727713, "id": 174384560, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDM4NDU2MA==", "diff_hunk": "@@ -7,18 +8,33 @@\n namespace at {\n namespace native {\n \n-constexpr size_t _THRESHOLD = 32768;\n+// This parameter is heuristically chosen to determine the minimum number of\n+// work that warrants paralellism. For example, when summing an array, it is\n+// deemed inefficient to parallelise over arrays shorter than 32768. Further,\n+// no parallel algorithm (such as parallel_reduce) should split work into\n+// smaller than GRAIN_SIZE chunks.\n+constexpr size_t GRAIN_SIZE = 32768;\n \n template <class T, template <class> class PRED>\n T parallel_reduce(T (*f)(const T *, size_t, size_t, T), const T *data,\n                   size_t start, size_t end, T init_) {\n+\n+  static tbb::task_scheduler_init tbbinit;\n+  static int num_threads_ = 0;\n+  int num_threads = at::get_num_threads();\n+  if (num_threads_ != num_threads) {\n+    if (tbbinit.is_active()) tbbinit.terminate();\n+    tbbinit.initialize(num_threads);\n+    num_threads_ = num_threads;\n+  }", "path": "aten/src/ATen/native/cpu/Parallel.h", "position": null, "original_position": 29, "commit_id": "f811874db6271f4f1ca3eb7340a62cec88afa0cc", "original_commit_id": "354a2f656c4db2ddc23bd606f2ac69accd52bf6d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Does `task_scheduler_init` actually keep the threads alive, or is it just a small struct holding the desired config?", "created_at": "2018-03-14T08:40:37Z", "updated_at": "2018-11-23T15:40:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174384560", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5723", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174384560"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174384560"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5723"}}, "body_html": "<p>Does <code>task_scheduler_init</code> actually keep the threads alive, or is it just a small struct holding the desired config?</p>", "body_text": "Does task_scheduler_init actually keep the threads alive, or is it just a small struct holding the desired config?", "in_reply_to_id": 174384453}