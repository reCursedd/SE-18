{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175178999", "pull_request_review_id": 104674360, "id": 175178999, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTE3ODk5OQ==", "diff_hunk": "@@ -0,0 +1,39 @@\n+#include <ATen/Parallel.h>\n+#include <ATen/CPUGeneral.h>\n+#include <tbb/blocked_range.h>\n+#include <tbb/parallel_reduce.h>\n+#include <tbb/partitioner.h>\n+#include <tbb/tbb.h>\n+#include <thread>\n+\n+namespace at {\n+namespace internal {\n+\n+// thread_local variable with internal linkage\n+// requires no guarding as it's storage duration is defined to be per thread\n+static thread_local tbb::task_scheduler_init tbbinit;\n+// Tracks number of threads uses which TBB doesn't track.\n+static thread_local int num_threads_;\n+\n+int get_max_threads() {\n+  static int max_num_threads_ = std::thread::hardware_concurrency();", "path": "aten/src/ATen/Parallel.cpp", "position": null, "original_position": 19, "commit_id": "f811874db6271f4f1ca3eb7340a62cec88afa0cc", "original_commit_id": "f3937a01bf684db0933d2b684ecf961b6a15c07b", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Don't mess with `std::thread::hardware_concurrency()`. For one thing it can return `0`. The default behavior when the users does *not* call torch.set_num_threads() should be to use the default TBB behavior -- don't try to re-create it using `std::thread::hardware_concurrency()`.", "created_at": "2018-03-16T18:30:04Z", "updated_at": "2018-11-23T15:40:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/5723#discussion_r175178999", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5723", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175178999"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5723#discussion_r175178999"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5723"}}, "body_html": "<p>Don't mess with <code>std::thread::hardware_concurrency()</code>. For one thing it can return <code>0</code>. The default behavior when the users does <em>not</em> call torch.set_num_threads() should be to use the default TBB behavior -- don't try to re-create it using <code>std::thread::hardware_concurrency()</code>.</p>", "body_text": "Don't mess with std::thread::hardware_concurrency(). For one thing it can return 0. The default behavior when the users does not call torch.set_num_threads() should be to use the default TBB behavior -- don't try to re-create it using std::thread::hardware_concurrency()."}