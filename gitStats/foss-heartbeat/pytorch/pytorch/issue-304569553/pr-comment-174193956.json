{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174193956", "pull_request_review_id": 103504903, "id": 174193956, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDE5Mzk1Ng==", "diff_hunk": "@@ -0,0 +1,14 @@\n+#include <ATen/CPUGeneral.h>\n+\n+namespace at {\n+size_t num_threads = 0;\n+std::shared_ptr<tbb::task_scheduler_init> tbbinit;\n+void set_num_threads(size_t num_threads_) {\n+  if (num_threads == 0) {\n+    num_threads = num_threads_;\n+    tbbinit = std::make_shared<tbb::task_scheduler_init>(num_threads);\n+  }\n+}\n+\n+size_t get_num_threads() { return num_threads; }", "path": "aten/src/ATen/CPUGeneral.cpp", "position": null, "original_position": 13, "commit_id": "f811874db6271f4f1ca3eb7340a62cec88afa0cc", "original_commit_id": "f93bd0186963c877e51722a8668799261aef9aa3", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I don't really see how moving this to at::Context improves the API.\r\n\r\n`at::set_num_threads()` is both simpler to use and matches the Python API more closely than `at::globalContext().set_num_threads()`.\r\n\r\nPutting this in the context seems to imply a false sense of isolation: Multiple task_scheduler_inits will still interfere in separate contexts.", "created_at": "2018-03-13T16:17:43Z", "updated_at": "2018-11-23T15:40:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174193956", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5723", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174193956"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174193956"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5723"}}, "body_html": "<p>I don't really see how moving this to at::Context improves the API.</p>\n<p><code>at::set_num_threads()</code> is both simpler to use and matches the Python API more closely than <code>at::globalContext().set_num_threads()</code>.</p>\n<p>Putting this in the context seems to imply a false sense of isolation: Multiple task_scheduler_inits will still interfere in separate contexts.</p>", "body_text": "I don't really see how moving this to at::Context improves the API.\nat::set_num_threads() is both simpler to use and matches the Python API more closely than at::globalContext().set_num_threads().\nPutting this in the context seems to imply a false sense of isolation: Multiple task_scheduler_inits will still interfere in separate contexts.", "in_reply_to_id": 173978210}