{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174894636", "pull_request_review_id": 104336100, "id": 174894636, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDg5NDYzNg==", "diff_hunk": "@@ -14,9 +16,43 @@ namespace native {\n // smaller than GRAIN_SIZE chunks.\n constexpr size_t GRAIN_SIZE = 32768;\n \n+// thread_local variable with internal linkage\n+// requires no guarding as it's storage duration is defined to be per thread\n+// internal linkage is necessary to prevent multiple definitions as this header\n+// is included in multiple translation units.\n+static thread_local tbb::task_scheduler_init tbbinit;\n+static thread_local int num_threads_ = 0;\n+\n+static void check_tbb() {\n+  int num_threads = at::get_num_threads();\n+  // This needs to be called before the first use of any algorithm such as\n+  // parallel or it will have no effect and the default task scheduler is\n+  // created which uses all available cores.\n+  // See\n+  // https://www.threadingbuildingblocks.org/docs/help/reference/task_scheduler/task_scheduler_init_cls.html\n+  if (!tbbinit.is_active())\n+    tbbinit.initialize();\n+  if (num_threads_ != num_threads) {\n+    int max_num_threads = std::thread::hardware_concurrency();\n+    if (num_threads > max_num_threads || num_threads < 0) {\n+      num_threads = 0;\n+    }\n+    tbbinit.terminate();\n+    if (num_threads == 0) {", "path": "aten/src/ATen/native/cpu/Parallel.h", "position": null, "original_position": 37, "commit_id": "f811874db6271f4f1ca3eb7340a62cec88afa0cc", "original_commit_id": "a1cfb8395ba6aee53417276737531d75cc39daae", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I don't think we should have this case. `torch.set_num_threads(0)` removes parallelism in the current implementation (I believe it functions like set_num_threads(1))", "created_at": "2018-03-15T18:55:03Z", "updated_at": "2018-11-23T15:40:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174894636", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5723", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174894636"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174894636"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5723"}}, "body_html": "<p>I don't think we should have this case. <code>torch.set_num_threads(0)</code> removes parallelism in the current implementation (I believe it functions like set_num_threads(1))</p>", "body_text": "I don't think we should have this case. torch.set_num_threads(0) removes parallelism in the current implementation (I believe it functions like set_num_threads(1))"}