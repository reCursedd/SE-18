{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174502336", "pull_request_review_id": 103870966, "id": 174502336, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUwMjMzNg==", "diff_hunk": "@@ -7,18 +8,33 @@\n namespace at {\n namespace native {\n \n-constexpr size_t _THRESHOLD = 32768;\n+// This parameter is heuristically chosen to determine the minimum number of\n+// work that warrants paralellism. For example, when summing an array, it is\n+// deemed inefficient to parallelise over arrays shorter than 32768. Further,\n+// no parallel algorithm (such as parallel_reduce) should split work into\n+// smaller than GRAIN_SIZE chunks.\n+constexpr size_t GRAIN_SIZE = 32768;\n \n template <class T, template <class> class PRED>\n T parallel_reduce(T (*f)(const T *, size_t, size_t, T), const T *data,\n                   size_t start, size_t end, T init_) {\n+\n+  static tbb::task_scheduler_init tbbinit;\n+  static int num_threads_ = 0;\n+  int num_threads = at::get_num_threads();\n+  if (num_threads_ != num_threads) {\n+    if (tbbinit.is_active()) tbbinit.terminate();\n+    tbbinit.initialize(num_threads);\n+    num_threads_ = num_threads;\n+  }", "path": "aten/src/ATen/native/cpu/Parallel.h", "position": null, "original_position": 29, "commit_id": "f811874db6271f4f1ca3eb7340a62cec88afa0cc", "original_commit_id": "354a2f656c4db2ddc23bd606f2ac69accd52bf6d", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "The most important part is that tbbinit is in scope of the parallel constructs. That's what actually sets the number of threads used for the overall [market](https://software.intel.com/en-us/blogs/2011/04/09/tbb-initialization-termination-and-resource-management-details-juicy-and-gory).\r\n\r\n\"\r\nAn important thing to keep in mind is that during this process essential limits are established. The first one is the number of arena slots that define maximal number of workers available for parallel algorithms started by this master (or, in other words, their maximal concurrency level).\r\n\r\nThe second limit is established when the market is created, and sets the ceiling on the total number of workers available to all master threads. It is determined as one less than the greater of the following two values: amount of threads specified by the argument of task_scheduler_init constructor, and current hardware concurrency (i.e. amount of logical CPUs visible to OS).\r\n\"", "created_at": "2018-03-14T15:32:25Z", "updated_at": "2018-11-23T15:40:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174502336", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5723", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174502336"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5723#discussion_r174502336"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5723"}}, "body_html": "<p>The most important part is that tbbinit is in scope of the parallel constructs. That's what actually sets the number of threads used for the overall <a href=\"https://software.intel.com/en-us/blogs/2011/04/09/tbb-initialization-termination-and-resource-management-details-juicy-and-gory\" rel=\"nofollow\">market</a>.</p>\n<p>\"<br>\nAn important thing to keep in mind is that during this process essential limits are established. The first one is the number of arena slots that define maximal number of workers available for parallel algorithms started by this master (or, in other words, their maximal concurrency level).</p>\n<p>The second limit is established when the market is created, and sets the ceiling on the total number of workers available to all master threads. It is determined as one less than the greater of the following two values: amount of threads specified by the argument of task_scheduler_init constructor, and current hardware concurrency (i.e. amount of logical CPUs visible to OS).<br>\n\"</p>", "body_text": "The most important part is that tbbinit is in scope of the parallel constructs. That's what actually sets the number of threads used for the overall market.\n\"\nAn important thing to keep in mind is that during this process essential limits are established. The first one is the number of arena slots that define maximal number of workers available for parallel algorithms started by this master (or, in other words, their maximal concurrency level).\nThe second limit is established when the market is created, and sets the ceiling on the total number of workers available to all master threads. It is determined as one less than the greater of the following two values: amount of threads specified by the argument of task_scheduler_init constructor, and current hardware concurrency (i.e. amount of logical CPUs visible to OS).\n\"", "in_reply_to_id": 174384453}