{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7818", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7818/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7818/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7818/events", "html_url": "https://github.com/pytorch/pytorch/issues/7818", "id": 326244322, "node_id": "MDU6SXNzdWUzMjYyNDQzMjI=", "number": 7818, "title": "[JIT][script] Bug in how loop-carried dependencies are captured across nested blocks", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-05-24T18:44:07Z", "updated_at": "2018-06-20T19:09:25Z", "closed_at": "2018-06-20T19:09:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Code example:</p>\n<pre><code>import torch\n\n@torch.jit.script\ndef capture_bug(x):\n    output = 0\n    for i in range(20):\n        if i == 0:\n            output = x.unsqueeze(0)\n        else:\n            output = torch.cat((output, x.unsqueeze(0)), dim=0)\n    return output\n\nprint(capture_bug.graph)\n</code></pre>\n<p>Creates:</p>\n<pre><code>graph(%x : Dynamic) {\n  %output.1 : Long() = prim::Constant[value={0}]()\n  %2 : Long() = prim::Constant[value={20}]()\n  %3 : Byte() = prim::Constant[value={1}]()\n  %output : Dynamic = prim::Loop(%2, %3, %output.1)\n    block0(%i : Dynamic, %15 : Dynamic) {\n      %5 : Long() = prim::Constant[value={0}]()\n      %6 : Dynamic = aten::eq(%i, %5)\n      %output.4 : Dynamic = prim::If(%6)\n        block0() {\n          %output.2 : Dynamic = aten::unsqueeze[dim=0](%x)\n          -&gt; (%output.2)\n        }\n        block1() {\n          %10 : Dynamic = aten::unsqueeze[dim=0](%x)\n          %12 : Long() = prim::Constant[value={0}]()\n          %output.3 : Dynamic = aten::cat(%output.1, %10, %12)\n          -&gt; (%output.3)\n        }\n      %16 : Byte() = prim::Constant[value={1}]()\n      -&gt; (%16, %output.4)\n    }\n  return (%output);\n}\n</code></pre>\n<p>The first operand to <code>cat</code> in <code>block1()</code> should be a captured value, not <code>%output.1</code></p>", "body_text": "Code example:\nimport torch\n\n@torch.jit.script\ndef capture_bug(x):\n    output = 0\n    for i in range(20):\n        if i == 0:\n            output = x.unsqueeze(0)\n        else:\n            output = torch.cat((output, x.unsqueeze(0)), dim=0)\n    return output\n\nprint(capture_bug.graph)\n\nCreates:\ngraph(%x : Dynamic) {\n  %output.1 : Long() = prim::Constant[value={0}]()\n  %2 : Long() = prim::Constant[value={20}]()\n  %3 : Byte() = prim::Constant[value={1}]()\n  %output : Dynamic = prim::Loop(%2, %3, %output.1)\n    block0(%i : Dynamic, %15 : Dynamic) {\n      %5 : Long() = prim::Constant[value={0}]()\n      %6 : Dynamic = aten::eq(%i, %5)\n      %output.4 : Dynamic = prim::If(%6)\n        block0() {\n          %output.2 : Dynamic = aten::unsqueeze[dim=0](%x)\n          -> (%output.2)\n        }\n        block1() {\n          %10 : Dynamic = aten::unsqueeze[dim=0](%x)\n          %12 : Long() = prim::Constant[value={0}]()\n          %output.3 : Dynamic = aten::cat(%output.1, %10, %12)\n          -> (%output.3)\n        }\n      %16 : Byte() = prim::Constant[value={1}]()\n      -> (%16, %output.4)\n    }\n  return (%output);\n}\n\nThe first operand to cat in block1() should be a captured value, not %output.1", "body": "Code example:\r\n```\r\nimport torch\r\n\r\n@torch.jit.script\r\ndef capture_bug(x):\r\n    output = 0\r\n    for i in range(20):\r\n        if i == 0:\r\n            output = x.unsqueeze(0)\r\n        else:\r\n            output = torch.cat((output, x.unsqueeze(0)), dim=0)\r\n    return output\r\n\r\nprint(capture_bug.graph)\r\n```\r\n\r\nCreates:\r\n```\r\ngraph(%x : Dynamic) {\r\n  %output.1 : Long() = prim::Constant[value={0}]()\r\n  %2 : Long() = prim::Constant[value={20}]()\r\n  %3 : Byte() = prim::Constant[value={1}]()\r\n  %output : Dynamic = prim::Loop(%2, %3, %output.1)\r\n    block0(%i : Dynamic, %15 : Dynamic) {\r\n      %5 : Long() = prim::Constant[value={0}]()\r\n      %6 : Dynamic = aten::eq(%i, %5)\r\n      %output.4 : Dynamic = prim::If(%6)\r\n        block0() {\r\n          %output.2 : Dynamic = aten::unsqueeze[dim=0](%x)\r\n          -> (%output.2)\r\n        }\r\n        block1() {\r\n          %10 : Dynamic = aten::unsqueeze[dim=0](%x)\r\n          %12 : Long() = prim::Constant[value={0}]()\r\n          %output.3 : Dynamic = aten::cat(%output.1, %10, %12)\r\n          -> (%output.3)\r\n        }\r\n      %16 : Byte() = prim::Constant[value={1}]()\r\n      -> (%16, %output.4)\r\n    }\r\n  return (%output);\r\n}\r\n```\r\n\r\nThe first operand to `cat` in `block1()` should be a captured value, not `%output.1`\r\n"}