{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202898782", "pull_request_review_id": 137680670, "id": 202898782, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg5ODc4Mg==", "diff_hunk": "@@ -99,42 +101,48 @@ class IDEEPFallbackOp final : public IDEEPOperator {\n     }\n \n     for (int i = 0; i < OutputSize(); ++i) {\n-      if (SkipOutputCopy::Contains(i)) {\n-        VLOG(1) << \"Copy output: index \" << i << \" skipped.\";\n-        continue;\n-      }\n       CAFFE_ENFORCE(\n           local_output_blobs_[i]->template IsType<TensorCPU>(),\n           \"IDEEP fallback op currently does not support non-TensorCPU \"\n           \"output type who needs copying.\");\n-      const auto& src = local_output_blobs_[i]->template Get<TensorCPU>();\n+      const auto &src = local_output_blobs_[i]->template Get<TensorCPU>();\n \n-      if (src.template IsType<float>()) {\n-        Blob* dst = OperatorBase::OutputBlob(i);\n-        if (!dst->template IsType<itensor>()) {\n+      if (src.template IsType<float>() && !SkipOutputCopy::Contains(i) &&\n+          base_op_->type() != \"Python\") {\n+        Blob *dst = OperatorBase::OutputBlob(i);\n+        // The output tensor must be ideep tensor with public format.\n+        // If reusing ideep tensor with non-public format, the tensor buffer\n+        // will be wrong interpreted.\n+        if (!dst->template IsType<itensor>() ||\n+            !dst->template Get<itensor>().is_public_format()) {\n           dst->Reset(new itensor());\n         }", "path": "caffe2/ideep/operators/operator_fallback_ideep.h", "position": null, "original_position": 90, "commit_id": "cc98b46560711afe7c8c01068da0592966398bee", "original_commit_id": "4f6b387aee23964106891b6c48b27aeba6fa2324", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "What's the `else` clause? We just go ahead assume the blob contains `itensor` if the condition is not met? I think this condition should be lifted out. ", "created_at": "2018-07-17T05:35:52Z", "updated_at": "2018-11-23T15:47:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/9164#discussion_r202898782", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9164", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202898782"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9164#discussion_r202898782"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9164"}}, "body_html": "<p>What's the <code>else</code> clause? We just go ahead assume the blob contains <code>itensor</code> if the condition is not met? I think this condition should be lifted out.</p>", "body_text": "What's the else clause? We just go ahead assume the blob contains itensor if the condition is not met? I think this condition should be lifted out."}