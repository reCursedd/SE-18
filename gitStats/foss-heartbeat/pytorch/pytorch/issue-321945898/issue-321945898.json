{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7467", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7467/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7467/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7467/events", "html_url": "https://github.com/pytorch/pytorch/issues/7467", "id": 321945898, "node_id": "MDU6SXNzdWUzMjE5NDU4OTg=", "number": 7467, "title": "utils/ffi/__init__.py: add halft tensors", "user": {"login": "CCorfield", "id": 11805905, "node_id": "MDQ6VXNlcjExODA1OTA1", "avatar_url": "https://avatars0.githubusercontent.com/u/11805905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CCorfield", "html_url": "https://github.com/CCorfield", "followers_url": "https://api.github.com/users/CCorfield/followers", "following_url": "https://api.github.com/users/CCorfield/following{/other_user}", "gists_url": "https://api.github.com/users/CCorfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/CCorfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CCorfield/subscriptions", "organizations_url": "https://api.github.com/users/CCorfield/orgs", "repos_url": "https://api.github.com/users/CCorfield/repos", "events_url": "https://api.github.com/users/CCorfield/events{/privacy}", "received_events_url": "https://api.github.com/users/CCorfield/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-05-10T14:11:52Z", "updated_at": "2018-08-27T18:01:22Z", "closed_at": "2018-08-27T18:01:22Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Missing half tensors in generation of typedefs in ffi</p>\n<h2>Code example</h2>\n<p>Fix: Add 'Half' to first \"for\" clause:</p>\n<p>.../utils/ffi/<strong>init</strong>.py<br>\n...</p>\n<pre><code>def _generate_typedefs():\n    typedefs = []\n    for t in ['Double', 'Float', **'Half'**, 'Long', 'Int', 'Short', 'Char', 'Byte']:\n        for lib in ['TH', 'THCuda']:\n            for kind in ['Tensor', 'Storage']:\n                python_name = t + kind\n                if t == 'Float' and lib == 'THCuda':\n                    th_name = 'THCuda' + kind\n                else:\n                    th_name = lib + t + kind\n                th_struct = 'struct ' + th_name\n\n                typedefs += ['typedef {} {};'.format(th_struct, th_name)]\n                # We have to assemble a string here, because we're going to\n                # do this lookup based on tensor.type(), which returns a\n                # string (not a type object, as this code was before)\n                python_module = 'torch.cuda' if lib == 'THCuda' else 'torch'\n                python_class = python_module + '.' + python_name\n                _cffi_to_torch[th_struct] = python_class\n                _torch_to_cffi[python_class] = th_struct\n    return '\\n'.join(typedefs) + '\\n'\n</code></pre>", "body_text": "Issue description\nMissing half tensors in generation of typedefs in ffi\nCode example\nFix: Add 'Half' to first \"for\" clause:\n.../utils/ffi/init.py\n...\ndef _generate_typedefs():\n    typedefs = []\n    for t in ['Double', 'Float', **'Half'**, 'Long', 'Int', 'Short', 'Char', 'Byte']:\n        for lib in ['TH', 'THCuda']:\n            for kind in ['Tensor', 'Storage']:\n                python_name = t + kind\n                if t == 'Float' and lib == 'THCuda':\n                    th_name = 'THCuda' + kind\n                else:\n                    th_name = lib + t + kind\n                th_struct = 'struct ' + th_name\n\n                typedefs += ['typedef {} {};'.format(th_struct, th_name)]\n                # We have to assemble a string here, because we're going to\n                # do this lookup based on tensor.type(), which returns a\n                # string (not a type object, as this code was before)\n                python_module = 'torch.cuda' if lib == 'THCuda' else 'torch'\n                python_class = python_module + '.' + python_name\n                _cffi_to_torch[th_struct] = python_class\n                _torch_to_cffi[python_class] = th_struct\n    return '\\n'.join(typedefs) + '\\n'", "body": "\r\n## Issue description\r\n\r\nMissing half tensors in generation of typedefs in ffi\r\n\r\n## Code example\r\nFix: Add 'Half' to first \"for\" clause:\r\n\r\n.../utils/ffi/__init__.py\r\n...\r\n\r\n```\r\ndef _generate_typedefs():\r\n    typedefs = []\r\n    for t in ['Double', 'Float', **'Half'**, 'Long', 'Int', 'Short', 'Char', 'Byte']:\r\n        for lib in ['TH', 'THCuda']:\r\n            for kind in ['Tensor', 'Storage']:\r\n                python_name = t + kind\r\n                if t == 'Float' and lib == 'THCuda':\r\n                    th_name = 'THCuda' + kind\r\n                else:\r\n                    th_name = lib + t + kind\r\n                th_struct = 'struct ' + th_name\r\n\r\n                typedefs += ['typedef {} {};'.format(th_struct, th_name)]\r\n                # We have to assemble a string here, because we're going to\r\n                # do this lookup based on tensor.type(), which returns a\r\n                # string (not a type object, as this code was before)\r\n                python_module = 'torch.cuda' if lib == 'THCuda' else 'torch'\r\n                python_class = python_module + '.' + python_name\r\n                _cffi_to_torch[th_struct] = python_class\r\n                _torch_to_cffi[python_class] = th_struct\r\n    return '\\n'.join(typedefs) + '\\n'\r\n```\r\n\r\n\r\n"}