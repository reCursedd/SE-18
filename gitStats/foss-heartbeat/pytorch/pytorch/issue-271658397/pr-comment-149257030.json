{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149257030", "pull_request_review_id": 74622742, "id": 149257030, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTI1NzAzMA==", "diff_hunk": "@@ -42,6 +42,16 @@ Below you can find a small example showcasing this::\n         d = torch.randn(2).cuda(2)\n         # d.get_device() == 2\n \n+Memory management\n+-----------------\n+\n+PyTorch use a caching memory allocator to speed up memory allocations. This\n+allows very fast memory allocation for small sizes. However, the unused memory", "path": "docs/source/notes/cuda.rst", "position": null, "original_position": 8, "commit_id": "83e8fb777894741a5f458b9a7946ef40db7119a4", "original_commit_id": "d0d614928bac1d684cfce0289a8760a8eca013eb", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I'd remove the sentence about small sizes. Unlike CPU allocators, the speed-up of caching CUDA allocations isn't particularly about the size of the allocation. It's about avoiding synchronizations on free.", "created_at": "2017-11-07T02:07:29Z", "updated_at": "2018-11-23T15:36:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/3518#discussion_r149257030", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3518", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149257030"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3518#discussion_r149257030"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3518"}}, "body_html": "<p>I'd remove the sentence about small sizes. Unlike CPU allocators, the speed-up of caching CUDA allocations isn't particularly about the size of the allocation. It's about avoiding synchronizations on free.</p>", "body_text": "I'd remove the sentence about small sizes. Unlike CPU allocators, the speed-up of caching CUDA allocations isn't particularly about the size of the allocation. It's about avoiding synchronizations on free."}