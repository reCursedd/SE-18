{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179964945", "pull_request_review_id": 110303389, "id": 179964945, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2NDk0NQ==", "diff_hunk": "@@ -1,43 +1,59 @@\n #include \"InitMethod.hpp\"\n \n+#ifdef THD_INIT_EXTENSION_H\n+#define INCF(F) INCF_(F)\n+#define INCF_(F) #F\n+#include INCF(THD_INIT_EXTENSION_H)\n+#endif\n+\n namespace thd {\n namespace init {\n \n-InitMethod::Config initTCP(std::string argument, rank_type world_size,\n-                           std::string group_name, int rank);\n-InitMethod::Config initFile(std::string argument, rank_type world_size,\n-                            std::string group_name, int rank);\n-InitMethod::Config initEnv(int world_size, std::string group_name, int rank);\n-\n-}\n+InitMethod::Config initTCP(std::string argument,\n+                           int world_size_r,\n+                           std::string group_name,\n+                           int rank);\n+InitMethod::Config initFile(std::string argument,\n+                            int world_size_r,\n+                            std::string group_name,\n+                            int rank);\n+InitMethod::Config initEnv(std::string argument,\n+                           int world_size_r,\n+                           std::string group_name,\n+                           int rank);\n+\n+InitMethodFuncMap initMethods({\n+    {\"env://\", ::thd::init::initEnv},\n+    {\"file://\", ::thd::init::initFile},\n+    {\"tcp://\", ::thd::init::initTCP}\n+\n+#ifdef THD_INIT_EXTENSION_H\n+    ,\n+    /**\n+     * Additional method pairs can be defined in THD_INIT_EXTENSION_H header\n+     * to extend the init methods\n+     */\n+    THD_INIT_EXTENSION_METHODS", "path": "torch/lib/THD/base/init_methods/InitMethod.cpp", "position": 43, "original_position": 43, "commit_id": "3ab7d4bf60429577845685559a95171e5ac6d0b5", "original_commit_id": "bb543ce1d2b49387343e72a87a0528fd5d89dbf5", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "For now, I actually prefer not to let the user register anything at runtime, instead, the extension header/init_method pair would be pretty sufficient for the extension and it's very simple to use (see the other diff I sent, define a pair would be enough). Plus, we will most likely only have this one extension case (very unlikely to have another) since all current init_methods are pretty sufficient for the public users IMO. ", "created_at": "2018-04-08T23:00:57Z", "updated_at": "2018-11-23T15:42:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/6334#discussion_r179964945", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6334", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179964945"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6334#discussion_r179964945"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6334"}}, "body_html": "<p>For now, I actually prefer not to let the user register anything at runtime, instead, the extension header/init_method pair would be pretty sufficient for the extension and it's very simple to use (see the other diff I sent, define a pair would be enough). Plus, we will most likely only have this one extension case (very unlikely to have another) since all current init_methods are pretty sufficient for the public users IMO.</p>", "body_text": "For now, I actually prefer not to let the user register anything at runtime, instead, the extension header/init_method pair would be pretty sufficient for the extension and it's very simple to use (see the other diff I sent, define a pair would be enough). Plus, we will most likely only have this one extension case (very unlikely to have another) since all current init_methods are pretty sufficient for the public users IMO.", "in_reply_to_id": 179960840}