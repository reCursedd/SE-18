{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407665209", "html_url": "https://github.com/pytorch/pytorch/pull/9184#issuecomment-407665209", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9184", "id": 407665209, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzY2NTIwOQ==", "user": {"login": "immerrr", "id": 579798, "node_id": "MDQ6VXNlcjU3OTc5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immerrr", "html_url": "https://github.com/immerrr", "followers_url": "https://api.github.com/users/immerrr/followers", "following_url": "https://api.github.com/users/immerrr/following{/other_user}", "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}", "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions", "organizations_url": "https://api.github.com/users/immerrr/orgs", "repos_url": "https://api.github.com/users/immerrr/repos", "events_url": "https://api.github.com/users/immerrr/events{/privacy}", "received_events_url": "https://api.github.com/users/immerrr/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-25T07:45:44Z", "updated_at": "2018-07-25T07:46:15Z", "author_association": "NONE", "body_html": "<p>Got here from the blog post, great work. Just a bit of pain I'd like to share regarding my experience with backward-compatible pickles:</p>\n<ul>\n<li>The function that's supposed to read the pickled data should be public: if it gets renamed or moved or changed in a backward incompatible way, there's no way to achieve backward compatibility aside from patching the pickled stream. Hence it has the same requirements as public API as soon as a pickle having that function is written by a released version of the package. So creating it as \"hidden\" by an underscore prefix can lead to a false sense of freedom when dealing with it.</li>\n<li>The serialization format should be extensible, sometimes just returning a <code>(FORMAT, VALUE)</code> tuple where the pickle deserializer function can decide how to interpret <code>VALUE</code> based on <code>FORMAT</code> in O(1) could help a lot down the road. Because if that's not the case, a backward compatible deserializer function must do <code>isinstance</code> checks or wait for an exception to be raised when trying one format after another.</li>\n</ul>", "body_text": "Got here from the blog post, great work. Just a bit of pain I'd like to share regarding my experience with backward-compatible pickles:\n\nThe function that's supposed to read the pickled data should be public: if it gets renamed or moved or changed in a backward incompatible way, there's no way to achieve backward compatibility aside from patching the pickled stream. Hence it has the same requirements as public API as soon as a pickle having that function is written by a released version of the package. So creating it as \"hidden\" by an underscore prefix can lead to a false sense of freedom when dealing with it.\nThe serialization format should be extensible, sometimes just returning a (FORMAT, VALUE) tuple where the pickle deserializer function can decide how to interpret VALUE based on FORMAT in O(1) could help a lot down the road. Because if that's not the case, a backward compatible deserializer function must do isinstance checks or wait for an exception to be raised when trying one format after another.", "body": "Got here from the blog post, great work. Just a bit of pain I'd like to share regarding my experience with backward-compatible pickles:\r\n- The function that's supposed to read the pickled data should be public: if it gets renamed or moved or changed in a backward incompatible way, there's no way to achieve backward compatibility aside from patching the pickled stream. Hence it has the same requirements as public API as soon as a pickle having that function is written by a released version of the package. So creating it as \"hidden\" by an underscore prefix can lead to a false sense of freedom when dealing with it.\r\n- The serialization format should be extensible, sometimes just returning a `(FORMAT, VALUE)` tuple where the pickle deserializer function can decide how to interpret `VALUE` based on `FORMAT` in O(1) could help a lot down the road. Because if that's not the case, a backward compatible deserializer function must do `isinstance` checks or wait for an exception to be raised when trying one format after another."}