{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/407792142", "html_url": "https://github.com/pytorch/pytorch/pull/9184#issuecomment-407792142", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9184", "id": 407792142, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzc5MjE0Mg==", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-25T15:19:29Z", "updated_at": "2018-07-25T15:19:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One relatively low-impact way to achieve this would be to have <code>pytorch.load</code> optionally accept bytestrings.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">load</span>(<span class=\"pl-smi\">x</span>, ...):\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(x, <span class=\"pl-c1\">bytes</span>):\n        <span class=\"pl-k\">return</span> load(io.BytesIO(x))\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> normal code for handling files</span>\n    <span class=\"pl-c1\">...</span></pre></div>", "body_text": "One relatively low-impact way to achieve this would be to have pytorch.load optionally accept bytestrings.\ndef load(x, ...):\n    if isinstance(x, bytes):\n        return load(io.BytesIO(x))\n    # normal code for handling files\n    ...", "body": "One relatively low-impact way to achieve this would be to have `pytorch.load` optionally accept bytestrings.\r\n\r\n```python\r\ndef load(x, ...):\r\n    if isinstance(x, bytes):\r\n        return load(io.BytesIO(x))\r\n    # normal code for handling files\r\n    ...\r\n```"}