{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6734", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6734/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6734/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6734/events", "html_url": "https://github.com/pytorch/pytorch/issues/6734", "id": 315670092, "node_id": "MDU6SXNzdWUzMTU2NzAwOTI=", "number": 6734, "title": "[JIT] jit does not properly handle IntList[x] params", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-18T22:56:00Z", "updated_at": "2018-04-30T03:09:05Z", "closed_at": "2018-04-30T03:09:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For example, <code>adaptive_avg_pool1d</code> has an <code>IntList[1]</code> parameter as the second argument in <code>native_functions.yaml</code>.</p>\n<pre><code>@torch.jit.script\ndef func(x):\n  return torch.nn.functional.adaptive_avg_pool1d(x, output_size=1)\n</code></pre>\n<p>gives</p>\n<pre><code>unknown builtin op:\n@torch.jit.script\ndef func(x):\n    return torch.nn.functional.adaptive_avg_pool1d(x, output_size=1)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &lt;--- HERE\n</code></pre>\n<p>whereas</p>\n<pre><code>@torch.jit.script\ndef func(x):\n  return torch.nn.functional.adaptive_avg_pool1d(x, output_size=[1])\n</code></pre>\n<p>works. When you remove the <code>output_size=</code> it's the other way around.</p>\n<p>This is on current master.<br>\nI came across this because it causes the build failure in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"310155469\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6152\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6152/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6152\">#6152</a> .</p>\n<p>In terms of work-around, maybe one could generate <code>i</code> and <code>is</code> signatures when one encounters <code>IntList[x]</code>.</p>\n<p>Best regards</p>\n<p>Thomas</p>", "body_text": "For example, adaptive_avg_pool1d has an IntList[1] parameter as the second argument in native_functions.yaml.\n@torch.jit.script\ndef func(x):\n  return torch.nn.functional.adaptive_avg_pool1d(x, output_size=1)\n\ngives\nunknown builtin op:\n@torch.jit.script\ndef func(x):\n    return torch.nn.functional.adaptive_avg_pool1d(x, output_size=1)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n\nwhereas\n@torch.jit.script\ndef func(x):\n  return torch.nn.functional.adaptive_avg_pool1d(x, output_size=[1])\n\nworks. When you remove the output_size= it's the other way around.\nThis is on current master.\nI came across this because it causes the build failure in #6152 .\nIn terms of work-around, maybe one could generate i and is signatures when one encounters IntList[x].\nBest regards\nThomas", "body": "For example, `adaptive_avg_pool1d` has an `IntList[1]` parameter as the second argument in `native_functions.yaml`.\r\n```\r\n@torch.jit.script\r\ndef func(x):\r\n  return torch.nn.functional.adaptive_avg_pool1d(x, output_size=1)\r\n```\r\ngives\r\n```\r\nunknown builtin op:\r\n@torch.jit.script\r\ndef func(x):\r\n    return torch.nn.functional.adaptive_avg_pool1d(x, output_size=1)\r\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\r\n```\r\nwhereas \r\n```\r\n@torch.jit.script\r\ndef func(x):\r\n  return torch.nn.functional.adaptive_avg_pool1d(x, output_size=[1])\r\n```\r\nworks. When you remove the `output_size=` it's the other way around.\r\n\r\nThis is on current master.\r\nI came across this because it causes the build failure in #6152 .\r\n\r\nIn terms of work-around, maybe one could generate `i` and `is` signatures when one encounters `IntList[x]`.\r\n\r\nBest regards\r\n\r\nThomas"}