{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/275232855", "html_url": "https://github.com/pytorch/pytorch/issues/584#issuecomment-275232855", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/584", "id": 275232855, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTIzMjg1NQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-25T21:06:24Z", "updated_at": "2017-01-25T21:06:24Z", "author_association": "MEMBER", "body_html": "<p>Keep in mind that <code>.cuda()</code> works differently on modules than on tensors - instead of returning a copy with CUDA parameters, it mutates the object, replacing CPU parameters with GPU ones. So after <code>gpu_model = no_gpu_model.cuda()</code>, <code>gpu_model is no_gpu_model</code> is True, and parameters of <code>no_gpu_model</code> are on the GPU too.</p>\n<p>Also, we tend not to embed the input transfer in the module, but put that logic in the training loop itself.</p>", "body_text": "Keep in mind that .cuda() works differently on modules than on tensors - instead of returning a copy with CUDA parameters, it mutates the object, replacing CPU parameters with GPU ones. So after gpu_model = no_gpu_model.cuda(), gpu_model is no_gpu_model is True, and parameters of no_gpu_model are on the GPU too.\nAlso, we tend not to embed the input transfer in the module, but put that logic in the training loop itself.", "body": "Keep in mind that `.cuda()` works differently on modules than on tensors - instead of returning a copy with CUDA parameters, it mutates the object, replacing CPU parameters with GPU ones. So after `gpu_model = no_gpu_model.cuda()`, `gpu_model is no_gpu_model` is True, and parameters of `no_gpu_model` are on the GPU too.\r\n\r\nAlso, we tend not to embed the input transfer in the module, but put that logic in the training loop itself."}