{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/275223001", "html_url": "https://github.com/pytorch/pytorch/issues/584#issuecomment-275223001", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/584", "id": 275223001, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTIyMzAwMQ==", "user": {"login": "napsternxg", "id": 112678, "node_id": "MDQ6VXNlcjExMjY3OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/112678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/napsternxg", "html_url": "https://github.com/napsternxg", "followers_url": "https://api.github.com/users/napsternxg/followers", "following_url": "https://api.github.com/users/napsternxg/following{/other_user}", "gists_url": "https://api.github.com/users/napsternxg/gists{/gist_id}", "starred_url": "https://api.github.com/users/napsternxg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/napsternxg/subscriptions", "organizations_url": "https://api.github.com/users/napsternxg/orgs", "repos_url": "https://api.github.com/users/napsternxg/repos", "events_url": "https://api.github.com/users/napsternxg/events{/privacy}", "received_events_url": "https://api.github.com/users/napsternxg/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-25T20:26:06Z", "updated_at": "2017-01-25T20:26:06Z", "author_association": "NONE", "body_html": "<p>Ok, based your suggestions, I have implemented the following:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">LinearRegression</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input_size</span>, <span class=\"pl-smi\">output_size</span>):\n        <span class=\"pl-c1\">super</span>(LinearRegression, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.x2o <span class=\"pl-k\">=</span> nn.Linear(input_size, output_size)\n        \n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">X</span>):\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">next</span>(<span class=\"pl-c1\">self</span>.x2o.parameters()).is_cuda:\n            <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> X.is_cuda:\n                X <span class=\"pl-k\">=</span> X.cuda()\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.x2o(X)\n\nbatch <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">3</span>))\ntarget <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">1</span>))\n\nno_gpu_model <span class=\"pl-k\">=</span> LinearRegression(<span class=\"pl-v\">input_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-v\">output_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No GPU model: <span class=\"pl-pds\">\"</span></span>, no_gpu_model.forward(batch).size())\n\n<span class=\"pl-k\">if</span> torch.cuda.is_available():\n    gpu_model <span class=\"pl-k\">=</span> no_gpu_model.cuda()\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>GPU model: <span class=\"pl-pds\">\"</span></span>, gpu_model.forward(batch.cuda()).size())\n    <span class=\"pl-k\">except</span> <span class=\"pl-c1\">TypeError</span> <span class=\"pl-k\">as</span> e:\n        <span class=\"pl-c1\">print</span>(e)   \n\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">No GPU model:  torch.Size([10, 1])</span>\n<span class=\"pl-s\">GPU model:  torch.Size([10, 1])</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span></pre></div>\n<p>Will this be the correct way to go?</p>", "body_text": "Ok, based your suggestions, I have implemented the following:\nclass LinearRegression(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(LinearRegression, self).__init__()\n        self.x2o = nn.Linear(input_size, output_size)\n        \n    def forward(self, X):\n        if next(self.x2o.parameters()).is_cuda:\n            if not X.is_cuda:\n                X = X.cuda()\n        return self.x2o(X)\n\nbatch = Variable(torch.randn(10,3))\ntarget = Variable(torch.randn(10,1))\n\nno_gpu_model = LinearRegression(input_size=3, output_size=1)\nprint(\"No GPU model: \", no_gpu_model.forward(batch).size())\n\nif torch.cuda.is_available():\n    gpu_model = no_gpu_model.cuda()\n    try:\n        print(\"GPU model: \", gpu_model.forward(batch.cuda()).size())\n    except TypeError as e:\n        print(e)   \n\n\"\"\"\nNo GPU model:  torch.Size([10, 1])\nGPU model:  torch.Size([10, 1])\n\"\"\"\nWill this be the correct way to go?", "body": "Ok, based your suggestions, I have implemented the following:\r\n\r\n```python\r\nclass LinearRegression(nn.Module):\r\n    def __init__(self, input_size, output_size):\r\n        super(LinearRegression, self).__init__()\r\n        self.x2o = nn.Linear(input_size, output_size)\r\n        \r\n    def forward(self, X):\r\n        if next(self.x2o.parameters()).is_cuda:\r\n            if not X.is_cuda:\r\n                X = X.cuda()\r\n        return self.x2o(X)\r\n\r\nbatch = Variable(torch.randn(10,3))\r\ntarget = Variable(torch.randn(10,1))\r\n\r\nno_gpu_model = LinearRegression(input_size=3, output_size=1)\r\nprint(\"No GPU model: \", no_gpu_model.forward(batch).size())\r\n\r\nif torch.cuda.is_available():\r\n    gpu_model = no_gpu_model.cuda()\r\n    try:\r\n        print(\"GPU model: \", gpu_model.forward(batch.cuda()).size())\r\n    except TypeError as e:\r\n        print(e)   \r\n\r\n\"\"\"\r\nNo GPU model:  torch.Size([10, 1])\r\nGPU model:  torch.Size([10, 1])\r\n\"\"\"\r\n```\r\n\r\nWill this be the correct way to go?"}