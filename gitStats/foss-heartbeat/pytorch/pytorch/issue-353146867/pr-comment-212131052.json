{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212131052", "pull_request_review_id": 148698748, "id": 212131052, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjEzMTA1Mg==", "diff_hunk": "@@ -446,6 +446,15 @@ def leaky_relu(g, input, negative_slope, inplace=False):\n     return g.op(\"LeakyRelu\", input, alpha_f=_scalar(negative_slope))\n \n \n+def linear(g, input, weight, bias=None):\n+    if input.dim() == 2 and bias is not None:", "path": "torch/onnx/symbolic.py", "position": null, "original_position": 5, "commit_id": "5602f7378a6ab416bf7e9e8726d15da779dde9a3", "original_commit_id": "214cbd18f3444e2bca1b381f04f88e0036a6762b", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "`input`, `weight` and `bias` here should be instances of `Value` from ir.h. \r\n\r\nThen to get sizes, do something like this: https://github.com/pytorch/pytorch/blob/master/torch/onnx/symbolic.py#L379 Note you need a check that the specified Value is of TensorType. Only then will sizes be specified, otherwise, you'll need to emit a generic, rank-invariant version.\r\n\r\nBtw I'm not sure if `bias` will be none here, can you try it out passing tensor() as the third argument to aten::linear and tracing it?", "created_at": "2018-08-22T22:30:56Z", "updated_at": "2018-11-23T15:49:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/10799#discussion_r212131052", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10799", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212131052"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10799#discussion_r212131052"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10799"}}, "body_html": "<p><code>input</code>, <code>weight</code> and <code>bias</code> here should be instances of <code>Value</code> from ir.h.</p>\n<p>Then to get sizes, do something like this: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/onnx/symbolic.py#L379\">https://github.com/pytorch/pytorch/blob/master/torch/onnx/symbolic.py#L379</a> Note you need a check that the specified Value is of TensorType. Only then will sizes be specified, otherwise, you'll need to emit a generic, rank-invariant version.</p>\n<p>Btw I'm not sure if <code>bias</code> will be none here, can you try it out passing tensor() as the third argument to aten::linear and tracing it?</p>", "body_text": "input, weight and bias here should be instances of Value from ir.h.\nThen to get sizes, do something like this: https://github.com/pytorch/pytorch/blob/master/torch/onnx/symbolic.py#L379 Note you need a check that the specified Value is of TensorType. Only then will sizes be specified, otherwise, you'll need to emit a generic, rank-invariant version.\nBtw I'm not sure if bias will be none here, can you try it out passing tensor() as the third argument to aten::linear and tracing it?"}