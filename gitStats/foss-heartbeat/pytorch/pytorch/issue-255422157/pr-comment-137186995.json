{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/137186995", "pull_request_review_id": 60819312, "id": 137186995, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzE4Njk5NQ==", "diff_hunk": "@@ -2925,6 +2917,35 @@ LAB_IMPLEMENT_BASIC_FUNCTION(neg,-)\n LAB_IMPLEMENT_BASIC_FUNCTION(cinv, TH_MATH_NAME(1.0) / )\n \n \n+void THTensor_(pow)(THTensor *r_, THTensor *t, real value)\n+{\n+  THTensor_(resizeAs)(r_, t);\n+  if(value == 1){\n+    THTensor_(copy)(r_, t);\n+  }\n+  else if(value == 2){\n+    THTensor_(cmul)(r_, t, t);\n+  }\n+  else if(value == 3){\n+    TH_TENSOR_APPLY2(real, t, real, r_, *r__data = *t_data * *t_data * *t_data;);\n+  }\n+  else if(value == 0.5){\n+    THTensor_(sqrt)(r_, t);\n+  }\n+  else if(value == -0.5){\n+    THTensor_(rsqrt)(r_, t);\n+  }\n+  else if(value == -1){\n+    THTensor_(cinv)(r_, t);\n+  }\n+  else if(value == -2){\n+    TH_TENSOR_APPLY2(real, t, real, r_, *r__data = TH_MATH_NAME(1.0) / (*t_data * *t_data););", "path": "torch/lib/TH/generic/THTensorMath.c", "position": 48, "original_position": 48, "commit_id": "b03a18f13aebb3c34b80aebfad3e4f13836d0d8e", "original_commit_id": "b03a18f13aebb3c34b80aebfad3e4f13836d0d8e", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "`TH_MATH_NAME` is a macro that appends a `f` if the data type is float, else it don't do anything. I added it there to avoid possible casts from 1.0 (double) to 1.0f (float) when real is float. Such a pattern has already been used in [`cinv`](https://github.com/pytorch/pytorch/blob/master/torch/lib/TH/generic/THTensorMath.c#L2925), so I think this should be ok.", "created_at": "2017-09-06T07:10:00Z", "updated_at": "2018-11-23T15:34:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/2635#discussion_r137186995", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2635", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/137186995"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2635#discussion_r137186995"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2635"}}, "body_html": "<p><code>TH_MATH_NAME</code> is a macro that appends a <code>f</code> if the data type is float, else it don't do anything. I added it there to avoid possible casts from 1.0 (double) to 1.0f (float) when real is float. Such a pattern has already been used in <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/TH/generic/THTensorMath.c#L2925\"><code>cinv</code></a>, so I think this should be ok.</p>", "body_text": "TH_MATH_NAME is a macro that appends a f if the data type is float, else it don't do anything. I added it there to avoid possible casts from 1.0 (double) to 1.0f (float) when real is float. Such a pattern has already been used in cinv, so I think this should be ok.", "in_reply_to_id": 137154810}