{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/274339730", "html_url": "https://github.com/pytorch/pytorch/issues/544#issuecomment-274339730", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/544", "id": 274339730, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDMzOTczMA==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-22T16:05:11Z", "updated_at": "2017-01-22T16:06:14Z", "author_association": "MEMBER", "body_html": "<p>verified that this works with <code>torch</code></p>\n<div class=\"highlight highlight-source-lua\"><pre><span class=\"pl-c1\">require</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cudnn<span class=\"pl-pds\">'</span></span>\ncudnn.<span class=\"pl-smi\">benchmark</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\nx <span class=\"pl-k\">=</span> torch.<span class=\"pl-c1\">randn</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">256</span>, <span class=\"pl-c1\">109</span>, <span class=\"pl-c1\">175</span>):<span class=\"pl-c1\">cuda</span>()\nconv <span class=\"pl-k\">=</span> cudnn.<span class=\"pl-c1\">SpatialConvolution</span>(<span class=\"pl-c1\">256</span>, <span class=\"pl-c1\">256</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>):<span class=\"pl-c1\">cuda</span>()\no <span class=\"pl-k\">=</span> conv:<span class=\"pl-c1\">forward</span>(x)</pre></div>\n<p>and verified that doesn't work with pytorch</p>", "body_text": "verified that this works with torch\nrequire 'cudnn'\ncudnn.benchmark = true\nx = torch.randn(1, 256, 109, 175):cuda()\nconv = cudnn.SpatialConvolution(256, 256, 3, 3, 1, 1, 1, 1):cuda()\no = conv:forward(x)\nand verified that doesn't work with pytorch", "body": "verified that this works with `torch` \r\n\r\n```lua\r\nrequire 'cudnn'\r\ncudnn.benchmark = true\r\nx = torch.randn(1, 256, 109, 175):cuda()\r\nconv = cudnn.SpatialConvolution(256, 256, 3, 3, 1, 1, 1, 1):cuda()\r\no = conv:forward(x)\r\n```\r\n\r\nand verified that doesn't work with pytorch"}