{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390756091", "html_url": "https://github.com/pytorch/pytorch/issues/7733#issuecomment-390756091", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7733", "id": 390756091, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDc1NjA5MQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-21T19:24:20Z", "updated_at": "2018-05-21T19:24:20Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>In [1]: import numpy as np\n\nIn [2]: x = np.array([[1, 2], [3, 4]])\n\nIn [3]: x\nOut[3]:\narray([[1, 2],\n       [3, 4]])\n\nIn [4]: dic = {}\n\nIn [5]: c = hash(x)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-5-f7e72735918b&gt; in &lt;module&gt;()\n----&gt; 1 c = hash(x)\n\nTypeError: unhashable type: 'numpy.ndarray'\n\nIn [6]: dic[x] = 1\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-6-d73dcd5851d2&gt; in &lt;module&gt;()\n----&gt; 1 dic[x] = 1\n\nTypeError: unhashable type: 'numpy.ndarray'\n</code></pre>\n<p>Numpy arrays are unhashable, so yes, it looks like getting rid of <code>__hash__</code> (or throwing an error inside it) sounds like a good idea</p>", "body_text": "In [1]: import numpy as np\n\nIn [2]: x = np.array([[1, 2], [3, 4]])\n\nIn [3]: x\nOut[3]:\narray([[1, 2],\n       [3, 4]])\n\nIn [4]: dic = {}\n\nIn [5]: c = hash(x)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-5-f7e72735918b> in <module>()\n----> 1 c = hash(x)\n\nTypeError: unhashable type: 'numpy.ndarray'\n\nIn [6]: dic[x] = 1\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-6-d73dcd5851d2> in <module>()\n----> 1 dic[x] = 1\n\nTypeError: unhashable type: 'numpy.ndarray'\n\nNumpy arrays are unhashable, so yes, it looks like getting rid of __hash__ (or throwing an error inside it) sounds like a good idea", "body": "```\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: x = np.array([[1, 2], [3, 4]])\r\n\r\nIn [3]: x\r\nOut[3]:\r\narray([[1, 2],\r\n       [3, 4]])\r\n\r\nIn [4]: dic = {}\r\n\r\nIn [5]: c = hash(x)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-f7e72735918b> in <module>()\r\n----> 1 c = hash(x)\r\n\r\nTypeError: unhashable type: 'numpy.ndarray'\r\n\r\nIn [6]: dic[x] = 1\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-6-d73dcd5851d2> in <module>()\r\n----> 1 dic[x] = 1\r\n\r\nTypeError: unhashable type: 'numpy.ndarray'\r\n```\r\n\r\nNumpy arrays are unhashable, so yes, it looks like getting rid of `__hash__` (or throwing an error inside it) sounds like a good idea"}