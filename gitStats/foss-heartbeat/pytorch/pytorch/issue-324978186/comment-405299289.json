{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405299289", "html_url": "https://github.com/pytorch/pytorch/issues/7733#issuecomment-405299289", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7733", "id": 405299289, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTI5OTI4OQ==", "user": {"login": "mcarilli", "id": 7799218, "node_id": "MDQ6VXNlcjc3OTkyMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7799218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarilli", "html_url": "https://github.com/mcarilli", "followers_url": "https://api.github.com/users/mcarilli/followers", "following_url": "https://api.github.com/users/mcarilli/following{/other_user}", "gists_url": "https://api.github.com/users/mcarilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarilli/subscriptions", "organizations_url": "https://api.github.com/users/mcarilli/orgs", "repos_url": "https://api.github.com/users/mcarilli/repos", "events_url": "https://api.github.com/users/mcarilli/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarilli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T16:06:56Z", "updated_at": "2018-07-16T16:06:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>DistributedDataParallel and replicate.py (used by both DistributedDataParallel and DataParallel) also use tensors as dict keys:<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/distributed.py#L188\">https://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/distributed.py#L188</a><br>\n<a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/replicate.py#L11\">https://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/replicate.py#L11</a><br>\nThese are just examples I've stumbled across.  There may be any number of other instances where tensors were used as keys simply because it was a natural thing to do.  We do it quite a bit in Apex as well.  I don't mind adjusting our code to use id() explicitly, in response to whatever you guys decide, just giving a heads up that there may be a bit of pain initially as various usages of tensors as dict keys are tracked down.</p>", "body_text": "DistributedDataParallel and replicate.py (used by both DistributedDataParallel and DataParallel) also use tensors as dict keys:\nhttps://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/distributed.py#L188\nhttps://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/replicate.py#L11\nThese are just examples I've stumbled across.  There may be any number of other instances where tensors were used as keys simply because it was a natural thing to do.  We do it quite a bit in Apex as well.  I don't mind adjusting our code to use id() explicitly, in response to whatever you guys decide, just giving a heads up that there may be a bit of pain initially as various usages of tensors as dict keys are tracked down.", "body": "DistributedDataParallel and replicate.py (used by both DistributedDataParallel and DataParallel) also use tensors as dict keys:\r\nhttps://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/distributed.py#L188\r\nhttps://github.com/pytorch/pytorch/blob/master/torch/nn/parallel/replicate.py#L11\r\nThese are just examples I've stumbled across.  There may be any number of other instances where tensors were used as keys simply because it was a natural thing to do.  We do it quite a bit in Apex as well.  I don't mind adjusting our code to use id() explicitly, in response to whatever you guys decide, just giving a heads up that there may be a bit of pain initially as various usages of tensors as dict keys are tracked down."}