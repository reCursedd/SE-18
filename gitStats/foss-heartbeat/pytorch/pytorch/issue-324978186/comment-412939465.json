{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/412939465", "html_url": "https://github.com/pytorch/pytorch/issues/7733#issuecomment-412939465", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7733", "id": 412939465, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjkzOTQ2NQ==", "user": {"login": "matt-gardner", "id": 3291951, "node_id": "MDQ6VXNlcjMyOTE5NTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3291951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-gardner", "html_url": "https://github.com/matt-gardner", "followers_url": "https://api.github.com/users/matt-gardner/followers", "following_url": "https://api.github.com/users/matt-gardner/following{/other_user}", "gists_url": "https://api.github.com/users/matt-gardner/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-gardner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-gardner/subscriptions", "organizations_url": "https://api.github.com/users/matt-gardner/orgs", "repos_url": "https://api.github.com/users/matt-gardner/repos", "events_url": "https://api.github.com/users/matt-gardner/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-gardner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-14T16:48:11Z", "updated_at": "2018-08-14T16:48:11Z", "author_association": "NONE", "body_html": "<p>We ran into a bug in our code that was indirectly caused by this issue:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> tensor <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> d <span class=\"pl-k\">=</span> {(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>): <span class=\"pl-c1\">1</span>}\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> pytorch 0.3:</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">tuple</span>(tensor) <span class=\"pl-k\">==</span> (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n<span class=\"pl-c1\">True</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">tuple</span>(tensor) <span class=\"pl-k\">in</span> d\n<span class=\"pl-c1\">True</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> pytorch 0.4:</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">tuple</span>(tensor) <span class=\"pl-k\">==</span> (<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>)\n<span class=\"pl-c1\">True</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">tuple</span>(tensor) <span class=\"pl-k\">in</span> d\n<span class=\"pl-c1\">False</span></pre></div>\n<p>With the addition of scalar tensors <code>tuple(tensor)</code> no longer returns a tuple of ints, it now returns a tuple of tensors.  These can be coerced to equal <code>(1, 1)</code>, but can't be used as lookups to a dictionary containing tuples of ints.  This breaks python's contract for <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__hash__\" rel=\"nofollow\"><code>__hash__</code> methods</a>:</p>\n<pre><code>The only required property is that objects which compare equal have the same hash value.\n</code></pre>\n<p>To avoid this kind of confusing behavior, <code>__hash__</code> should either be removed or made to match the contract.  Seems fine to just remove it.</p>", "body_text": "We ran into a bug in our code that was indirectly caused by this issue:\n>>> tensor = torch.Tensor([1,1])\n>>> d = {(1,1): 1}\n# pytorch 0.3:\n>>> tuple(tensor) == (1, 1)\nTrue\n>>> tuple(tensor) in d\nTrue\n# pytorch 0.4:\n>>> tuple(tensor) == (1,1)\nTrue\n>>> tuple(tensor) in d\nFalse\nWith the addition of scalar tensors tuple(tensor) no longer returns a tuple of ints, it now returns a tuple of tensors.  These can be coerced to equal (1, 1), but can't be used as lookups to a dictionary containing tuples of ints.  This breaks python's contract for __hash__ methods:\nThe only required property is that objects which compare equal have the same hash value.\n\nTo avoid this kind of confusing behavior, __hash__ should either be removed or made to match the contract.  Seems fine to just remove it.", "body": "We ran into a bug in our code that was indirectly caused by this issue:\r\n\r\n```python\r\n>>> tensor = torch.Tensor([1,1])\r\n>>> d = {(1,1): 1}\r\n# pytorch 0.3:\r\n>>> tuple(tensor) == (1, 1)\r\nTrue\r\n>>> tuple(tensor) in d\r\nTrue\r\n# pytorch 0.4:\r\n>>> tuple(tensor) == (1,1)\r\nTrue\r\n>>> tuple(tensor) in d\r\nFalse\r\n```\r\n\r\nWith the addition of scalar tensors `tuple(tensor)` no longer returns a tuple of ints, it now returns a tuple of tensors.  These can be coerced to equal `(1, 1)`, but can't be used as lookups to a dictionary containing tuples of ints.  This breaks python's contract for [`__hash__` methods](https://docs.python.org/3/reference/datamodel.html#object.__hash__):\r\n\r\n```\r\nThe only required property is that objects which compare equal have the same hash value.\r\n```\r\n\r\nTo avoid this kind of confusing behavior, `__hash__` should either be removed or made to match the contract.  Seems fine to just remove it."}