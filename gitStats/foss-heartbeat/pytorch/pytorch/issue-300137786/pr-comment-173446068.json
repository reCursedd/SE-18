{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173446068", "pull_request_review_id": 102640694, "id": 173446068, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzQ0NjA2OA==", "diff_hunk": "@@ -66,28 +77,17 @@ inline bool THPUtils_checkDouble(PyObject* obj) {\n }\n \n inline double THPUtils_unpackDouble(PyObject* obj) {\n-  if (PyFloat_Check(obj)) {\n-    return PyFloat_AS_DOUBLE(obj);\n+  // PyFloat_AsDouble will calls obj.__float__ if obj is not a float object\n+  auto value = PyFloat_AsDouble(obj);\n+  if (PyErr_Occurred()){\n+    throw python_error();\n   }\n+  // raise warning when converting a long to float with precision loss\n   if (PyLong_Check(obj)) {\n-    int overflow;\n-    long long value = PyLong_AsLongLongAndOverflow(obj, &overflow);\n-    if (overflow != 0) {\n-      throw std::runtime_error(\"Overflow when unpacking double\");\n-    }\n     if (value > DOUBLE_INT_MAX || value < -DOUBLE_INT_MAX) {", "path": "torch/csrc/utils/python_numbers.h", "position": 45, "original_position": 45, "commit_id": "7785fa215dbab6af0d17a8b149560da7aea97fc1", "original_commit_id": "7785fa215dbab6af0d17a8b149560da7aea97fc1", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "body": "The original overflow message is not needed here.\r\n\r\nearly version:\r\n`unpackDouble(python_int) --> c_long_long(python_int) --> c_double(c_long_long)`\r\nunpackDouble(int(1e+40)) would raise the **overflow** error because long long  (typically 64 bits) can only represent up to **2^127**.  However the 1e+40 is totally representable by a `double` type.\r\n\r\nUsing double to represent `int(1e+40)` causes problem of **precision loss** as the absolute value is too large (here `DOUBLE_INT_MAX`). Compared with overflow, I think **precision loss** is somehow acceptable so a *warning* will be raised instead of *error*\r\n\r\nthis version:\r\n`unpackDouble(python_int) --> python_float(python_int) --> c_double(python_float)`\r\nThe type conversions are all handled by cpython, so we can simply check `PyErr` and return `NULL` on error.", "created_at": "2018-03-09T13:13:27Z", "updated_at": "2018-11-23T15:40:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/5407#discussion_r173446068", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5407", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173446068"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5407#discussion_r173446068"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5407"}}, "body_html": "<p>The original overflow message is not needed here.</p>\n<p>early version:<br>\n<code>unpackDouble(python_int) --&gt; c_long_long(python_int) --&gt; c_double(c_long_long)</code><br>\nunpackDouble(int(1e+40)) would raise the <strong>overflow</strong> error because long long  (typically 64 bits) can only represent up to <strong>2^127</strong>.  However the 1e+40 is totally representable by a <code>double</code> type.</p>\n<p>Using double to represent <code>int(1e+40)</code> causes problem of <strong>precision loss</strong> as the absolute value is too large (here <code>DOUBLE_INT_MAX</code>). Compared with overflow, I think <strong>precision loss</strong> is somehow acceptable so a <em>warning</em> will be raised instead of <em>error</em></p>\n<p>this version:<br>\n<code>unpackDouble(python_int) --&gt; python_float(python_int) --&gt; c_double(python_float)</code><br>\nThe type conversions are all handled by cpython, so we can simply check <code>PyErr</code> and return <code>NULL</code> on error.</p>", "body_text": "The original overflow message is not needed here.\nearly version:\nunpackDouble(python_int) --> c_long_long(python_int) --> c_double(c_long_long)\nunpackDouble(int(1e+40)) would raise the overflow error because long long  (typically 64 bits) can only represent up to 2^127.  However the 1e+40 is totally representable by a double type.\nUsing double to represent int(1e+40) causes problem of precision loss as the absolute value is too large (here DOUBLE_INT_MAX). Compared with overflow, I think precision loss is somehow acceptable so a warning will be raised instead of error\nthis version:\nunpackDouble(python_int) --> python_float(python_int) --> c_double(python_float)\nThe type conversions are all handled by cpython, so we can simply check PyErr and return NULL on error.", "in_reply_to_id": 173435159}