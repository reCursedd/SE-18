{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5407", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5407/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5407/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5407/events", "html_url": "https://github.com/pytorch/pytorch/pull/5407", "id": 300137786, "node_id": "MDExOlB1bGxSZXF1ZXN0MTcxMzAyNjEz", "number": 5407, "title": "Simplified unpack with additional error messages", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 466131885, "node_id": "MDU6TGFiZWw0NjYxMzE4ODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs%20discussion", "name": "needs discussion", "color": "cc317c", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-02-26T07:48:02Z", "updated_at": "2018-11-23T15:40:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5407", "html_url": "https://github.com/pytorch/pytorch/pull/5407", "diff_url": "https://github.com/pytorch/pytorch/pull/5407.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5407.patch"}, "body_html": "<p>The original version doesn't work for <code>torch.Tensor</code>, it raises <strong>Runtime Error: Overflow when unpacking long</strong> from the C backend:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/6204877cd44594541956d164e324642cae523d59/torch/csrc/utils/python_numbers.h#L48-L58\">pytorch/torch/csrc/utils/python_numbers.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 48 to 58\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/6204877cd44594541956d164e324642cae523d59\">6204877</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">inline</span> <span class=\"pl-c1\">int64_t</span> <span class=\"pl-en\">THPUtils_unpackLong</span>(PyObject* obj) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">int</span> overflow; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L50\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"50\"></td>\n          <td id=\"LC50\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">long</span> <span class=\"pl-k\">long</span> value = <span class=\"pl-c1\">PyLong_AsLongLongAndOverflow</span>(obj, &amp;overflow); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L51\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"51\"></td>\n          <td id=\"LC51\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (value == -<span class=\"pl-c1\">1</span> &amp;&amp; <span class=\"pl-c1\">PyErr_Occurred</span>()) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L52\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"52\"></td>\n          <td id=\"LC52\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">throw</span> <span class=\"pl-smi\">python_error</span>(); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L53\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"53\"></td>\n          <td id=\"LC53\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L54\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"54\"></td>\n          <td id=\"LC54\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (overflow != <span class=\"pl-c1\">0</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">throw</span> <span class=\"pl-smi\">std::runtime_error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Overflow when unpacking long<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> (<span class=\"pl-c1\">int64_t</span>)value; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>here's a minimal snippet:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\na <span class=\"pl-k\">=</span> torch.Tensor(<span class=\"pl-c1\">5</span>)\n<span class=\"pl-c1\">print</span>(a)</pre></div>\n<p>Actually I don't quite understand the existing method, it's not numerical stable because some random float numbers may satisfy <code>value == math.ceil(value)</code> in python.</p>", "body_text": "The original version doesn't work for torch.Tensor, it raises Runtime Error: Overflow when unpacking long from the C backend:\n\n  \n    \n      pytorch/torch/csrc/utils/python_numbers.h\n    \n    \n        Lines 48 to 58\n      in\n      6204877\n    \n    \n    \n    \n\n        \n          \n           inline int64_t THPUtils_unpackLong(PyObject* obj) { \n        \n\n        \n          \n             int overflow; \n        \n\n        \n          \n             long long value = PyLong_AsLongLongAndOverflow(obj, &overflow); \n        \n\n        \n          \n             if (value == -1 && PyErr_Occurred()) { \n        \n\n        \n          \n               throw python_error(); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             if (overflow != 0) { \n        \n\n        \n          \n               throw std::runtime_error(\"Overflow when unpacking long\"); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             return (int64_t)value; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nhere's a minimal snippet:\nimport torch\na = torch.Tensor(5)\nprint(a)\nActually I don't quite understand the existing method, it's not numerical stable because some random float numbers may satisfy value == math.ceil(value) in python.", "body": "The original version doesn't work for `torch.Tensor`, it raises **Runtime Error: Overflow when unpacking long** from the C backend:\r\nhttps://github.com/pytorch/pytorch/blob/6204877cd44594541956d164e324642cae523d59/torch/csrc/utils/python_numbers.h#L48-L58\r\n\r\nhere's a minimal snippet:\r\n\r\n```python\r\nimport torch\r\na = torch.Tensor(5)\r\nprint(a)\r\n```\r\n\r\nActually I don't quite understand the existing method, it's not numerical stable because some random float numbers may satisfy `value == math.ceil(value)` in python."}