{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222460588", "pull_request_review_id": 161353217, "id": 222460588, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjQ2MDU4OA==", "diff_hunk": "@@ -18,7 +18,28 @@ std::pair<Device::Type, size_t> parse_type(const std::string& device_string) {\n   if (position != std::string::npos) {\n     return {Device::Type::CUDA, 4};\n   }\n-  AT_ERROR(\"Expected 'cpu' or 'cuda' device type at start of device string\");\n+  position = device_string.find(\"mkldnn\");", "path": "aten/src/ATen/core/Device.cpp", "position": null, "original_position": 5, "commit_id": "849bba4c25239d75e2bd10c7e8840b1e155758ec", "original_commit_id": "c45430a286b90fa71f4da39e7d33a483a74607ec", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I'm not a fan of this. This was fine when it was two strings, but now this whole function could be reduced by probably 75% if we use a map of some kind and a loop. Having to count the the length of the string we're looking for is also super fragile. Again, fine when two strings, but now this function warrants a rewrite", "created_at": "2018-10-03T20:42:37Z", "updated_at": "2018-11-23T15:52:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12293#discussion_r222460588", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12293", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222460588"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12293#discussion_r222460588"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12293"}}, "body_html": "<p>I'm not a fan of this. This was fine when it was two strings, but now this whole function could be reduced by probably 75% if we use a map of some kind and a loop. Having to count the the length of the string we're looking for is also super fragile. Again, fine when two strings, but now this function warrants a rewrite</p>", "body_text": "I'm not a fan of this. This was fine when it was two strings, but now this whole function could be reduced by probably 75% if we use a map of some kind and a loop. Having to count the the length of the string we're looking for is also super fragile. Again, fine when two strings, but now this function warrants a rewrite"}