{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205309396", "pull_request_review_id": 140554698, "id": 205309396, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMwOTM5Ng==", "diff_hunk": "@@ -0,0 +1,287 @@\n+#ifndef TH_GENERIC_FILE\n+#define TH_GENERIC_FILE \"generic/SpatialUpSamplingBicubic.c\"\n+#else\n+\n+#include \"linear_upsampling.h\"\n+\n+static inline void THNN_(SpatialUpSamplingBicubic_shapeCheck)\n+     (THTensor *input, THTensor *gradOutput,\n+      int nBatch, int nChannels,\n+      int input_height, int input_width,\n+      int output_height, int output_width) {\n+  THArgCheck(input_height > 0 && input_width > 0\n+\t     && output_height > 0 && output_width > 0, 2,\n+\t     \"input and output sizes should be greater than 0,\"\n+\t     \" but got input (H: %d, W: %d) output (H: %d, W: %d)\",\n+\t     input_height, input_width, output_height, output_width);\n+  if (input != NULL) {\n+    THNN_ARGCHECK(!input->is_empty() && input->dim() == 4, 2, input,\n+\t\t  \"non-empty 4D input tensor expected but got: %s\");\n+  }\n+\n+  if (gradOutput != NULL) {\n+    THNN_CHECK_DIM_SIZE(gradOutput, 4, 0, nBatch);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 4, 1, nChannels);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 4, 2, output_height);\n+    THNN_CHECK_DIM_SIZE(gradOutput, 4, 3, output_width);\n+  }\n+}\n+\n+static real access_tensor(real* data, int width, int height, int x, int y) {\n+  int access_x = std::max(std::min(x, width - 1), 0);\n+  int access_y = std::max(std::min(y, height - 1), 0);\n+  return data[access_y * width + access_x];\n+}\n+\n+static void inc_tensor(\n+  real* data,\n+  int width,\n+  int height,\n+  int x,\n+  int y,\n+  real value\n+) {\n+  int access_x = std::max(std::min(x, width - 1), 0);\n+  int access_y = std::max(std::min(y, height - 1), 0);\n+  data[access_y * width + access_x] += value;\n+}\n+\n+inline static real convolution1(real x, real A) {\n+  return ((A + 2) * x - (A + 3)) * x * x + 1;\n+}\n+\n+inline static real convolution2(real x, real A) {\n+  return ((A * x - 5 * A) * x + 8 * A) * x - 4 * A;\n+}\n+\n+static void THNN_(get_coefficients)(real coeffs[4], real t, int size) {", "path": "aten/src/THNN/generic/SpatialUpSamplingBicubic.c", "position": null, "original_position": 57, "commit_id": "54fcbba8e696cc10c0ab6ebd189e65f7d026b692", "original_commit_id": "e7ac9804da9af0b6bc96e1bbe71282ab01ec7fdc", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "inline this one?", "created_at": "2018-07-26T01:39:11Z", "updated_at": "2018-11-23T15:48:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/9849#discussion_r205309396", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9849", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205309396"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9849#discussion_r205309396"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9849"}}, "body_html": "<p>inline this one?</p>", "body_text": "inline this one?"}