{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168028667", "pull_request_review_id": 96329668, "id": 168028667, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODAyODY2Nw==", "diff_hunk": "@@ -34,23 +34,127 @@ using ListAttributeMap = std::unordered_map<\n     std::string,\n     std::pair<const std::vector<double>, std::string>>;\n \n+// Keep track of environment as we descend down nested control\n+// structures.\n+struct Environment {\n+  Environment(Block* b, std::shared_ptr<Environment> next = nullptr)\n+      : b(b), next(next) {}\n+\n+  std::vector<std::string> captured_inputs;\n+  ValueTable value_table;\n+  Block* b;\n+\n+  std::shared_ptr<Environment> next;\n+\n+  Value* findInThisFrame(const std::string& name) {\n+    if (value_table.count(name)) {\n+      return value_table.at(name);\n+    }\n+    return nullptr;\n+  }\n+\n+  Value* findInParentFrame(const std::string& name) {\n+    for (auto runner = next; runner; runner = runner->next) {\n+      if (runner->value_table.count(name)) {\n+        return runner->value_table.at(name);\n+      }\n+    }\n+    return nullptr;\n+  }\n+\n+  Value* createCapturedInput(const std::string& name) {\n+    // Create the input\n+    Value* new_input = b->addInput();\n+\n+    // Associate this name with this value\n+    value_table[name] = new_input;\n+\n+    // List as a positional input\n+    captured_inputs.push_back(name);\n+\n+    return new_input;\n+  }\n+\n+  Symbol getBlockOwningKind() {\n+    Symbol owning_kind = Symbol();\n+    if (b->owningNode()) {\n+      owning_kind = b->owningNode()->kind();\n+    }\n+    return owning_kind;\n+  }\n+\n+  void setVar(const std::string& name, Value* value) {\n+    if (!findInThisFrame(name) && findInParentFrame(name) &&\n+        getBlockOwningKind() == Symbol(\"Loop\"))\n+      createCapturedInput(name);\n+    value_table[name] = value;\n+  }\n+\n+  Value* getVar(const Ident& ident) {\n+    return getVar(ident.name(), ident);\n+  }\n+\n+  Value* getVar(const std::string& ident, const TreeView& tv) {\n+    Value* retval = findInThisFrame(ident);\n+\n+    if (!retval && (retval = findInParentFrame(ident)) &&\n+        getBlockOwningKind() == Symbol(\"Loop\"))", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 68, "commit_id": "05aff78887f37d6385bd2ed0962b5ac84ce6cf52", "original_commit_id": "a7e15a0f61f2cf2d27c900cb2bd947bd5eeb7f7b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This will involve a symbol lookup == a mutex lock at every invocation. Add `Loop` to the list of interned strings, and use `kLoop`", "created_at": "2018-02-13T22:51:32Z", "updated_at": "2018-11-23T15:39:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/5176#discussion_r168028667", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5176", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168028667"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5176#discussion_r168028667"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5176"}}, "body_html": "<p>This will involve a symbol lookup == a mutex lock at every invocation. Add <code>Loop</code> to the list of interned strings, and use <code>kLoop</code></p>", "body_text": "This will involve a symbol lookup == a mutex lock at every invocation. Add Loop to the list of interned strings, and use kLoop"}