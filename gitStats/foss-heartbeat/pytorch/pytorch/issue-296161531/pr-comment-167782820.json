{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167782820", "pull_request_review_id": 96049121, "id": 167782820, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzc4MjgyMA==", "diff_hunk": "@@ -72,14 +176,106 @@ struct to_ir {\n       }\n     }\n   }\n+\n+  std::shared_ptr<Environment> emitSingleIfBranch(\n+      Block* b,\n+      const List<TreeRef> branch,\n+      std::unordered_set<std::string>* mutated_parent_values) {\n+    environment_stack = std::make_shared<Environment>(b, environment_stack);\n+    WithInsertPoint guard(*def.graph, b);\n+    emitStatements(branch);\n+\n+    for (const auto& kv : environment_stack->value_table) {\n+      if (environment_stack->findInParentFrame(kv.first)) {\n+        mutated_parent_values->insert(kv.first);\n+      }\n+    }\n+    auto save_env = environment_stack;\n+    environment_stack = environment_stack->next;\n+    return save_env;\n+  }\n+\n   void emitIf(const If& stmt) {\n-    // TODO: add support for control flow ops\n-    throw ErrorReport(stmt) << \"Control flow is not supported yet.\";\n+    Value* cond_value = emitExpr(stmt.cond(), 1)[0];\n+\n+    Node* n = def.graph->insertNode(def.graph->create(Symbol(\"If\"), 0));\n+    n->addInput(cond_value);\n+    auto* true_block = n->addBlock();\n+    auto* false_block = n->addBlock();\n+\n+    // Emit both blocks once to get the union of all mutated values\n+    std::unordered_set<std::string> mutated_parent_values;\n+    std::shared_ptr<Environment> save_true, save_false;\n+    save_true = emitSingleIfBranch(\n+        true_block, static_cast<List<TreeRef>>(stmt.trueBranch()), &mutated_parent_values);\n+    save_false = emitSingleIfBranch(\n+        false_block, static_cast<List<TreeRef>>(stmt.falseBranch()), &mutated_parent_values);\n+\n+    std::vector<std::string> sorted_mutations(\n+        mutated_parent_values.begin(), mutated_parent_values.end());\n+    std::sort(sorted_mutations.begin(), sorted_mutations.end());\n+\n+    // Register outputs in each block\n+    environment_stack = save_true;\n+    for (const auto& x : sorted_mutations) {\n+      true_block->registerOutput(environment_stack->getVar(x, stmt));\n+    }\n+    environment_stack = save_false;\n+    for (const auto& x : sorted_mutations) {\n+      false_block->registerOutput(environment_stack->getVar(x, stmt));\n+    }\n+    environment_stack = environment_stack->next;\n+\n+    // Add op outputs\n+    for (const auto& x : sorted_mutations) {\n+      environment_stack->setVar(x, n->addOutput());\n+    }\n   }\n \n   void emitWhile(const While& stmt) {\n-    // TODO: add support for control flow ops\n-    throw ErrorReport(stmt) << \"Control flow is not supported yet.\";\n+    // TODO: scan outputs", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 199, "commit_id": "05aff78887f37d6385bd2ed0962b5ac84ce6cf52", "original_commit_id": "dcbcbf209931c18faa9006a2c9a837b3221cecae", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "The scan outputs spec in ONNX still seems pretty unclear to me.\r\n\r\n1. There's no example\r\n2. What are the dimensionality requirements for `scan_outputs`? (Most stringent: they have the same exact same size. Anything weaker?)\r\n\r\nI suppose a very clear way to define semantics is to give the algorithm for unrolling at any value of N.", "created_at": "2018-02-13T07:53:56Z", "updated_at": "2018-11-23T15:39:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/5176#discussion_r167782820", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5176", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167782820"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5176#discussion_r167782820"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5176"}}, "body_html": "<p>The scan outputs spec in ONNX still seems pretty unclear to me.</p>\n<ol>\n<li>There's no example</li>\n<li>What are the dimensionality requirements for <code>scan_outputs</code>? (Most stringent: they have the same exact same size. Anything weaker?)</li>\n</ol>\n<p>I suppose a very clear way to define semantics is to give the algorithm for unrolling at any value of N.</p>", "body_text": "The scan outputs spec in ONNX still seems pretty unclear to me.\n\nThere's no example\nWhat are the dimensionality requirements for scan_outputs? (Most stringent: they have the same exact same size. Anything weaker?)\n\nI suppose a very clear way to define semantics is to give the algorithm for unrolling at any value of N."}