{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167955588", "pull_request_review_id": 96247419, "id": 167955588, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzk1NTU4OA==", "diff_hunk": "@@ -0,0 +1,35 @@\n+graph(%lim : UNKNOWN_TYPE) {\n+  %1 : UNKNOWN_TYPE = Constant[value={1}]()\n+  %2 : UNKNOWN_TYPE = Constant[value={1}]()\n+  %3 : UNKNOWN_TYPE = Constant[value={1}]()\n+  %4 : UNKNOWN_TYPE = Constant[value={5}]()\n+  %5 : UNKNOWN_TYPE = Constant[value={3}]()\n+  %6 : UNKNOWN_TYPE = Constant[value={0}]()\n+  %7 : UNKNOWN_TYPE = Constant[value={0}]()\n+  %8 : UNKNOWN_TYPE = lt(%3, %lim)\n+  %34 : UNKNOWN_TYPE, %35 : UNKNOWN_TYPE, %36 : UNKNOWN_TYPE, %37 : UNKNOWN_TYPE, %38 : UNKNOWN_TYPE = Loop(%7, %8, %1, %2, %6, %4, %3)\n+    block0(%9 : UNKNOWN_TYPE, %10 : UNKNOWN_TYPE, %12 : UNKNOWN_TYPE, %25 : UNKNOWN_TYPE, %28 : UNKNOWN_TYPE) {\n+      %11 : UNKNOWN_TYPE = add[alpha={1}](%9, %10)\n+      %13 : UNKNOWN_TYPE = Constant[value={0}]()\n+      %14 : UNKNOWN_TYPE = Constant[value={0}]()\n+      %15 : UNKNOWN_TYPE = Constant[value={10}]()\n+      %16 : UNKNOWN_TYPE = lt(%13, %15)\n+      %26 : UNKNOWN_TYPE, %27 : UNKNOWN_TYPE = Loop(%14, %16, %25, %13)\n+        block0(%17 : UNKNOWN_TYPE, %20 : UNKNOWN_TYPE) {\n+          %18 : UNKNOWN_TYPE = Constant[value={2}]()\n+          %19 : UNKNOWN_TYPE = mul(%17, %18)\n+          %21 : UNKNOWN_TYPE = Constant[value={1}]()\n+          %22 : UNKNOWN_TYPE = add[alpha={1}](%20, %21)\n+          %23 : UNKNOWN_TYPE = Constant[value={10}]()\n+          %24 : UNKNOWN_TYPE = lt(%22, %23)\n+          -> (%24, %19, %22)\n+        }\n+      %29 : UNKNOWN_TYPE = add[alpha={1}](%28, %27)\n+      %31 : UNKNOWN_TYPE = add[alpha={1}](%29, %5)\n+      %33 : UNKNOWN_TYPE = lt(%31, %lim)\n+      -> (%33, %10, %11, %11, %26, %31)", "path": "test/expect/TestJit.test_script_fibb.expect", "position": null, "original_position": 30, "commit_id": "05aff78887f37d6385bd2ed0962b5ac84ce6cf52", "original_commit_id": "dcbcbf209931c18faa9006a2c9a837b3221cecae", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "There are currently no scan outputs implemented in this code. Here's a minimal version of this example:\r\n\r\n```\r\nfirst = 1\r\nsecond = 1\r\nthird = 0\r\ni = 0\r\nwhile i < 10:\r\n  third = first + second\r\n  first = second\r\n  second = third\r\n  i = i + 1\r\n```\r\n\r\nAfter initialization, we have our value table initialized like this, where vN is some unique value in the graph:\r\n\r\n```\r\nfirst -> v0\r\nsecond -> v1\r\nthird -> v2\r\n```\r\n\r\nThen we run `third = first + second`\r\n\r\n```\r\nfirst -> v0\r\nsecond -> v1\r\nthird -> v3\r\n```\r\n\r\nThen `first = second`\r\n\r\n```\r\nfirst -> v1\r\nsecond -> v1\r\nthird -> v3\r\n```\r\n\r\nThen `second = third`\r\n\r\n```\r\nfirst -> v1\r\nsecond -> v3\r\nthird -> v3\r\n```\r\n\r\nSo the two %11's you see here correspond to second and third aliasing the same values at the end of the iteration. Strictly, this example does not require three loop-carried dependencies for these three values, but it's easier to write it that way", "created_at": "2018-02-13T18:22:03Z", "updated_at": "2018-11-23T15:39:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/5176#discussion_r167955588", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5176", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167955588"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5176#discussion_r167955588"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5176"}}, "body_html": "<p>There are currently no scan outputs implemented in this code. Here's a minimal version of this example:</p>\n<pre><code>first = 1\nsecond = 1\nthird = 0\ni = 0\nwhile i &lt; 10:\n  third = first + second\n  first = second\n  second = third\n  i = i + 1\n</code></pre>\n<p>After initialization, we have our value table initialized like this, where vN is some unique value in the graph:</p>\n<pre><code>first -&gt; v0\nsecond -&gt; v1\nthird -&gt; v2\n</code></pre>\n<p>Then we run <code>third = first + second</code></p>\n<pre><code>first -&gt; v0\nsecond -&gt; v1\nthird -&gt; v3\n</code></pre>\n<p>Then <code>first = second</code></p>\n<pre><code>first -&gt; v1\nsecond -&gt; v1\nthird -&gt; v3\n</code></pre>\n<p>Then <code>second = third</code></p>\n<pre><code>first -&gt; v1\nsecond -&gt; v3\nthird -&gt; v3\n</code></pre>\n<p>So the two %11's you see here correspond to second and third aliasing the same values at the end of the iteration. Strictly, this example does not require three loop-carried dependencies for these three values, but it's easier to write it that way</p>", "body_text": "There are currently no scan outputs implemented in this code. Here's a minimal version of this example:\nfirst = 1\nsecond = 1\nthird = 0\ni = 0\nwhile i < 10:\n  third = first + second\n  first = second\n  second = third\n  i = i + 1\n\nAfter initialization, we have our value table initialized like this, where vN is some unique value in the graph:\nfirst -> v0\nsecond -> v1\nthird -> v2\n\nThen we run third = first + second\nfirst -> v0\nsecond -> v1\nthird -> v3\n\nThen first = second\nfirst -> v1\nsecond -> v1\nthird -> v3\n\nThen second = third\nfirst -> v1\nsecond -> v3\nthird -> v3\n\nSo the two %11's you see here correspond to second and third aliasing the same values at the end of the iteration. Strictly, this example does not require three loop-carried dependencies for these three values, but it's easier to write it that way", "in_reply_to_id": 167784540}