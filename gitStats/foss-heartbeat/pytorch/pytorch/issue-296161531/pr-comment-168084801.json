{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168084801", "pull_request_review_id": 96393784, "id": 168084801, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODA4NDgwMQ==", "diff_hunk": "@@ -1385,5 +1385,119 @@ def to_int(x) -> (y):\n         outputs = Variable(torch.IntTensor([1, 2]), requires_grad=True)\n         self.checkScript(script, 'to_int', [x], [outputs], False)\n \n+    def test_script_while(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_while(a, b) -> (c):\n+            while a < 10:\n+                a = a + 1\n+                b = b + 1\n+            c = a + b\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_while')))\n+\n+    def test_script_fibb(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_while(lim) -> (third):\n+            first = 1\n+            second = 1\n+            i = 1\n+            somenum = 5\n+            dontmutateme = 3\n+            third = 0 # TODO: python lexical scoping", "path": "test/test_jit.py", "position": 22, "original_position": 22, "commit_id": "05aff78887f37d6385bd2ed0962b5ac84ce6cf52", "original_commit_id": "dcbcbf209931c18faa9006a2c9a837b3221cecae", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "@zdevito had a good idea: let's do a simple data flow analysis to allow cases like:\r\n\r\n```\r\nif b:\r\n   foo = True\r\nelse:\r\n   foo = False\r\n```\r\n\r\nbut not allow\r\n\r\n```\r\nif b:\r\n   foo = ...\r\n# now cannot prove that foo is always defined\r\n```\r\n\r\nThen we can have Python-style semantics at the frontend, but not have to bake in the semantics at the core level, because there you never need to model unbound variable access (as we've ruled it impossible by dataflow analysis.)", "created_at": "2018-02-14T06:15:14Z", "updated_at": "2018-11-23T15:39:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/5176#discussion_r168084801", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5176", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168084801"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5176#discussion_r168084801"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5176"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> had a good idea: let's do a simple data flow analysis to allow cases like:</p>\n<pre><code>if b:\n   foo = True\nelse:\n   foo = False\n</code></pre>\n<p>but not allow</p>\n<pre><code>if b:\n   foo = ...\n# now cannot prove that foo is always defined\n</code></pre>\n<p>Then we can have Python-style semantics at the frontend, but not have to bake in the semantics at the core level, because there you never need to model unbound variable access (as we've ruled it impossible by dataflow analysis.)</p>", "body_text": "@zdevito had a good idea: let's do a simple data flow analysis to allow cases like:\nif b:\n   foo = True\nelse:\n   foo = False\n\nbut not allow\nif b:\n   foo = ...\n# now cannot prove that foo is always defined\n\nThen we can have Python-style semantics at the frontend, but not have to bake in the semantics at the core level, because there you never need to model unbound variable access (as we've ruled it impossible by dataflow analysis.)", "in_reply_to_id": 167780421}