{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167446075", "pull_request_review_id": 95666549, "id": 167446075, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzQ0NjA3NQ==", "diff_hunk": "@@ -1384,5 +1384,119 @@ def to_int(x) -> (y):\n         outputs = Variable(torch.IntTensor([1, 2]), requires_grad=True)\n         self.checkScript(script, 'to_int', [x], [outputs], False)\n \n+    def test_script_while(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_while(a, b) -> (c):\n+            while a < 10:\n+                a = a + 1\n+                b = b + 1\n+            c = a + b\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_while')))\n+\n+    def test_script_fibb(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_while(lim) -> (third):\n+            first = 1\n+            second = 1\n+            i = 1\n+            somenum = 5\n+            dontmutateme = 3\n+            third = 0 # TODO: python lexical scoping\n+            while i < lim:\n+                third = first + second\n+                first = second\n+                second = third\n+                j = 0\n+                while j < 10:\n+                    somenum = somenum * 2\n+                    j = j + 1\n+                i = i + j\n+                i = i + dontmutateme\n+\n+            st = second + third\n+            fs = first + second\n+\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_while')))\n+\n+    def test_script_if(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_if(a, b) -> (c):\n+            d = 3\n+            if a > 10:\n+                a = 3 + d\n+            else:\n+                b = 3 + d\n+                d = 4\n+            c = a + b\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_if')))\n+\n+    def test_script_if_noelse(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_if_noelse(a, b) -> (c):\n+            if a > 10:\n+                a = 3 + b\n+            c = a + b\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_if_noelse')))\n+\n+    def test_script_while_nonexistant_value(self):\n+        with self.assertRaisesRegex(RuntimeError, \"undefined value x\"):\n+            cu = torch.jit._jit_script_compile('''\n+            def test_while(a, b) -> (c):\n+                while a < 10:\n+                    a = a + x\n+                    b = b + 1\n+                c = a + b\n+            ''')\n+\n+    def test_script_while_nonexistant_cond_value(self):\n+        with self.assertRaisesRegex(RuntimeError, \"undefined value x\"):\n+            cu = torch.jit._jit_script_compile('''\n+            def test_while(a, b) -> (c):\n+                while a < x:\n+                    a = a + 1\n+                    b = b + 1\n+                c = a + b\n+            ''')\n+\n+    def test_script_while_write_outer_then_read(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_while(a, b) -> (c):\n+            while a < 10:\n+                a = a + 1\n+                b = a + 1\n+            c = a + b\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_while')))\n+\n+    def test_script_while_nest_if(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_while_if(a, b) -> (c):\n+            c = 0\n+            while a < 10:\n+                a = a + 1\n+                b = b + 1\n+                if a > b:\n+                    c = -a\n+                else:\n+                    c = -b\n+            c = c + 1\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_while_if')))\n+\n+    def test_script_if_nest_while(self):\n+        cu = torch.jit._jit_script_compile('''\n+        def test_if_while(a, b) -> (c):\n+            c = 0\n+            if a > b:\n+                while a > b:\n+                    b = b + 1\n+                    c = -b\n+        ''')\n+        self.assertExpected(str(cu.get_graph('test_if_while')))", "path": "test/test_jit.py", "position": 116, "original_position": 116, "commit_id": "05aff78887f37d6385bd2ed0962b5ac84ce6cf52", "original_commit_id": "c6a6d159564a9b1010e8bc6adb5aab6a94d13715", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "@apaszke yeah I don't like having all these expects but this PR is meant to break our chicken-and-egg problem wrt control flow in the front-end vs interpreter. Expect these expects to disappear once we have interpreter support", "created_at": "2018-02-11T19:29:07Z", "updated_at": "2018-11-23T15:39:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/5176#discussion_r167446075", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5176", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167446075"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5176#discussion_r167446075"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5176"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> yeah I don't like having all these expects but this PR is meant to break our chicken-and-egg problem wrt control flow in the front-end vs interpreter. Expect these expects to disappear once we have interpreter support</p>", "body_text": "@apaszke yeah I don't like having all these expects but this PR is meant to break our chicken-and-egg problem wrt control flow in the front-end vs interpreter. Expect these expects to disappear once we have interpreter support", "in_reply_to_id": 167427169}