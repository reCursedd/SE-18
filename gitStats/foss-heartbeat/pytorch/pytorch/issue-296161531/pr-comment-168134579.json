{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168134579", "pull_request_review_id": 96448987, "id": 168134579, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODEzNDU3OQ==", "diff_hunk": "@@ -72,14 +176,110 @@ struct to_ir {\n       }\n     }\n   }\n+\n+  std::shared_ptr<Environment> emitSingleIfBranch(\n+      Block* b,\n+      const List<Stmt> branch,\n+      std::unordered_set<std::string>* mutated_parent_values) {\n+    environment_stack = std::make_shared<Environment>(b, environment_stack);\n+    WithInsertPoint guard(*def.graph, b);\n+    emitStatements(branch);\n+\n+    for (const auto& kv : environment_stack->value_table) {\n+      if (environment_stack->findInParentFrame(kv.first)) {\n+        mutated_parent_values->insert(kv.first);\n+      }\n+    }\n+    auto save_env = environment_stack;\n+    environment_stack = environment_stack->next;\n+    return save_env;\n+  }\n+\n   void emitIf(const If& stmt) {\n-    // TODO: add support for control flow ops\n-    throw ErrorReport(stmt) << \"Control flow is not supported yet.\";\n+    Value* cond_value = emitExpr(stmt.cond(), 1)[0];\n+\n+    Node* n = def.graph->insertNode(def.graph->create(kIf, 0));\n+    n->addInput(cond_value);\n+    auto* true_block = n->addBlock();\n+    auto* false_block = n->addBlock();\n+\n+    // Emit both blocks once to get the union of all mutated values\n+    std::unordered_set<std::string> mutated_parent_values;\n+    auto save_true = emitSingleIfBranch(\n+        true_block, stmt.trueBranch(), &mutated_parent_values);\n+    auto save_false = emitSingleIfBranch(\n+        false_block, stmt.falseBranch(), &mutated_parent_values);\n+\n+    std::vector<std::string> sorted_mutations(\n+        mutated_parent_values.begin(), mutated_parent_values.end());\n+    std::sort(sorted_mutations.begin(), sorted_mutations.end());\n+\n+    // Register outputs in each block\n+    for (const auto& x : sorted_mutations) {\n+      true_block->registerOutput(save_true->getVar(x, stmt));\n+    }\n+    for (const auto& x : sorted_mutations) {\n+      false_block->registerOutput(save_false->getVar(x, stmt));\n+    }\n+\n+    // Add op outputs\n+    for (const auto& x : sorted_mutations) {\n+      environment_stack->setVar(x, n->addOutput());\n+    }\n   }\n \n   void emitWhile(const While& stmt) {\n-    // TODO: add support for control flow ops\n-    throw ErrorReport(stmt) << \"Control flow is not supported yet.\";\n+    // Emits a loop operators conforming to the semantics specified at\n+    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#experimental-loop\n+    // TODO: implement scan_outputs\n+\n+    Value* trip_count_dummy = emitConst(0, \"i\")[0];\n+    Value* cond_value = emitExpr(stmt.cond(), 1)[0];\n+\n+    Node* n = def.graph->insertNode(def.graph->create(kLoop, 0));\n+    n->addInput(trip_count_dummy);", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 213, "commit_id": "05aff78887f37d6385bd2ed0962b5ac84ce6cf52", "original_commit_id": "3d3c8d6f42f779a122372680bc15beb10fce20d8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "the fact that loops take the trip count as an input is really weird. Is that what ONNX does?", "created_at": "2018-02-14T10:34:48Z", "updated_at": "2018-11-23T15:39:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/5176#discussion_r168134579", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5176", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168134579"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5176#discussion_r168134579"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5176"}}, "body_html": "<p>the fact that loops take the trip count as an input is really weird. Is that what ONNX does?</p>", "body_text": "the fact that loops take the trip count as an input is really weird. Is that what ONNX does?"}