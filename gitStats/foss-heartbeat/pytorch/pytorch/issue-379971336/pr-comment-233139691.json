{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233139691", "pull_request_review_id": 174484699, "id": 233139691, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzEzOTY5MQ==", "diff_hunk": "@@ -1,257 +1,293 @@\n #include \"torch/csrc/jit/passes/create_autodiff_subgraphs.h\"\n \n-#include \"torch/csrc/jit/ir.h\"\n-#include \"torch/csrc/jit/autodiff.h\"\n #include \"torch/csrc/jit/assertions.h\"\n-#include \"torch/csrc/jit/dynamic_dag.h\"\n-\n-#include <cstddef>\n-#include <limits>\n-\n-namespace torch { namespace jit {\n+#include \"torch/csrc/jit/autodiff.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/passes/common_subexpression_elimination.h\"\n \n-struct Graph;\n+namespace torch {\n+namespace jit {\n \n namespace {\n \n-// Move nodes that exist in graph g into a 'group_node_kind' node.\n-// All inputs shared by the nodes become inputs to the new node.\n-// Outputs from 'nodes' are redirected to outputs of the new node,\n-// and the original nodes are removed.\n-// prereq: it is topologically valid to place the new node\n-// right before nodes[0] (i.e. it will not create cycles and all uses of\n-// new node will be after this position).\n-// prereq: nodes are in topological order\n-Node* mergeNodes(Block * block, Symbol group_node_kind, ArrayRef<Node*> nodes) {\n-  JIT_ASSERT(nodes.size() > 0);\n-  std::unordered_map<Value*, Value*> value_map;\n-  Graph * graph = block->owningGraph();\n-\n-  auto new_graph = std::make_shared<Graph>();\n-  Node * group_node = graph->create(group_node_kind, 0);\n-  group_node->g_(attr::Subgraph, new_graph);\n-\n-  auto getOrCreateInput = [&](Value * v) {\n-    if(value_map.count(v) > 0) {\n-      return value_map[v];\n-    }\n-    if (auto value = toIValue(v)) {\n-      Value * nv = new_graph->insertConstant(*value);\n-      value_map[v] = nv;\n-      return nv;\n+class SubgraphSlicer {\n+ public:\n+  SubgraphSlicer(Block* block, size_t minSubgraphSize)\n+      : block_(block), minSubgraphSize_(minSubgraphSize) {}\n+\n+  void run(std::vector<Node*>& diffGraphs) {\n+    bool any_changed = true;\n+    while (any_changed) {\n+      any_changed = false;\n+      for (auto it = block_->nodes().rbegin(); it != block_->nodes().rend();) {\n+        bool changed;\n+        std::tie(it, changed) = scanNode(*it);\n+        any_changed |= changed;\n+      }\n     }\n-    Value * nv = new_graph->addInput()->setType(v->type());\n-    group_node->addInput(v);\n-    value_map[v] = nv;\n-    return nv;\n-  };\n-  std::unordered_set<Node*> group_set(nodes.begin(), nodes.end());\n-  for(auto n : nodes) {\n-    auto nn = new_graph->appendNode(new_graph->createClone(n, getOrCreateInput));\n-    for(size_t i = 0; i < nn->outputs().size(); ++i) {\n-      auto old_output = n->outputs()[i];\n-      auto new_output = nn->outputs()[i];\n-      value_map[old_output] = new_output;\n-      std::vector<Use> to_replace;\n-      for(auto u : old_output->uses()) {\n-        // Uses within the set do not need to be made outputs\n-        if(group_set.count(u.user) > 0)\n-          continue;\n-        // Other uses do, but we\n-        // cannot replace them here or we invalid the uses list iterator\n-        to_replace.push_back(u);\n+\n+    auto curNode = *block_->nodes().rbegin();\n+    while (curNode != *block_->nodes().rend()) {\n+      for (auto subBlock : curNode->blocks()) {\n+        SubgraphSlicer(subBlock, minSubgraphSize_).run(diffGraphs);\n       }\n-      if(to_replace.size() > 0) {\n-        new_graph->registerOutput(new_output);\n-        Value * external_output = group_node->addOutput()->setType(old_output->type());\n-        for(auto u : to_replace) {\n-          u.user->replaceInput(u.offset, external_output);\n+\n+      // Save the previous node, since we might delete `curNode` in next block\n+      auto prevNode = curNode->prev();\n+      if (curNode->kind() == prim::DifferentiableGraph) {\n+        // Inlining nodes may cause some subexpression to come back in the\n+        // subgraphs (for example, copying constants in repeatedly will generate\n+        // redundant prim::Constants). Run CSE to clean them up.\n+        EliminateCommonSubexpression(*curNode->g(attr::Subgraph));\n+\n+        if (!inlineIfTooSmall(curNode)) {\n+          diffGraphs.push_back(curNode);\n         }\n       }\n+      curNode = prevNode;\n     }\n   }\n-  group_node->insertBefore(nodes[0]);\n-  // delete backward, so that nodes are use-free before deletion\n-  for(size_t i = nodes.size(); i > 0; --i) {\n-    nodes[i - 1]->destroy();\n+\n+ private:\n+  static Graph& getSubgraph(Node* n) {\n+    JIT_ASSERT(n->kind() == prim::DifferentiableGraph);\n+    return *n->g(attr::Subgraph);\n   }\n-  JIT_ASSERT(isDifferentiable(*new_graph));\n-  return group_node;\n-}\n \n-bool shouldConsiderForMerge(detail::Vertex<Node*>* v) {\n-  if (v->data.size() >= 2) {\n+  // Inline this node's group subgraph into the outer graph if it's smaller\n+  // than the specified minimum size.\n+  //\n+  // Returns true if an inlining has occured, false otherwise.\n+  bool inlineIfTooSmall(Node* n) {\n+    JIT_ASSERT(n->kind() == prim::DifferentiableGraph);\n+    auto& subgraph = getSubgraph(n);\n+    size_t i = 0;\n+    for (const auto node __attribute__((unused)) : subgraph.nodes()) {", "path": "torch/csrc/jit/passes/create_autodiff_subgraphs.cpp", "position": null, "original_position": 133, "commit_id": "30284b6e20001a239bf4139e9488d04af3e26e9d", "original_commit_id": "a61c86c7641b139c73e0401fa99e9bdf5cb3dbd2", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "body": "I should just use `size()`, turns out msvc doesn't support this attribute anyway.\r\n\r\nedit: I realized the reason why I did this was that nodes() doesn't have a size() method (it's a linked list). But anyway I need to get rid of the unused attr.", "created_at": "2018-11-13T17:12:49Z", "updated_at": "2018-11-23T15:54:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/13862#discussion_r233139691", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13862", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233139691"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13862#discussion_r233139691"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13862"}}, "body_html": "<p>I should just use <code>size()</code>, turns out msvc doesn't support this attribute anyway.</p>\n<p>edit: I realized the reason why I did this was that nodes() doesn't have a size() method (it's a linked list). But anyway I need to get rid of the unused attr.</p>", "body_text": "I should just use size(), turns out msvc doesn't support this attribute anyway.\nedit: I realized the reason why I did this was that nodes() doesn't have a size() method (it's a linked list). But anyway I need to get rid of the unused attr.", "in_reply_to_id": 233106942}