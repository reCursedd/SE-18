{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373605362", "html_url": "https://github.com/pytorch/pytorch/issues/5285#issuecomment-373605362", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5285", "id": 373605362, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzYwNTM2Mg==", "user": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-16T05:11:28Z", "updated_at": "2018-03-16T05:11:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4030626\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/EKami\">@EKami</a> first of all, sry to say that i didn't solve your problem from the bottom.<br>\ni believe you also need to update <a href=\"https://github.com/EKami/Torchlite/blob/showcase/memory-leak/examples/srgan.py#L75\">here</a> to enable CPU inference.</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-c\"><span class=\"pl-c\">#</span>ModelSaverCallback.restore_model([netG], saved_model_dir.absolute())</span>\n      load_with_cpu <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span> <span class=\"pl-k\">if</span> args.cuda <span class=\"pl-k\">else</span> <span class=\"pl-c1\">True</span>\n      ModelSaverCallback.restore_models([netG], saved_model_dir.absolute(), load_with_cpu)</pre></div>\n<p>Anyway, i ran <code>python srgan.py eval --on_cpu</code> and still the code hang inside mkldnn because of not enough memory. The reason is that mkldnn has several paths for convolution computation depending on input_channel and output_channel. Only output_channel equals to multiple of 16 will go for <code>direct</code> (small memory footprint) and <code>self.block_x3 = nn.Conv2d(64, 3, kernel_size=9, padding=4)</code> has a output channel of 3 which will go for <code>im2col</code> (very large footprint). And your input for block_x3 is <code>[1, 64, 808, 1152]</code> will take too much memory. We need to solve this from the root, probably going to take some time.</p>", "body_text": "@EKami first of all, sry to say that i didn't solve your problem from the bottom.\ni believe you also need to update here to enable CPU inference.\n    #ModelSaverCallback.restore_model([netG], saved_model_dir.absolute())\n      load_with_cpu = False if args.cuda else True\n      ModelSaverCallback.restore_models([netG], saved_model_dir.absolute(), load_with_cpu)\nAnyway, i ran python srgan.py eval --on_cpu and still the code hang inside mkldnn because of not enough memory. The reason is that mkldnn has several paths for convolution computation depending on input_channel and output_channel. Only output_channel equals to multiple of 16 will go for direct (small memory footprint) and self.block_x3 = nn.Conv2d(64, 3, kernel_size=9, padding=4) has a output channel of 3 which will go for im2col (very large footprint). And your input for block_x3 is [1, 64, 808, 1152] will take too much memory. We need to solve this from the root, probably going to take some time.", "body": "@EKami first of all, sry to say that i didn't solve your problem from the bottom.\r\ni believe you also need to update [here](https://github.com/EKami/Torchlite/blob/showcase/memory-leak/examples/srgan.py#L75) to enable CPU inference.\r\n```python\r\n    #ModelSaverCallback.restore_model([netG], saved_model_dir.absolute())\r\n      load_with_cpu = False if args.cuda else True\r\n      ModelSaverCallback.restore_models([netG], saved_model_dir.absolute(), load_with_cpu)\r\n```\r\nAnyway, i ran `python srgan.py eval --on_cpu` and still the code hang inside mkldnn because of not enough memory. The reason is that mkldnn has several paths for convolution computation depending on input_channel and output_channel. Only output_channel equals to multiple of 16 will go for `direct` (small memory footprint) and `self.block_x3 = nn.Conv2d(64, 3, kernel_size=9, padding=4)` has a output channel of 3 which will go for `im2col` (very large footprint). And your input for block_x3 is `[1, 64, 808, 1152]` will take too much memory. We need to solve this from the root, probably going to take some time."}