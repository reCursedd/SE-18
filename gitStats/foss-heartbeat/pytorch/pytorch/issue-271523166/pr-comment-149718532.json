{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149718532", "pull_request_review_id": 75156825, "id": 149718532, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTcxODUzMg==", "diff_hunk": "@@ -186,25 +218,47 @@ def __iter__(self):\n     def __iadd__(self, parameters):\n         return self.extend(parameters)\n \n-    def append(self, parameter):\n+    def append(self, parameter, prefix=None):\n         \"\"\"Appends a given parameter at the end of the list.\n \n         Arguments:\n             parameter (nn.Parameter): parameter to append\n         \"\"\"\n-        self.register_parameter(str(len(self)), parameter)\n+        if isinstance(parameter, tuple):\n+            k, parameter = parameter\n+            param_key = _addPrefix(str(k), prefix)\n+        else:\n+            param_key = _addPrefix(str(len(self)), prefix)\n+        self.register_parameter(param_key, parameter)\n         return self\n \n-    def extend(self, parameters):\n-        \"\"\"Appends parameters from a Python list at the end.\n+    def extend(self, parameters, prefix=None):\n+        \"\"\"Appends parameters from a Python iterable to the end of the list.\n \n         Arguments:\n-            parameters (list): list of parameters to append\n+            parameters (iterable): iterable of parameters to append\n         \"\"\"\n-        if not isinstance(parameters, list):\n-            raise TypeError(\"ParameterList.extend should be called with a \"\n-                            \"list, but got \" + type(parameters).__name__)\n+        if not isinstance(parameters, Iterable) or isinstance(parameters, str):\n+            raise TypeError(\"ParameterList.extend should be called with an \"\n+                            \"iterable, but got \" + type(parameters).__name__)\n         offset = len(self)\n         for i, param in enumerate(parameters):\n-            self.register_parameter(str(offset + i), param)\n+            if isinstance(param, tuple):\n+                k, param = param\n+                param_key = _addPrefix(str(k), prefix)\n+            else:\n+                param_key = _addPrefix(str(offset + i), prefix)\n+            self.register_parameter(param_key, param)\n         return self\n+\n+    def __repr__(self):\n+        tmpstr = self.__class__.__name__ + '(\\n'\n+        for k, p in self._parameters.items():\n+            size_str = 'x'.join(str(size) for size in p.size())\n+            device_str = '' if not p.is_cuda else \\\n+                ' (GPU {})'.format(p.get_device())\n+            parastr = '[Parameter ({}) of size {}{}]'.format(\n+                torch.typename(p.data), size_str, device_str)\n+            tmpstr = tmpstr + '  (' + k + '): ' + parastr + '\\n'", "path": "torch/nn/modules/container.py", "position": null, "original_position": 197, "commit_id": "387c862ce53ceb999a3f4d35527282b55274eeaa", "original_commit_id": "b60f981a7f71eefef2513b021f17e076a9d54120", "user": {"login": "dhpollack", "id": 368699, "node_id": "MDQ6VXNlcjM2ODY5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/368699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhpollack", "html_url": "https://github.com/dhpollack", "followers_url": "https://api.github.com/users/dhpollack/followers", "following_url": "https://api.github.com/users/dhpollack/following{/other_user}", "gists_url": "https://api.github.com/users/dhpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhpollack/subscriptions", "organizations_url": "https://api.github.com/users/dhpollack/orgs", "repos_url": "https://api.github.com/users/dhpollack/repos", "events_url": "https://api.github.com/users/dhpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/dhpollack/received_events", "type": "User", "site_admin": false}, "body": "Ok, do you mean like\r\n\r\n    ParameterList(\r\n      (0): Parameter containing: torch.FloatTensor of size 5x5\r\n      (1): Parameter containing: torch.FloatTensor of size 5x5\r\n    )\r\n\r\nor\r\n\r\n    ParameterList(\r\n      (0): Parameter containing:\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n      [torch.FloatTensor of size 5x5]\r\n\r\n      (1): Parameter containing:\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n       0  0  0  0  0\r\n      [torch.FloatTensor of size 5x5]\r\n    )\r\n\r\nI am assuming something like the first, but I just want to make sure.  I couldn't find a function that prints out both the size and type of a parameter, without printing out the tensor data as well.", "created_at": "2017-11-08T16:20:00Z", "updated_at": "2018-11-23T15:36:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/3505#discussion_r149718532", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3505", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149718532"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3505#discussion_r149718532"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3505"}}, "body_html": "<p>Ok, do you mean like</p>\n<pre><code>ParameterList(\n  (0): Parameter containing: torch.FloatTensor of size 5x5\n  (1): Parameter containing: torch.FloatTensor of size 5x5\n)\n</code></pre>\n<p>or</p>\n<pre><code>ParameterList(\n  (0): Parameter containing:\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n  [torch.FloatTensor of size 5x5]\n\n  (1): Parameter containing:\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n  [torch.FloatTensor of size 5x5]\n)\n</code></pre>\n<p>I am assuming something like the first, but I just want to make sure.  I couldn't find a function that prints out both the size and type of a parameter, without printing out the tensor data as well.</p>", "body_text": "Ok, do you mean like\nParameterList(\n  (0): Parameter containing: torch.FloatTensor of size 5x5\n  (1): Parameter containing: torch.FloatTensor of size 5x5\n)\n\nor\nParameterList(\n  (0): Parameter containing:\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n  [torch.FloatTensor of size 5x5]\n\n  (1): Parameter containing:\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n   0  0  0  0  0\n  [torch.FloatTensor of size 5x5]\n)\n\nI am assuming something like the first, but I just want to make sure.  I couldn't find a function that prints out both the size and type of a parameter, without printing out the tensor data as well.", "in_reply_to_id": 149703292}