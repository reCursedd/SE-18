{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149714800", "pull_request_review_id": 75152340, "id": 149714800, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTcxNDgwMA==", "diff_hunk": "@@ -115,27 +130,38 @@ def __iter__(self):\n     def __iadd__(self, modules):\n         return self.extend(modules)\n \n-    def append(self, module):\n-        r\"\"\"Appends a given module at the end of the list.\n+    def append(self, module, prefix=None):", "path": "torch/nn/modules/container.py", "position": null, "original_position": 59, "commit_id": "387c862ce53ceb999a3f4d35527282b55274eeaa", "original_commit_id": "b60f981a7f71eefef2513b021f17e076a9d54120", "user": {"login": "dhpollack", "id": 368699, "node_id": "MDQ6VXNlcjM2ODY5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/368699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhpollack", "html_url": "https://github.com/dhpollack", "followers_url": "https://api.github.com/users/dhpollack/followers", "following_url": "https://api.github.com/users/dhpollack/following{/other_user}", "gists_url": "https://api.github.com/users/dhpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhpollack/subscriptions", "organizations_url": "https://api.github.com/users/dhpollack/orgs", "repos_url": "https://api.github.com/users/dhpollack/repos", "events_url": "https://api.github.com/users/dhpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/dhpollack/received_events", "type": "User", "site_admin": false}, "body": "Yea, this is something I thought about for a while.  Right now the keys of the OrderedDict are used to maintain the ordering and thus other key names cannot be stored.  I used the data type structure itself to maintain the order and stored the original key values if available.  But this leads to the problem of possible duplicate keys, but only when using the named_modules/parameters functions. \r\n\r\nI added the prefix argument because if one adds more than a single set of named_modules(), often times there will be a module named \"0\" or \"1\" and that would overwrite any other previous module with those key values.\r\n\r\nSo regarding this I have two ideas:\r\n\r\n1) I could remove the prefix argument, but that will cause funny behavior if one adds more than one named_modules/parameters.\r\n\r\n2) I could remove the prefix argument AND the code for accepting named_modules/parameters() which loses the ability to maintain key names.\r\n\r\nOpen to other ideas too", "created_at": "2017-11-08T16:08:20Z", "updated_at": "2018-11-23T15:36:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/3505#discussion_r149714800", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3505", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149714800"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3505#discussion_r149714800"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3505"}}, "body_html": "<p>Yea, this is something I thought about for a while.  Right now the keys of the OrderedDict are used to maintain the ordering and thus other key names cannot be stored.  I used the data type structure itself to maintain the order and stored the original key values if available.  But this leads to the problem of possible duplicate keys, but only when using the named_modules/parameters functions.</p>\n<p>I added the prefix argument because if one adds more than a single set of named_modules(), often times there will be a module named \"0\" or \"1\" and that would overwrite any other previous module with those key values.</p>\n<p>So regarding this I have two ideas:</p>\n<ol>\n<li>\n<p>I could remove the prefix argument, but that will cause funny behavior if one adds more than one named_modules/parameters.</p>\n</li>\n<li>\n<p>I could remove the prefix argument AND the code for accepting named_modules/parameters() which loses the ability to maintain key names.</p>\n</li>\n</ol>\n<p>Open to other ideas too</p>", "body_text": "Yea, this is something I thought about for a while.  Right now the keys of the OrderedDict are used to maintain the ordering and thus other key names cannot be stored.  I used the data type structure itself to maintain the order and stored the original key values if available.  But this leads to the problem of possible duplicate keys, but only when using the named_modules/parameters functions.\nI added the prefix argument because if one adds more than a single set of named_modules(), often times there will be a module named \"0\" or \"1\" and that would overwrite any other previous module with those key values.\nSo regarding this I have two ideas:\n\n\nI could remove the prefix argument, but that will cause funny behavior if one adds more than one named_modules/parameters.\n\n\nI could remove the prefix argument AND the code for accepting named_modules/parameters() which loses the ability to maintain key names.\n\n\nOpen to other ideas too", "in_reply_to_id": 149702437}