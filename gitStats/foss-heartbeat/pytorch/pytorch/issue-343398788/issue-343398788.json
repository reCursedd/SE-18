{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9688", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9688/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9688/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9688/events", "html_url": "https://github.com/pytorch/pytorch/issues/9688", "id": 343398788, "node_id": "MDU6SXNzdWUzNDMzOTg3ODg=", "number": 9688, "title": "[BUG] Wrong gradient for slicings if parent nodes include undefined gradients ", "user": {"login": "c-hofer", "id": 28672615, "node_id": "MDQ6VXNlcjI4NjcyNjE1", "avatar_url": "https://avatars2.githubusercontent.com/u/28672615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-hofer", "html_url": "https://github.com/c-hofer", "followers_url": "https://api.github.com/users/c-hofer/followers", "following_url": "https://api.github.com/users/c-hofer/following{/other_user}", "gists_url": "https://api.github.com/users/c-hofer/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-hofer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-hofer/subscriptions", "organizations_url": "https://api.github.com/users/c-hofer/orgs", "repos_url": "https://api.github.com/users/c-hofer/repos", "events_url": "https://api.github.com/users/c-hofer/events{/privacy}", "received_events_url": "https://api.github.com/users/c-hofer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 466131885, "node_id": "MDU6TGFiZWw0NjYxMzE4ODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs%20discussion", "name": "needs discussion", "color": "cc317c", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-07-22T11:33:49Z", "updated_at": "2018-11-05T07:30:27Z", "closed_at": "2018-11-02T15:12:54Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>If we have a calculation graph where a node includes values with undefined gradients and we de-select<br>\nthose values, the resulting gradient is wrong.<br>\nLet <code>f</code> be a function not dependent on some input variable <code>x</code> then the corresponding differential<br>\n<code>df / dx = 0</code><br>\nE.g., let <code>f(x_1, x_2) = x_2</code> then <code>d f / d x_1 = 0</code>.</p>\n<p>However the following code snippet does not comply to this behavior:</p>\n<h2>Code example</h2>\n<pre><code>import torch\n\npoint = torch.tensor([0, 1], requires_grad=True, dtype=torch.float)\n\nx = point\nx = x.sqrt()\nl = x[1]\n\nl.backward()\n\npoint.grad\n</code></pre>\n<p>Which gives ...</p>\n<pre><code>tensor([   nan, 0.5000])\n</code></pre>\n<p>but I'd expect</p>\n<pre><code>tensor([ 0.0000, 0.5000])\n</code></pre>\n<h2>Additional info</h2>\n<p>If we select first and then do the operation which could lead to an undefined gradient<br>\nit works as expected:</p>\n<pre><code>import torch\n\npoint = torch.tensor([0, 1], requires_grad=True, dtype=torch.float)\n\nx = point\nx = x[1]\nx = x.sqrt()\n\nl = x\nl.backward()\n\npoint.grad\n</code></pre>\n<p>which gives</p>\n<pre><code>tensor([0.0000, 0.5000])\n</code></pre>\n<p>However in the use-case where this occurs this is not an option. It would be crucial that I can<br>\nprune the coordinates of the output to those where the gradient is defined and then use just those<br>\nin the differentiation.</p>\n<h2>System Info</h2>\n<pre><code>PyTorch version: 0.5.0a0+3799b10\nIs debug build: No\nCUDA used to build PyTorch: 9.2.148\n\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.11.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.2.148\nGPU models and configuration: \nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: GeForce GTX 1080 Ti\nGPU 3: GeForce GTX 1080 Ti\n\nNvidia driver version: 396.37\ncuDNN version: Probably one of the following:\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7.1.4\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.5)\n[pip] torch (0.5.0a0+3799b10)\n[conda] magma-cuda90              2.3.0                         1    pytorch\n[conda] torch                     0.5.0a0+3799b10           &lt;pip&gt;\n</code></pre>", "body_text": "Issue description\nIf we have a calculation graph where a node includes values with undefined gradients and we de-select\nthose values, the resulting gradient is wrong.\nLet f be a function not dependent on some input variable x then the corresponding differential\ndf / dx = 0\nE.g., let f(x_1, x_2) = x_2 then d f / d x_1 = 0.\nHowever the following code snippet does not comply to this behavior:\nCode example\nimport torch\n\npoint = torch.tensor([0, 1], requires_grad=True, dtype=torch.float)\n\nx = point\nx = x.sqrt()\nl = x[1]\n\nl.backward()\n\npoint.grad\n\nWhich gives ...\ntensor([   nan, 0.5000])\n\nbut I'd expect\ntensor([ 0.0000, 0.5000])\n\nAdditional info\nIf we select first and then do the operation which could lead to an undefined gradient\nit works as expected:\nimport torch\n\npoint = torch.tensor([0, 1], requires_grad=True, dtype=torch.float)\n\nx = point\nx = x[1]\nx = x.sqrt()\n\nl = x\nl.backward()\n\npoint.grad\n\nwhich gives\ntensor([0.0000, 0.5000])\n\nHowever in the use-case where this occurs this is not an option. It would be crucial that I can\nprune the coordinates of the output to those where the gradient is defined and then use just those\nin the differentiation.\nSystem Info\nPyTorch version: 0.5.0a0+3799b10\nIs debug build: No\nCUDA used to build PyTorch: 9.2.148\n\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.11.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.2.148\nGPU models and configuration: \nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: GeForce GTX 1080 Ti\nGPU 3: GeForce GTX 1080 Ti\n\nNvidia driver version: 396.37\ncuDNN version: Probably one of the following:\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7.1.4\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.5)\n[pip] torch (0.5.0a0+3799b10)\n[conda] magma-cuda90              2.3.0                         1    pytorch\n[conda] torch                     0.5.0a0+3799b10           <pip>", "body": "## Issue description\r\n\r\nIf we have a calculation graph where a node includes values with undefined gradients and we de-select \r\nthose values, the resulting gradient is wrong. \r\nLet `f` be a function not dependent on some input variable `x` then the corresponding differential \r\n`df / dx = 0`\r\nE.g., let `f(x_1, x_2) = x_2` then `d f / d x_1 = 0`. \r\n\r\nHowever the following code snippet does not comply to this behavior: \r\n\r\n## Code example\r\n```\r\nimport torch\r\n\r\npoint = torch.tensor([0, 1], requires_grad=True, dtype=torch.float)\r\n\r\nx = point\r\nx = x.sqrt()\r\nl = x[1]\r\n\r\nl.backward()\r\n\r\npoint.grad\r\n```\r\nWhich gives ... \r\n```\r\ntensor([   nan, 0.5000])\r\n```\r\nbut I'd expect\r\n```\r\ntensor([ 0.0000, 0.5000])\r\n```\r\n\r\n## Additional info \r\n\r\nIf we select first and then do the operation which could lead to an undefined gradient \r\nit works as expected:\r\n\r\n```\r\nimport torch\r\n\r\npoint = torch.tensor([0, 1], requires_grad=True, dtype=torch.float)\r\n\r\nx = point\r\nx = x[1]\r\nx = x.sqrt()\r\n\r\nl = x\r\nl.backward()\r\n\r\npoint.grad\r\n```\r\nwhich gives\r\n```\r\ntensor([0.0000, 0.5000])\r\n```\r\nHowever in the use-case where this occurs this is not an option. It would be crucial that I can \r\nprune the coordinates of the output to those where the gradient is defined and then use just those\r\nin the differentiation. \r\n\r\n## System Info\r\n```\r\nPyTorch version: 0.5.0a0+3799b10\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.2.148\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.11.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.2.148\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1080 Ti\r\nGPU 2: GeForce GTX 1080 Ti\r\nGPU 3: GeForce GTX 1080 Ti\r\n\r\nNvidia driver version: 396.37\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7.1.4\r\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.5)\r\n[pip] torch (0.5.0a0+3799b10)\r\n[conda] magma-cuda90              2.3.0                         1    pytorch\r\n[conda] torch                     0.5.0a0+3799b10           <pip>\r\n```\r\n\r\n"}