{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/325039259", "html_url": "https://github.com/pytorch/pytorch/issues/2517#issuecomment-325039259", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2517", "id": 325039259, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTAzOTI1OQ==", "user": {"login": "floringogianu", "id": 1670348, "node_id": "MDQ6VXNlcjE2NzAzNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1670348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/floringogianu", "html_url": "https://github.com/floringogianu", "followers_url": "https://api.github.com/users/floringogianu/followers", "following_url": "https://api.github.com/users/floringogianu/following{/other_user}", "gists_url": "https://api.github.com/users/floringogianu/gists{/gist_id}", "starred_url": "https://api.github.com/users/floringogianu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/floringogianu/subscriptions", "organizations_url": "https://api.github.com/users/floringogianu/orgs", "repos_url": "https://api.github.com/users/floringogianu/repos", "events_url": "https://api.github.com/users/floringogianu/events{/privacy}", "received_events_url": "https://api.github.com/users/floringogianu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-25T21:32:42Z", "updated_at": "2017-08-25T21:44:31Z", "author_association": "NONE", "body_html": "<p>OK so I narrowed it down to <code>torch.manual_seed</code> of all things. Here is a minimal script reproducing the issue.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">import</span> torch.multiprocessing <span class=\"pl-k\">as</span> mp\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">task</span>(<span class=\"pl-smi\">pid</span>, <span class=\"pl-smi\">model</span>):\n    x <span class=\"pl-k\">=</span> Variable(torch.rand(<span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">10</span>))\n    y <span class=\"pl-k\">=</span> model(x)\n    t <span class=\"pl-k\">=</span> y.clone() <span class=\"pl-k\">*</span> <span class=\"pl-c1\">0.99</span>\n    loss <span class=\"pl-k\">=</span> F.smooth_l1_loss(y, t)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> here it breaks</span>\n    loss.backward()\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Process <span class=\"pl-c1\">%d</span> finished<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> pid)\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> comment manual_seed and the CUDA initialization error is gone.</span>\n    torch.manual_seed(<span class=\"pl-c1\">23</span>)\n\n    net <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">4</span>)\n    net.share_memory()\n\n    processes <span class=\"pl-k\">=</span> []\n    <span class=\"pl-k\">for</span> pid <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">8</span>):\n        p <span class=\"pl-k\">=</span> mp.Process(<span class=\"pl-v\">target</span><span class=\"pl-k\">=</span>task, <span class=\"pl-v\">args</span><span class=\"pl-k\">=</span>(pid, net))\n        p.start()\n\n    <span class=\"pl-k\">for</span> p <span class=\"pl-k\">in</span> processes:\n        p.join()\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Done.<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>edit: this can be solved by setting <code>mp.set_start_method('spawn')</code> before setting the rng seed which in turn calls cuda. Although I am not sure it is ideal.</p>", "body_text": "OK so I narrowed it down to torch.manual_seed of all things. Here is a minimal script reproducing the issue.\nimport torch\nimport torch.nn as nn\nimport torch.multiprocessing as mp\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\n\n\ndef task(pid, model):\n    x = Variable(torch.rand(64, 10))\n    y = model(x)\n    t = y.clone() * 0.99\n    loss = F.smooth_l1_loss(y, t)\n\n    # here it breaks\n    loss.backward()\n\n    print(\"Process %d finished\" % pid)\n\n\nif __name__ == \"__main__\":\n\n    # comment manual_seed and the CUDA initialization error is gone.\n    torch.manual_seed(23)\n\n    net = nn.Linear(10, 4)\n    net.share_memory()\n\n    processes = []\n    for pid in range(8):\n        p = mp.Process(target=task, args=(pid, net))\n        p.start()\n\n    for p in processes:\n        p.join()\n\n    print(\"Done.\")\nedit: this can be solved by setting mp.set_start_method('spawn') before setting the rng seed which in turn calls cuda. Although I am not sure it is ideal.", "body": "OK so I narrowed it down to `torch.manual_seed` of all things. Here is a minimal script reproducing the issue.\r\n\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.multiprocessing as mp\r\nimport torch.nn.functional as F\r\nfrom torch.autograd import Variable\r\n\r\n\r\ndef task(pid, model):\r\n    x = Variable(torch.rand(64, 10))\r\n    y = model(x)\r\n    t = y.clone() * 0.99\r\n    loss = F.smooth_l1_loss(y, t)\r\n\r\n    # here it breaks\r\n    loss.backward()\r\n\r\n    print(\"Process %d finished\" % pid)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    # comment manual_seed and the CUDA initialization error is gone.\r\n    torch.manual_seed(23)\r\n\r\n    net = nn.Linear(10, 4)\r\n    net.share_memory()\r\n\r\n    processes = []\r\n    for pid in range(8):\r\n        p = mp.Process(target=task, args=(pid, net))\r\n        p.start()\r\n\r\n    for p in processes:\r\n        p.join()\r\n\r\n    print(\"Done.\")\r\n```\r\n\r\nedit: this can be solved by setting `mp.set_start_method('spawn')` before setting the rng seed which in turn calls cuda. Although I am not sure it is ideal."}