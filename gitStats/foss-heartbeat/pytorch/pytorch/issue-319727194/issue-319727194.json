{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7206", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7206/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7206/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7206/events", "html_url": "https://github.com/pytorch/pytorch/pull/7206", "id": 319727194, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg1NTcyNjYx", "number": 7206, "title": "Use Glog's implementation of STL logging when possible.", "user": {"login": "xkszltl", "id": 5203025, "node_id": "MDQ6VXNlcjUyMDMwMjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5203025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xkszltl", "html_url": "https://github.com/xkszltl", "followers_url": "https://api.github.com/users/xkszltl/followers", "following_url": "https://api.github.com/users/xkszltl/following{/other_user}", "gists_url": "https://api.github.com/users/xkszltl/gists{/gist_id}", "starred_url": "https://api.github.com/users/xkszltl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xkszltl/subscriptions", "organizations_url": "https://api.github.com/users/xkszltl/orgs", "repos_url": "https://api.github.com/users/xkszltl/repos", "events_url": "https://api.github.com/users/xkszltl/events{/privacy}", "received_events_url": "https://api.github.com/users/xkszltl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-05-02T22:00:15Z", "updated_at": "2018-05-31T04:59:38Z", "closed_at": "2018-05-31T04:10:27Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7206", "html_url": "https://github.com/pytorch/pytorch/pull/7206", "diff_url": "https://github.com/pytorch/pytorch/pull/7206.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7206.patch"}, "body_html": "<p>Inject custom workaround into namespace <code>std</code> so that it can be found by ADL.</p>\n<p>Both Visual Studio (if I remove <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/1d5780d42c53552fe66a54fda9ee84d3e5a88caa/caffe2/core/logging_is_google_glog.h#L11-L13\">pytorch/caffe2/core/logging_is_google_glog.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 11 to 13\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/1d5780d42c53552fe66a54fda9ee84d3e5a88caa\">1d5780d</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L11\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"11\"></td>\n          <td id=\"LC11\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">if</span> !defined(__CUDACC__) &amp;&amp; !defined(CAFFE2_USE_MINIMAL_GOOGLE_GLOG) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L12\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"12\"></td>\n          <td id=\"LC12\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>glog/stl_logging.h<span class=\"pl-pds\">&gt;</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L13\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"13\"></td>\n          <td id=\"LC13\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">else</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> !defined(__CUDACC__) &amp;&amp; !!defined(CAFFE2_USE_MINIMAL_GOOGLE_GLOG)</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n) and nvcc raise \"function not found\" errors if we keep these STL <code>&lt;&lt;</code> in global namespace.</p>\n<p>This is what glog does:<br>\n<a href=\"https://github.com/google/glog/blob/v0.3.5/src/glog/stl_logging.h.in#L218\">https://github.com/google/glog/blob/v0.3.5/src/glog/stl_logging.h.in#L218</a><br>\n<a href=\"https://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L105-L107\">https://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L105-L107</a><br>\n<a href=\"https://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L222\">https://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L222</a></p>\n<p>Technically speaking, extending std is undefined behavior.<br>\nBut haven't seen any compiler trying to turn this kind of UB into error.<br>\n<a href=\"http://en.cppreference.com/w/cpp/language/extending_std\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/extending_std</a></p>", "body_text": "Inject custom workaround into namespace std so that it can be found by ADL.\nBoth Visual Studio (if I remove \n  \n    \n      pytorch/caffe2/core/logging_is_google_glog.h\n    \n    \n        Lines 11 to 13\n      in\n      1d5780d\n    \n    \n    \n    \n\n        \n          \n           #if !defined(__CUDACC__) && !defined(CAFFE2_USE_MINIMAL_GOOGLE_GLOG) \n        \n\n        \n          \n           #include <glog/stl_logging.h> \n        \n\n        \n          \n           #else // !defined(__CUDACC__) && !!defined(CAFFE2_USE_MINIMAL_GOOGLE_GLOG) \n        \n    \n  \n\n) and nvcc raise \"function not found\" errors if we keep these STL << in global namespace.\nThis is what glog does:\nhttps://github.com/google/glog/blob/v0.3.5/src/glog/stl_logging.h.in#L218\nhttps://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L105-L107\nhttps://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L222\nTechnically speaking, extending std is undefined behavior.\nBut haven't seen any compiler trying to turn this kind of UB into error.\nhttp://en.cppreference.com/w/cpp/language/extending_std", "body": "Inject custom workaround into namespace `std` so that it can be found by ADL.\r\n\r\nBoth Visual Studio (if I remove https://github.com/pytorch/pytorch/blob/1d5780d42c53552fe66a54fda9ee84d3e5a88caa/caffe2/core/logging_is_google_glog.h#L11-L13) and nvcc raise \"function not found\" errors if we keep these STL `<<` in global namespace.\r\n\r\nThis is what glog does:\r\nhttps://github.com/google/glog/blob/v0.3.5/src/glog/stl_logging.h.in#L218\r\nhttps://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L105-L107\r\nhttps://github.com/google/glog/blob/v0.3.5/src/windows/glog/stl_logging.h#L222\r\n\r\nTechnically speaking, extending std is undefined behavior.\r\nBut haven't seen any compiler trying to turn this kind of UB into error.\r\nhttp://en.cppreference.com/w/cpp/language/extending_std"}