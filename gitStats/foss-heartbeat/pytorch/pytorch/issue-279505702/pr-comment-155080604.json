{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155080604", "pull_request_review_id": 81341330, "id": 155080604, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTA4MDYwNA==", "diff_hunk": "@@ -0,0 +1,53 @@\n+#include \"tensor_list.h\"\n+\n+#include \"torch/csrc/Exceptions.h\"\n+#include \"torch/csrc/utils/auto_gil.h\"\n+#include \"torch/csrc/utils/python_numbers.h\"\n+\n+using namespace at;\n+\n+namespace torch {\n+\n+static PyObject* toList(char* data, IntList sizes, IntList strides, int64_t dim,\n+                        ScalarType scalarType, int64_t elementSize)\n+{\n+  int64_t ndim = sizes.size();\n+  if (dim == ndim) {\n+    switch (scalarType) {\n+      case kByte: return THPUtils_packInt64(*(uint8_t*)data);\n+      case kChar: return THPUtils_packInt64(*(char*)data);\n+      case kShort: return THPUtils_packInt64(*(int16_t*)data);\n+      case kInt: return THPUtils_packInt64(*(int32_t*)data);\n+      case kLong: return THPUtils_packInt64(*(int64_t*)data);\n+      case kHalf: return PyFloat_FromDouble(at::convert<double, Half>(*(at::Half*)data));\n+      case kFloat: return PyFloat_FromDouble(*(float*)data);\n+      case kDouble: return PyFloat_FromDouble(*(double*)data);\n+      default: throw std::runtime_error(\"invalid type\");\n+    }\n+  }\n+  auto n = sizes[dim];\n+  auto list = THPObjectPtr(PyList_New(n));\n+  if (!list) throw python_error();\n+  for (int64_t i = 0; i < n; i++) {\n+    PyObject* obj = toList(data, sizes, strides, dim + 1, scalarType, elementSize);\n+    if (!obj) throw python_error();\n+    PyList_SET_ITEM(list.get(), i, obj);\n+    data += strides[dim] * elementSize;\n+  }\n+  return list.release();\n+}\n+\n+PyObject* THPUtils_tensorToList(const Tensor& tensor) {\n+  Tensor data = tensor;\n+  if (data.type().backend() != kCPU) {\n+    with_no_gil([&]() {\n+      data = data.toBackend(kCPU);", "path": "torch/csrc/utils/tensor_list.cpp", "position": 44, "original_position": 44, "commit_id": "6fa3d64baf9f1cbdc1fce5a39b29f873f39d9f84", "original_commit_id": "6fa3d64baf9f1cbdc1fce5a39b29f873f39d9f84", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I believe this makes the conversion much faster, because accessing individual elements in a cuda tensor is fairly slow", "created_at": "2017-12-05T21:27:27Z", "updated_at": "2018-11-23T15:37:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/4038#discussion_r155080604", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4038", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155080604"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4038#discussion_r155080604"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4038"}}, "body_html": "<p>I believe this makes the conversion much faster, because accessing individual elements in a cuda tensor is fairly slow</p>", "body_text": "I believe this makes the conversion much faster, because accessing individual elements in a cuda tensor is fairly slow", "in_reply_to_id": 155077919}