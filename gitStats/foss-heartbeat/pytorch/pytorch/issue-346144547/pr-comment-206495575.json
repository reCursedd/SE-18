{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206495575", "pull_request_review_id": 141916539, "id": 206495575, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTU3NQ==", "diff_hunk": "@@ -530,7 +530,7 @@\n - func: dot_out(Tensor result, Tensor self, Tensor tensor) -> Tensor\n   variants: function\n \n-- func: einsum(std::string equation, TensorList tensors) -> Tensor\n+- func: _einsum(std::string equation, TensorList tensors) -> Tensor", "path": "aten/src/ATen/native/native_functions.yaml", "position": null, "original_position": 5, "commit_id": "eaa3dd8387aafdc632f064ba4d77446c771550bb", "original_commit_id": "972c70f9a7755299fb6d44494a7523e1cadfca57", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure if the functionality I was thinking is available at this level, but it was possible at some point to expose a different python name than the C name of the function, similar to [what is present here](https://github.com/pytorch/pytorch/blob/master/tools/autograd/deprecated.yaml#L7-L8).\r\nSo I was thinking about keeping the ATen name `einsum`, and having this Python wrapper be called `_einsum`, so that the rest of the PR doesn't change.", "created_at": "2018-07-31T11:50:44Z", "updated_at": "2018-11-23T15:48:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/10067#discussion_r206495575", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10067", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206495575"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10067#discussion_r206495575"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10067"}}, "body_html": "<p>I'm not sure if the functionality I was thinking is available at this level, but it was possible at some point to expose a different python name than the C name of the function, similar to <a href=\"https://github.com/pytorch/pytorch/blob/master/tools/autograd/deprecated.yaml#L7-L8\">what is present here</a>.<br>\nSo I was thinking about keeping the ATen name <code>einsum</code>, and having this Python wrapper be called <code>_einsum</code>, so that the rest of the PR doesn't change.</p>", "body_text": "I'm not sure if the functionality I was thinking is available at this level, but it was possible at some point to expose a different python name than the C name of the function, similar to what is present here.\nSo I was thinking about keeping the ATen name einsum, and having this Python wrapper be called _einsum, so that the rest of the PR doesn't change.", "in_reply_to_id": 206491414}