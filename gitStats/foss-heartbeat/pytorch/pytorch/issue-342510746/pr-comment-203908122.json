{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203908122", "pull_request_review_id": 138893683, "id": 203908122, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzkwODEyMg==", "diff_hunk": "@@ -0,0 +1,371 @@\n+#include \"caffe2/onnx/onnxifi_transformer.h\"\n+\n+#include <iostream>\n+#include <unordered_set>\n+\n+#include <google/protobuf/text_format.h>\n+\n+#include \"caffe2/core/context.h\"\n+#include \"caffe2/core/logging.h\"\n+#include \"caffe2/core/operator.h\"\n+#include \"caffe2/core/tensor.h\"\n+#include \"caffe2/onnx/onnx_exporter.h\"\n+#include \"caffe2/opt/backend_cutting.h\"\n+\n+namespace caffe2 {\n+\n+namespace {\n+\n+// TODO(yinghai): Remove the awkward conversion between unordered_map and map\n+std::unordered_map<std::string, TensorShape> InferShapes(\n+    Workspace* ws,\n+    NetDef* pred_net,\n+    CaffeMap<std::string, TensorShape>* shape_hints_ordered) {\n+  // Populate shapes from workplace\n+  const std::vector<string>& ws_blobs = ws->Blobs();\n+  for (const auto& s : ws_blobs) {\n+    shape_hints_ordered->emplace(s, GetTensorShapeOfBlob(ws->GetBlob(s)));\n+  }\n+\n+  std::vector<NetDef*> nets;\n+  nets.emplace_back(pred_net);\n+  InferBlobShapesAndTypes(*shape_hints_ordered, nets);\n+  std::unordered_map<std::string, TensorShape> shape_hints;\n+  for (const auto& kv : *shape_hints_ordered) {\n+    shape_hints.emplace(kv.first, kv.second);\n+  }\n+\n+  return shape_hints;\n+}\n+\n+void DumpModel(const ::ONNX_NAMESPACE::ModelProto& model, const std::string& fname) {\n+  std::ofstream ff(fname);\n+  std::string body;\n+  ::google::protobuf::TextFormat::PrintToString(model.graph(), &body);\n+  ff << body << std::endl;\n+  ff.close();\n+}\n+\n+std::vector<::ONNX_NAMESPACE::ValueInfoProto> ConvertToValueInfo(\n+    const std::vector<std::string>& names,\n+    const std::unordered_map<std::string, TensorShape>& shape_hints) {\n+  std::vector<::ONNX_NAMESPACE::ValueInfoProto> r;\n+  for (const auto& s : names) {\n+    r.emplace_back();\n+    auto& value_info = r.back();\n+    value_info.set_name(s);\n+    const auto it = shape_hints.find(s);\n+    if (it == shape_hints.end()) {\n+      LOG(WARNING) << \"Cannot get shape of \" << s;\n+    } else {\n+      auto* tensor_type = value_info.mutable_type()->mutable_tensor_type();\n+      tensor_type->set_elem_type(\n+          ::ONNX_NAMESPACE::TensorProto_DataType::TensorProto_DataType_FLOAT);\n+      auto* shape = tensor_type->mutable_shape();\n+      for (int i = 0; i < it->second.dims().size(); ++i) {\n+        shape->add_dim()->set_dim_value(it->second.dims(i));\n+      }\n+    }\n+  }\n+  return r;\n+}\n+\n+void FillModelInfo(::ONNX_NAMESPACE::ModelProto* model) {\n+  model->set_ir_version(::ONNX_NAMESPACE::Version::IR_VERSION);\n+  model->set_producer_name(\"caffe2\");\n+  auto* opset_id = model->add_opset_import();\n+  opset_id->set_domain(\"\");\n+  opset_id->set_version(3);\n+}\n+} // namespace\n+\n+OnnxifiTransformer::OnnxifiTransformer(bool debug) : debug_(debug) {\n+  lib_ = onnx::initOnnxifiLibrary();\n+  CAFFE_ENFORCE(lib_, \"Cannot initialize ONNXIFI library\");\n+  CAFFE_ENFORCE_EQ(\n+      lib_->onnxGetBackendIDs(nullptr, &num_backends_), ONNXIFI_STATUS_FALLBACK);\n+  CAFFE_ENFORCE_GT(\n+      num_backends_, 0, \"At least 1 onnxifi backend should be available\");\n+  backend_ids_.resize(num_backends_);\n+  CAFFE_ENFORCE_EQ(\n+      lib_->onnxGetBackendIDs(backend_ids_.data(), &num_backends_),\n+      ONNXIFI_STATUS_SUCCESS);\n+}\n+\n+OperatorDef OnnxifiTransformer::BuildOnnxifiOp(\n+    const std::string& onnx_model_str,\n+    const std::unordered_map<std::string, std::vector<int>>& output_size_hints,\n+    const std::unordered_set<std::string>& initialization_list,\n+    const caffe2::NetDef& net) {\n+  OperatorDef op;\n+  op.set_type(\"Onnxifi\");\n+  auto* onnx_model_arg = op.add_arg();\n+  onnx_model_arg->set_name(\"onnx_model\");\n+  onnx_model_arg->set_s(onnx_model_str);\n+\n+  // Add the names of the initializer blobs that we want to fetch from the\n+  // workspace later\n+  auto* initializers_arg = op.add_arg();\n+  initializers_arg->set_name(\"initializers\");\n+  for (const auto& s : initialization_list) {\n+    initializers_arg->add_strings(s);\n+    initializers_arg->add_strings(input_mapping_.at(s));\n+  }\n+\n+  // Add the input/output\n+  for (const auto& input : net.external_input()) {\n+    if (!initialization_list.count(input)) {\n+      op.add_input(input);\n+    }\n+  }\n+  for (const auto& output : net.external_output()) {\n+    op.add_output(output);\n+  }\n+\n+  // Add output size hints\n+  for (int i = 0; i < op.output_size(); ++i) {\n+    const auto& o = op.output(i);\n+    const auto it = output_size_hints.find(o);\n+    if (it != output_size_hints.end()) {\n+      const auto& dims = it->second;\n+      auto* output_size_hint_arg = op.add_arg();\n+      output_size_hint_arg->set_name(MakeString(\"output_size_hint_\", i));\n+      for (const auto& d : dims) {\n+        output_size_hint_arg->add_ints(d);\n+      }\n+\n+      LOG(INFO) << \"Adding output hint: \" << o;", "path": "caffe2/onnx/onnxifi_transformer.cc", "position": null, "original_position": 137, "commit_id": "bcd44f8d733ba2703a40e9cbd823efcb67115750", "original_commit_id": "60b4564185daf7f45c20956e3ecaaa020bba9207", "user": {"login": "Maratyszcza", "id": 1093985, "node_id": "MDQ6VXNlcjEwOTM5ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1093985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maratyszcza", "html_url": "https://github.com/Maratyszcza", "followers_url": "https://api.github.com/users/Maratyszcza/followers", "following_url": "https://api.github.com/users/Maratyszcza/following{/other_user}", "gists_url": "https://api.github.com/users/Maratyszcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maratyszcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maratyszcza/subscriptions", "organizations_url": "https://api.github.com/users/Maratyszcza/orgs", "repos_url": "https://api.github.com/users/Maratyszcza/repos", "events_url": "https://api.github.com/users/Maratyszcza/events{/privacy}", "received_events_url": "https://api.github.com/users/Maratyszcza/received_events", "type": "User", "site_admin": false}, "body": "Looks like debug logging, remove?", "created_at": "2018-07-20T00:07:16Z", "updated_at": "2018-11-23T15:47:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/9569#discussion_r203908122", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9569", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203908122"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9569#discussion_r203908122"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9569"}}, "body_html": "<p>Looks like debug logging, remove?</p>", "body_text": "Looks like debug logging, remove?"}