{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/271226740", "html_url": "https://github.com/pytorch/pytorch/issues/415#issuecomment-271226740", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/415", "id": 271226740, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTIyNjc0MA==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-09T07:55:53Z", "updated_at": "2017-01-09T07:55:53Z", "author_association": "MEMBER", "body_html": "<p>yes, it raises an error now. you can check with a simple MNIST convnet:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Net</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Container</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Net, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.conv1 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">5</span>)\n        <span class=\"pl-c1\">self</span>.pool1 <span class=\"pl-k\">=</span> nn.MaxPool2d(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>)\n        <span class=\"pl-c1\">self</span>.conv2 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">5</span>)\n        <span class=\"pl-c1\">self</span>.pool2 <span class=\"pl-k\">=</span> nn.MaxPool2d(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>)\n        <span class=\"pl-c1\">self</span>.fc1   <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">320</span>, <span class=\"pl-c1\">50</span>)\n        <span class=\"pl-c1\">self</span>.fc2   <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">50</span>, <span class=\"pl-c1\">10</span>)\n        <span class=\"pl-c1\">self</span>.relu  <span class=\"pl-k\">=</span> nn.ReLU()\n        <span class=\"pl-c1\">self</span>.softmax <span class=\"pl-k\">=</span> nn.LogSoftmax()\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.relu(<span class=\"pl-c1\">self</span>.pool1(<span class=\"pl-c1\">self</span>.conv1(x)))\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.relu(<span class=\"pl-c1\">self</span>.pool2(<span class=\"pl-c1\">self</span>.conv2(x)))\n        x <span class=\"pl-k\">=</span> x.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">320</span>)\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.relu(<span class=\"pl-c1\">self</span>.fc1(x))\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.relu(<span class=\"pl-c1\">self</span>.fc2(x))\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.softmax(x)\n\nmodel <span class=\"pl-k\">=</span> Net()\n\n<span class=\"pl-k\">import</span> copy\n\nm2 <span class=\"pl-k\">=</span> copy.deepcopy(model)</pre></div>\n<pre><code>---------------------------------------------------------------------------\nNotImplementedError                       Traceback (most recent call last)\n&lt;ipython-input-7-4cf3c50bce8e&gt; in &lt;module&gt;()\n----&gt; 1 m2 = copy.deepcopy(model)\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\n    188                             raise Error(\n    189                                 \"un(deep)copyable object of type %s\" % cls)\n--&gt; 190                 y = _reconstruct(x, rv, 1, memo)\n    191\n    192     memo[d] = y\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\n    332     if state is not None:\n    333         if deep:\n--&gt; 334             state = deepcopy(state, memo)\n    335         if hasattr(y, '__setstate__'):\n    336             y.__setstate__(state)\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\n    161     copier = _deepcopy_dispatch.get(cls)\n    162     if copier:\n--&gt; 163         y = copier(x, memo)\n    164     else:\n    165         try:\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\n    255     memo[id(x)] = y\n    256     for key, value in x.iteritems():\n--&gt; 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\n    258     return y\n    259 d[dict] = _deepcopy_dict\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\n    170             y = _deepcopy_atomic(x, memo)\n    171         else:\n--&gt; 172             copier = getattr(x, \"__deepcopy__\", None)\n    173             if copier:\n    174                 y = copier(memo)\n\n/Users/soumith/code/pytorch/torch/nn/backends/backend.pyc in __getattr__(self, name)\n      7         fn = self.function_classes.get(name)\n      8         if fn is None:\n----&gt; 9             raise NotImplementedError\n     10         return fn\n     11\n\nNotImplementedError:\n</code></pre>", "body_text": "yes, it raises an error now. you can check with a simple MNIST convnet:\nclass Net(nn.Container):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(1, 10, 5)\n        self.pool1 = nn.MaxPool2d(2,2)\n        self.conv2 = nn.Conv2d(10, 20, 5)\n        self.pool2 = nn.MaxPool2d(2, 2)\n        self.fc1   = nn.Linear(320, 50)\n        self.fc2   = nn.Linear(50, 10)\n        self.relu  = nn.ReLU()\n        self.softmax = nn.LogSoftmax()\n\n    def forward(self, x):\n        x = self.relu(self.pool1(self.conv1(x)))\n        x = self.relu(self.pool2(self.conv2(x)))\n        x = x.view(-1, 320)\n        x = self.relu(self.fc1(x))\n        x = self.relu(self.fc2(x))\n        return self.softmax(x)\n\nmodel = Net()\n\nimport copy\n\nm2 = copy.deepcopy(model)\n---------------------------------------------------------------------------\nNotImplementedError                       Traceback (most recent call last)\n<ipython-input-7-4cf3c50bce8e> in <module>()\n----> 1 m2 = copy.deepcopy(model)\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\n    188                             raise Error(\n    189                                 \"un(deep)copyable object of type %s\" % cls)\n--> 190                 y = _reconstruct(x, rv, 1, memo)\n    191\n    192     memo[d] = y\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\n    332     if state is not None:\n    333         if deep:\n--> 334             state = deepcopy(state, memo)\n    335         if hasattr(y, '__setstate__'):\n    336             y.__setstate__(state)\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\n    161     copier = _deepcopy_dispatch.get(cls)\n    162     if copier:\n--> 163         y = copier(x, memo)\n    164     else:\n    165         try:\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\n    255     memo[id(x)] = y\n    256     for key, value in x.iteritems():\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\n    258     return y\n    259 d[dict] = _deepcopy_dict\n\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\n    170             y = _deepcopy_atomic(x, memo)\n    171         else:\n--> 172             copier = getattr(x, \"__deepcopy__\", None)\n    173             if copier:\n    174                 y = copier(memo)\n\n/Users/soumith/code/pytorch/torch/nn/backends/backend.pyc in __getattr__(self, name)\n      7         fn = self.function_classes.get(name)\n      8         if fn is None:\n----> 9             raise NotImplementedError\n     10         return fn\n     11\n\nNotImplementedError:", "body": "yes, it raises an error now. you can check with a simple MNIST convnet:\r\n\r\n```python\r\nclass Net(nn.Container):\r\n    def __init__(self):\r\n        super(Net, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 10, 5)\r\n        self.pool1 = nn.MaxPool2d(2,2)\r\n        self.conv2 = nn.Conv2d(10, 20, 5)\r\n        self.pool2 = nn.MaxPool2d(2, 2)\r\n        self.fc1   = nn.Linear(320, 50)\r\n        self.fc2   = nn.Linear(50, 10)\r\n        self.relu  = nn.ReLU()\r\n        self.softmax = nn.LogSoftmax()\r\n\r\n    def forward(self, x):\r\n        x = self.relu(self.pool1(self.conv1(x)))\r\n        x = self.relu(self.pool2(self.conv2(x)))\r\n        x = x.view(-1, 320)\r\n        x = self.relu(self.fc1(x))\r\n        x = self.relu(self.fc2(x))\r\n        return self.softmax(x)\r\n\r\nmodel = Net()\r\n\r\nimport copy\r\n\r\nm2 = copy.deepcopy(model)\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-7-4cf3c50bce8e> in <module>()\r\n----> 1 m2 = copy.deepcopy(model)\r\n\r\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191\r\n    192     memo[d] = y\r\n\r\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/soumith/anaconda/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    170             y = _deepcopy_atomic(x, memo)\r\n    171         else:\r\n--> 172             copier = getattr(x, \"__deepcopy__\", None)\r\n    173             if copier:\r\n    174                 y = copier(memo)\r\n\r\n/Users/soumith/code/pytorch/torch/nn/backends/backend.pyc in __getattr__(self, name)\r\n      7         fn = self.function_classes.get(name)\r\n      8         if fn is None:\r\n----> 9             raise NotImplementedError\r\n     10         return fn\r\n     11\r\n\r\nNotImplementedError:\r\n```"}