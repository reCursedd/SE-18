{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204869999", "pull_request_review_id": 140028872, "id": 204869999, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDg2OTk5OQ==", "diff_hunk": "@@ -31,27 +31,38 @@ static inline T* checked_cast_storage(Base* expr, const char * name, int pos) {\n }\n \n template <typename T, typename Base>\n-inline T* checked_cast_tensor(Base* expr, const char * name, int pos, bool allowNull) {\n+inline T* checked_cast_tensor(Base* expr, const char * name, int pos, bool allowNull, Backend backend, ScalarType scalar_type) {\n   if(allowNull && expr == UndefinedTensor::singleton()) {\n     return nullptr;\n   }\n-  if (typeid(*expr) != typeid(T))\n-    AT_ERROR(\"Expected object of type \", T::typeString(), \" but found type \", expr->type().toString(),\n+  if (expr->type().backend() != backend) {\n+    AT_ERROR(\"Expected object of backend \", backend, \" but got backend \", expr->type().backend(),\n+             \" for argument #\", pos, \" '\", name, \"'\");\n+  }\n+  if (expr->type().scalarType() != scalar_type) {\n+    AT_ERROR(\"Expected object of scalar type \", scalar_type, \" but got scalar type \", expr->type().scalarType(),\n              \" for argument #\", pos, \" '\", name, \"'\");\n+  }\n+  // This is going away soon; delete this when we remove the subtypes of\n+  // TensorImpl (so that we can eliminate the T template parameter)\n+  if (typeid(*expr) != typeid(T)) {\n+    AT_ERROR(\"Expected object of RAII type \", typeid(T).name(), \" but found type \", typeid(*expr).name(),\n+             \" for argument #\", pos, \" '\", name, \"'\");\n+  }\n   return static_cast<T*>(expr);\n }\n \n // Converts a TensorList (i.e. ArrayRef<Tensor> to the underlying TH* Tensor Pointer)\n template <typename T, typename TBase, typename TH>\n-static inline std::vector<TH*> tensor_list_checked_cast(ArrayRef<TBase> tensors, const char * name, int pos) {", "path": "aten/src/ATen/Utils.h", "position": 30, "original_position": 30, "commit_id": "0ef6b22f58a26c7fa94d79f8fd17abad847d895d", "original_commit_id": "4a3ef03f1a869f009108538c7a8b4ba387993cd9", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I'll need it soon, as soon as I get rid of the derived types I'll need the parameters because I won't have T available anymore.", "created_at": "2018-07-24T18:46:24Z", "updated_at": "2018-11-23T15:47:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/9764#discussion_r204869999", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9764", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204869999"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9764#discussion_r204869999"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9764"}}, "body_html": "<p>I'll need it soon, as soon as I get rid of the derived types I'll need the parameters because I won't have T available anymore.</p>", "body_text": "I'll need it soon, as soon as I get rid of the derived types I'll need the parameters because I won't have T available anymore.", "in_reply_to_id": 204865473}