{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/278072115", "html_url": "https://github.com/pytorch/pytorch/pull/695#issuecomment-278072115", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/695", "id": 278072115, "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODA3MjExNQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-07T17:20:51Z", "updated_at": "2017-02-07T17:20:51Z", "author_association": "MEMBER", "body_html": "<p>Not sure if it's a good idea. It's actually quite ambiguous. I understand that the <code>in</code> operator doesn't do the thing you want, but you normally never compare with <code>None</code> (except for the <code>is</code> operator).</p>\n<p>If you try that in numpy, it prints a deprecation warning, and the behaviour will be different than what you propose:</p>\n<pre><code>In [4]: q == None\n/usr/local/bin/ipython3:1: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.\n  #!/usr/local/opt/python3/bin/python3.5\nOut[4]: False\n\n</code></pre>", "body_text": "Not sure if it's a good idea. It's actually quite ambiguous. I understand that the in operator doesn't do the thing you want, but you normally never compare with None (except for the is operator).\nIf you try that in numpy, it prints a deprecation warning, and the behaviour will be different than what you propose:\nIn [4]: q == None\n/usr/local/bin/ipython3:1: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.\n  #!/usr/local/opt/python3/bin/python3.5\nOut[4]: False", "body": "Not sure if it's a good idea. It's actually quite ambiguous. I understand that the `in` operator doesn't do the thing you want, but you normally never compare with `None` (except for the `is` operator).\r\n\r\nIf you try that in numpy, it prints a deprecation warning, and the behaviour will be different than what you propose:\r\n```\r\nIn [4]: q == None\r\n/usr/local/bin/ipython3:1: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.\r\n  #!/usr/local/opt/python3/bin/python3.5\r\nOut[4]: False\r\n\r\n```"}