{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/695", "id": 105046624, "node_id": "MDExOlB1bGxSZXF1ZXN0MTA1MDQ2NjI0", "html_url": "https://github.com/pytorch/pytorch/pull/695", "diff_url": "https://github.com/pytorch/pytorch/pull/695.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/695.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/695", "number": 695, "state": "closed", "locked": false, "title": "Allow Tensor to be compared to non-tensor types (like None) via __eq__ and __ne__ ", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "body": "Hi, \r\n\r\nI currently ran into the following problem when trying to build my own `collate_fn` for a `torch.utils.data.DataLoader`.  For example, when loading data over the network it sometimes fails and my `Dataset` returns a tuple where one of the elements is `None` (depending if the input or target failed). I wanted to write a collate function to remove the data that failed to load by filtering as follows:\r\n\r\n```python\r\nimport torch\r\nfrom torch.utils.data.dataloader import default_collate\r\ndummy_tensor = torch.Tensor(5)\r\n\r\ndummy_batch = [(dummy_tensor, dummy_tensor), (None, dummy_tensor)]\r\n\r\ndef filter_out_failed_data(batch):\r\n    return default_collate(list(filter(lambda x: None not in x, batch)))\r\n```\r\n\r\nHowever, this does not work as you cannot compare a tensor with `None` via the equality check (`==`) and returns the following error:\r\n\r\n```python\r\nTypeError: eq received an invalid combination of arguments - got (NoneType), but expected one of:\r\n * (float value)\r\n      didn't match because some of the arguments have invalid types: (NoneType)\r\n * (torch.FloatTensor other)\r\n      didn't match because some of the arguments have invalid types: (NoneType)\r\n```\r\n\r\nThis PR is a patch to allow:\r\n```python\r\ndummy_tensor == None >> False\r\ndummy_tensor != None >> True\r\n```\r\n\r\n\r\n", "created_at": "2017-02-07T16:50:15Z", "updated_at": "2017-02-07T18:15:44Z", "closed_at": "2017-02-07T18:15:44Z", "merged_at": null, "merge_commit_sha": "1a5b3d42785d8d0041131196fd46dfc5c191fed3", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/695/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/695/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/695/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/04589ca0b0f065ea7fe88b92d052cc6d1384f719", "head": {"label": "alykhantejani:allow_tensor__eq__to_work_with_other_types", "ref": "allow_tensor__eq__to_work_with_other_types", "sha": "04589ca0b0f065ea7fe88b92d052cc6d1384f719", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "repo": {"id": 79654426, "node_id": "MDEwOlJlcG9zaXRvcnk3OTY1NDQyNg==", "name": "pytorch", "full_name": "alykhantejani/pytorch", "private": false, "owner": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/alykhantejani/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/alykhantejani/pytorch", "forks_url": "https://api.github.com/repos/alykhantejani/pytorch/forks", "keys_url": "https://api.github.com/repos/alykhantejani/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/alykhantejani/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/alykhantejani/pytorch/teams", "hooks_url": "https://api.github.com/repos/alykhantejani/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/alykhantejani/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/alykhantejani/pytorch/events", "assignees_url": "https://api.github.com/repos/alykhantejani/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/alykhantejani/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/alykhantejani/pytorch/tags", "blobs_url": "https://api.github.com/repos/alykhantejani/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/alykhantejani/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/alykhantejani/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/alykhantejani/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/alykhantejani/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/alykhantejani/pytorch/languages", "stargazers_url": "https://api.github.com/repos/alykhantejani/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/alykhantejani/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/alykhantejani/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/alykhantejani/pytorch/subscription", "commits_url": "https://api.github.com/repos/alykhantejani/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/alykhantejani/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/alykhantejani/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/alykhantejani/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/alykhantejani/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/alykhantejani/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/alykhantejani/pytorch/merges", "archive_url": "https://api.github.com/repos/alykhantejani/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/alykhantejani/pytorch/downloads", "issues_url": "https://api.github.com/repos/alykhantejani/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/alykhantejani/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/alykhantejani/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/alykhantejani/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/alykhantejani/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/alykhantejani/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/alykhantejani/pytorch/deployments", "created_at": "2017-01-21T15:37:18Z", "updated_at": "2017-01-21T15:37:23Z", "pushed_at": "2018-01-02T16:07:22Z", "git_url": "git://github.com/alykhantejani/pytorch.git", "ssh_url": "git@github.com:alykhantejani/pytorch.git", "clone_url": "https://github.com/alykhantejani/pytorch.git", "svn_url": "https://github.com/alykhantejani/pytorch", "homepage": "http://pytorch.org", "size": 24965, "stargazers_count": 0, "watchers_count": 0, "language": "Python", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "c54597e0b2262713426f06c402e0e0d28fe60209", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2196, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/695"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/695"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/695"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/695/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/695/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/695/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/04589ca0b0f065ea7fe88b92d052cc6d1384f719"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,</p>\n<p>I currently ran into the following problem when trying to build my own <code>collate_fn</code> for a <code>torch.utils.data.DataLoader</code>.  For example, when loading data over the network it sometimes fails and my <code>Dataset</code> returns a tuple where one of the elements is <code>None</code> (depending if the input or target failed). I wanted to write a collate function to remove the data that failed to load by filtering as follows:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.utils.data.dataloader <span class=\"pl-k\">import</span> default_collate\ndummy_tensor <span class=\"pl-k\">=</span> torch.Tensor(<span class=\"pl-c1\">5</span>)\n\ndummy_batch <span class=\"pl-k\">=</span> [(dummy_tensor, dummy_tensor), (<span class=\"pl-c1\">None</span>, dummy_tensor)]\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">filter_out_failed_data</span>(<span class=\"pl-smi\">batch</span>):\n    <span class=\"pl-k\">return</span> default_collate(<span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">filter</span>(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: <span class=\"pl-c1\">None</span> <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> x, batch)))</pre></div>\n<p>However, this does not work as you cannot compare a tensor with <code>None</code> via the equality check (<code>==</code>) and returns the following error:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">TypeError</span>: eq received an invalid combination of arguments <span class=\"pl-k\">-</span> got (NoneType), but expected one of:\n <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">float</span> value)\n      didn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t match because some of the arguments have invalid types: (NoneType)<span class=\"pl-ii\"></span></span>\n <span class=\"pl-k\">*</span> (torch.FloatTensor other)\n      didn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t match because some of the arguments have invalid types: (NoneType)<span class=\"pl-ii\"></span></span></pre></div>\n<p>This PR is a patch to allow:</p>\n<div class=\"highlight highlight-source-python\"><pre>dummy_tensor <span class=\"pl-k\">==</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-c1\">False</span>\ndummy_tensor <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-c1\">True</span></pre></div>", "body_text": "Hi,\nI currently ran into the following problem when trying to build my own collate_fn for a torch.utils.data.DataLoader.  For example, when loading data over the network it sometimes fails and my Dataset returns a tuple where one of the elements is None (depending if the input or target failed). I wanted to write a collate function to remove the data that failed to load by filtering as follows:\nimport torch\nfrom torch.utils.data.dataloader import default_collate\ndummy_tensor = torch.Tensor(5)\n\ndummy_batch = [(dummy_tensor, dummy_tensor), (None, dummy_tensor)]\n\ndef filter_out_failed_data(batch):\n    return default_collate(list(filter(lambda x: None not in x, batch)))\nHowever, this does not work as you cannot compare a tensor with None via the equality check (==) and returns the following error:\nTypeError: eq received an invalid combination of arguments - got (NoneType), but expected one of:\n * (float value)\n      didn't match because some of the arguments have invalid types: (NoneType)\n * (torch.FloatTensor other)\n      didn't match because some of the arguments have invalid types: (NoneType)\nThis PR is a patch to allow:\ndummy_tensor == None >> False\ndummy_tensor != None >> True", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 3, "review_comments": 0, "maintainer_can_modify": false, "commits": 1, "additions": 2, "deletions": 2, "changed_files": 1}