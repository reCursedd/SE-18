{"url": "https://api.github.com/repos/pytorch/pytorch/issues/695", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/695/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/695/events", "html_url": "https://github.com/pytorch/pytorch/pull/695", "id": 205948708, "node_id": "MDExOlB1bGxSZXF1ZXN0MTA1MDQ2NjI0", "number": 695, "title": "Allow Tensor to be compared to non-tensor types (like None) via __eq__ and __ne__ ", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-07T16:50:15Z", "updated_at": "2017-02-07T18:15:44Z", "closed_at": "2017-02-07T18:15:44Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/695", "html_url": "https://github.com/pytorch/pytorch/pull/695", "diff_url": "https://github.com/pytorch/pytorch/pull/695.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/695.patch"}, "body_html": "<p>Hi,</p>\n<p>I currently ran into the following problem when trying to build my own <code>collate_fn</code> for a <code>torch.utils.data.DataLoader</code>.  For example, when loading data over the network it sometimes fails and my <code>Dataset</code> returns a tuple where one of the elements is <code>None</code> (depending if the input or target failed). I wanted to write a collate function to remove the data that failed to load by filtering as follows:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.utils.data.dataloader <span class=\"pl-k\">import</span> default_collate\ndummy_tensor <span class=\"pl-k\">=</span> torch.Tensor(<span class=\"pl-c1\">5</span>)\n\ndummy_batch <span class=\"pl-k\">=</span> [(dummy_tensor, dummy_tensor), (<span class=\"pl-c1\">None</span>, dummy_tensor)]\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">filter_out_failed_data</span>(<span class=\"pl-smi\">batch</span>):\n    <span class=\"pl-k\">return</span> default_collate(<span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">filter</span>(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: <span class=\"pl-c1\">None</span> <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> x, batch)))</pre></div>\n<p>However, this does not work as you cannot compare a tensor with <code>None</code> via the equality check (<code>==</code>) and returns the following error:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">TypeError</span>: eq received an invalid combination of arguments <span class=\"pl-k\">-</span> got (NoneType), but expected one of:\n <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">float</span> value)\n      didn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t match because some of the arguments have invalid types: (NoneType)<span class=\"pl-ii\"></span></span>\n <span class=\"pl-k\">*</span> (torch.FloatTensor other)\n      didn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t match because some of the arguments have invalid types: (NoneType)<span class=\"pl-ii\"></span></span></pre></div>\n<p>This PR is a patch to allow:</p>\n<div class=\"highlight highlight-source-python\"><pre>dummy_tensor <span class=\"pl-k\">==</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-c1\">False</span>\ndummy_tensor <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-c1\">True</span></pre></div>", "body_text": "Hi,\nI currently ran into the following problem when trying to build my own collate_fn for a torch.utils.data.DataLoader.  For example, when loading data over the network it sometimes fails and my Dataset returns a tuple where one of the elements is None (depending if the input or target failed). I wanted to write a collate function to remove the data that failed to load by filtering as follows:\nimport torch\nfrom torch.utils.data.dataloader import default_collate\ndummy_tensor = torch.Tensor(5)\n\ndummy_batch = [(dummy_tensor, dummy_tensor), (None, dummy_tensor)]\n\ndef filter_out_failed_data(batch):\n    return default_collate(list(filter(lambda x: None not in x, batch)))\nHowever, this does not work as you cannot compare a tensor with None via the equality check (==) and returns the following error:\nTypeError: eq received an invalid combination of arguments - got (NoneType), but expected one of:\n * (float value)\n      didn't match because some of the arguments have invalid types: (NoneType)\n * (torch.FloatTensor other)\n      didn't match because some of the arguments have invalid types: (NoneType)\nThis PR is a patch to allow:\ndummy_tensor == None >> False\ndummy_tensor != None >> True", "body": "Hi, \r\n\r\nI currently ran into the following problem when trying to build my own `collate_fn` for a `torch.utils.data.DataLoader`.  For example, when loading data over the network it sometimes fails and my `Dataset` returns a tuple where one of the elements is `None` (depending if the input or target failed). I wanted to write a collate function to remove the data that failed to load by filtering as follows:\r\n\r\n```python\r\nimport torch\r\nfrom torch.utils.data.dataloader import default_collate\r\ndummy_tensor = torch.Tensor(5)\r\n\r\ndummy_batch = [(dummy_tensor, dummy_tensor), (None, dummy_tensor)]\r\n\r\ndef filter_out_failed_data(batch):\r\n    return default_collate(list(filter(lambda x: None not in x, batch)))\r\n```\r\n\r\nHowever, this does not work as you cannot compare a tensor with `None` via the equality check (`==`) and returns the following error:\r\n\r\n```python\r\nTypeError: eq received an invalid combination of arguments - got (NoneType), but expected one of:\r\n * (float value)\r\n      didn't match because some of the arguments have invalid types: (NoneType)\r\n * (torch.FloatTensor other)\r\n      didn't match because some of the arguments have invalid types: (NoneType)\r\n```\r\n\r\nThis PR is a patch to allow:\r\n```python\r\ndummy_tensor == None >> False\r\ndummy_tensor != None >> True\r\n```\r\n\r\n\r\n"}