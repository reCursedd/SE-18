{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/362629915", "html_url": "https://github.com/pytorch/pytorch/issues/4987#issuecomment-362629915", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4987", "id": 362629915, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjYyOTkxNQ==", "user": {"login": "malbergo", "id": 6062598, "node_id": "MDQ6VXNlcjYwNjI1OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6062598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbergo", "html_url": "https://github.com/malbergo", "followers_url": "https://api.github.com/users/malbergo/followers", "following_url": "https://api.github.com/users/malbergo/following{/other_user}", "gists_url": "https://api.github.com/users/malbergo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbergo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbergo/subscriptions", "organizations_url": "https://api.github.com/users/malbergo/orgs", "repos_url": "https://api.github.com/users/malbergo/repos", "events_url": "https://api.github.com/users/malbergo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbergo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-02T16:12:52Z", "updated_at": "2018-02-02T16:12:52Z", "author_association": "NONE", "body_html": "<p>Thanks for looking into this <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4556044\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stonesjtu\">@Stonesjtu</a>. I have this problem however with the exact example given by PyTorch. My custom dataloader and dataset are below.</p>\n<p>Definition for loading function:</p>\n<p>`</p>\n<pre><code> def load_physics_data(filename1, filename2):\n\n    f1 = h5py.File('/home/chris/Documents/MPhilProjects/GANs/delphes-gans/' + filename1, 'r')\n\n    f2 = h5py.File('/home/chris/Documents/MPhilProjects/GANs/delphes-gans/' + filename2, 'r')\n\n    #These return shape (num_images x image_dim=64 x image_dim=64)\n    data1 = np.asarray(f1['1'])\n    data2 = np.asarray(f2['1'])\n    data = np.concatenate((data1,data2),0)\n    #data_reshape = data.reshape(data.shape[0], data.shape[1] * data.shape[2])\n    return\n</code></pre>\n<p>Then loading the data:</p>\n<pre><code>if opt.dataset == 'physics':\n    data = load_physics_data('3million64', \"2million64\")\n    data = torch.Tensor(data[:,np.newaxis,:,:])\n    print(type(data))\n    labels = torch.Tensor(np.zeros(data.shape[0]))\n    print(type(labels))\n    dataset = torch.utils.data.TensorDataset(data, labels)\n    dataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize)\n\n</code></pre>\n<p><strong>Here</strong> are the ones supplied in the PyTorch example:</p>\n<pre><code>if opt.dataset in ['imagenet', 'folder', 'lfw']:\n    # folder dataset\n    dataset = dset.ImageFolder(root=opt.dataroot,\n                               transform=transforms.Compose([\n                                   transforms.Resize(opt.imageSize),\n                                   transforms.CenterCrop(opt.imageSize),\n                                   transforms.ToTensor(),\n                                   transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n                               ]))\n\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize,\n                                       shuffle=True, num_workers=int(opt.workers))\n</code></pre>", "body_text": "Thanks for looking into this @Stonesjtu. I have this problem however with the exact example given by PyTorch. My custom dataloader and dataset are below.\nDefinition for loading function:\n`\n def load_physics_data(filename1, filename2):\n\n    f1 = h5py.File('/home/chris/Documents/MPhilProjects/GANs/delphes-gans/' + filename1, 'r')\n\n    f2 = h5py.File('/home/chris/Documents/MPhilProjects/GANs/delphes-gans/' + filename2, 'r')\n\n    #These return shape (num_images x image_dim=64 x image_dim=64)\n    data1 = np.asarray(f1['1'])\n    data2 = np.asarray(f2['1'])\n    data = np.concatenate((data1,data2),0)\n    #data_reshape = data.reshape(data.shape[0], data.shape[1] * data.shape[2])\n    return\n\nThen loading the data:\nif opt.dataset == 'physics':\n    data = load_physics_data('3million64', \"2million64\")\n    data = torch.Tensor(data[:,np.newaxis,:,:])\n    print(type(data))\n    labels = torch.Tensor(np.zeros(data.shape[0]))\n    print(type(labels))\n    dataset = torch.utils.data.TensorDataset(data, labels)\n    dataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize)\n\n\nHere are the ones supplied in the PyTorch example:\nif opt.dataset in ['imagenet', 'folder', 'lfw']:\n    # folder dataset\n    dataset = dset.ImageFolder(root=opt.dataroot,\n                               transform=transforms.Compose([\n                                   transforms.Resize(opt.imageSize),\n                                   transforms.CenterCrop(opt.imageSize),\n                                   transforms.ToTensor(),\n                                   transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n                               ]))\n\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize,\n                                       shuffle=True, num_workers=int(opt.workers))", "body": "Thanks for looking into this @Stonesjtu. I have this problem however with the exact example given by PyTorch. My custom dataloader and dataset are below.\r\n\r\nDefinition for loading function:\r\n\r\n`\r\n```\r\n def load_physics_data(filename1, filename2):\r\n\r\n    f1 = h5py.File('/home/chris/Documents/MPhilProjects/GANs/delphes-gans/' + filename1, 'r')\r\n\r\n    f2 = h5py.File('/home/chris/Documents/MPhilProjects/GANs/delphes-gans/' + filename2, 'r')\r\n\r\n    #These return shape (num_images x image_dim=64 x image_dim=64)\r\n    data1 = np.asarray(f1['1'])\r\n    data2 = np.asarray(f2['1'])\r\n    data = np.concatenate((data1,data2),0)\r\n    #data_reshape = data.reshape(data.shape[0], data.shape[1] * data.shape[2])\r\n    return\r\n```\r\n\r\nThen loading the data:\r\n\r\n```\r\nif opt.dataset == 'physics':\r\n    data = load_physics_data('3million64', \"2million64\")\r\n    data = torch.Tensor(data[:,np.newaxis,:,:])\r\n    print(type(data))\r\n    labels = torch.Tensor(np.zeros(data.shape[0]))\r\n    print(type(labels))\r\n    dataset = torch.utils.data.TensorDataset(data, labels)\r\n    dataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize)\r\n\r\n```\r\n\r\n\r\n**Here** are the ones supplied in the PyTorch example:\r\n\r\n\r\n```\r\nif opt.dataset in ['imagenet', 'folder', 'lfw']:\r\n    # folder dataset\r\n    dataset = dset.ImageFolder(root=opt.dataroot,\r\n                               transform=transforms.Compose([\r\n                                   transforms.Resize(opt.imageSize),\r\n                                   transforms.CenterCrop(opt.imageSize),\r\n                                   transforms.ToTensor(),\r\n                                   transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\r\n                               ]))\r\n\r\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize,\r\n                                       shuffle=True, num_workers=int(opt.workers))\r\n```"}