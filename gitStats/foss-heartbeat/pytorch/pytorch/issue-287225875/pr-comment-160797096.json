{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160797096", "pull_request_review_id": 87971091, "id": 160797096, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDc5NzA5Ng==", "diff_hunk": "@@ -182,52 +181,62 @@ def is_differentiable(arg):\n         differentiable_outputs = differentiable_outputs[:1]\n \n     requires_derivative = (\n-        name not in DONT_REQUIRE_DERIVATIVE and\n+        base_name not in DONT_REQUIRE_DERIVATIVE and\n         len(differentiable_inputs) > 0 and len(differentiable_outputs) > 0 and\n         strategy == 'use_derived')\n \n     if func is not None and not requires_derivative:\n         print('WARNING: derivative ignored for {}'.format(name), file=sys.stderr)\n \n     def setup_derivative():\n+        def error_msg():\n+            name = declaration['api_name']\n+            return '\"the derivative for {} is not implemented\"'.format(name)\n+\n+        args_with_derivatives = find_args_with_derivatives()\n+\n         env = {}\n-        body = []\n+        env['args_with_derivatives'] = reference_args(args_with_derivatives)\n+        env['op'] = func['op'] if func is not None else 'Error'\n+        env['op_ctor'] = '' if func is not None else error_msg()\n \n-        tensor_args = [arg for arg in arguments if arg['simple_type'] in {'Tensor', 'TensorList'}]\n-        tensor_arg_names = [arg['name'] for arg in tensor_args]\n-        args_with_derivatives = (\n-            tensor_arg_names if func is None else\n-            find_args_with_derivatives(tensor_arg_names))\n-        body.extend(emit_check_no_requires_grad(tensor_args, args_with_derivatives))\n+        setup = []\n+        setup.extend(emit_check_output_args())\n+        setup.extend(ASSIGN_GRAD_FN.substitute(env).split('\\n'))\n         if func is not None:\n-            env['op'] = func['op']\n-            env['op_ctor'] = ''\n-            env['save_inputs'] = save_variables(func['saved_inputs'], False)\n-            env['args_with_derivatives'] = args_with_derivatives\n-        else:\n-            env['op'] = 'Error'\n-            env['op_ctor'] = '\"the derivative for {} is not implemented\"'.format(declaration['api_name'])\n-            env['save_inputs'] = []\n-            env['args_with_derivatives'] = tensor_arg_names\n-        body.append(SETUP_DERIVATIVE.substitute(env))\n+            setup.extend(save_variables(func['saved_inputs'], False))\n+\n+        body = []\n+        body.extend(emit_check_no_requires_grad(differentiable_inputs, args_with_derivatives))\n+        body.append(SETUP_DERIVATIVE.substitute(env, setup=setup))\n         return body\n \n-    def find_args_with_derivatives(tensor_arg_names):\n+    def emit_check_output_args():\n+        if not is_out_fn:\n+            return []\n+        name = declaration['name']\n+        args = [arg['name'] for arg in differentiable_outputs]\n+        args = '{ ' + ', '.join(args) + ' }'\n+        return ['check_output_args(\"{}\", {});'.format(name, args)]\n+\n+    def find_args_with_derivatives():\n         \"\"\"Find arguments that have derivative definitions\"\"\"\n+        if func is None:", "path": "tools/autograd/gen_variable_type.py", "position": null, "original_position": 133, "commit_id": "c7b63bd434ccce40348954794518030282ff0ddc", "original_commit_id": "2ff436294709b07373c384c6624382cf7dc9fe19", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "when does this come up?", "created_at": "2018-01-10T21:01:44Z", "updated_at": "2018-11-23T15:38:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/4565#discussion_r160797096", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4565", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160797096"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4565#discussion_r160797096"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4565"}}, "body_html": "<p>when does this come up?</p>", "body_text": "when does this come up?"}