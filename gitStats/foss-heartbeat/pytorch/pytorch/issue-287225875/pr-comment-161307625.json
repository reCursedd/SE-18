{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161307625", "pull_request_review_id": 88579505, "id": 161307625, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTMwNzYyNQ==", "diff_hunk": "@@ -57,11 +79,11 @@\n PY_VARIABLE_METHOD_DEF = CodeTemplate(\"\"\"\\\n {\"${name}\", (PyCFunction)${pycname}, ${flags}, NULL},\"\"\")\n \n-UNPACK_ARG = CodeTemplate(\"\"\"\\\n-${formal_arg} = ${actual};\"\"\")\n-\n UNPACK_SELF = \"auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\"\n \n+FUNCTION_PROTOTYPE = CodeTemplate(\"\"\"\\", "path": "tools/autograd/gen_python_functions.py", "position": null, "original_position": 66, "commit_id": "c7b63bd434ccce40348954794518030282ff0ddc", "original_commit_id": "2ff436294709b07373c384c6624382cf7dc9fe19", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This isn't quite a C++ function prototype or a C++ type signature. The names and default values are important here, which isn't true of C++ signatures.\r\n\r\nMostly I've been calling these things prototypes since we're using \"signature\" to refer to the string we compute to find matching declarations in Declarations.yaml.", "created_at": "2018-01-12T19:33:19Z", "updated_at": "2018-11-23T15:38:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/4565#discussion_r161307625", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4565", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161307625"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4565#discussion_r161307625"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4565"}}, "body_html": "<p>This isn't quite a C++ function prototype or a C++ type signature. The names and default values are important here, which isn't true of C++ signatures.</p>\n<p>Mostly I've been calling these things prototypes since we're using \"signature\" to refer to the string we compute to find matching declarations in Declarations.yaml.</p>", "body_text": "This isn't quite a C++ function prototype or a C++ type signature. The names and default values are important here, which isn't true of C++ signatures.\nMostly I've been calling these things prototypes since we're using \"signature\" to refer to the string we compute to find matching declarations in Declarations.yaml.", "in_reply_to_id": 160799607}