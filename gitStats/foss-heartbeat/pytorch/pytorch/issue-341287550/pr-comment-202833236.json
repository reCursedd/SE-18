{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202833236", "pull_request_review_id": 137607504, "id": 202833236, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgzMzIzNg==", "diff_hunk": "@@ -0,0 +1,52 @@\n+from numbers import Number\n+import math\n+import torch\n+from torch.distributions import constraints\n+from torch.distributions.uniform import Uniform\n+from torch.distributions.transformed_distribution import TransformedDistribution\n+from torch.distributions.transforms import AffineTransform, ExpTransform, PowerTransform\n+from torch.distributions.utils import _finfo, broadcast_all\n+from torch.distributions.gumbel import euler_constant\n+\n+\n+class Weibull(TransformedDistribution):\n+    r\"\"\"\n+    Samples from a two-parameter Weibull distribution.\n+\n+    Example:\n+\n+        >>> m = Weibull(torch.tensor([1.0]), torch.tensor([1.0]))\n+        >>> m.sample()  # sample from a Weibull distribution with scale=1, shape=1\n+        tensor([ 0.4784])\n+\n+    Args:\n+        scale (float or Tensor): Scale parameter of distribution (lambda).\n+        shape (float or Tensor): Shape parameter of distribution (k).\n+    \"\"\"\n+    arg_constraints = {'scale': constraints.positive, 'shape': constraints.positive}\n+    support = constraints.positive\n+\n+    def __init__(self, scale, shape, validate_args=None):\n+        self.scale, self.shape = broadcast_all(scale, shape)\n+        finfo = _finfo(self.scale)\n+        if isinstance(scale, Number) and isinstance(shape, Number):\n+            batch_shape = torch.Size()\n+            base_dist = Uniform(finfo.tiny, 1 - finfo.eps)\n+        else:\n+            batch_shape = self.scale.size()\n+            base_dist = Uniform(self.scale.new(self.scale.size()).fill_(finfo.tiny), 1 - finfo.eps)\n+        transforms = [ExpTransform().inv, AffineTransform(loc=0, scale=-1),\n+                      PowerTransform(exponent=self.shape.reciprocal()), AffineTransform(loc=0, scale=self.scale)]\n+        super(Weibull, self).__init__(base_dist, transforms, validate_args=validate_args)\n+\n+    @property\n+    def mean(self):\n+        return self.scale * torch.exp(torch.lgamma(1 + self.shape.reciprocal()))\n+\n+    @property\n+    def variance(self):\n+        return self.scale.pow(2) * (torch.exp(torch.lgamma(1 + 2 * self.shape.reciprocal())) -\n+                                    torch.exp(2 * torch.lgamma(1 + self.shape.reciprocal())))\n+\n+    def entropy(self):\n+        return euler_constant * (1 - self.shape.reciprocal()) + torch.log(self.scale * self.shape.reciprocal()) + 1", "path": "torch/distributions/weibull.py", "position": null, "original_position": 52, "commit_id": "b85dd4803e7f166e1f2d368c18f5fb941c1e9694", "original_commit_id": "7e3eeb9d8ba006411c85aecc438d120b8f85c170", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "That's ok, if we cache `self.shape_reciprocal` then this code can remain `torch.log(self.scale * self.shape_reciprocal)`", "created_at": "2018-07-16T21:39:46Z", "updated_at": "2018-11-23T15:47:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/9454#discussion_r202833236", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9454", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202833236"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9454#discussion_r202833236"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9454"}}, "body_html": "<p>That's ok, if we cache <code>self.shape_reciprocal</code> then this code can remain <code>torch.log(self.scale * self.shape_reciprocal)</code></p>", "body_text": "That's ok, if we cache self.shape_reciprocal then this code can remain torch.log(self.scale * self.shape_reciprocal)", "in_reply_to_id": 202830697}