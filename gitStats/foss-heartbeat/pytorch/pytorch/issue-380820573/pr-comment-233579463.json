{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233579463", "pull_request_review_id": 175027948, "id": 233579463, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzU3OTQ2Mw==", "diff_hunk": "@@ -2,58 +2,80 @@\n \n // ${generated_comment}\n \n-#include <torch/csrc/autograd/variable.h>\n-#include <torch/csrc/jit/tracer.h>\n #include <ATen/ATen.h>\n #include <ATen/core/ArrayRef.h>\n+#include <torch/csrc/autograd/variable.h>\n+#include <torch/csrc/jit/tracer.h>\n \n #include <functional>\n #include <initializer_list>\n #include <utility>\n \n namespace torch {\n \n-#define TENSOR(T, S, _1)                                                    \\\n-  inline at::Tensor tensor(                                                 \\\n-      at::ArrayRef<T> values, const at::TensorOptions& options) {           \\\n-    at::Tensor result = at::tensor(values, at::TensorOptions(options).is_variable(false)); \\\n-    return autograd::make_variable(result, options.requires_grad());        \\\n-  }                                                                         \\\n-  inline at::Tensor tensor(                                                 \\\n-      std::initializer_list<T> values, const at::TensorOptions& options) {  \\\n-    return torch::tensor(at::ArrayRef<T>(values), options);                 \\\n-  }                                                                         \\\n-  inline at::Tensor tensor(T value, const at::TensorOptions& options) {     \\\n-    return torch::tensor(at::ArrayRef<T>(value), options);                  \\\n-  }                                                                         \\\n-  inline at::Tensor tensor(at::ArrayRef<T> values) {                        \\\n-    return torch::tensor(std::move(values), at::dtype(at::k##S));           \\\n-  }                                                                         \\\n-  inline at::Tensor tensor(std::initializer_list<T> values) {               \\\n-    return torch::tensor(at::ArrayRef<T>(values));                          \\\n-  }                                                                         \\\n-  inline at::Tensor tensor(T value) {                                       \\\n-    return torch::tensor(at::ArrayRef<T>(value));                           \\\n+#define TENSOR(T, S, _1)                                                   \\\n+  inline at::Tensor tensor(                                                \\\n+      at::ArrayRef<T> values, const at::TensorOptions& options) {          \\\n+    at::Tensor result =                                                    \\\n+        at::tensor(values, at::TensorOptions(options).is_variable(false)); \\\n+    return autograd::make_variable(result, options.requires_grad());       \\\n+  }                                                                        \\\n+  inline at::Tensor tensor(                                                \\\n+      std::initializer_list<T> values, const at::TensorOptions& options) { \\\n+    return torch::tensor(at::ArrayRef<T>(values), options);                \\\n+  }                                                                        \\\n+  inline at::Tensor tensor(T value, const at::TensorOptions& options) {    \\\n+    return torch::tensor(at::ArrayRef<T>(value), options);                 \\\n+  }                                                                        \\\n+  inline at::Tensor tensor(at::ArrayRef<T> values) {                       \\\n+    return torch::tensor(std::move(values), at::dtype(at::k##S));          \\\n+  }                                                                        \\\n+  inline at::Tensor tensor(std::initializer_list<T> values) {              \\\n+    return torch::tensor(at::ArrayRef<T>(values));                         \\\n+  }                                                                        \\\n+  inline at::Tensor tensor(T value) {                                      \\\n+    return torch::tensor(at::ArrayRef<T>(value));                          \\\n   }\n AT_FORALL_SCALAR_TYPES_EXCEPT_HALF(TENSOR)\n #undef TENSOR\n \n+inline at::Tensor from_blob(\n+    void* data,\n+    at::IntList sizes,\n+    at::IntList strides,\n+    const std::function<void(void*)>& deleter,\n+    const at::TensorOptions& options = {}) {\n+  return at::from_blob(\n+      data, sizes, strides, deleter, options.is_variable(true));\n+}\n+\n+inline at::Tensor from_blob(\n+    void* data,\n+    at::IntList sizes,\n+    at::IntList strides,\n+    const at::TensorOptions& options = {}) {\n+  return at::from_blob(\n+      data,\n+      sizes,\n+      strides,\n+      /*deleter=*/[](void*) {},\n+      options.is_variable(true));\n+}\n+\n inline at::Tensor from_blob(\n     void* data,\n     at::IntList sizes,\n     const std::function<void(void*)>& deleter,\n     const at::TensorOptions& options = {}) {\n-  at::Tensor tensor =\n-      at::from_blob(data, sizes, deleter, at::TensorOptions(options).is_variable(false));\n-  return autograd::make_variable(\n-      tensor, /*requires_grad=*/options.requires_grad());\n+  return at::from_blob(data, sizes, deleter, options.is_variable(true));", "path": "tools/autograd/templates/variable_factories.h", "position": null, "original_position": 96, "commit_id": "c9301324c3ef2dc73333939ef6657feb15ffad07", "original_commit_id": "8976477c70d8a0f27835a83651db54aa4d7abb16", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "why are you missing make_variable here?", "created_at": "2018-11-14T19:04:39Z", "updated_at": "2018-11-23T15:54:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/13982#discussion_r233579463", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13982", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233579463"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13982#discussion_r233579463"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13982"}}, "body_html": "<p>why are you missing make_variable here?</p>", "body_text": "why are you missing make_variable here?"}