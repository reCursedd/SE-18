{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8561", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8561/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8561/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8561/events", "html_url": "https://github.com/pytorch/pytorch/issues/8561", "id": 332874858, "node_id": "MDU6SXNzdWUzMzI4NzQ4NTg=", "number": 8561, "title": "cleanup BLAS detection", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-15T18:33:21Z", "updated_at": "2018-06-15T18:56:08Z", "closed_at": null, "author_association": "MEMBER", "body_html": "<p>PyTorch and Caffe2 use the following libraries as preferred for BLAS/LAPACK capabilities:</p>\n<ul>\n<li>\n<p>MKL - first preference in unified build system</p>\n</li>\n<li>\n<p>Eigen - 2nd preference in unified build system, but first preference if ATen is not being compiled</p>\n</li>\n<li>\n<p>PyTorch finds OpenBLAS, Accelerate, cblas if MKL is not found -- finding OpenBLAS is useful for PPC64</p>\n</li>\n<li>\n<p>I have to explore what Caffe2 does if Eigen is not found</p>\n</li>\n</ul>\n<p>There are however additional subtelities.<br>\nMKL and Eigen are not used JUST for BLAS/LAPACK, but also for additional functionality:</p>\n<ul>\n<li>MKL for FFT, VML in pytorch</li>\n<li>Eigen for <a href=\"https://github.com/pytorch/pytorch/search?q=eigen&amp;unscoped_q=eigen\">implementing caffe2 operators</a></li>\n</ul>\n<p>Additionally, we also use fortran-blas interface in pytorch, cblas interface in Caffe2 (if not Eigen), and eigen::MatrixMap interface if Eigen is found and <code>CAFFE2_USE_EIGEN_FOR_BLAS</code> is set.</p>\n<p>Cleanup plan:</p>\n<ul>\n<li>separate what it means to detect MKL / Eigen from what it means to detect BLAS capabilities\n<ul>\n<li>Find MKL at a single entry point across PyTorch, Caffe2, and if it's found, set a USE_BLAS=\"mkl\" with BLAS_INCLUDE and BLAS_LIBRARIES variables set to MKL paths. This is in addition to setting MKL_FOUND</li>\n<li>[Should we] Find Eigen by default (unless USE_EIGEN=OFF (which we can set via setup.py) and use it for everything (building caffe2 operators etc.) except BLAS (i.e. only not set CAFFE2_USE_EIGEN_FOR_BLAS). If MKL was not found, use Eigen for BLAS as well cc: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=551151\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Yangqing\">@Yangqing</a> for guidance.</li>\n<li>On PPC64 and OSX, should we prefer OpenBLAS and Accelerate respectively (instead of Eigen) for the BLAS capabilities? cc: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=551151\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Yangqing\">@Yangqing</a></li>\n</ul>\n</li>\n</ul>", "body_text": "PyTorch and Caffe2 use the following libraries as preferred for BLAS/LAPACK capabilities:\n\n\nMKL - first preference in unified build system\n\n\nEigen - 2nd preference in unified build system, but first preference if ATen is not being compiled\n\n\nPyTorch finds OpenBLAS, Accelerate, cblas if MKL is not found -- finding OpenBLAS is useful for PPC64\n\n\nI have to explore what Caffe2 does if Eigen is not found\n\n\nThere are however additional subtelities.\nMKL and Eigen are not used JUST for BLAS/LAPACK, but also for additional functionality:\n\nMKL for FFT, VML in pytorch\nEigen for implementing caffe2 operators\n\nAdditionally, we also use fortran-blas interface in pytorch, cblas interface in Caffe2 (if not Eigen), and eigen::MatrixMap interface if Eigen is found and CAFFE2_USE_EIGEN_FOR_BLAS is set.\nCleanup plan:\n\nseparate what it means to detect MKL / Eigen from what it means to detect BLAS capabilities\n\nFind MKL at a single entry point across PyTorch, Caffe2, and if it's found, set a USE_BLAS=\"mkl\" with BLAS_INCLUDE and BLAS_LIBRARIES variables set to MKL paths. This is in addition to setting MKL_FOUND\n[Should we] Find Eigen by default (unless USE_EIGEN=OFF (which we can set via setup.py) and use it for everything (building caffe2 operators etc.) except BLAS (i.e. only not set CAFFE2_USE_EIGEN_FOR_BLAS). If MKL was not found, use Eigen for BLAS as well cc: @Yangqing for guidance.\nOn PPC64 and OSX, should we prefer OpenBLAS and Accelerate respectively (instead of Eigen) for the BLAS capabilities? cc: @Yangqing", "body": "PyTorch and Caffe2 use the following libraries as preferred for BLAS/LAPACK capabilities:\r\n\r\n- MKL - first preference in unified build system\r\n- Eigen - 2nd preference in unified build system, but first preference if ATen is not being compiled\r\n\r\n- PyTorch finds OpenBLAS, Accelerate, cblas if MKL is not found -- finding OpenBLAS is useful for PPC64\r\n- I have to explore what Caffe2 does if Eigen is not found\r\n\r\nThere are however additional subtelities.\r\nMKL and Eigen are not used JUST for BLAS/LAPACK, but also for additional functionality:\r\n-  MKL for FFT, VML in pytorch\r\n- Eigen for [implementing caffe2 operators](https://github.com/pytorch/pytorch/search?q=eigen&unscoped_q=eigen)\r\n\r\nAdditionally, we also use fortran-blas interface in pytorch, cblas interface in Caffe2 (if not Eigen), and eigen::MatrixMap interface if Eigen is found and `CAFFE2_USE_EIGEN_FOR_BLAS` is set.\r\n\r\nCleanup plan:\r\n- separate what it means to detect MKL / Eigen from what it means to detect BLAS capabilities\r\n  - Find MKL at a single entry point across PyTorch, Caffe2, and if it's found, set a USE_BLAS=\"mkl\" with BLAS_INCLUDE and BLAS_LIBRARIES variables set to MKL paths. This is in addition to setting MKL_FOUND\r\n  - [Should we] Find Eigen by default (unless USE_EIGEN=OFF (which we can set via setup.py) and use it for everything (building caffe2 operators etc.) except BLAS (i.e. only not set CAFFE2_USE_EIGEN_FOR_BLAS). If MKL was not found, use Eigen for BLAS as well cc: @Yangqing for guidance.\r\n  - On PPC64 and OSX, should we prefer OpenBLAS and Accelerate respectively (instead of Eigen) for the BLAS capabilities? cc: @Yangqing \r\n"}