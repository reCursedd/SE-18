{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6809", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6809/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6809/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6809/events", "html_url": "https://github.com/pytorch/pytorch/pull/6809", "id": 316353783, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgzMTI3MDA5", "number": 6809, "title": "[Caffe2] Provide option to initialize the TensorRT engine at Operator constructor time", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-20T17:39:59Z", "updated_at": "2018-11-23T15:43:01Z", "closed_at": "2018-04-23T20:09:36Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6809", "html_url": "https://github.com/pytorch/pytorch/pull/6809", "diff_url": "https://github.com/pytorch/pytorch/pull/6809.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6809.patch"}, "body_html": "<p>As discussed with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1093985\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Maratyszcza\">@Maratyszcza</a>, we provide this option to initialize the TensorRT engine at operator ctor.</p>\n<p>Pros:</p>\n<ul>\n<li>Save weight serialization/deserialization (convert time went from <code>7.7s</code> to <code>6.7s</code> for resnet50 on my machine)</li>\n<li>For generic cases, we can handle backend that doesn't support serialization/deserialization in this way.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Now part of the conversion is done in transformer and part is done is Operator ctor. The code is less streamlined.</li>\n<li>For general backend, if it doesn't expose its input/output in the same order of input/output order in onnx model. We cannot do positional io binding of Operator but have to resort to name matching, which is kinda OK I think.</li>\n</ul>\n<p>In addition, having two flows now creates branches in the code, reducing the readability. Maybe we should get rid of one and keep the latter? <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1093985\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Maratyszcza\">@Maratyszcza</a></p>", "body_text": "As discussed with @Maratyszcza, we provide this option to initialize the TensorRT engine at operator ctor.\nPros:\n\nSave weight serialization/deserialization (convert time went from 7.7s to 6.7s for resnet50 on my machine)\nFor generic cases, we can handle backend that doesn't support serialization/deserialization in this way.\n\nCons:\n\nNow part of the conversion is done in transformer and part is done is Operator ctor. The code is less streamlined.\nFor general backend, if it doesn't expose its input/output in the same order of input/output order in onnx model. We cannot do positional io binding of Operator but have to resort to name matching, which is kinda OK I think.\n\nIn addition, having two flows now creates branches in the code, reducing the readability. Maybe we should get rid of one and keep the latter? @Maratyszcza", "body": "As discussed with @Maratyszcza, we provide this option to initialize the TensorRT engine at operator ctor. \r\n\r\nPros:\r\n- Save weight serialization/deserialization (convert time went from `7.7s` to `6.7s` for resnet50 on my machine)\r\n- For generic cases, we can handle backend that doesn't support serialization/deserialization in this way. \r\n\r\nCons:\r\n- Now part of the conversion is done in transformer and part is done is Operator ctor. The code is less streamlined. \r\n- For general backend, if it doesn't expose its input/output in the same order of input/output order in onnx model. We cannot do positional io binding of Operator but have to resort to name matching, which is kinda OK I think. \r\n\r\nIn addition, having two flows now creates branches in the code, reducing the readability. Maybe we should get rid of one and keep the latter? @Maratyszcza "}