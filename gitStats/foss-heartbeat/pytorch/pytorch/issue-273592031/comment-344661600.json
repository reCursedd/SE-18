{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/344661600", "html_url": "https://github.com/pytorch/pytorch/pull/3679#issuecomment-344661600", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3679", "id": 344661600, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDY2MTYwMA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-15T17:11:39Z", "updated_at": "2017-11-15T17:11:49Z", "author_association": "MEMBER", "body_html": "<ol>\n<li>Yeah, both snippets are from <code>generated/VariableType.cpp</code>: <code>VariableType::elu_</code> in <code>master</code>.</li>\n<li>Yes. It's stale in the sense of being the previous grad_fn. If it didn't previously require grad, then we won't backprop through that part of the graph. But we will still backprop through the incoming Variable which caused it to require_grad.</li>\n</ol>\n<p>For example:</p>\n<pre><code>incoming = Variable(..., requires_grad=True)\na = Variable(..., requires_grad=False)\nbase = a * 2  # doesn't require grad\nview = base.view(-1)  # doesn't require grad\nview *= incoming\nview.sum().backward()  # or base.sum().backward()\n</code></pre>\n<p>We'll backprop through to \"incoming\" but not to \"a\"</p>\n<ol start=\"3\">\n<li>Yes, it was incorrect to reassign <code>fn.next_functions[0]</code>. Fixing the reference cycle exposed this bug because we're now actually unpacking some SavedVariables that use it in a few situations.</li>\n</ol>", "body_text": "Yeah, both snippets are from generated/VariableType.cpp: VariableType::elu_ in master.\nYes. It's stale in the sense of being the previous grad_fn. If it didn't previously require grad, then we won't backprop through that part of the graph. But we will still backprop through the incoming Variable which caused it to require_grad.\n\nFor example:\nincoming = Variable(..., requires_grad=True)\na = Variable(..., requires_grad=False)\nbase = a * 2  # doesn't require grad\nview = base.view(-1)  # doesn't require grad\nview *= incoming\nview.sum().backward()  # or base.sum().backward()\n\nWe'll backprop through to \"incoming\" but not to \"a\"\n\nYes, it was incorrect to reassign fn.next_functions[0]. Fixing the reference cycle exposed this bug because we're now actually unpacking some SavedVariables that use it in a few situations.", "body": "1. Yeah, both snippets are from `generated/VariableType.cpp`: `VariableType::elu_` in `master`.\r\n2. Yes. It's stale in the sense of being the previous grad_fn. If it didn't previously require grad, then we won't backprop through that part of the graph. But we will still backprop through the incoming Variable which caused it to require_grad.\r\n\r\nFor example:\r\n```\r\nincoming = Variable(..., requires_grad=True)\r\na = Variable(..., requires_grad=False)\r\nbase = a * 2  # doesn't require grad\r\nview = base.view(-1)  # doesn't require grad\r\nview *= incoming\r\nview.sum().backward()  # or base.sum().backward()\r\n```\r\n\r\nWe'll backprop through to \"incoming\" but not to \"a\"\r\n\r\n3. Yes, it was incorrect to reassign `fn.next_functions[0]`. Fixing the reference cycle exposed this bug because we're now actually unpacking some SavedVariables that use it in a few situations."}