{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210026854", "pull_request_review_id": 146157378, "id": 210026854, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDAyNjg1NA==", "diff_hunk": "@@ -5885,3 +5885,58 @@ def parse_kwargs(desc):\n             [4, 5, 6],\n             [4, 5, 6]])\n \"\"\")\n+\n+\n+add_docstr(torch.cartesian_prod,\n+           r\"\"\"\n+cartesian_prod(tensors) -> seq\n+\n+Do cartesian product of the given sequence of tensors. The behavior is similar to\n+python's `itertools.prod`. The difference is, if the arguments is a sequence of\n+size :math:`k`, `itertools.prod` generate :math:`k`-tuples, while `torch.cartesian_prod`\n+create :math:`k` output tensors.\n+\n+Arguments:\n+    tensors (sequence of Tensors): sequence of scalars or 1 dimensional tensors.\n+        Scalars will be treated as tensors of size :math:`(1,)` automatically.\n+\n+Returns:\n+    seq (sequence of Tensors): If the input has :math:`k` tensors of size\n+        :math:`(N_1,), (N_2,), \\ldots , (N_k,)`, then the output would also has :math:`k` tensors,\n+        where all tensors are of size :math:`N_1 \\times N_2 \\times \\ldots \\times N_k`.\n+\n+Example::\n+\n+    >>> a = torch.tensor([1, 2, 3])\n+    >>> b = torch.tensor([4, 5])\n+    >>> torch.cartesian_prod([a, b])\n+    (tensor([1, 1, 2, 2, 3, 3]), tensor([4, 5, 4, 5, 4, 5]))", "path": "torch/_torch_docs.py", "position": null, "original_position": 29, "commit_id": "c201cbe8327481d310f1300cb5b9a866a3fdcc5d", "original_commit_id": "b520abc520d6cec86bb924cb26aa2f979828be0c", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "This isn't analogous to itertools.product's behavior:\r\n```\r\nimport itertools\r\nlist(itertools.product([1, 2, 3], [4, 5]))\r\n\r\n[(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]\r\n```\r\nam I missing something?", "created_at": "2018-08-14T16:54:19Z", "updated_at": "2018-11-23T15:49:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/9393#discussion_r210026854", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9393", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210026854"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9393#discussion_r210026854"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9393"}}, "body_html": "<p>This isn't analogous to itertools.product's behavior:</p>\n<pre><code>import itertools\nlist(itertools.product([1, 2, 3], [4, 5]))\n\n[(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]\n</code></pre>\n<p>am I missing something?</p>", "body_text": "This isn't analogous to itertools.product's behavior:\nimport itertools\nlist(itertools.product([1, 2, 3], [4, 5]))\n\n[(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]\n\nam I missing something?"}