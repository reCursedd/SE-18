{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210272441", "pull_request_review_id": 146450090, "id": 210272441, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDI3MjQ0MQ==", "diff_hunk": "@@ -5885,3 +5885,58 @@ def parse_kwargs(desc):\n             [4, 5, 6],\n             [4, 5, 6]])\n \"\"\")\n+\n+\n+add_docstr(torch.cartesian_prod,\n+           r\"\"\"\n+cartesian_prod(tensors) -> seq\n+\n+Do cartesian product of the given sequence of tensors. The behavior is similar to\n+python's `itertools.prod`. The difference is, if the arguments is a sequence of\n+size :math:`k`, `itertools.prod` generate :math:`k`-tuples, while `torch.cartesian_prod`\n+create :math:`k` output tensors.\n+\n+Arguments:\n+    tensors (sequence of Tensors): sequence of scalars or 1 dimensional tensors.\n+        Scalars will be treated as tensors of size :math:`(1,)` automatically.\n+\n+Returns:\n+    seq (sequence of Tensors): If the input has :math:`k` tensors of size\n+        :math:`(N_1,), (N_2,), \\ldots , (N_k,)`, then the output would also has :math:`k` tensors,\n+        where all tensors are of size :math:`N_1 \\times N_2 \\times \\ldots \\times N_k`.\n+\n+Example::\n+\n+    >>> a = torch.tensor([1, 2, 3])\n+    >>> b = torch.tensor([4, 5])\n+    >>> torch.cartesian_prod([a, b])\n+    (tensor([1, 1, 2, 2, 3, 3]), tensor([4, 5, 4, 5, 4, 5]))\n+\"\"\")\n+\n+\n+add_docstr(torch.combinations,\n+           r\"\"\"\n+combinations(tensor, r=2, with_replacement=False) -> seq\n+\n+Compute combinations of length :math:`r` of the given tensor. The behavior is similar to\n+python's `itertools.combinations` when `with_replacement` is set to `False`, and\n+`itertools.combinations_with_replacement` when `with_replacement` is set to `True`.\n+\n+Arguments:\n+    tensor (Tensor): the tensor.\n+    r (int, optional): number of elements to combine\n+    with_replacement (boolean, optional): whether to allow duplication in combination\n+\n+Returns:\n+    seq (sequence of Tensors): :math:`r` tensors.\n+\n+Example::\n+\n+    >>> a = torch.tensor([1, 2, 3])\n+    >>> torch.combinations(a)\n+    (tensor([1, 1, 2]), tensor([2, 3, 3]))", "path": "torch/_torch_docs.py", "position": null, "original_position": 53, "commit_id": "c201cbe8327481d310f1300cb5b9a866a3fdcc5d", "original_commit_id": "b520abc520d6cec86bb924cb26aa2f979828be0c", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "body": "What you said is a great point, and I do think we should support this.\r\n\r\nMy use case is, I have a tensor of shape `(N, A, 3)` that stores the xyz coordinates of `A` atoms of `N` different molecules. For example, the x, y, and z coordinate value of the `j`^th atom of molecule `i` is at `coordinates[i, j, 0]`, `coordinates[i, j, 1]`, and `coordinates[i, j, 2]`.\r\n\r\nWhat I want is to get triplet of atoms, so that I can further compute the angle of these three atoms. I'm doing something like:\r\n\r\n```python\r\nindices1, indices2, indices3 = torch.combinations(torch.arange(A), r=3)\r\n# Here I'm assuming the same behavior as the (tensor([1, 1, 2]), tensor([2, 3, 3]))\r\n\r\ncoordinates1 = coordinates.index_select(1, indices1)\r\ncoordinates2 = coordinates.index_select(1, indices2)\r\ncoordinates3 = coordinates.index_select(1, indices3)\r\n\r\nR12 = coordinates2 - coordinates1\r\nR13 = coordinates3 - coordinates1\r\n\r\ncos_angle = torch.nn.functional.cosine_similarity(R12, R13, dim=-1)\r\nangle = torch.acos(cos_angle)\r\n```\r\n\r\nThe above code is a simplified demo of my application, which is way more complicated.", "created_at": "2018-08-15T13:43:47Z", "updated_at": "2018-11-23T15:49:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/9393#discussion_r210272441", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9393", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210272441"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9393#discussion_r210272441"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9393"}}, "body_html": "<p>What you said is a great point, and I do think we should support this.</p>\n<p>My use case is, I have a tensor of shape <code>(N, A, 3)</code> that stores the xyz coordinates of <code>A</code> atoms of <code>N</code> different molecules. For example, the x, y, and z coordinate value of the <code>j</code>^th atom of molecule <code>i</code> is at <code>coordinates[i, j, 0]</code>, <code>coordinates[i, j, 1]</code>, and <code>coordinates[i, j, 2]</code>.</p>\n<p>What I want is to get triplet of atoms, so that I can further compute the angle of these three atoms. I'm doing something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>indices1, indices2, indices3 <span class=\"pl-k\">=</span> torch.combinations(torch.arange(A), <span class=\"pl-v\">r</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Here I'm assuming the same behavior as the (tensor([1, 1, 2]), tensor([2, 3, 3]))</span>\n\ncoordinates1 <span class=\"pl-k\">=</span> coordinates.index_select(<span class=\"pl-c1\">1</span>, indices1)\ncoordinates2 <span class=\"pl-k\">=</span> coordinates.index_select(<span class=\"pl-c1\">1</span>, indices2)\ncoordinates3 <span class=\"pl-k\">=</span> coordinates.index_select(<span class=\"pl-c1\">1</span>, indices3)\n\nR12 <span class=\"pl-k\">=</span> coordinates2 <span class=\"pl-k\">-</span> coordinates1\nR13 <span class=\"pl-k\">=</span> coordinates3 <span class=\"pl-k\">-</span> coordinates1\n\ncos_angle <span class=\"pl-k\">=</span> torch.nn.functional.cosine_similarity(R12, R13, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\nangle <span class=\"pl-k\">=</span> torch.acos(cos_angle)</pre></div>\n<p>The above code is a simplified demo of my application, which is way more complicated.</p>", "body_text": "What you said is a great point, and I do think we should support this.\nMy use case is, I have a tensor of shape (N, A, 3) that stores the xyz coordinates of A atoms of N different molecules. For example, the x, y, and z coordinate value of the j^th atom of molecule i is at coordinates[i, j, 0], coordinates[i, j, 1], and coordinates[i, j, 2].\nWhat I want is to get triplet of atoms, so that I can further compute the angle of these three atoms. I'm doing something like:\nindices1, indices2, indices3 = torch.combinations(torch.arange(A), r=3)\n# Here I'm assuming the same behavior as the (tensor([1, 1, 2]), tensor([2, 3, 3]))\n\ncoordinates1 = coordinates.index_select(1, indices1)\ncoordinates2 = coordinates.index_select(1, indices2)\ncoordinates3 = coordinates.index_select(1, indices3)\n\nR12 = coordinates2 - coordinates1\nR13 = coordinates3 - coordinates1\n\ncos_angle = torch.nn.functional.cosine_similarity(R12, R13, dim=-1)\nangle = torch.acos(cos_angle)\nThe above code is a simplified demo of my application, which is way more complicated.", "in_reply_to_id": 210027879}