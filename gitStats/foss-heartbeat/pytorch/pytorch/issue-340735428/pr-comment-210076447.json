{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210076447", "pull_request_review_id": 146218113, "id": 210076447, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA3NjQ0Nw==", "diff_hunk": "@@ -5885,3 +5885,58 @@ def parse_kwargs(desc):\n             [4, 5, 6],\n             [4, 5, 6]])\n \"\"\")\n+\n+\n+add_docstr(torch.cartesian_prod,\n+           r\"\"\"\n+cartesian_prod(tensors) -> seq\n+\n+Do cartesian product of the given sequence of tensors. The behavior is similar to\n+python's `itertools.prod`. The difference is, if the arguments is a sequence of\n+size :math:`k`, `itertools.prod` generate :math:`k`-tuples, while `torch.cartesian_prod`\n+create :math:`k` output tensors.\n+\n+Arguments:\n+    tensors (sequence of Tensors): sequence of scalars or 1 dimensional tensors.\n+        Scalars will be treated as tensors of size :math:`(1,)` automatically.\n+\n+Returns:\n+    seq (sequence of Tensors): If the input has :math:`k` tensors of size\n+        :math:`(N_1,), (N_2,), \\ldots , (N_k,)`, then the output would also has :math:`k` tensors,\n+        where all tensors are of size :math:`N_1 \\times N_2 \\times \\ldots \\times N_k`.\n+\n+Example::\n+\n+    >>> a = torch.tensor([1, 2, 3])\n+    >>> b = torch.tensor([4, 5])\n+    >>> torch.cartesian_prod([a, b])\n+    (tensor([1, 1, 2, 2, 3, 3]), tensor([4, 5, 4, 5, 4, 5]))\n+\"\"\")\n+\n+\n+add_docstr(torch.combinations,\n+           r\"\"\"\n+combinations(tensor, r=2, with_replacement=False) -> seq\n+\n+Compute combinations of length :math:`r` of the given tensor. The behavior is similar to\n+python's `itertools.combinations` when `with_replacement` is set to `False`, and\n+`itertools.combinations_with_replacement` when `with_replacement` is set to `True`.\n+\n+Arguments:\n+    tensor (Tensor): the tensor.\n+    r (int, optional): number of elements to combine\n+    with_replacement (boolean, optional): whether to allow duplication in combination\n+\n+Returns:\n+    seq (sequence of Tensors): :math:`r` tensors.\n+\n+Example::\n+\n+    >>> a = torch.tensor([1, 2, 3])\n+    >>> torch.combinations(a)\n+    (tensor([1, 1, 2]), tensor([2, 3, 3]))", "path": "torch/_torch_docs.py", "position": null, "original_position": 53, "commit_id": "c201cbe8327481d310f1300cb5b9a866a3fdcc5d", "original_commit_id": "b520abc520d6cec86bb924cb26aa2f979828be0c", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "body": "I think `tensor([[1, 2], [1, 3], [2, 3]])` would be better `(tensor([1, 2]), tensor(1, 3), tensor(2, 3))`, and same argument as above, I'm here returning the unbinded version, but I'm happy to change it to stacked version.", "created_at": "2018-08-14T19:32:02Z", "updated_at": "2018-11-23T15:49:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/9393#discussion_r210076447", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9393", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210076447"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9393#discussion_r210076447"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9393"}}, "body_html": "<p>I think <code>tensor([[1, 2], [1, 3], [2, 3]])</code> would be better <code>(tensor([1, 2]), tensor(1, 3), tensor(2, 3))</code>, and same argument as above, I'm here returning the unbinded version, but I'm happy to change it to stacked version.</p>", "body_text": "I think tensor([[1, 2], [1, 3], [2, 3]]) would be better (tensor([1, 2]), tensor(1, 3), tensor(2, 3)), and same argument as above, I'm here returning the unbinded version, but I'm happy to change it to stacked version.", "in_reply_to_id": 210027879}