{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212408973", "pull_request_review_id": 149036424, "id": 212408973, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjQwODk3Mw==", "diff_hunk": "@@ -5882,16 +5882,25 @@ def parse_kwargs(desc):\n         Scalars will be treated as tensors of size :math:`(1,)` automatically.\n \n Returns:\n-    seq (sequence of Tensors): If the input has :math:`k` tensors of size\n-        :math:`(N_1,), (N_2,), \\ldots , (N_k,)`, then the output would also has :math:`k` tensors,\n-        where all tensors are of size :math:`N_1 \\times N_2 \\times \\ldots \\times N_k`.\n+    Tensor: A tensor equivalent to converting all the input tensors into lists,\n+        do `itertools.product` on these lists, and finally convert the resulting list\n+        into tensor.\n \n Example::\n \n-    >>> a = torch.tensor([1, 2, 3])\n-    >>> b = torch.tensor([4, 5])\n-    >>> torch.cartesian_prod([a, b])\n-    (tensor([1, 1, 2, 2, 3, 3]), tensor([4, 5, 4, 5, 4, 5]))\n+    >>> a = [1, 2, 3]\n+    >>> b = [4, 5]\n+    >>> list(itertools.product(a, b))\n+    [(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]\n+    >>> tensor_a = torch.tensor(a)\n+    >>> tensor_b = torch.tensor(b)\n+    >>> torch.cartesian_prod([tensor_a, tensor_b])", "path": "torch/_torch_docs.py", "position": null, "original_position": 32, "commit_id": "c201cbe8327481d310f1300cb5b9a866a3fdcc5d", "original_commit_id": "27e466a57e4c3a664fa1d37be42d9a6228d433a1", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "To make it more like itertools.product, It would be nice if torch.cartesian_prod supported varargs. See https://github.com/pytorch/pytorch/pull/10075 for an example.", "created_at": "2018-08-23T18:18:17Z", "updated_at": "2018-11-23T15:49:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/9393#discussion_r212408973", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9393", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212408973"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9393#discussion_r212408973"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9393"}}, "body_html": "<p>To make it more like itertools.product, It would be nice if torch.cartesian_prod supported varargs. See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"346243597\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10075\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10075/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/10075\">#10075</a> for an example.</p>", "body_text": "To make it more like itertools.product, It would be nice if torch.cartesian_prod supported varargs. See #10075 for an example."}