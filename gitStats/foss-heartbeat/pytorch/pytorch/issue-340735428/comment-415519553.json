{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/415519553", "html_url": "https://github.com/pytorch/pytorch/pull/9393#issuecomment-415519553", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9393", "id": 415519553, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTUxOTU1Mw==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-23T18:22:36Z", "updated_at": "2018-08-23T18:22:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I have a general question: for cartesian_prod, itertools.product does the following:</p>\n<pre><code>\nIn [37]: x = torch.tensor([1, 2])\n\nIn [38]: y = torch.tensor([1, 2, 3])\n\nIn [39]: list(itertools.product(x, y))\nOut[39]:\n[(tensor(1), tensor(1)),\n (tensor(1), tensor(2)),\n (tensor(1), tensor(3)),\n (tensor(2), tensor(1)),\n (tensor(2), tensor(2)),\n (tensor(2), tensor(3))]\n\n</code></pre>\n<p>This is pretty close to what cartesian_prod does: is it a significant usability help and/or speedup that <code>torch.cartesian_product</code> turns all of this into one tensor?</p>", "body_text": "I have a general question: for cartesian_prod, itertools.product does the following:\n\nIn [37]: x = torch.tensor([1, 2])\n\nIn [38]: y = torch.tensor([1, 2, 3])\n\nIn [39]: list(itertools.product(x, y))\nOut[39]:\n[(tensor(1), tensor(1)),\n (tensor(1), tensor(2)),\n (tensor(1), tensor(3)),\n (tensor(2), tensor(1)),\n (tensor(2), tensor(2)),\n (tensor(2), tensor(3))]\n\n\nThis is pretty close to what cartesian_prod does: is it a significant usability help and/or speedup that torch.cartesian_product turns all of this into one tensor?", "body": "I have a general question: for cartesian_prod, itertools.product does the following:\r\n```\r\n\r\nIn [37]: x = torch.tensor([1, 2])\r\n\r\nIn [38]: y = torch.tensor([1, 2, 3])\r\n\r\nIn [39]: list(itertools.product(x, y))\r\nOut[39]:\r\n[(tensor(1), tensor(1)),\r\n (tensor(1), tensor(2)),\r\n (tensor(1), tensor(3)),\r\n (tensor(2), tensor(1)),\r\n (tensor(2), tensor(2)),\r\n (tensor(2), tensor(3))]\r\n\r\n```\r\nThis is pretty close to what cartesian_prod does: is it a significant usability help and/or speedup that `torch.cartesian_product` turns all of this into one tensor?"}