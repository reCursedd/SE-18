{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/440360559", "html_url": "https://github.com/pytorch/pytorch/pull/9393#issuecomment-440360559", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9393", "id": 440360559, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDM2MDU1OQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-20T17:30:00Z", "updated_at": "2018-11-20T17:36:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1032377\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zasdfgbnm\">@zasdfgbnm</a>, that is a good question. I'm not sure what the right answer here, especially because numpy doesn't have an equivalent to these functions. Let me do some digging around and get back to you.</p>\n<p>Edit: I thought about it a little more. I agree that the scalar input is confusing; it would be good to turn off the support for it. In my mind cartesian product should be an operation between two \"lists\" or 1d tensors. Same with combinations; if someone is trying to take combinations of a scalar tensor I think they may be doing something wrong.</p>\n<p>Which operator are you talking about for</p>\n<blockquote>\n<p>I also think if the input has shape (N,) the output should also have shape (N,) instead of (N,1)<br>\n?</p>\n</blockquote>\n<p>For cartesian product I agree: if we have an input of shape (N,), the output should have shape (N,) because there was only one input in the list.</p>", "body_text": "@zasdfgbnm, that is a good question. I'm not sure what the right answer here, especially because numpy doesn't have an equivalent to these functions. Let me do some digging around and get back to you.\nEdit: I thought about it a little more. I agree that the scalar input is confusing; it would be good to turn off the support for it. In my mind cartesian product should be an operation between two \"lists\" or 1d tensors. Same with combinations; if someone is trying to take combinations of a scalar tensor I think they may be doing something wrong.\nWhich operator are you talking about for\n\nI also think if the input has shape (N,) the output should also have shape (N,) instead of (N,1)\n?\n\nFor cartesian product I agree: if we have an input of shape (N,), the output should have shape (N,) because there was only one input in the list.", "body": "@zasdfgbnm, that is a good question. I'm not sure what the right answer here, especially because numpy doesn't have an equivalent to these functions. Let me do some digging around and get back to you.\r\n\r\nEdit: I thought about it a little more. I agree that the scalar input is confusing; it would be good to turn off the support for it. In my mind cartesian product should be an operation between two \"lists\" or 1d tensors. Same with combinations; if someone is trying to take combinations of a scalar tensor I think they may be doing something wrong.\r\n\r\nWhich operator are you talking about for\r\n> I also think if the input has shape (N,) the output should also have shape (N,) instead of (N,1)\r\n?\r\n\r\nFor cartesian product I agree: if we have an input of shape (N,), the output should have shape (N,) because there was only one input in the list."}