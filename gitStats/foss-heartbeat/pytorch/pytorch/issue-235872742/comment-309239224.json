{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/309239224", "html_url": "https://github.com/pytorch/pytorch/pull/1802#issuecomment-309239224", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1802", "id": 309239224, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTIzOTIyNA==", "user": {"login": "Kaixhin", "id": 991891, "node_id": "MDQ6VXNlcjk5MTg5MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/991891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kaixhin", "html_url": "https://github.com/Kaixhin", "followers_url": "https://api.github.com/users/Kaixhin/followers", "following_url": "https://api.github.com/users/Kaixhin/following{/other_user}", "gists_url": "https://api.github.com/users/Kaixhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kaixhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kaixhin/subscriptions", "organizations_url": "https://api.github.com/users/Kaixhin/orgs", "repos_url": "https://api.github.com/users/Kaixhin/repos", "events_url": "https://api.github.com/users/Kaixhin/events{/privacy}", "received_events_url": "https://api.github.com/users/Kaixhin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-17T20:46:13Z", "updated_at": "2017-06-17T20:46:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> what do you mean exactly? I was thinking along the lines of:</p>\n<div class=\"highlight highlight-source-python\"><pre>m <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">30</span>).init(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>weight<span class=\"pl-pds\">'</span></span>, nn.init.xavier_normal, <span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Linear.init pseudocode:</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">init</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">accessor</span>, <span class=\"pl-smi\">method</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n    method(<span class=\"pl-c1\">self</span>[accessor], <span class=\"pl-k\">**</span>kwargs)\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span></pre></div>\n<p>First argument <a href=\"https://github.com/Kaixhin/nninit#accessors\">accesses the field</a>, second <a href=\"https://github.com/Kaixhin/nninit#initialisers\">specifies the method</a>, rest are passed into the method. I still haven't used Python that much, but is there a problem with the above?</p>", "body_text": "@apaszke what do you mean exactly? I was thinking along the lines of:\nm = nn.Linear(20, 30).init('weight', nn.init.xavier_normal, 1)\n\n# Linear.init pseudocode:\ndef init(self, accessor, method, **kwargs):\n    method(self[accessor], **kwargs)\n    return self\nFirst argument accesses the field, second specifies the method, rest are passed into the method. I still haven't used Python that much, but is there a problem with the above?", "body": "@apaszke what do you mean exactly? I was thinking along the lines of:\r\n\r\n```py\r\nm = nn.Linear(20, 30).init('weight', nn.init.xavier_normal, 1)\r\n\r\n# Linear.init pseudocode:\r\ndef init(self, accessor, method, **kwargs):\r\n    method(self[accessor], **kwargs)\r\n    return self\r\n```\r\n\r\nFirst argument [accesses the field](https://github.com/Kaixhin/nninit#accessors), second [specifies the method](https://github.com/Kaixhin/nninit#initialisers), rest are passed into the method. I still haven't used Python that much, but is there a problem with the above?"}