{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128520342", "pull_request_review_id": 51207658, "id": 128520342, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODUyMDM0Mg==", "diff_hunk": "@@ -10,7 +11,8 @@\n class _ConvNd(Module):\n \n     def __init__(self, in_channels, out_channels, kernel_size, stride,\n-                 padding, dilation, transposed, output_padding, groups, bias):\n+                 padding, dilation, transposed, output_padding, groups, bias,\n+                 initializer):", "path": "torch/nn/modules/conv.py", "position": 14, "original_position": 14, "commit_id": "e3fbc5bef88842332aea5ffcd1e17a825c6ee672", "original_commit_id": "e3fbc5bef88842332aea5ffcd1e17a825c6ee672", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "body": "we could provide a default value here of `initializer = {}`, then in the constructor we can just do `self.initializer = initializer` and in `reset_parameters` we can take advantage of the default response of the`get` method on dicts. i.e. `reset_parameters` would be something like:\r\n\r\n```python\r\nself.initializer.get(\"weight\", self._initializer)(self.weight)\r\nif bias is not None:\r\n    self.initializer.get(\"bias\", self._initializer(self.bias)\r\n```", "created_at": "2017-07-20T13:53:10Z", "updated_at": "2018-11-23T15:34:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/1802#discussion_r128520342", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1802", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128520342"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1802#discussion_r128520342"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1802"}}, "body_html": "<p>we could provide a default value here of <code>initializer = {}</code>, then in the constructor we can just do <code>self.initializer = initializer</code> and in <code>reset_parameters</code> we can take advantage of the default response of the<code>get</code> method on dicts. i.e. <code>reset_parameters</code> would be something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">self</span>.initializer.get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._initializer)(<span class=\"pl-c1\">self</span>.weight)\n<span class=\"pl-k\">if</span> bias <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n    <span class=\"pl-c1\">self</span>.initializer.get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bias<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._initializer(<span class=\"pl-c1\">self</span>.bias)</pre></div>", "body_text": "we could provide a default value here of initializer = {}, then in the constructor we can just do self.initializer = initializer and in reset_parameters we can take advantage of the default response of theget method on dicts. i.e. reset_parameters would be something like:\nself.initializer.get(\"weight\", self._initializer)(self.weight)\nif bias is not None:\n    self.initializer.get(\"bias\", self._initializer(self.bias)"}