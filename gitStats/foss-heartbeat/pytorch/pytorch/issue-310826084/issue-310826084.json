{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6227", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6227/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6227/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6227/events", "html_url": "https://github.com/pytorch/pytorch/issues/6227", "id": 310826084, "node_id": "MDU6SXNzdWUzMTA4MjYwODQ=", "number": 6227, "title": "potential hazard: in-place modification of index tensor of coalesced sparse tensor", "user": {"login": "kose-y", "id": 8198142, "node_id": "MDQ6VXNlcjgxOTgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8198142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kose-y", "html_url": "https://github.com/kose-y", "followers_url": "https://api.github.com/users/kose-y/followers", "following_url": "https://api.github.com/users/kose-y/following{/other_user}", "gists_url": "https://api.github.com/users/kose-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/kose-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kose-y/subscriptions", "organizations_url": "https://api.github.com/users/kose-y/orgs", "repos_url": "https://api.github.com/users/kose-y/repos", "events_url": "https://api.github.com/users/kose-y/events{/privacy}", "received_events_url": "https://api.github.com/users/kose-y/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-03T12:59:00Z", "updated_at": "2018-04-03T21:25:24Z", "closed_at": "2018-04-03T21:25:24Z", "author_association": "NONE", "body_html": "<p>This is pointed out on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"310726112\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6225\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6225/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6225\">#6225</a>.</p>\n<ul>\n<li>PyTorch or Caffe2: PyTorch</li>\n<li>PyTorch version: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/2e156f3eabb6fa4ae88c2e831aea7da344cf43a3/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/2e156f3eabb6fa4ae88c2e831aea7da344cf43a3\"><tt>2e156f3</tt></a></li>\n</ul>\n<p>If we modify the indices tensor for a coalesced sparse tensor in-place, the premise of coalesced sparse tensor breaks down, but it is still marked as coalesced. I can't imagine ways for a sparse tensor to detect when the index tensor is modified in-place. Checking it every time when coalesced tensor is needed will slow down the performance.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\ni <span class=\"pl-k\">=</span> torch.LongTensor([\n            [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>],\n            [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>],\n         ])\nv <span class=\"pl-k\">=</span> torch.FloatTensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\nD <span class=\"pl-k\">=</span> torch.sparse.FloatTensor(i, v, torch.Size([<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>]))\nDc <span class=\"pl-k\">=</span> D.coalesce()</pre></div>\n<div class=\"highlight highlight-source-python\"><pre>ii <span class=\"pl-k\">=</span> Dc._indices()\nii[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>\nii[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\nii</pre></div>\n<pre><code> 2  1  2\n 0  1  0\n[torch.LongTensor of size (2,3)]\n</code></pre>\n<div class=\"highlight highlight-source-python\"><pre>Dc._indices()</pre></div>\n<pre><code> 2  1  2\n 2  1  0\n[torch.LongTensor of size (2,3)]\n</code></pre>\n<div class=\"highlight highlight-source-python\"><pre>Dc.is_coalesced()</pre></div>\n<pre><code>True\n</code></pre>", "body_text": "This is pointed out on #6225.\n\nPyTorch or Caffe2: PyTorch\nPyTorch version: 2e156f3\n\nIf we modify the indices tensor for a coalesced sparse tensor in-place, the premise of coalesced sparse tensor breaks down, but it is still marked as coalesced. I can't imagine ways for a sparse tensor to detect when the index tensor is modified in-place. Checking it every time when coalesced tensor is needed will slow down the performance.\nimport torch\ni = torch.LongTensor([\n            [0, 1, 2],\n            [2, 1, 0],\n         ])\nv = torch.FloatTensor([1, 1, 1])\nD = torch.sparse.FloatTensor(i, v, torch.Size([3,3]))\nDc = D.coalesce()\nii = Dc._indices()\nii[0,0] = 2\nii[1,0] = 1\nii\n 2  1  2\n 0  1  0\n[torch.LongTensor of size (2,3)]\n\nDc._indices()\n 2  1  2\n 2  1  0\n[torch.LongTensor of size (2,3)]\n\nDc.is_coalesced()\nTrue", "body": "This is pointed out on https://github.com/pytorch/pytorch/pull/6225. \r\n- PyTorch or Caffe2: PyTorch\r\n- PyTorch version: 2e156f3eabb6fa4ae88c2e831aea7da344cf43a3\r\n\r\nIf we modify the indices tensor for a coalesced sparse tensor in-place, the premise of coalesced sparse tensor breaks down, but it is still marked as coalesced. I can't imagine ways for a sparse tensor to detect when the index tensor is modified in-place. Checking it every time when coalesced tensor is needed will slow down the performance.\r\n\r\n```python\r\nimport torch\r\ni = torch.LongTensor([\r\n            [0, 1, 2],\r\n            [2, 1, 0],\r\n         ])\r\nv = torch.FloatTensor([1, 1, 1])\r\nD = torch.sparse.FloatTensor(i, v, torch.Size([3,3]))\r\nDc = D.coalesce()\r\n```\r\n\r\n\r\n```python\r\nii = Dc._indices()\r\nii[0,0] = 2\r\nii[1,0] = 1\r\nii\r\n```\r\n\r\n\r\n\r\n\r\n    \r\n     2  1  2\r\n     0  1  0\r\n    [torch.LongTensor of size (2,3)]\r\n\r\n\r\n\r\n\r\n```python\r\nDc._indices()\r\n```\r\n\r\n\r\n\r\n\r\n    \r\n     2  1  2\r\n     2  1  0\r\n    [torch.LongTensor of size (2,3)]\r\n\r\n\r\n\r\n\r\n```python\r\nDc.is_coalesced()\r\n```\r\n\r\n\r\n\r\n\r\n    True"}