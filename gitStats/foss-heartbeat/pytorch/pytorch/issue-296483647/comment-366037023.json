{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/366037023", "html_url": "https://github.com/pytorch/pytorch/pull/5190#issuecomment-366037023", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5190", "id": 366037023, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjAzNzAyMw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-15T19:33:58Z", "updated_at": "2018-02-15T19:33:58Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8646471\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/datnamer\">@datnamer</a> I read that document once but forgot about it! We've had some initial discussions about ways to express the types in our operations/mini-language, but haven't converged on anything concrete yet. I think a lot of it will be driven by what the lower-level components will demand from us (e.g. <a href=\"https://research.fb.com/announcing-tensor-comprehensions/\" rel=\"nofollow\">TensorComprehensions</a> can make use of symbolic size annotations, as proposed in the doc you linked). If there's an open discussion/a mailing list/slack channel where these things are discussed in a more general setting, we would be interested in listening or taking part.</p>", "body_text": "@datnamer I read that document once but forgot about it! We've had some initial discussions about ways to express the types in our operations/mini-language, but haven't converged on anything concrete yet. I think a lot of it will be driven by what the lower-level components will demand from us (e.g. TensorComprehensions can make use of symbolic size annotations, as proposed in the doc you linked). If there's an open discussion/a mailing list/slack channel where these things are discussed in a more general setting, we would be interested in listening or taking part.", "body": "@datnamer I read that document once but forgot about it! We've had some initial discussions about ways to express the types in our operations/mini-language, but haven't converged on anything concrete yet. I think a lot of it will be driven by what the lower-level components will demand from us (e.g. [TensorComprehensions](https://research.fb.com/announcing-tensor-comprehensions/) can make use of symbolic size annotations, as proposed in the doc you linked). If there's an open discussion/a mailing list/slack channel where these things are discussed in a more general setting, we would be interested in listening or taking part."}