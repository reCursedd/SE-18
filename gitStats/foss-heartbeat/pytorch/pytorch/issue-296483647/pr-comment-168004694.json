{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168004694", "pull_request_review_id": 96303760, "id": 168004694, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODAwNDY5NA==", "diff_hunk": "@@ -0,0 +1,285 @@\n+import torch\n+import sys\n+import ast\n+import inspect\n+from functools import partial\n+from collections import namedtuple\n+from torch._C._jit_tree_views import *\n+\n+# TODO: improve error reporting (show source)\n+#       once this is done, convert all asserts into checks with nicer error messages\n+\n+PY2 = sys.version_info[0] == 2\n+_reserved_prefix = '__jit'\n+\n+\n+def get_jit_ast(fn):\n+    source = dedent(inspect.getsource(fn))\n+    py_ast = ast.parse(source)\n+    if len(py_ast.body) != 1 or not isinstance(py_ast.body[0], ast.FunctionDef):\n+        raise RuntimeError(\"expected a single top-level function\")\n+    return build_def(SourceRangeFactory(source), py_ast.body[0])\n+\n+\n+def dedent(source):\n+    lines = source.split('\\n')\n+    indent_depth = 0\n+    while lines[0][indent_depth] == ' ':\n+        indent_depth += 1\n+    return '\\n'.join(l[indent_depth:] for l in lines)\n+\n+\n+class Builder(object):\n+    def __call__(self, ctx, node):\n+        try:\n+            method = getattr(self, 'build_' + node.__class__.__name__)\n+        except AttributeError:\n+            raise RuntimeError(node.__class__.__name__ + \" isn't a supported Python feature\")\n+        return method(ctx, node)\n+\n+\n+class CountReturns(ast.NodeVisitor):\n+    def __init__(self):\n+        self.num_returns = 0\n+\n+    def visit_Return(self, ret):\n+        self.num_returns += 1\n+\n+    @staticmethod\n+    def get_count(py_def):\n+        counter = CountReturns()\n+        counter.visit(py_def)\n+        return counter.num_returns\n+\n+\n+_ret_err_msg = (\"JIT-ed functions can only have a single return, \"\n+                \"and it has to be the last statement in the body\")\n+\n+\n+def build_def(ctx, py_def):\n+    assert len(py_def.decorator_list) == 0\n+    returns = []\n+    ret_body = []\n+    body = py_def.body\n+    num_returns = CountReturns.get_count(py_def)\n+    if num_returns == 1:\n+        ret_stmt, body = body[-1], body[:-1]\n+        if not isinstance(ret_stmt, ast.Return):\n+            raise ValueError(_ret_err_msg)\n+        ret_expr = ret_stmt.value\n+        ret_vals = ret_expr.elts if isinstance(ret_expr, ast.Tuple) else [ret_expr]\n+        for i, val in enumerate(ret_vals):\n+            val_expr = build_expr(ctx, val)\n+            val_name = _reserved_prefix + '_' + str(i)\n+            r = val_expr.range()\n+            returns.append(Param(TensorType(r), Ident(r, val_name)))\n+            ret_body.append(Assign([Ident(r, val_name)], '=', val_expr))\n+    elif num_returns > 1:\n+        raise ValueError(_ret_err_msg)\n+    r = ctx.make_range(py_def.lineno, py_def.col_offset,\n+                       py_def.col_offset + len(\"def\"))\n+    return Def(Ident(r, py_def.name),\n+               build_param_list(ctx, py_def.args),\n+               returns,\n+               build_stmt_list(ctx, body) + ret_body)\n+\n+\n+def build_param_list(ctx, py_args):\n+    assert py_args.vararg is None\n+    assert py_args.kwarg is None\n+    assert not py_args.defaults\n+    if PY2:", "path": "torch/jit/python_frontend.py", "position": null, "original_position": 91, "commit_id": "c7d017de191eb1be80fd293bfbb5b04f79bad0be", "original_commit_id": "eecec783f2c3f082cd9cdb535e14e5bbaed11912", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "why not use gast?", "created_at": "2018-02-13T21:21:03Z", "updated_at": "2018-11-23T15:39:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/5190#discussion_r168004694", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5190", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168004694"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5190#discussion_r168004694"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5190"}}, "body_html": "<p>why not use gast?</p>", "body_text": "why not use gast?"}