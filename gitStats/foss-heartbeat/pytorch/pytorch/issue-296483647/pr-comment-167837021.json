{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167837021", "pull_request_review_id": 96109985, "id": 167837021, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzgzNzAyMQ==", "diff_hunk": "@@ -0,0 +1,285 @@\n+import torch\n+import sys\n+import ast\n+import inspect\n+from functools import partial\n+from collections import namedtuple\n+from torch._C._jit_tree_views import *\n+\n+# TODO: improve error reporting (show source)\n+#       once this is done, convert all asserts into checks with nicer error messages\n+\n+PY2 = sys.version_info[0] == 2\n+_reserved_prefix = '__jit'\n+\n+\n+def get_jit_ast(fn):\n+    source = dedent(inspect.getsource(fn))\n+    py_ast = ast.parse(source)\n+    if len(py_ast.body) != 1 or not isinstance(py_ast.body[0], ast.FunctionDef):\n+        raise RuntimeError(\"expected a single top-level function\")\n+    return build_def(SourceRangeFactory(source), py_ast.body[0])\n+\n+\n+def dedent(source):\n+    lines = source.split('\\n')\n+    indent_depth = 0\n+    while lines[0][indent_depth] == ' ':\n+        indent_depth += 1\n+    return '\\n'.join(l[indent_depth:] for l in lines)\n+\n+\n+class Builder(object):", "path": "torch/jit/python_frontend.py", "position": null, "original_position": 32, "commit_id": "c7d017de191eb1be80fd293bfbb5b04f79bad0be", "original_commit_id": "eecec783f2c3f082cd9cdb535e14e5bbaed11912", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Closures are poor man's objects, objects are poor man's closures :wink: It's not like having them all in a single object would make the `ctx` disappear. You'd still have to take an extra `self` argument in the methods, and change `build_expr(ctx, ...)` to `self.build_expr(...)`, so it's not a win at all. I did it this way because:\r\n1. This lets me separate handlers for different production types in different \"scopes\" (basically use the class definitions to group them), and it keeps the code more modular than if it was a single monolithic object for handling anything. Then, I only use this base class to have a single place where I will implement the nice \"not supported\" error, and they will both benefit from it. The interface seems quite simple too. I can add docstrings if you'd like.\r\n1. I like the functional syntax more\r\n", "created_at": "2018-02-13T11:33:28Z", "updated_at": "2018-11-23T15:39:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/5190#discussion_r167837021", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5190", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167837021"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5190#discussion_r167837021"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5190"}}, "body_html": "<p>Closures are poor man's objects, objects are poor man's closures <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji> It's not like having them all in a single object would make the <code>ctx</code> disappear. You'd still have to take an extra <code>self</code> argument in the methods, and change <code>build_expr(ctx, ...)</code> to <code>self.build_expr(...)</code>, so it's not a win at all. I did it this way because:</p>\n<ol>\n<li>This lets me separate handlers for different production types in different \"scopes\" (basically use the class definitions to group them), and it keeps the code more modular than if it was a single monolithic object for handling anything. Then, I only use this base class to have a single place where I will implement the nice \"not supported\" error, and they will both benefit from it. The interface seems quite simple too. I can add docstrings if you'd like.</li>\n<li>I like the functional syntax more</li>\n</ol>", "body_text": "Closures are poor man's objects, objects are poor man's closures \ud83d\ude09 It's not like having them all in a single object would make the ctx disappear. You'd still have to take an extra self argument in the methods, and change build_expr(ctx, ...) to self.build_expr(...), so it's not a win at all. I did it this way because:\n\nThis lets me separate handlers for different production types in different \"scopes\" (basically use the class definitions to group them), and it keeps the code more modular than if it was a single monolithic object for handling anything. Then, I only use this base class to have a single place where I will implement the nice \"not supported\" error, and they will both benefit from it. The interface seems quite simple too. I can add docstrings if you'd like.\nI like the functional syntax more", "in_reply_to_id": 167747898}