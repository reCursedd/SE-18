{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/118445006", "pull_request_review_id": 40236680, "id": 118445006, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ0NTAwNg==", "diff_hunk": "@@ -33,57 +33,59 @@ auto AccumulateGrad::acc_inplace(std::shared_ptr<Variable>& grad,\n \n auto AccumulateGrad::apply(const variable_list& grads) -> variable_list {\n   // XXX: this method is not thread-safe!\n-  check_input_variables(\"AccumulateGrad\", grads, 1);\n-  auto var = variable.lock();\n+  check_input_variables(\"AccumulateGrad\", grads, 1, 0);\n   auto new_grad = grads[0];\n \n-  // It's possible that the Variable went out of scope and was freed.\n-  // We still need to handle the unlikely case of someohe holding to its grad.\n-  if (!var) {\n-    auto var_grad = variable_grad.lock();\n-    // Everything was freed. Nothing to do.\n-    if (!var_grad) return variable_list();\n-    // Now here's the hard part. If both the new_grad and var_grad are volatile\n-    // then we just acumulate the data in place (as we'd do if the Variable was\n-    // alive). Otherwise, we'd need to perform the out-of-place reduction, but\n-    // since the user only holds a reference to .grad and there's no way to\n-    // give him the new Value, we just assume that they know these attributes\n-    // are changing when using higher order graphs.\n-    if (!var_grad->is_volatile || !new_grad->is_volatile) return variable_list();\n-    acc_inplace(var_grad, new_grad);\n-    return variable_list();\n-  }\n+  if (new_grad) {", "path": "torch/csrc/autograd/functions/accumulate_grad.cpp", "position": null, "original_position": 25, "commit_id": "e3cc7c83dc86803042b934d3c1863a7af1640a8d", "original_commit_id": "9260594e948b8476f64c6c232f5b734ca6b987da", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Uhhhh maybe just `if (!new_grad) return {};`?", "created_at": "2017-05-25T08:54:19Z", "updated_at": "2018-11-23T15:33:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/1643#discussion_r118445006", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1643", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/118445006"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1643#discussion_r118445006"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1643"}}, "body_html": "<p>Uhhhh maybe just <code>if (!new_grad) return {};</code>?</p>", "body_text": "Uhhhh maybe just if (!new_grad) return {};?"}