{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/118450958", "pull_request_review_id": 40236680, "id": 118450958, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODQ1MDk1OA==", "diff_hunk": "@@ -1214,6 +1215,91 @@ def backward(self, grad_output):\n         c.backward(torch.ones(c.size()))\n         self.assertEqual(x.grad.data, torch.ones(x.size()))\n \n+    def run_conv_double_back_test(self, kern, stride, padding, chan_in, chan_out,\n+                                  batch_size, inp_size, dilation, no_weight):\n+        x = Variable(torch.randn(batch_size, chan_in, inp_size, inp_size), requires_grad=True)\n+        weight = Variable(torch.randn(chan_out, chan_in, kern, kern), requires_grad=True)\n+        bias = Variable(torch.randn(chan_out), requires_grad=True)\n+\n+        if no_weight:\n+            # Special case because transpose dilated convolution is not implemented\n+            def func(x, bias):\n+                return F.conv2d(x, weight, bias, stride, padding, dilation)\n+            inputs = (x, bias,)\n+        else:\n+            def func(x, weight, bias):\n+                return F.conv2d(x, weight, bias, stride, padding, dilation)\n+            inputs = (x, weight, bias,)\n+\n+        dummy_out = func(*inputs)\n+        grad_y = Variable(torch.randn(dummy_out.size()), requires_grad=True)\n+\n+        # print(\"Conv double backward testing with parameters:\" +\n+        #     \"\\nkern: \" + str(kern) +\n+        #     \"\\nstride: \" + str(stride) +\n+        #     \"\\npadding: \" + str(padding) +\n+        #     \"\\nchan_in: \" + str(chan_in) +\n+        #     \"\\nchan_out: \" + str(chan_out) +\n+        #     \"\\nbatch_size: \" + str(batch_size) +\n+        #     \"\\ninp_size: \" + str(inp_size) +\n+        #     \"\\ndilation: \" + str(dilation))\n+\n+        return gradgradcheck(func, inputs, (grad_y,))\n+\n+    def test_conv_double_backward(self):\n+        batch_size = 2\n+        for kern, inp_size, dilations in [(3, 5, [1, 2]), (3, 7, [1, 2]), (4, 9, [2]), (4, 10, [1])]:\n+            for stride in [1, 2]:\n+                for padding in [0, 1, 2]:\n+                    for chan_in in [1, 3]:\n+                        for chan_out in [1, 3]:\n+                            for dilation in dilations:\n+                                no_weight = stride == 2\n+                                result = self.run_conv_double_back_test(kern, stride,\n+                                                                        padding, chan_in, chan_out,\n+                                                                        batch_size, inp_size, dilation,\n+                                                                        no_weight)\n+                                self.assertTrue(result,\n+                                                \"Conv double backward test failed with parameters:\" +\n+                                                \"\\nkern: \" + str(kern) +\n+                                                \"\\nstride: \" + str(stride) +\n+                                                \"\\npadding: \" + str(padding) +\n+                                                \"\\nchan_in: \" + str(chan_in) +\n+                                                \"\\nchan_out: \" + str(chan_out) +\n+                                                \"\\nbatch_size: \" + str(batch_size) +\n+                                                \"\\ninp_size: \" + str(inp_size) +\n+                                                \"\\ndilation: \" + str(dilation))\n+\n+    def test_error_conv_double_backward(self):\n+        # Invalid kernel and input size for stride of 2\n+        batch_size = 2\n+        for kern, inp_size, dilations in [(3, 6, [1, 2]), (3, 8, [1, 2]), (4, 9, [1]), (4, 10, [2])]:\n+            for stride in [2]:\n+                for padding in [0, 1, 2]:\n+                    for chan_in in [1, 3]:\n+                        for chan_out in [1, 3]:\n+                            for dilation in dilations:", "path": "test/test_autograd.py", "position": null, "original_position": 77, "commit_id": "e3cc7c83dc86803042b934d3c1863a7af1640a8d", "original_commit_id": "9260594e948b8476f64c6c232f5b734ca6b987da", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Use `product` to flatten these looks (see RNN tests).", "created_at": "2017-05-25T09:32:14Z", "updated_at": "2018-11-23T15:33:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/1643#discussion_r118450958", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1643", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/118450958"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1643#discussion_r118450958"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1643"}}, "body_html": "<p>Use <code>product</code> to flatten these looks (see RNN tests).</p>", "body_text": "Use product to flatten these looks (see RNN tests)."}