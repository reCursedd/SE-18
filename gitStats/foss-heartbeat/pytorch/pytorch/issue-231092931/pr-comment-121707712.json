{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121707712", "pull_request_review_id": 43756423, "id": 121707712, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTcwNzcxMg==", "diff_hunk": "@@ -342,6 +379,136 @@ auto ConvBackward::releaseVariables() -> void {\n   bias_.data.reset();\n }\n \n+\n+// ConvBackwardBackward implementation\n+\n+auto ConvBackwardBackward::apply(const variable_list& grad_grad_inputs) -> variable_list {\n+  check_input_variables(\"ConvNdBackwardBackward\", grad_grad_inputs, 3, 0);\n+  if (transposed) throw std::runtime_error(\"ConvBackwardBackward does not support transposed convolution\");\n+\n+  auto ggI = grad_grad_inputs[0];\n+  auto ggW = grad_grad_inputs[1];\n+  auto ggb = grad_grad_inputs[2];\n+\n+  auto gO = grad_output_.unpack();\n+  auto weight = weight_.unpack();\n+\n+  // Compute ggO = conv(w, ggI) + conv(ggW, i) + ggb\n+  std::shared_ptr<Variable> ggO = nullptr;\n+  if (ggI) {\n+    if (weight->data->isCuda()) {\n+      weight = std::make_shared<Contiguous>()->apply({weight})[0];\n+    }\n+    ggO = std::make_shared<ConvForward>(*this)->apply({ggI, weight, nullptr})[0];\n+  }\n+\n+  if (ggW) {\n+    if (ggW->data->isCuda()) {\n+      ggW = std::make_shared<Contiguous>()->apply({ggW})[0];\n+    }\n+    auto ggW_term = std::make_shared<ConvForward>(*this)->apply({input_.unpack(), ggW, nullptr})[0];\n+    if (ggO) {\n+      ggO = std::make_shared<Add>()->apply({ggO, ggW_term})[0];\n+    } else {\n+      ggO = ggW_term;\n+    }\n+  }\n+\n+  if (ggb) {\n+    // View as (1, ggb.size(0), 1, 1...)\n+    std::vector<long> new_size(gO->data->nDim(), 1);\n+    new_size[1] = ggb->data->sizes()[0];\n+    auto ggb_contiguous = std::make_shared<Contiguous>()->apply({ggb})[0];\n+    auto ggb_view = std::make_shared<View>(new_size)->apply({ggb_contiguous})[0];\n+\n+    // Expand \n+    auto ggb_expanded = std::make_shared<Expand>(gO->data->sizes())->apply({ggb_view})[0];\n+\n+    if (ggO) {\n+      ggO = std::make_shared<Add>()->apply({ggO, ggb_expanded})[0];\n+    } else {\n+      ggO = ggb_expanded;\n+    }\n+  }\n+\n+  // Compute gW = conv(gO, ggI)\n+  std::shared_ptr<Variable> gW = nullptr;\n+  if (ggI) {\n+    // Modified params with correct padding\n+    ConvParams gw_conv_params(*this);\n+    auto weight_size = weight->data->sizes();\n+    std::vector<long> kernel_size(weight_size.begin() + 2, weight_size.end());\n+    auto input_size = ggI->data->sizes();\n+    std::vector<long> input_shape(input_size.begin() + 2, input_size.end());\n+    for(size_t i=0; i<gw_conv_params.padding.size(); ++i) {\n+      // Formula for conv output size before the floor operation\n+      auto out_size = float(input_shape[i] + 2 * gw_conv_params.padding[i] -\n+                      gw_conv_params.dilation[i] * (kernel_size[i] - 1) - 1) /\n+                      gw_conv_params.stride[i] + 1;\n+      auto exact_out_size = floorf(out_size);", "path": "torch/csrc/autograd/functions/convolution.cpp", "position": null, "original_position": 188, "commit_id": "e3cc7c83dc86803042b934d3c1863a7af1640a8d", "original_commit_id": "c2c9e3dc9d63ca19b940adca1ffe6fc6c04dbfba", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Uh yeah. You can check that the remainder is 0 (using `%`). I'd avoid floating point arithmetic when it's not necessary.", "created_at": "2017-06-13T15:11:05Z", "updated_at": "2018-11-23T15:33:51Z", "html_url": "https://github.com/pytorch/pytorch/pull/1643#discussion_r121707712", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1643", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121707712"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1643#discussion_r121707712"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1643"}}, "body_html": "<p>Uh yeah. You can check that the remainder is 0 (using <code>%</code>). I'd avoid floating point arithmetic when it's not necessary.</p>", "body_text": "Uh yeah. You can check that the remainder is 0 (using %). I'd avoid floating point arithmetic when it's not necessary.", "in_reply_to_id": 121255308}