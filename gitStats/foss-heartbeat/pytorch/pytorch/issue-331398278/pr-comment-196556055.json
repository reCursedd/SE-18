{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196556055", "pull_request_review_id": 130129980, "id": 196556055, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjU1NjA1NQ==", "diff_hunk": "@@ -0,0 +1,55 @@\n+#pragma once\n+\n+// RAII struct to set CUDA device and stream\n+\n+#ifdef USE_CUDA\n+\n+#include <ATen/ATen.h>\n+#include <THC/THC.h>\n+\n+struct AutoGPUStream {\n+  explicit AutoGPUStream(\n+    const int device\n+  , THCStream* stream)\n+  : set_device_{device} {\n+\n+    // Short-circuits on \"no CUDA devices\" marker value\n+    if (set_device_ == -1) return;\n+\n+    // Sets the GPU (if necessary)\n+    THCudaCheck(cudaGetDevice(&original_device));\n+    if (set_device_ != original_device) {\n+      THCudaCheck(cudaSetDevice(set_device_));\n+    }\n+\n+    // Saves the current stream\n+    THCState* state = at::globalContext().lazyInitCUDA();\n+    original_stream = THCState_getStreamOnDevice(state, set_device_);\n+    THCStream_retain(original_stream);\n+      \n+    // Sets the stream\n+    THCState_setStreamOnDevice(state, set_device_, stream);\n+  }\n+\n+  ~AutoGPUStream() {\n+    // Short-circuits on \"no CUDA devices\" marker\n+    if (set_device_ == -1) return;\n+    \n+    // Resets the stream\n+    THCState* state = at::globalContext().lazyInitCUDA();\n+    THCState_setStreamOnDevice(state, set_device_, original_stream);\n+    THCStream_free(original_stream);\n+    \n+    // Resets the original device (if necessary)\n+    int cur_device = -1;\n+    THCudaCheck(cudaGetDevice(&cur_device));\n+    if (cur_device != original_device) THCudaCheck(cudaSetDevice(original_device));\n+  }\n+  \n+private:\n+  int original_device = -1;\n+  int set_device_ = -1;\n+  THCStream* original_stream = nullptr;\n+};\n+\n+#endif // WITH_CUDA", "path": "torch/csrc/utils/auto_gpu_stream.h", "position": null, "original_position": 55, "commit_id": "1b56a400c446aabd207a90585845ab81545bbcdd", "original_commit_id": "36598758d04d2104d5604f038ccd5a31b0377fe2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: this is USE_CUDA now", "created_at": "2018-06-19T19:51:53Z", "updated_at": "2018-11-23T15:45:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/8354#discussion_r196556055", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8354", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196556055"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8354#discussion_r196556055"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8354"}}, "body_html": "<p>nit: this is USE_CUDA now</p>", "body_text": "nit: this is USE_CUDA now"}