{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197228179", "pull_request_review_id": 130929472, "id": 197228179, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIyODE3OQ==", "diff_hunk": "@@ -77,23 +77,30 @@ Scalar Variable::Impl::localScalar() {\n }\n \n std::shared_ptr<Function> Variable::Impl::get_grad_accumulator() {\n-  if (grad_fn_) {\n-    throw std::logic_error(\n-        \"get_grad_accumulator() should be only called on leaf Variables\");\n-  }\n-  if (!requires_grad_) {\n-    return nullptr;\n-  }\n+  // Short-circuits if accumulator requested for non-leaf\n+  if (grad_fn_) throw std::logic_error(\n+    \"get_grad_accumulator() should be only called on leaf Variables\");\n \n-  std::lock_guard<std::mutex> lock(mutex_);\n+  // Short-cicuits if no gradient is required\n+  if (!requires_grad_) return nullptr;\n \n-  auto result = grad_accumulator_.lock();\n-  if (result)\n-    return result;\n+  // Checks for up-to-date accumulator\n+  // Note: the accumulator's metadata may be outdated after a call to\n+  // set_data, for example\n+  std::lock_guard<std::mutex> lock(mutex_);\n+  auto cur_accumulator = grad_accumulator_.lock();\n+  const auto device = data_.is_cuda() ? data_.get_device() : -1;\n+  if (cur_accumulator && cur_accumulator->input_metadata(0).matches(type(), device)) { ", "path": "torch/csrc/autograd/variable.cpp", "position": null, "original_position": 28, "commit_id": "1b56a400c446aabd207a90585845ab81545bbcdd", "original_commit_id": "22005755d16488109039ddeff5a1dad5aeeb457a", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can't we simply invalidate the accumulator field when `set_data` is called? This would let us avoid having to check this every time a leaf Variable is used.", "created_at": "2018-06-21T18:06:21Z", "updated_at": "2018-11-23T15:46:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/8354#discussion_r197228179", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8354", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197228179"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8354#discussion_r197228179"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8354"}}, "body_html": "<p>Can't we simply invalidate the accumulator field when <code>set_data</code> is called? This would let us avoid having to check this every time a leaf Variable is used.</p>", "body_text": "Can't we simply invalidate the accumulator field when set_data is called? This would let us avoid having to check this every time a leaf Variable is used."}