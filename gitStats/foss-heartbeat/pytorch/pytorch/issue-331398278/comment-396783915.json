{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396783915", "html_url": "https://github.com/pytorch/pytorch/pull/8354#issuecomment-396783915", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8354", "id": 396783915, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njc4MzkxNQ==", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-13T01:23:57Z", "updated_at": "2018-06-13T01:23:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This PR is now ready for review.</p>\n<p>The prior failures were caused by a module's gradient accumulator metadata being out of date and triggering an assertion.</p>\n<p>Metadata being out of date is not a new issue. Calling set_data on a Variable, for instance, will reset that variable's grad_accumulator_ since its metadata may be out of date. To resolve this particular issue I added an additional check to Variable::Impl::get_grad_accumulator(). This check is only for device metadata, and it's possible that the other metadata staleness checks could be merged into this path, too. In general the connections between functions, edges, and variables appear to do a poor job of reusing code paths, however, and a more general cleanup and consolidation may be warranted (and separate from this PR).</p>", "body_text": "This PR is now ready for review.\nThe prior failures were caused by a module's gradient accumulator metadata being out of date and triggering an assertion.\nMetadata being out of date is not a new issue. Calling set_data on a Variable, for instance, will reset that variable's grad_accumulator_ since its metadata may be out of date. To resolve this particular issue I added an additional check to Variable::Impl::get_grad_accumulator(). This check is only for device metadata, and it's possible that the other metadata staleness checks could be merged into this path, too. In general the connections between functions, edges, and variables appear to do a poor job of reusing code paths, however, and a more general cleanup and consolidation may be warranted (and separate from this PR).", "body": "This PR is now ready for review.\r\n\r\nThe prior failures were caused by a module's gradient accumulator metadata being out of date and triggering an assertion.\r\n\r\nMetadata being out of date is not a new issue. Calling set_data on a Variable, for instance, will reset that variable's grad_accumulator_ since its metadata may be out of date. To resolve this particular issue I added an additional check to Variable::Impl::get_grad_accumulator(). This check is only for device metadata, and it's possible that the other metadata staleness checks could be merged into this path, too. In general the connections between functions, edges, and variables appear to do a poor job of reusing code paths, however, and a more general cleanup and consolidation may be warranted (and separate from this PR).\r\n\r\n\r\n"}