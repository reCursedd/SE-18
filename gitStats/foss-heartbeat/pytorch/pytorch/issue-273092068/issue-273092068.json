{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3635", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3635/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3635/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3635/events", "html_url": "https://github.com/pytorch/pytorch/pull/3635", "id": 273092068, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUyMDI2MTk5", "number": 3635, "title": "Remove redundant dim check that produces maybe-uninitialized warnings", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 742585577, "node_id": "MDU6TGFiZWw3NDI1ODU1Nzc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3", "name": "0.3", "color": "d1c41b", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-10T23:48:26Z", "updated_at": "2018-11-23T15:36:22Z", "closed_at": "2017-11-11T12:40:56Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3635", "html_url": "https://github.com/pytorch/pytorch/pull/3635", "diff_url": "https://github.com/pytorch/pytorch/pull/3635.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3635.patch"}, "body_html": "<p>While building fresh with CUDA on, I get a bunch of these warnings:</p>\n<pre><code>/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu: In function \u2018void THNN_CudaHalfVolumetricAveragePooling_updateOutput(THCState*, THCudaHalfTensor*, THCudaHalfTensor*, int, int, int, int, int, int, int, int, int, bool, bool)\u2019:\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu:185:45: warning: \u2018inputWidth\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n     if ((outputWidth  - 1)*dW &gt;= inputWidth  + padW)\n                                             ^\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu:125:5: note: \u2018inputWidth\u2019 was declared here\n   int inputWidth;\n     ^\n</code></pre>\n<p>from <code>VolumetricAveragePooling.cu</code> and <code>VolumetricDilatedMaxPooling.cu</code>.</p>\n<p>This is due to variables being initialized in the body of conditionals without a final <code>else</code> clause:</p>\n<pre><code>if (THCTensor_(nDimension)(state, input) == 4) {\n   // someVar = x;\n}\nelse if (THCTensor_(nDimension)(state, input) == 5) {\n   // someVar = y;\n}\n</code></pre>\n<p>Since <code>input</code> is already shape-checked at the beginning of both <code>updateOutput</code> and <code>updateGradInput</code>, there's no need for the second if clause.</p>", "body_text": "While building fresh with CUDA on, I get a bunch of these warnings:\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu: In function \u2018void THNN_CudaHalfVolumetricAveragePooling_updateOutput(THCState*, THCudaHalfTensor*, THCudaHalfTensor*, int, int, int, int, int, int, int, int, int, bool, bool)\u2019:\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu:185:45: warning: \u2018inputWidth\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n     if ((outputWidth  - 1)*dW >= inputWidth  + padW)\n                                             ^\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu:125:5: note: \u2018inputWidth\u2019 was declared here\n   int inputWidth;\n     ^\n\nfrom VolumetricAveragePooling.cu and VolumetricDilatedMaxPooling.cu.\nThis is due to variables being initialized in the body of conditionals without a final else clause:\nif (THCTensor_(nDimension)(state, input) == 4) {\n   // someVar = x;\n}\nelse if (THCTensor_(nDimension)(state, input) == 5) {\n   // someVar = y;\n}\n\nSince input is already shape-checked at the beginning of both updateOutput and updateGradInput, there's no need for the second if clause.", "body": "While building fresh with CUDA on, I get a bunch of these warnings:\r\n```\r\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu: In function \u2018void THNN_CudaHalfVolumetricAveragePooling_updateOutput(THCState*, THCudaHalfTensor*, THCudaHalfTensor*, int, int, int, int, int, int, int, int, int, bool, bool)\u2019:\r\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu:185:45: warning: \u2018inputWidth\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n     if ((outputWidth  - 1)*dW >= inputWidth  + padW)\r\n                                             ^\r\n/home/ubuntu/src/pytorch/aten/src/THCUNN/generic/VolumetricAveragePooling.cu:125:5: note: \u2018inputWidth\u2019 was declared here\r\n   int inputWidth;\r\n     ^\r\n```\r\nfrom `VolumetricAveragePooling.cu` and `VolumetricDilatedMaxPooling.cu`.\r\n\r\nThis is due to variables being initialized in the body of conditionals without a final `else` clause:\r\n```\r\nif (THCTensor_(nDimension)(state, input) == 4) {\r\n   // someVar = x;\r\n}\r\nelse if (THCTensor_(nDimension)(state, input) == 5) {\r\n   // someVar = y;\r\n}\r\n```\r\n\r\nSince `input` is already shape-checked at the beginning of both `updateOutput` and `updateGradInput`, there's no need for the second if clause."}