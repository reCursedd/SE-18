{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370774564", "html_url": "https://github.com/pytorch/pytorch/pull/5579#issuecomment-370774564", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5579", "id": 370774564, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDc3NDU2NA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-06T13:03:51Z", "updated_at": "2018-03-06T13:03:51Z", "author_association": "MEMBER", "body_html": "<p>In general I think the approach you took is reasonable. I think we should have a few invariants in place:</p>\n<ol>\n<li><code>torch.onnx.symbolic</code> should contain <strong>all</strong> symbolic functions, and should be self-contained i.e. have no dependencies on other <code>torch</code> modules. This will allow us to import it from wherever we want</li>\n<li><code>torch.onnx.symbolic_override</code> should also be self-contained (possibly with imports inside). We could move that to <code>symbolic</code>.</li>\n<li>All other functions from our public API should be stubs that call into a lazily-imported submodule (like the <code>.utils</code> you created).</li>\n</ol>\n<p>I think this would be enough to nicely disentangle concerns. If we want to override/implement a symbolic for a particular function we import <code>torch.onnx.symbolic</code> at the top level and get both definitions for both <code>symbolic_override</code> and the particular implementation for this op. All PRs that need to change how a given function is exported touch only <code>torch/onnx/symbolic.py</code>, and the total overhead of overriding a function is 2 lines.</p>", "body_text": "In general I think the approach you took is reasonable. I think we should have a few invariants in place:\n\ntorch.onnx.symbolic should contain all symbolic functions, and should be self-contained i.e. have no dependencies on other torch modules. This will allow us to import it from wherever we want\ntorch.onnx.symbolic_override should also be self-contained (possibly with imports inside). We could move that to symbolic.\nAll other functions from our public API should be stubs that call into a lazily-imported submodule (like the .utils you created).\n\nI think this would be enough to nicely disentangle concerns. If we want to override/implement a symbolic for a particular function we import torch.onnx.symbolic at the top level and get both definitions for both symbolic_override and the particular implementation for this op. All PRs that need to change how a given function is exported touch only torch/onnx/symbolic.py, and the total overhead of overriding a function is 2 lines.", "body": "In general I think the approach you took is reasonable. I think we should have a few invariants in place:\r\n1. `torch.onnx.symbolic` should contain **all** symbolic functions, and should be self-contained i.e. have no dependencies on other `torch` modules. This will allow us to import it from wherever we want\r\n2. `torch.onnx.symbolic_override` should also be self-contained (possibly with imports inside). We could move that to `symbolic`.\r\n3. All other functions from our public API should be stubs that call into a lazily-imported submodule (like the `.utils` you created).\r\n\r\nI think this would be enough to nicely disentangle concerns. If we want to override/implement a symbolic for a particular function we import `torch.onnx.symbolic` at the top level and get both definitions for both `symbolic_override` and the particular implementation for this op. All PRs that need to change how a given function is exported touch only `torch/onnx/symbolic.py`, and the total overhead of overriding a function is 2 lines."}