{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/361446418", "html_url": "https://github.com/pytorch/pytorch/pull/4881#issuecomment-361446418", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4881", "id": 361446418, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQ0NjQxOA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-30T01:30:20Z", "updated_at": "2018-01-30T01:43:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One thing I cut corners on in the original implementation is the handling of tensor descriptor lists: instead of allocating the pointers into a contiguous array which can be passed directly to cuDNN, I allocated a vector of <code>TensorDescriptor</code> structs (<code>unique_ptr</code> to <code>cudnnTensorStruct</code>) and generated another vector to pack the pointers together in a contiguous array. This is a bit more convenient to do because there is no way (without siccing your standards lawyers on the C++ spec) to have a vector of unique pointers place the underlying pointers contiguously.</p>\n<p>I refactored the code to allocate without the intermediate result (<a href=\"https://github.com/ezyang/pytorch-1/tree/aten-rnn-contiguous-tensor-descs\">https://github.com/ezyang/pytorch-1/tree/aten-rnn-contiguous-tensor-descs</a>), but this did not seem to help at all.</p>\n<pre><code>-----------------------------------------------------------------------------------------\n| end of epoch   1 | time: 74.01s | valid loss  5.53 | valid ppl   252.75\n-----------------------------------------------------------------------------------------\n==============================================================================\n| End of training | test loss  5.44 | test ppl   231.46\n==============================================================================\n\nreal    1m25.642s\nuser    1m9.018s\nsys     0m15.870s\n</code></pre>\n<p>One thing I did notice, doing this testing, is that the runtime of WLM does not seem to be affected whether or not <code>DEBUG</code> mode is enabled.</p>", "body_text": "One thing I cut corners on in the original implementation is the handling of tensor descriptor lists: instead of allocating the pointers into a contiguous array which can be passed directly to cuDNN, I allocated a vector of TensorDescriptor structs (unique_ptr to cudnnTensorStruct) and generated another vector to pack the pointers together in a contiguous array. This is a bit more convenient to do because there is no way (without siccing your standards lawyers on the C++ spec) to have a vector of unique pointers place the underlying pointers contiguously.\nI refactored the code to allocate without the intermediate result (https://github.com/ezyang/pytorch-1/tree/aten-rnn-contiguous-tensor-descs), but this did not seem to help at all.\n-----------------------------------------------------------------------------------------\n| end of epoch   1 | time: 74.01s | valid loss  5.53 | valid ppl   252.75\n-----------------------------------------------------------------------------------------\n==============================================================================\n| End of training | test loss  5.44 | test ppl   231.46\n==============================================================================\n\nreal    1m25.642s\nuser    1m9.018s\nsys     0m15.870s\n\nOne thing I did notice, doing this testing, is that the runtime of WLM does not seem to be affected whether or not DEBUG mode is enabled.", "body": "One thing I cut corners on in the original implementation is the handling of tensor descriptor lists: instead of allocating the pointers into a contiguous array which can be passed directly to cuDNN, I allocated a vector of `TensorDescriptor` structs (`unique_ptr` to `cudnnTensorStruct`) and generated another vector to pack the pointers together in a contiguous array. This is a bit more convenient to do because there is no way (without siccing your standards lawyers on the C++ spec) to have a vector of unique pointers place the underlying pointers contiguously.\r\n\r\nI refactored the code to allocate without the intermediate result (https://github.com/ezyang/pytorch-1/tree/aten-rnn-contiguous-tensor-descs), but this did not seem to help at all.\r\n\r\n```\r\n-----------------------------------------------------------------------------------------\r\n| end of epoch   1 | time: 74.01s | valid loss  5.53 | valid ppl   252.75\r\n-----------------------------------------------------------------------------------------\r\n==============================================================================\r\n| End of training | test loss  5.44 | test ppl   231.46\r\n==============================================================================\r\n\r\nreal    1m25.642s\r\nuser    1m9.018s\r\nsys     0m15.870s\r\n```\r\n\r\nOne thing I did notice, doing this testing, is that the runtime of WLM does not seem to be affected whether or not `DEBUG` mode is enabled."}