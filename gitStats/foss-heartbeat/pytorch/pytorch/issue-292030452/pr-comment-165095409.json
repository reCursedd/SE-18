{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165095409", "pull_request_review_id": 92973427, "id": 165095409, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTA5NTQwOQ==", "diff_hunk": "@@ -44,29 +81,33 @@ static inline void fixSizeOneDimStride(int dim, const int *size, int *stride) {\n template <typename T, cudnnStatus_t (*dtor)(T*)>\n struct DescriptorDeleter {\n   void operator()(T* x) {\n-    CUDNN_CHECK(dtor(x));\n+    if (x != nullptr) {\n+      CUDNN_CHECK(dtor(x));\n+    }\n   }\n };\n \n // A generic class for wrapping cuDNN descriptor types.  All you need\n // is to give the underlying type the Descriptor_t points to (usually,\n // if it's cudnnTensorDescriptor_t it points to cudnnTensorStruct),\n // the constructor and the destructor.  Subclasses are responsible\n-// for forwarding constructors and defining a set() function to actually\n-// set the descriptor.\n+// for defining a set() function to actually set the descriptor.\n template <typename T, cudnnStatus_t (*ctor)(T**), cudnnStatus_t (*dtor)(T*)>\n class Descriptor\n {\n public:\n-  explicit Descriptor() {\n-    T* raw_desc;\n-    CUDNN_CHECK(ctor(&raw_desc));\n-    desc_.reset(raw_desc);\n-  }\n-\n   // TODO: Figure out why const-correctness doesn't work here\n   T* desc() const { return desc_.get(); }\n   T* desc() { return desc_.get(); }\n+  T* mut_desc() { init(); return desc_.get(); }", "path": "aten/src/ATen/cudnn/Descriptors.h", "position": null, "original_position": 79, "commit_id": "ae78d3290563d944d5e884f6bfbaba8f7000d2d2", "original_commit_id": "70e3837aefb5dc1e02fedc1d7c031f3b86d34802", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "```\r\ncommit 4283e2aa899cb2008f9dea837a2923dfce09f07e\r\nAuthor: Edward Z. Yang <ezyang@fb.com>\r\nDate:   Fri Jan 26 09:48:30 2018 -0800\r\n\r\n    Lazily initialize cuDNN descriptors\r\n    \r\n    Previously, cuDNN descriptors were eagerly allocated as soon\r\n    as a FooDescriptor object was created.  However, in some uses\r\n    of TensorDescriptor, this is problematic: some tensors are optional\r\n    and cuDNN's API expects to be given a nullptr TensorDescriptor\r\n    in this case, not an uninitialized (but allocated) descriptor.\r\n    \r\n    Lazily initializing the descriptors makes it less likely for\r\n    us to use uninitialized memory and matches the usual semantics of\r\n    unique_ptr.  It's good sense!\r\n    \r\n    Signed-off-by: Edward Z. Yang <ezyang@fb.com>\r\n```\r\n\r\nThe name `mut_desc` comes from \"you should use this method if you plan to mutate the descriptor\". I'll comment that.", "created_at": "2018-01-31T15:50:57Z", "updated_at": "2018-11-23T15:38:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4881#discussion_r165095409", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4881", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165095409"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4881#discussion_r165095409"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4881"}}, "body_html": "<pre><code>commit 4283e2aa899cb2008f9dea837a2923dfce09f07e\nAuthor: Edward Z. Yang &lt;ezyang@fb.com&gt;\nDate:   Fri Jan 26 09:48:30 2018 -0800\n\n    Lazily initialize cuDNN descriptors\n    \n    Previously, cuDNN descriptors were eagerly allocated as soon\n    as a FooDescriptor object was created.  However, in some uses\n    of TensorDescriptor, this is problematic: some tensors are optional\n    and cuDNN's API expects to be given a nullptr TensorDescriptor\n    in this case, not an uninitialized (but allocated) descriptor.\n    \n    Lazily initializing the descriptors makes it less likely for\n    us to use uninitialized memory and matches the usual semantics of\n    unique_ptr.  It's good sense!\n    \n    Signed-off-by: Edward Z. Yang &lt;ezyang@fb.com&gt;\n</code></pre>\n<p>The name <code>mut_desc</code> comes from \"you should use this method if you plan to mutate the descriptor\". I'll comment that.</p>", "body_text": "commit 4283e2aa899cb2008f9dea837a2923dfce09f07e\nAuthor: Edward Z. Yang <ezyang@fb.com>\nDate:   Fri Jan 26 09:48:30 2018 -0800\n\n    Lazily initialize cuDNN descriptors\n    \n    Previously, cuDNN descriptors were eagerly allocated as soon\n    as a FooDescriptor object was created.  However, in some uses\n    of TensorDescriptor, this is problematic: some tensors are optional\n    and cuDNN's API expects to be given a nullptr TensorDescriptor\n    in this case, not an uninitialized (but allocated) descriptor.\n    \n    Lazily initializing the descriptors makes it less likely for\n    us to use uninitialized memory and matches the usual semantics of\n    unique_ptr.  It's good sense!\n    \n    Signed-off-by: Edward Z. Yang <ezyang@fb.com>\n\nThe name mut_desc comes from \"you should use this method if you plan to mutate the descriptor\". I'll comment that.", "in_reply_to_id": 164285772}