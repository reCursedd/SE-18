{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164899075", "pull_request_review_id": 92745414, "id": 164899075, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDg5OTA3NQ==", "diff_hunk": "@@ -148,10 +186,105 @@ struct SpatialTransformerDescriptor\n                       &cudnnCreateSpatialTransformerDescriptor,\n                       &cudnnDestroySpatialTransformerDescriptor>\n {\n-  SpatialTransformerDescriptor() : Descriptor() {\n-  }\n   void set(cudnnDataType_t dataType, int dim, int* size) {\n-    CUDNN_CHECK(cudnnSetSpatialTransformerNdDescriptor(desc(), CUDNN_SAMPLER_BILINEAR, dataType, dim, size));\n+    CUDNN_CHECK(cudnnSetSpatialTransformerNdDescriptor(mut_desc(), CUDNN_SAMPLER_BILINEAR, dataType, dim, size));\n+  }\n+};\n+\n+#if CUDNN_VERSION < 7000\n+\n+inline cudnnStatus_t cudnnRestoreDropoutDescriptor(\n+    cudnnDropoutDescriptor_t dropoutDesc,\n+    cudnnHandle_t handle,\n+    float dropout,\n+    void *states,\n+    size_t stateSizeInBytes,\n+    unsigned long long seed) {\n+  // Try to accurately simulate cuDNN's behavior, for our cuDNN 6 friends\n+  if (states == nullptr) return CUDNN_STATUS_INVALID_VALUE;\n+  if (stateSizeInBytes == 0) return CUDNN_STATUS_INVALID_VALUE;\n+  dropoutDesc->dropout = dropout;\n+  dropoutDesc->nstates = stateSizeInBytes;\n+  dropoutDesc->states = states;\n+  return CUDNN_STATUS_SUCCESS;\n+}\n+\n+#endif // CUDNN_VERSION\n+\n+struct DropoutDescriptor\n+  : public Descriptor<cudnnDropoutStruct,\n+                      &cudnnCreateDropoutDescriptor,\n+                      &cudnnDestroyDropoutDescriptor>\n+{\n+  at::Tensor state;\n+\n+  // This is expensive, avoid calling me!\n+  void expensiveSet(cudnnHandle_t handle, float dropout, long long int seed) {\n+    void *state_ptr = nullptr;\n+    size_t state_size = 0;\n+    if (dropout > 0) {\n+      size_t dropout_state_size;\n+      CUDNN_CHECK(cudnnDropoutGetStatesSize(handle, &dropout_state_size));\n+      state = at::CUDA(kByte).tensor({static_cast<int64_t>(dropout_state_size)});\n+      state_ptr = state.data_ptr();\n+      state_size = state.size(0);\n+    }\n+    CUDNN_CHECK(cudnnSetDropoutDescriptor(mut_desc(), handle, dropout, state_ptr, state_size, seed));\n+  }\n+\n+  // I'm cheap! Call me!\n+  // See Note [cuDNN dropout descriptor initialization]\n+  void set(cudnnHandle_t handle, float dropout, at::Tensor state_, long long int seed) {\n+    if (dropout > 0) {\n+      state = state_;\n+      void *state_ptr = state.data_ptr();\n+      size_t state_size = state.size(0);\n+      CUDNN_CHECK(cudnnRestoreDropoutDescriptor(mut_desc(), handle, dropout, state_ptr, state_size, seed));\n+    } else {\n+      // Empirically, expensiveSet is cheap when dropout is 0\n+      expensiveSet(handle, dropout, seed);\n+    }\n+  }\n+};\n+\n+struct RNNDescriptor\n+  : public Descriptor<cudnnRNNStruct,\n+                      &cudnnCreateRNNDescriptor,\n+                      &cudnnDestroyRNNDescriptor>\n+{\n+  DropoutDescriptor dropout_desc_;\n+  void set(cudnnHandle_t handle, int hidden_size, int num_layers, DropoutDescriptor&& dropout_desc,\n+           cudnnRNNInputMode_t input_mode, cudnnDirectionMode_t bidirectional,\n+           cudnnRNNMode_t mode, cudnnDataType_t datatype) {\n+    dropout_desc_ = std::move(dropout_desc);\n+    CUDNN_CHECK(cudnnSetRNNDescriptor_v6(\n+          handle,\n+          mut_desc(),\n+          hidden_size,\n+          num_layers,\n+          dropout_desc_.desc(),\n+          input_mode,\n+          bidirectional,\n+          mode,\n+          CUDNN_RNN_ALGO_STANDARD,", "path": "aten/src/ATen/cudnn/Descriptors.h", "position": 270, "original_position": 232, "commit_id": "ae78d3290563d944d5e884f6bfbaba8f7000d2d2", "original_commit_id": "70e3837aefb5dc1e02fedc1d7c031f3b86d34802", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "body": "`CUDNN_RNN_ALGO_PERSIST_STATIC` is a persistent RNN kernel, which @ngimel added support for in https://github.com/pytorch/pytorch/pull/1141 but was never merged. `CUDNN_RNN_ALGO_PERSIST_DYNAMIC` is another kind of persistent kernel, I think?", "created_at": "2018-01-30T22:28:02Z", "updated_at": "2018-11-23T15:38:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/4881#discussion_r164899075", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4881", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164899075"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4881#discussion_r164899075"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4881"}}, "body_html": "<p><code>CUDNN_RNN_ALGO_PERSIST_STATIC</code> is a persistent RNN kernel, which <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a> added support for in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"218040465\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1141\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/1141/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/1141\">#1141</a> but was never merged. <code>CUDNN_RNN_ALGO_PERSIST_DYNAMIC</code> is another kind of persistent kernel, I think?</p>", "body_text": "CUDNN_RNN_ALGO_PERSIST_STATIC is a persistent RNN kernel, which @ngimel added support for in #1141 but was never merged. CUDNN_RNN_ALGO_PERSIST_DYNAMIC is another kind of persistent kernel, I think?", "in_reply_to_id": 164285831}