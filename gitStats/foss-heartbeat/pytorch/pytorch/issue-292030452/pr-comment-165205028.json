{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165205028", "pull_request_review_id": 93104698, "id": 165205028, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTIwNTAyOA==", "diff_hunk": "@@ -0,0 +1,896 @@\n+#include <ATen/ATen.h>\n+#include <ATen/NativeFunctions.h>\n+#include <ATen/Config.h>\n+#include <ATen/MatrixRef.h>\n+\n+#if !AT_CUDNN_ENABLED()\n+\n+namespace at { namespace native {\n+\n+// See Note [ATen preprocessor philosophy]\n+\n+Tensor _cudnn_rnn_flatten_weight(\n+    TensorList weight_arr, int64_t weight_stride0,\n+    int64_t input_size,\n+    int64_t fn_mode, int64_t fn_hidden_size,\n+    int64_t fn_num_layers, bool batch_first,\n+    bool fn_bidirectional\n+    ) {\n+  throw std::runtime_error(\"_cudnn_rnn_flatten_weight: ATen not compiled with cuDNN support\");\n+}\n+\n+std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor> _cudnn_rnn(\n+    const Tensor& input_r,\n+    TensorList weight, int64_t weight_stride0,\n+    const Tensor& weight_buf_r, const Tensor& hx, const Tensor& cx,\n+    int64_t fn_mode, int64_t fn_hidden_size,\n+    int64_t fn_num_layers, bool batch_first, double fn_dropout,\n+    bool fn_train, bool fn_bidirectional, IntList fn_batch_sizes,\n+    const Tensor& fn_dropout_state\n+    ) {\n+  throw std::runtime_error(\"_cudnn_rnn: ATen not compiled with cuDNN support\");\n+}\n+\n+std::tuple<Tensor, Tensor, Tensor, std::vector<Tensor>> _cudnn_rnn_backward(\n+    const Tensor& input, TensorList weight, int64_t weight_stride0, const Tensor& weight_buf, const Tensor& hx, const Tensor& cx,\n+    const Tensor& output, const Tensor& grad_output_r, const Tensor& grad_hy_r,\n+    const Tensor& grad_cy_r,\n+    int64_t mode, int64_t hidden_size,\n+    int64_t num_layers, bool batch_first, double dropout,\n+    bool train, bool bidirectional, IntList batch_sizes,\n+    const Tensor& dropout_state, const Tensor& reserve,\n+    std::array<bool, 4> output_mask\n+    ) {\n+  throw std::runtime_error(\"_cudnn_rnn_backward: ATen not compiled with cuDNN support\");\n+}\n+\n+}} // namespace at::native\n+\n+#else // AT_CUDNN_ENABLED()\n+\n+#include <ATen/cudnn/cudnn-wrapper.h>\n+#include <ATen/cudnn/Descriptors.h>\n+#include <ATen/cudnn/Types.h>\n+#include <ATen/cudnn/Utils.h>\n+\n+namespace at { namespace native {\n+\n+namespace {\n+  // DropoutDescriptor\n+\n+  struct DropoutDescriptorParams {\n+    bool train;\n+    double dropout;\n+    Tensor dropout_state;\n+    DropoutDescriptorParams() {}\n+    void set(bool train_, double dropout_, Tensor dropout_state_) {\n+      train = train_;\n+      dropout = dropout_;\n+      dropout_state = dropout_state_;\n+    }\n+    DropoutDescriptor descriptor(cudnnHandle_t handle) const {\n+      // NB: dropout_seed passed dummy 0, because it isn't actually used\n+      // when dropout_state is defined.\n+      auto dropout_p = train ? dropout : 0;\n+      DropoutDescriptor dropout_desc;\n+      dropout_desc.set(handle, dropout_p, dropout_state, 0);\n+      return dropout_desc;\n+    }\n+  };\n+\n+  // RNNDescriptor\n+\n+  struct RNNDescriptorParams {\n+    int64_t hidden_size;\n+    int64_t num_layers;\n+    cudnnDirectionMode_t bidirectional;\n+    cudnnRNNMode_t mode;\n+    cudnnDataType_t datatype;\n+\n+    cudnnRNNInputMode_t input_mode = CUDNN_LINEAR_INPUT;\n+\n+    int64_t num_directions() const {\n+      return bidirectional ? 2 : 1;\n+    }\n+\n+    void set_mode(int64_t fn_mode) {\n+      switch (fn_mode) {\n+        case CUDNN_RNN_RELU:\n+          mode = CUDNN_RNN_RELU;\n+          break;\n+        case CUDNN_RNN_TANH:\n+          mode = CUDNN_RNN_TANH;\n+          break;\n+        case CUDNN_LSTM:\n+          mode = CUDNN_LSTM;\n+          break;\n+        case CUDNN_GRU:\n+          mode = CUDNN_GRU;\n+          break;\n+        default:\n+          throw std::runtime_error(\"unrecognized mode\"); // TODO\n+      }\n+    }\n+\n+    void set_bidirectional(bool fn_bidirectional) {\n+      bidirectional = fn_bidirectional ? CUDNN_BIDIRECTIONAL : CUDNN_UNIDIRECTIONAL;\n+    }\n+\n+    RNNDescriptor descriptor(cudnnHandle_t handle, DropoutDescriptor&& dropout_desc) const {\n+      RNNDescriptor rnn_desc;\n+      rnn_desc.set(handle, hidden_size, num_layers, std::move(dropout_desc), input_mode, bidirectional, mode, datatype);\n+      return rnn_desc;\n+    }\n+\n+    RNNDescriptor descriptor(cudnnHandle_t handle) const {\n+      DropoutDescriptor dropout_desc;\n+      dropout_desc.set(handle, 0, {}, 0);\n+      return descriptor(handle, std::move(dropout_desc));\n+    }\n+  };\n+\n+  // TensorDescriptor list\n+\n+  std::vector<TensorDescriptor> rnn_descriptor_sequence(const Tensor& tensor, IntList batch_sizes) {\n+    std::vector<TensorDescriptor> descriptors(batch_sizes.size());\n+    size_t i = 0;\n+    for (auto batch_size : batch_sizes) {\n+      // NB: The narrow is solely to adjust the batch size; to do it\n+      // accurately we would have to adjust the start index as well,\n+      // but the pointer location isn't actually used so we can skip it.\n+      // NB: cuDNN RNN API has an undocumented requirement that all\n+      // tensors have dimension 5.\n+      descriptors[i].set(tensor.narrow(0, 0, batch_size), 5);\n+      i++;\n+    }\n+    return descriptors;\n+  }\n+\n+  std::vector<TensorDescriptor> rnn_descriptor(const Tensor& tensor, int64_t N) {\n+    std::vector<TensorDescriptor> descriptors(N);\n+    for (int64_t i = 0; i < N; i++) {\n+      descriptors[i].set(tensor, 5);\n+    }\n+    return descriptors;\n+  }\n+\n+  struct TensorDescriptorListParams {\n+    IntList batch_sizes;\n+    int64_t seq_length;\n+    int64_t mini_batch;\n+    int64_t inner_size;  // previously known as \"input_size\"\n+    int64_t outer_size;  // only valid when !is_input_packed\n+\n+    bool is_input_packed() const {\n+      return batch_sizes.size() != 0;\n+    }\n+\n+    void set(IntList input_size, IntList batch_sizes_, bool batch_first) {\n+      batch_sizes = batch_sizes_;\n+      if (is_input_packed()) {\n+        seq_length = batch_sizes.size();\n+        mini_batch = batch_sizes[0];\n+        // NB: When input is packed, the mini_batch size is NOT the size\n+        // of the outer dimension\n+        outer_size = input_size[0];\n+        inner_size = input_size[1];\n+      } else {\n+        if (batch_first) {\n+          seq_length = input_size[1];\n+          mini_batch = input_size[0];\n+        } else {\n+          seq_length = input_size[0];\n+          mini_batch = input_size[1];\n+        }\n+        inner_size = input_size[2];\n+      }\n+    }\n+\n+    // TODO: check x for consistency with input_size?\n+    std::vector<TensorDescriptor> descriptors(Tensor x) const {\n+      auto is_input_packed = batch_sizes.size() != 0;\n+      if (is_input_packed) {\n+        return rnn_descriptor_sequence(x, batch_sizes);\n+      } else {\n+        return rnn_descriptor(x[0], seq_length);\n+      }\n+    }\n+  };\n+\n+  // Everything together\n+\n+  struct RNNParams {\n+    DropoutDescriptorParams dropout;\n+    RNNDescriptorParams rnn;\n+    TensorDescriptorListParams tensors;\n+  };\n+\n+  // NB: Doesn't include the weight descriptor\n+  struct RNNDescriptors {\n+    RNNDescriptor rnn_desc;\n+    // NB: this won't actually lay out the tensor descriptor pointers\n+    // in the right way, so you'll have to preprocess them\n+    std::vector<TensorDescriptor> x_descs;\n+    std::vector<TensorDescriptor> y_descs;\n+    TensorDescriptor hx_desc;\n+    TensorDescriptor hy_desc;\n+    TensorDescriptor cx_desc;\n+    TensorDescriptor cy_desc;\n+\n+    RNNDescriptors(const RNNParams& fn, cudnnHandle_t handle, Tensor x, Tensor y, Tensor hx, Tensor cx) {\n+      rnn_desc = fn.rnn.descriptor(handle, fn.dropout.descriptor(handle));\n+      x_descs = fn.tensors.descriptors(x);\n+      y_descs = fn.tensors.descriptors(y);\n+      hx_desc.set(hx, 5);\n+      hy_desc.set(hx, 5);\n+      if (cx.defined()) {\n+        cx_desc.set(cx, 5);\n+        cy_desc.set(cx, 5);\n+      }\n+    }\n+\n+    // TODO: This is annoying, having to put the cudnnTensorDescriptor_t\n+    // in a contiguous array...\n+    std::vector<cudnnTensorDescriptor_t> get_descs(const std::vector<TensorDescriptor>& descs) {\n+      std::vector<cudnnTensorDescriptor_t> r;\n+      r.reserve(descs.size());\n+      for (auto& desc : descs) {\n+        r.emplace_back(desc.desc());\n+      }\n+      return r;\n+    }\n+\n+    std::vector<cudnnTensorDescriptor_t> get_x_descs() {\n+      return get_descs(x_descs);\n+    }\n+\n+    std::vector<cudnnTensorDescriptor_t> get_y_descs() {\n+      return get_descs(y_descs);\n+    }\n+  };\n+\n+  int64_t get_num_weights(cudnnHandle_t handle, const RNNDescriptor& rnn_desc,\n+                          const TensorDescriptor& x_desc, cudnnDataType_t datatype) {\n+    size_t weight_size;\n+    CUDNN_CHECK(cudnnGetRNNParamsSize(handle, rnn_desc.desc(), x_desc.desc(), &weight_size, datatype));\n+    auto elem_size = dataSize(datatype);\n+    AT_ASSERT(weight_size % elem_size == 0, \"cudnnGetRNNParamsSize returned nonsensical weight_size\");\n+    return weight_size / elem_size;\n+  }\n+\n+  int64_t _num_linear_layers(cudnnRNNMode_t mode) {\n+    switch(mode) {\n+      case CUDNN_LSTM:\n+        return 8;\n+      case CUDNN_GRU:\n+        return 6;\n+      case CUDNN_RNN_RELU:\n+        return 2;\n+      case CUDNN_RNN_TANH:\n+        return 2;\n+      default:\n+        at::runtime_error(\"unknown cuDNN RNN mode %d\", mode);\n+    }\n+  }\n+\n+  /*\n+    Returns weight and bias tensors for each layer of the RNN. These tensors\n+    are views on the underlying weight buffer allocated by CuDNN.\n+\n+    Note: for LSTM and GRU, which have multiple parameters of each type (4 and 3, respectively),\n+          these parameters are concatenated along the first dimension.\n+          These parameters are returned in a consistent order by CuDNN:\n+              (reset, forget, cell, output) for LSTM\n+              (reset, input, new) for GRU\n+    Args:\n+        fn: The RNN function object holding the RNN state\n+        handle: a CuDNN handle\n+        weight_buf: a 1D tensor containing the CuDNN-allocated weight (or grad_weight) buffer\n+    Returns:\n+        parameters: [(weight_ih, weight_hh, bias_ih, bias_hh)*], with length equal to the num_layers.\n+            This is represented as a pair of vector, and outer-dimension stride\n+            (NB: Can't return MatrixRef because we need to allocate the underlying tensor)\n+  */\n+  std::pair<std::vector<Tensor>, size_t> // stride0\n+  get_parameters(\n+      cudnnHandle_t handle,\n+      const RNNDescriptorParams& rnn,\n+      const RNNDescriptor& rnn_desc,\n+      const TensorDescriptor& x_desc,\n+      const FilterDescriptor& w_desc,\n+      const Tensor& weight_buf\n+  ) {\n+    auto cudnn_methods = { cudnnGetRNNLinLayerMatrixParams, cudnnGetRNNLinLayerBiasParams };\n+    std::vector<Tensor> params;\n+    int64_t num_linear_layers = _num_linear_layers(rnn.mode);\n+    int64_t num_layers = rnn.num_directions() * rnn.num_layers;\n+    size_t cur_offset = 0;\n+    size_t global_layer_params_count = 0;\n+    for (int64_t layer = 0; layer < num_layers; layer++) {\n+      size_t layer_params_count = 0;\n+      for (auto cudnn_method : cudnn_methods) {\n+        for (int64_t linear_id = 0; linear_id < num_linear_layers; linear_id++) {\n+          FilterDescriptor lin_layer_mat_desc;\n+          void* matrix_pointer;\n+          CUDNN_CHECK(cudnn_method(\n+                handle,\n+                rnn_desc.desc(),\n+                layer,\n+                x_desc.desc(),\n+                w_desc.desc(),\n+                weight_buf.data_ptr(),\n+                linear_id,\n+                lin_layer_mat_desc.mut_desc(),\n+                &matrix_pointer\n+                ));\n+          cudnnDataType_t data_type;\n+          cudnnTensorFormat_t format;\n+          int nb_dims;\n+          constexpr int min_dim = 3;\n+          // TODO: The use of CPU tensor here is a bit goofy in C++,\n+          // some sort of alloca would be good enough except that it is\n+          // kind of convenient to be able to prod() on it.\n+          Tensor filter_dim_a = at::CPU(kInt).tensor(min_dim);\n+          CUDNN_CHECK(cudnnGetFilterNdDescriptor(\n+                lin_layer_mat_desc.desc(),\n+                min_dim,\n+                &data_type,\n+                &format,\n+                &nb_dims,\n+                filter_dim_a.data<int>()\n+                ));\n+\n+          AT_ASSERT(nb_dims <= min_dim, \"cudnnGetFilterNdDescriptor failed nb_dims (%d) <= min_dim (%d)\", nb_dims, min_dim);\n+          auto elem_size = dataSize(rnn.datatype);\n+          auto offset_bytes = (char*)matrix_pointer - (char*)weight_buf.data_ptr();\n+          AT_ASSERT(offset_bytes % elem_size == 0, \"offset_bytes `mod` elem_size != 0 (%d %% %d)\", offset_bytes, elem_size);\n+          size_t offset = offset_bytes / elem_size;\n+\n+          // for all the RNN types provided by CUDNN, all the ih weights\n+          // are the same size and are allocated in a contiguous chunk\n+          // (same for the hh weights, and the ih and hh biases).\n+          // Since we're storing all the weights in a single tensor anyway,\n+          // might as well merge the CUDNN ones into a single tensor as well\n+          if (linear_id == 0 || linear_id == num_linear_layers / 2) {\n+            AT_ASSERT(*filter_dim_a.prod().data<int>() == *filter_dim_a[0].data<int>(), \"filter_dim_a.prod() == filter_dim_a[0]\");\n+            std::initializer_list<int64_t> size = {\n+              *filter_dim_a[0].data<int>() * num_linear_layers / 2,\n+              *filter_dim_a[2].data<int>()};\n+            Tensor param = weight_buf.type().tensor().set_(*weight_buf.storage(), offset, size);\n+            params.emplace_back(std::move(param));\n+            layer_params_count++;\n+          } else {\n+            AT_ASSERT(cur_offset == offset, \"cur_offset == offset\");\n+          }\n+          cur_offset = offset + *filter_dim_a[0].data<int>();\n+        }\n+      } // for cudnn_method\n+      if (layer == 0) {\n+        global_layer_params_count = layer_params_count;\n+      } else {\n+        AT_ASSERT(global_layer_params_count == layer_params_count, \"%d (global) != %d\", global_layer_params_count, layer_params_count);\n+      }\n+    } // for layer\n+    return std::make_pair(params, global_layer_params_count);\n+  }\n+\n+  void _copyParams(MatrixRef<Tensor> params_from, MatrixRef<Tensor> params_to) {\n+    AT_ASSERT(params_from.size(0) == params_to.size(0), \"number of layers mismatch\");\n+    for (size_t i = 0; i < params_from.size(0); i++) {\n+      auto layer_params_from = params_from[i];\n+      auto layer_params_to = params_to[i];\n+      for (auto a = layer_params_from.begin(), b = layer_params_to.begin();\n+           a != layer_params_from.end() && b != layer_params_to.end();\n+           ++a, ++b) {\n+        auto param_from = *a, param_to = *b;\n+        AT_ASSERT(param_from.type() == param_to.type(), \"parameter types mismatch\");\n+        param_to.copy_(param_from.view_as(param_to));\n+      }\n+    }\n+  }\n+\n+  std::vector<int64_t> _input_size(const TensorDescriptorListParams& tensors) {\n+    if (tensors.is_input_packed()) {\n+      return {tensors.outer_size, tensors.inner_size};\n+    } else {\n+      return {tensors.seq_length, tensors.mini_batch, tensors.inner_size};\n+    }\n+  }\n+\n+  std::vector<int64_t> _hidden_size(const RNNDescriptorParams& rnn, const TensorDescriptorListParams& tensors) {\n+    return {rnn.num_layers * rnn.num_directions(), tensors.mini_batch, rnn.hidden_size};\n+  }\n+\n+  std::vector<int64_t> _output_size(const RNNDescriptorParams& rnn, const TensorDescriptorListParams& tensors) {\n+    if (tensors.is_input_packed()) {\n+      return {tensors.outer_size, rnn.hidden_size * rnn.num_directions()};\n+    } else {\n+      return {tensors.seq_length, tensors.mini_batch, rnn.hidden_size * rnn.num_directions()};\n+    }\n+  }\n+\n+} // anonymous namespace\n+\n+// NB: does inplace update into TensorList\n+// It would be a relatively simple matter to refactor this into multiple\n+// functions, only one of which does an inplace update, but we leave this\n+// for future work\n+Tensor _cudnn_rnn_flatten_weight(\n+    TensorList weight_arr, int64_t weight_stride0,\n+    int64_t input_size,\n+    int64_t fn_mode, int64_t fn_hidden_size,\n+    int64_t fn_num_layers, bool batch_first,\n+    bool fn_bidirectional\n+    ) {\n+\n+  if (weight_arr.size() == 0) {\n+    throw std::runtime_error(\"_cudnn_rnn_flatten_weight_: cannot flatten empty weight list\");\n+  }\n+\n+  auto any_param = weight_arr[0];\n+\n+  RNNDescriptorParams rnn;\n+  rnn.set_mode(fn_mode);\n+  rnn.hidden_size = fn_hidden_size;\n+  rnn.num_layers = fn_num_layers;\n+  rnn.set_bidirectional(fn_bidirectional);\n+  rnn.datatype = getCudnnDataType(any_param);\n+\n+  auto handle = getCudnnHandle();\n+  // NB: So, I am pretty sure that get_parameters() does not rely in any way\n+  // on the dropout descriptor.  So we fake up a dummy one instead of try\n+  // to actually make one legitimately.\n+  RNNDescriptor rnn_desc = rnn.descriptor(handle);\n+\n+  // TODO: allocation here is goofy\n+  TensorDescriptor x_desc(any_param.type().tensor({1, input_size}), 5);\n+\n+  auto num_weights = get_num_weights(handle, rnn_desc, x_desc, rnn.datatype);\n+  auto weight_buf = any_param.type().tensor(num_weights).zero_();\n+\n+  FilterDescriptor w_desc;\n+  w_desc.set(weight_buf, 3);\n+\n+  // Slice off views into weight_buf\n+  std::vector<Tensor> params_arr;\n+  size_t params_stride0;\n+  std::tie(params_arr, params_stride0) = get_parameters(handle, rnn, rnn_desc, x_desc, w_desc, weight_buf);\n+\n+  MatrixRef<Tensor> weight{weight_arr, static_cast<size_t>(weight_stride0)},\n+                    params{params_arr, params_stride0};\n+\n+  // Copy weights\n+  _copyParams(weight, params);\n+\n+  // Update the storage\n+  for (size_t i = 0; i < weight.size(0); i++) {\n+    for (auto orig_param_it = weight[i].begin(), new_param_it = params[i].begin();\n+         orig_param_it != weight[i].end() && new_param_it != params[i].end();\n+         orig_param_it++, new_param_it++) {\n+      auto orig_param = *orig_param_it, new_param = *new_param_it;\n+      orig_param.set_(new_param.view_as(orig_param));\n+    }\n+  }\n+\n+  return weight_buf;\n+}\n+\n+// NB: when fn_batch_sizes is empty, that means no batch sizes was specified\n+std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor> _cudnn_rnn(\n+    const Tensor& input_r,\n+    TensorList weight, int64_t weight_stride0,\n+    const Tensor& weight_buf_r, const Tensor& hx, const Tensor& cx,\n+    int64_t fn_mode, int64_t fn_hidden_size,\n+    int64_t fn_num_layers, bool batch_first, double fn_dropout,\n+    bool fn_train, bool fn_bidirectional, IntList fn_batch_sizes,\n+    const Tensor& fn_dropout_state\n+    ) {\n+\n+  auto input = input_r;\n+  auto weight_buf = weight_buf_r;\n+\n+  RNNParams fn;\n+  fn.rnn.set_mode(fn_mode);\n+  fn.rnn.hidden_size = fn_hidden_size;\n+  fn.rnn.num_layers = fn_num_layers;\n+  fn.rnn.set_bidirectional(fn_bidirectional);\n+  fn.rnn.datatype = getCudnnDataType(input);\n+  fn.dropout.set(fn_train, fn_dropout, fn_dropout_state);\n+  fn.tensors.set(input.sizes(), fn_batch_sizes, batch_first);\n+\n+  // TODO: Set device to input\n+\n+  if (fn.rnn.mode != CUDNN_LSTM) {\n+    if (cx.defined()) {\n+      throw std::runtime_error(\"rnn: illegal defined cx for non-LSTM RNN\");\n+    }\n+  }\n+\n+  // TODO: can batch_first be a wrapper around this function?\n+  auto is_input_packed = fn.tensors.batch_sizes.size() != 0;\n+  if (batch_first && !is_input_packed) {\n+    input = input.transpose(0, 1);\n+  }\n+\n+  auto hidden_size = _hidden_size(fn.rnn, fn.tensors);\n+  auto output_size = _output_size(fn.rnn, fn.tensors);\n+\n+  AT_ASSERT(hx.is_contiguous(), \"hx.is_contiguous()\");\n+  AT_ASSERT(!cx.defined() || cx.is_contiguous(), \"!cx or cx.is_contiguous()\");\n+\n+  auto x = input.contiguous();\n+  auto output = input.type().tensor(output_size);\n+  auto hy = hx.type().tensor(hidden_size);\n+  Tensor cy;\n+  if (cx.defined()) {\n+    cy = cx.type().tensor(hidden_size);\n+  } else {\n+    cy = hx.type().tensor(); // NB: Not allowed to return undefined tensors", "path": "aten/src/ATen/native/cudnn/RNN.cpp", "position": 619, "original_position": 528, "commit_id": "ae78d3290563d944d5e884f6bfbaba8f7000d2d2", "original_commit_id": "b5bd576921dacf1771688493014b39e5faf5f6e3", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It's the ATen native function tensor output definedness contract. All output tensors of an ATen native function MUST be defined, unless this is the ith output of a backwards function where `grad_input_mask[i]` is false. Therefore we must return a dummy tensor.\r\n\r\n(P.S. I don't *like* this contract but I haven't investigated what would be necessary to relax it.)", "created_at": "2018-01-31T22:16:01Z", "updated_at": "2018-11-23T15:38:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/4881#discussion_r165205028", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4881", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165205028"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4881#discussion_r165205028"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4881"}}, "body_html": "<p>It's the ATen native function tensor output definedness contract. All output tensors of an ATen native function MUST be defined, unless this is the ith output of a backwards function where <code>grad_input_mask[i]</code> is false. Therefore we must return a dummy tensor.</p>\n<p>(P.S. I don't <em>like</em> this contract but I haven't investigated what would be necessary to relax it.)</p>", "body_text": "It's the ATen native function tensor output definedness contract. All output tensors of an ATen native function MUST be defined, unless this is the ith output of a backwards function where grad_input_mask[i] is false. Therefore we must return a dummy tensor.\n(P.S. I don't like this contract but I haven't investigated what would be necessary to relax it.)", "in_reply_to_id": 165021767}