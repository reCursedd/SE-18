{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193251206", "pull_request_review_id": 126187830, "id": 193251206, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzI1MTIwNg==", "diff_hunk": "@@ -445,7 +488,29 @@ at::optional<std::vector<Value*>> tryMatchSchema(\n         v.value = createStack(graph, loc, unpacked);\n       }\n \n-      if(!v.value->type()->isSubtypeOf(*arg.type)) {\n+      bool skip_subtype_check = false;\n+\n+      // implicit conversion from Python scalar to Tensor if applicable.\n+      // Occurs when we math tensors & scalars (ie, `x + 3.1` or `3.1 * 2.7`)\n+      if (arg.type->isSubtypeOf(*DynamicType::get()) && isPythonScalar(v.value->type())) {\n+        // Does not looked at named arguments or default args.\n+        // This is only used in math functions (+-*/) so this is okay.\n+        auto repr_val = determinePythonMathType(schema, inputs);\n+        if (repr_val) {\n+          // cast to tensor's type (ScalarType and backend)\n+          std::vector<Value*> type_as_args({ v.value, repr_val.value().value });\n+          auto* castNode = graph.insertNode(\n+            graph.create(aten::type_as, type_as_args)\n+            ->setSourceLocation(std::make_shared<SourceRange>(loc)));\n+          v.value = castNode->output();\n+        } else {\n+          // No casting needs to be done, however, FloatType / IntType are NOT\n+          // tensor types so we should skip the below subtype check.\n+          skip_subtype_check = true;", "path": "torch/csrc/jit/script/compiler.cpp", "position": 84, "original_position": 84, "commit_id": "a37beb1f8df1abf2a3e818f17c5a9ec4e6575fdd", "original_commit_id": "a37beb1f8df1abf2a3e818f17c5a9ec4e6575fdd", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This skip logic is going to be fragile. Ideally, I'd introduce and insert a prim::cast node here whose only purpose is to mark the change in type, but it would require more fundamental changes downstream. For now, let's keep this as is, but we should reconsider if omitting explicit casts is every a source of bugs.", "created_at": "2018-06-05T23:21:50Z", "updated_at": "2018-11-23T15:45:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/8177#discussion_r193251206", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8177", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193251206"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8177#discussion_r193251206"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8177"}}, "body_html": "<p>This skip logic is going to be fragile. Ideally, I'd introduce and insert a prim::cast node here whose only purpose is to mark the change in type, but it would require more fundamental changes downstream. For now, let's keep this as is, but we should reconsider if omitting explicit casts is every a source of bugs.</p>", "body_text": "This skip logic is going to be fragile. Ideally, I'd introduce and insert a prim::cast node here whose only purpose is to mark the change in type, but it would require more fundamental changes downstream. For now, let's keep this as is, but we should reconsider if omitting explicit casts is every a source of bugs."}