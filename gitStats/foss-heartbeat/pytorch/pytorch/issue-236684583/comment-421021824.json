{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421021824", "html_url": "https://github.com/pytorch/pytorch/issues/1834#issuecomment-421021824", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1834", "id": 421021824, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTAyMTgyNA==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-13T14:12:54Z", "updated_at": "2018-09-13T14:12:54Z", "author_association": "MEMBER", "body_html": "<p>You can do something like</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">numpy_nonzero</span>(<span class=\"pl-smi\">tensor</span>):\n    <span class=\"pl-k\">return</span> torch.unbind(tensor.nonzero(), <span class=\"pl-c1\">1</span>)\n\nidxs <span class=\"pl-k\">=</span> numpy_nonzero(some_mask)\nsome_tensor <span class=\"pl-k\">=</span> some_tensor[idxs]</pre></div>\n<p>Since the addition of tensors with 0 in its dimensions, the amount of workaround you need to do becomes way smaller.<br>\nAlso, note that you can just as well do</p>\n<div class=\"highlight highlight-source-python\"><pre>some_tensor <span class=\"pl-k\">=</span> some_tensor[mask]</pre></div>\n<p>which internally performs <code>nonzero</code> for you.</p>", "body_text": "You can do something like\ndef numpy_nonzero(tensor):\n    return torch.unbind(tensor.nonzero(), 1)\n\nidxs = numpy_nonzero(some_mask)\nsome_tensor = some_tensor[idxs]\nSince the addition of tensors with 0 in its dimensions, the amount of workaround you need to do becomes way smaller.\nAlso, note that you can just as well do\nsome_tensor = some_tensor[mask]\nwhich internally performs nonzero for you.", "body": "You can do something like\r\n```python\r\ndef numpy_nonzero(tensor):\r\n    return torch.unbind(tensor.nonzero(), 1)\r\n\r\nidxs = numpy_nonzero(some_mask)\r\nsome_tensor = some_tensor[idxs]\r\n```\r\n\r\nSince the addition of tensors with 0 in its dimensions, the amount of workaround you need to do becomes way smaller.\r\nAlso, note that you can just as well do\r\n```python\r\nsome_tensor = some_tensor[mask]\r\n```\r\nwhich internally performs `nonzero` for you."}