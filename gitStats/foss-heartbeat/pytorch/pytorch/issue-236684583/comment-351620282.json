{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351620282", "html_url": "https://github.com/pytorch/pytorch/issues/1834#issuecomment-351620282", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1834", "id": 351620282, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTYyMDI4Mg==", "user": {"login": "davidbau", "id": 3458792, "node_id": "MDQ6VXNlcjM0NTg3OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3458792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbau", "html_url": "https://github.com/davidbau", "followers_url": "https://api.github.com/users/davidbau/followers", "following_url": "https://api.github.com/users/davidbau/following{/other_user}", "gists_url": "https://api.github.com/users/davidbau/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbau/subscriptions", "organizations_url": "https://api.github.com/users/davidbau/orgs", "repos_url": "https://api.github.com/users/davidbau/repos", "events_url": "https://api.github.com/users/davidbau/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbau/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-14T06:24:23Z", "updated_at": "2017-12-14T08:38:00Z", "author_association": "NONE", "body_html": "<p>Another reason to resemble numpy: the pytorch sparse API COO format is also sideways from the output of nonzero (but matches the orientation as numpy).  Would make sense to allow a sparse constructor to plug directly in to nonzero(), or follow the same convention.</p>\n<p>Tuple isn't necessarily needed - if nonzero() returned the transpose of what it currently does, you could pretty conveniently use z[tuple(z.nonzero())] to use it as an index.</p>", "body_text": "Another reason to resemble numpy: the pytorch sparse API COO format is also sideways from the output of nonzero (but matches the orientation as numpy).  Would make sense to allow a sparse constructor to plug directly in to nonzero(), or follow the same convention.\nTuple isn't necessarily needed - if nonzero() returned the transpose of what it currently does, you could pretty conveniently use z[tuple(z.nonzero())] to use it as an index.", "body": "Another reason to resemble numpy: the pytorch sparse API COO format is also sideways from the output of nonzero (but matches the orientation as numpy).  Would make sense to allow a sparse constructor to plug directly in to nonzero(), or follow the same convention.\r\n\r\nTuple isn't necessarily needed - if nonzero() returned the transpose of what it currently does, you could pretty conveniently use z[tuple(z.nonzero())] to use it as an index."}