{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12562", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12562/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12562/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12562/events", "html_url": "https://github.com/pytorch/pytorch/issues/12562", "id": 368970882, "node_id": "MDU6SXNzdWUzNjg5NzA4ODI=", "number": 12562, "title": "Declarations.yaml cleanup", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-11T06:28:58Z", "updated_at": "2018-11-06T23:04:50Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Based on notes from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a>.</p>\n<p>We'd like Declarations.yaml to be the single, externally visible API that all consumers, both internal and external, go through. Up until now, it has been designed under the assumption that only internal consumers make use of it, and that we can refactor these consumers when we wish to change Declarations.yaml. However, we have quickly gotten into a state where even our internal consumers are unmaintainable. This issue tracks a list of changes we'd like to apply to Declarations.yaml.</p>\n<p>Meta-principle: the metadata for a type primarily consists of the type string (e.g., <code>f(Tensor x, Tensor y) -&gt; Tensor</code>). However, there may be some other metadata.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Stop hard-coding the list of arguments that <code>TensorOptions</code> expands into. Instead, the list of kwargs a TensorOptions expands into should be specified only once and used everywhere.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> De-C++-ify our type syntax. This means no more putting <code>Tensor &amp;</code> in an input type (so basically, drop <code>type</code> and use <code>dynamic_type</code> only). Our type system should be C++/Python-agnostic. To determine if something has a reference or not, should be determined if the parameter in question is an input or output parameter, which should be part of the type string.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Add optional to the type syntax. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9443650\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wanchaol\">@wanchaol</a> is working on this</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Replace <code>method_of</code> with a simple list of <code>method</code> and/or <code>function</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>python_default_init</code> entirely; once optional is supported, any arguments which have \"complex\" default values can simply specify the argument as optional, and then let the kernel compute the default argument itself</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Unify <code>default_init</code> and <code>init</code>. We think we have two only because TH and native had different paths, accidentally.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Augment type strings with alias sets, perhaps with exclamation marks. This could be used to remove <code>output</code> annotations. This will be handled by the JIT team.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>is_type_dispatched</code>. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> is working on this</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>buffers</code>. These would be replaced as outputs of \"inner\" native functions, which are the actual differentiable functions. Blocked on adding named outputs.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Add named outputs, ala <code>f(Tensor x) -&gt; (Tensor out, Tensor buf)</code>. This helps the clarity of defining derivatives for multi-return functions.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>method_prefix_derived</code>, since we have eliminated most broadcasting from Type</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>mode</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>inplace</code>, instead inferring it from the name of a function. Put this inference function in one place and make everyone use it.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Eliminate <code>device_guard</code>, no one actually needs it anymore</li>\n</ul>", "body_text": "Based on notes from @ezyang, @zdevito and @gchanan.\nWe'd like Declarations.yaml to be the single, externally visible API that all consumers, both internal and external, go through. Up until now, it has been designed under the assumption that only internal consumers make use of it, and that we can refactor these consumers when we wish to change Declarations.yaml. However, we have quickly gotten into a state where even our internal consumers are unmaintainable. This issue tracks a list of changes we'd like to apply to Declarations.yaml.\nMeta-principle: the metadata for a type primarily consists of the type string (e.g., f(Tensor x, Tensor y) -> Tensor). However, there may be some other metadata.\n\n Stop hard-coding the list of arguments that TensorOptions expands into. Instead, the list of kwargs a TensorOptions expands into should be specified only once and used everywhere.\n De-C++-ify our type syntax. This means no more putting Tensor & in an input type (so basically, drop type and use dynamic_type only). Our type system should be C++/Python-agnostic. To determine if something has a reference or not, should be determined if the parameter in question is an input or output parameter, which should be part of the type string.\n Add optional to the type syntax. @wanchaol is working on this\n Replace method_of with a simple list of method and/or function.\n Eliminate python_default_init entirely; once optional is supported, any arguments which have \"complex\" default values can simply specify the argument as optional, and then let the kernel compute the default argument itself\n Unify default_init and init. We think we have two only because TH and native had different paths, accidentally.\n Augment type strings with alias sets, perhaps with exclamation marks. This could be used to remove output annotations. This will be handled by the JIT team.\n Eliminate is_type_dispatched. @gchanan is working on this\n Eliminate buffers. These would be replaced as outputs of \"inner\" native functions, which are the actual differentiable functions. Blocked on adding named outputs.\n Add named outputs, ala f(Tensor x) -> (Tensor out, Tensor buf). This helps the clarity of defining derivatives for multi-return functions.\n Eliminate method_prefix_derived, since we have eliminated most broadcasting from Type\n Eliminate mode\n Eliminate inplace, instead inferring it from the name of a function. Put this inference function in one place and make everyone use it.\n Eliminate device_guard, no one actually needs it anymore", "body": "Based on notes from @ezyang, @zdevito and @gchanan.\r\n\r\nWe'd like Declarations.yaml to be the single, externally visible API that all consumers, both internal and external, go through. Up until now, it has been designed under the assumption that only internal consumers make use of it, and that we can refactor these consumers when we wish to change Declarations.yaml. However, we have quickly gotten into a state where even our internal consumers are unmaintainable. This issue tracks a list of changes we'd like to apply to Declarations.yaml.\r\n\r\nMeta-principle: the metadata for a type primarily consists of the type string (e.g., `f(Tensor x, Tensor y) -> Tensor`). However, there may be some other metadata.\r\n\r\n- [ ] Stop hard-coding the list of arguments that `TensorOptions` expands into. Instead, the list of kwargs a TensorOptions expands into should be specified only once and used everywhere.\r\n- [ ] De-C++-ify our type syntax. This means no more putting `Tensor &` in an input type (so basically, drop `type` and use `dynamic_type` only). Our type system should be C++/Python-agnostic. To determine if something has a reference or not, should be determined if the parameter in question is an input or output parameter, which should be part of the type string.\r\n- [x] Add optional to the type syntax. @wanchaol is working on this\r\n- [ ] Replace `method_of` with a simple list of `method` and/or `function`.\r\n- [ ] Eliminate `python_default_init` entirely; once optional is supported, any arguments which have \"complex\" default values can simply specify the argument as optional, and then let the kernel compute the default argument itself\r\n- [ ] Unify `default_init` and `init`. We think we have two only because TH and native had different paths, accidentally.\r\n- [ ] Augment type strings with alias sets, perhaps with exclamation marks. This could be used to remove `output` annotations. This will be handled by the JIT team.\r\n- [ ] Eliminate `is_type_dispatched`. @gchanan is working on this\r\n- [ ] Eliminate `buffers`. These would be replaced as outputs of \"inner\" native functions, which are the actual differentiable functions. Blocked on adding named outputs.\r\n- [ ] Add named outputs, ala `f(Tensor x) -> (Tensor out, Tensor buf)`. This helps the clarity of defining derivatives for multi-return functions.\r\n- [ ] Eliminate `method_prefix_derived`, since we have eliminated most broadcasting from Type\r\n- [ ] Eliminate `mode`\r\n- [ ] Eliminate `inplace`, instead inferring it from the name of a function. Put this inference function in one place and make everyone use it.\r\n- [ ] Eliminate `device_guard`, no one actually needs it anymore"}