{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180177870", "pull_request_review_id": 110549783, "id": 180177870, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE3Nzg3MA==", "diff_hunk": "@@ -559,25 +593,95 @@ struct to_ir {\n     emitLoopCommon(stmt.range(), {}, {cond}, stmt.body(), {});\n   }\n \n+  // Validate that the `lhs` Expr's in an assignment statement are valid. That\n+  // is:\n+  //\n+  // 1) All lhs Expr's are either Var or Starred nodes\n+  // 2) There is at most one Starred node in the lhs Expr\n+  // 3) A Starred node can only appear when there is another non-Starred lhs Expr\n+  //    Concretely this means that `*abc = func()` is illegal. Unpacking all\n+  //    outputs into a tuple is covered by `abc = func()`.\n+  size_t calcNumStarredUnpack(const List<Expr>& lhs, const SourceRange& r) {\n+    size_t num_normal_assign = 0;\n+    size_t num_starred = 0;\n+    for (const auto& assignee : lhs) {\n+      if (assignee.kind() == TK_VAR) {\n+        num_normal_assign++;\n+      } else if (assignee.kind() == TK_STARRED) {\n+        num_starred++;\n+      } else {\n+        throw ErrorReport(assignee)\n+            << \"lhs of assignment must be a variable or starred expression.\";\n+      }\n+    }\n+\n+    if (num_starred > 1) {\n+      throw ErrorReport(r)\n+          << \"Only one starred expression is allowed on the lhs.\";\n+    }\n+\n+    if (num_starred > 0 && num_normal_assign == 0) {\n+      throw ErrorReport(r) << \"A Starred expression may only appear on the \"\n+                              << \"lhs within the presence of another non-starred\"\n+                              << \" expression.\";\n+    }\n+\n+    return num_starred;\n+  }\n+\n+  std::vector<SugaredValuePtr> createSugaredValuesFromValues(const std::vector<Value*> values) {\n+    std::vector<SugaredValuePtr> sugared_outputs;\n+    sugared_outputs.reserve(values.size());\n+    for (Value* output : values) {\n+      sugared_outputs.emplace_back(std::make_shared<SimpleValue>(output));\n+    }\n+    return sugared_outputs;\n+  }\n+\n   std::vector<Value*> emitAssignment(const Assign& stmt) {\n     std::vector<Value*> outputs{stmt.lhs().size()};\n+    size_t num_starred_unpack = calcNumStarredUnpack(stmt.lhs(), stmt.range());\n     if (stmt.reduction() != '=') {\n       if (stmt.lhs().size() != 1) {\n         throw ErrorReport(stmt)\n-            << \"reductions are only allow when there is a single variable \"\n+            << \"reductions are only allowed when there is a single variable \"\n             << \"on the left-hand side.\";\n       }\n-      Ident lhs = stmt.lhs()[0];\n+      Ident lhs = Var(stmt.lhs()[0]).name();\n       Expr expr = BinOp::create(stmt.range(), stmt.reduction(),\n                                 Var::create(lhs.range(), lhs), stmt.rhs());\n-      outputs = emitExpr(expr, 1);\n+      outputs = emitExpr(expr, {1, false});\n     } else {\n-      outputs = emitExpr(stmt.rhs(), stmt.lhs().size());\n+      CallsiteDescriptor cd{stmt.lhs().size(), !!num_starred_unpack || stmt.lhs().size() == 1};\n+      outputs =\n+          emitExpr(stmt.rhs(), cd);\n     }\n-    int i = 0;\n-    for (auto ident : stmt.lhs()) {\n-      environment_stack->setVar(Ident(ident).name(), outputs.at(i));\n-      i++;\n+    if (stmt.lhs().size() == 1 && outputs.size() != 1) {\n+      // Pack up a tuple sugared value\n+      SugaredValuePtr tup = std::make_shared<TupleValue>(createSugaredValuesFromValues(outputs));\n+      if (stmt.lhs()[0].kind() != TK_VAR) {\n+        throw ErrorReport(stmt.lhs()[0]) << \"Cannot pack a tuple into a non-variable.\";\n+      }\n+      environment_stack->setSugaredVar(Var(stmt.lhs()[0]).name().name(), tup);\n+    } else {\n+      int i = 0;\n+      for (auto assignee : stmt.lhs()) {\n+        if (assignee.kind() == TK_VAR) {\n+          environment_stack->setVar(Var(assignee).name().name(), outputs.at(i));\n+          i++;\n+        } else if (assignee.kind() == TK_STARRED) {\n+          auto var = Starred(assignee).expr();\n+          if (var.kind() != TK_VAR) {\n+            throw ErrorReport(var) << \"Cannot pack a tuple into a non-variable.\";", "path": "torch/csrc/jit/script/compiler.cpp", "position": 291, "original_position": 291, "commit_id": "aa73450641068979f92bf5732e545b31f6932fbd", "original_commit_id": "cf071ce1b2af3394eb55ce6c90b7ab2c0abfc15f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That error message is a bit confusing. You're not packing any tuples into variables. You're assigning a variable-length tuple of outputs to a variable", "created_at": "2018-04-09T17:53:58Z", "updated_at": "2018-11-23T15:42:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/6214#discussion_r180177870", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6214", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180177870"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6214#discussion_r180177870"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6214"}}, "body_html": "<p>That error message is a bit confusing. You're not packing any tuples into variables. You're assigning a variable-length tuple of outputs to a variable</p>", "body_text": "That error message is a bit confusing. You're not packing any tuples into variables. You're assigning a variable-length tuple of outputs to a variable"}