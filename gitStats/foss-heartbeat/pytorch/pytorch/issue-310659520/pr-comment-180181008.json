{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180181008", "pull_request_review_id": 110549783, "id": 180181008, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDE4MTAwOA==", "diff_hunk": "@@ -2210,9 +2210,158 @@ def forward(self, v):\n                 for m in self.mods:\n                     print(m)\n                 return v\n-        with self.assertRaisesRegex(RuntimeError, \"is not iterable\"):\n+        with self.assertRaisesRegex(RuntimeError, \"cannot be used as tuple\"):\n             M()\n \n+    def test_script_star_expr(self):\n+        class M(torch.nn.Module):\n+            def __init__(self):\n+                super(M, self).__init__()\n+\n+            def forward(self, *inputs):\n+                output = inputs[0]\n+                for i in range(1, len(inputs)):\n+                    output += inputs[i]\n+                return output\n+\n+        class Mult(torch.nn.Module):\n+            def __init__(self):\n+                super(Mult, self).__init__()\n+\n+            def forward(self, rep):\n+                return rep, rep, rep\n+\n+        class M2(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M2, self).__init__(True)\n+                self.m = torch.jit.trace(\n+                    torch.ones(4, 3), torch.ones(4, 3), torch.ones(4, 3))(M())\n+                self.g = torch.jit.trace(torch.ones(4, 3))(Mult())\n+\n+            @torch.jit.script_method\n+            def forward(self, rep):\n+                tup = self.g(rep)\n+                return self.m(*tup)\n+\n+        m = M2()\n+        self.assertEqual(m(torch.zeros(4, 3)), 3 * torch.zeros(4, 3))\n+\n+    def test_script_star_expr_string(self):\n+        class M(torch.nn.Module):\n+            def __init__(self):\n+                super(M, self).__init__()\n+\n+            def forward(self, *inputs):\n+                output = inputs[0]\n+                for i in range(1, len(inputs)):\n+                    output += inputs[i]\n+                return output\n+\n+        class Mult(torch.nn.Module):\n+            def __init__(self):\n+                super(Mult, self).__init__()\n+\n+            def forward(self, rep):\n+                return rep, rep, rep\n+\n+        class M2(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M2, self).__init__(True)\n+                self.m = torch.jit.trace(\n+                    torch.ones(4, 3), torch.ones(4, 3), torch.ones(4, 3))(M())\n+                self.g = torch.jit.trace(torch.ones(4, 3))(Mult())\n+\n+                self.define('''\n+            def forward(self, rep):\n+                tup = self.g(rep)\n+                return self.m(*tup)\n+                ''')\n+\n+        m = M2()\n+        self.assertEqual(m(torch.zeros(4, 3)), 3 * torch.zeros(4, 3))\n+\n+    def test_script_star_assign(self):\n+        class M(torch.nn.Module):\n+            def __init__(self):\n+                super(M, self).__init__()\n+\n+            def forward(self, *inputs):\n+                output = inputs[0]\n+                for i in range(1, len(inputs)):\n+                    output += inputs[i]\n+                return output, output, output\n+\n+        class M2(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M2, self).__init__(True)\n+                self.g = torch.jit.trace(torch.ones(4, 3))(M())\n+                self.define('''\n+            def forward(self, rep):\n+                head, *tail = self.g(rep)\n+                return head\n+                ''')\n+\n+        m = M2()\n+        self.assertEqual(m(torch.zeros(4, 3)), 3 * torch.zeros(4, 3))\n+\n+    def test_script_module_star_assign2(self):\n+        class M(torch.nn.Module):\n+            def __init__(self):\n+                super(M, self).__init__()\n+\n+            def forward(self, *inputs):\n+                output = inputs[0]\n+                for i in range(1, len(inputs)):\n+                    output += inputs[i]\n+                return output, output, output\n+\n+        class M2(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M2, self).__init__(True)\n+                self.g = torch.jit.trace(torch.ones(4, 3))(M())\n+                self.define('''\n+            def forward(self, rep):\n+                *head, tail = self.g(rep)\n+                return tail\n+                ''')\n+\n+        m = M2()\n+        self.assertEqual(m(torch.zeros(4, 3)), 3 * torch.zeros(4, 3))", "path": "test/test_jit.py", "position": null, "original_position": 121, "commit_id": "aa73450641068979f92bf5732e545b31f6932fbd", "original_commit_id": "cf071ce1b2af3394eb55ce6c90b7ab2c0abfc15f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can we perhaps use `ones`? `3 * zeros` doesn't test much \ud83d\ude04 ", "created_at": "2018-04-09T18:04:50Z", "updated_at": "2018-11-23T15:42:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/6214#discussion_r180181008", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6214", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180181008"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6214#discussion_r180181008"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6214"}}, "body_html": "<p>Can we perhaps use <code>ones</code>? <code>3 * zeros</code> doesn't test much <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "body_text": "Can we perhaps use ones? 3 * zeros doesn't test much \ud83d\ude04"}