{"url": "https://api.github.com/repos/pytorch/pytorch/issues/700", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/700/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/700/events", "html_url": "https://github.com/pytorch/pytorch/issues/700", "id": 206217168, "node_id": "MDU6SXNzdWUyMDYyMTcxNjg=", "number": 700, "title": "torch.sum (used in Expand.backward) is slow", "user": {"login": "shawnjhenry", "id": 9464836, "node_id": "MDQ6VXNlcjk0NjQ4MzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9464836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shawnjhenry", "html_url": "https://github.com/shawnjhenry", "followers_url": "https://api.github.com/users/shawnjhenry/followers", "following_url": "https://api.github.com/users/shawnjhenry/following{/other_user}", "gists_url": "https://api.github.com/users/shawnjhenry/gists{/gist_id}", "starred_url": "https://api.github.com/users/shawnjhenry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shawnjhenry/subscriptions", "organizations_url": "https://api.github.com/users/shawnjhenry/orgs", "repos_url": "https://api.github.com/users/shawnjhenry/repos", "events_url": "https://api.github.com/users/shawnjhenry/events{/privacy}", "received_events_url": "https://api.github.com/users/shawnjhenry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-02-08T14:42:19Z", "updated_at": "2017-02-28T23:26:43Z", "closed_at": "2017-02-28T23:26:43Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I'm trying to build a recurrent net which, instead of using the last hidden state, computes bilinear attention over the last k hidden states.  I have it implemented as a module as follows:</p>\n<pre><code>import torch as th\n\nfrom torch.nn import Module, Parameter\n\nfrom torch.autograd import Variable, Function\n\nfrom torch.nn.functional import relu, softmax\n\n\nclass LocalRNN(Module):\n\n\tdef __init__(self, window_size, hidden_size):\n\t\tsuper(LocalGlobalRNN, self).__init__()\n\n\t\tself.window_size = window_size\n\t\tself.hidden_size = hidden_size\n\n\t\tself.att_W = Parameter(th.Tensor(1, hidden_size, hidden_size))\n\n\t\tself.i2h_W = Parameter(th.Tensor(hidden_size, hidden_size))\n\t\tself.h2h_W = Parameter(th.Tensor(hidden_size, hidden_size))\n\n\t\tself.i2h_b = Parameter(th.Tensor(hidden_size))\n\t\tself.h2h_b = Parameter(th.Tensor(hidden_size))\n\n\t\tself.reset()\n\n\tdef reset(self):\n\t\tstdv = np.sqrt(2.0/self.hidden_size)\n\n\t\tself.att_W.data.uniform_(-stdv, stdv)\n\n\t\tself.i2h_W.data.uniform_(-stdv, stdv)\n\t\tself.h2h_W.data.uniform_(-stdv, stdv)\n\n\t\tself.i2h_b.data.uniform_(-stdv, stdv)\n\t\tself.h2h_b.data.uniform_(-stdv, stdv)\n\n\t\treturn self\n\n\tdef forward(self, input, window=None):\n\t\tseq_length, batch_size, hidden_size = input.size()\n\n\t\tadd_buffer = Variable(input.data.new(batch_size).fill_(1))\n\n\t\toutput = []\n\n\t\tif window is None:\n\t\t\twindow = [Variable(input.data.new(batch_size, 1, hidden_size).zero_())]*self.window_size\n\n\t\tfor t in range(seq_length):\n\t\t\tx_t = input[t]\n\n\t\t\tw_t = th.cat(window[-self.window_size:], 1)\n\n\t\t\tatt_W = self.att_W.expand(batch_size, hidden_size, hidden_size)\n\n\t\t\th_tm1 = th.bmm(softmax(th.bmm(w_t, th.bmm(att_W, x_t.unsqueeze(2)))).transpose(1, 2), w_t).squeeze()\n\n\t\t\th_t = relu(th.mm(x_t, self.i2h_W).addr_(add_buffer, self.i2h_b).addmm(h_tm1, self.h2h_W).addr_(add_buffer, self.h2h_b))\n\n\t\t\toutput.append(h_t.unsqueeze(0))\n\t\t\twindow.append(h_t.unsqueeze(1))\n\n\t\toutput = th.cat(output)\n\n\t\treturn output\n</code></pre>\n<p>With an input of size 100 x 50 x 512 (batch_first=False) forward prop takes ~0.6 s, but for some reason autograd back prop takes ~16 s, over 20x longer!  Am I using autograd incorrectly (I'm just stacking this module with other modules) or is this a bug?  How do I profile the backward graph to find the bottleneck?</p>", "body_text": "Hi,\nI'm trying to build a recurrent net which, instead of using the last hidden state, computes bilinear attention over the last k hidden states.  I have it implemented as a module as follows:\nimport torch as th\n\nfrom torch.nn import Module, Parameter\n\nfrom torch.autograd import Variable, Function\n\nfrom torch.nn.functional import relu, softmax\n\n\nclass LocalRNN(Module):\n\n\tdef __init__(self, window_size, hidden_size):\n\t\tsuper(LocalGlobalRNN, self).__init__()\n\n\t\tself.window_size = window_size\n\t\tself.hidden_size = hidden_size\n\n\t\tself.att_W = Parameter(th.Tensor(1, hidden_size, hidden_size))\n\n\t\tself.i2h_W = Parameter(th.Tensor(hidden_size, hidden_size))\n\t\tself.h2h_W = Parameter(th.Tensor(hidden_size, hidden_size))\n\n\t\tself.i2h_b = Parameter(th.Tensor(hidden_size))\n\t\tself.h2h_b = Parameter(th.Tensor(hidden_size))\n\n\t\tself.reset()\n\n\tdef reset(self):\n\t\tstdv = np.sqrt(2.0/self.hidden_size)\n\n\t\tself.att_W.data.uniform_(-stdv, stdv)\n\n\t\tself.i2h_W.data.uniform_(-stdv, stdv)\n\t\tself.h2h_W.data.uniform_(-stdv, stdv)\n\n\t\tself.i2h_b.data.uniform_(-stdv, stdv)\n\t\tself.h2h_b.data.uniform_(-stdv, stdv)\n\n\t\treturn self\n\n\tdef forward(self, input, window=None):\n\t\tseq_length, batch_size, hidden_size = input.size()\n\n\t\tadd_buffer = Variable(input.data.new(batch_size).fill_(1))\n\n\t\toutput = []\n\n\t\tif window is None:\n\t\t\twindow = [Variable(input.data.new(batch_size, 1, hidden_size).zero_())]*self.window_size\n\n\t\tfor t in range(seq_length):\n\t\t\tx_t = input[t]\n\n\t\t\tw_t = th.cat(window[-self.window_size:], 1)\n\n\t\t\tatt_W = self.att_W.expand(batch_size, hidden_size, hidden_size)\n\n\t\t\th_tm1 = th.bmm(softmax(th.bmm(w_t, th.bmm(att_W, x_t.unsqueeze(2)))).transpose(1, 2), w_t).squeeze()\n\n\t\t\th_t = relu(th.mm(x_t, self.i2h_W).addr_(add_buffer, self.i2h_b).addmm(h_tm1, self.h2h_W).addr_(add_buffer, self.h2h_b))\n\n\t\t\toutput.append(h_t.unsqueeze(0))\n\t\t\twindow.append(h_t.unsqueeze(1))\n\n\t\toutput = th.cat(output)\n\n\t\treturn output\n\nWith an input of size 100 x 50 x 512 (batch_first=False) forward prop takes ~0.6 s, but for some reason autograd back prop takes ~16 s, over 20x longer!  Am I using autograd incorrectly (I'm just stacking this module with other modules) or is this a bug?  How do I profile the backward graph to find the bottleneck?", "body": "Hi,\r\n\r\nI'm trying to build a recurrent net which, instead of using the last hidden state, computes bilinear attention over the last k hidden states.  I have it implemented as a module as follows:\r\n```\r\nimport torch as th\r\n\r\nfrom torch.nn import Module, Parameter\r\n\r\nfrom torch.autograd import Variable, Function\r\n\r\nfrom torch.nn.functional import relu, softmax\r\n\r\n\r\nclass LocalRNN(Module):\r\n\r\n\tdef __init__(self, window_size, hidden_size):\r\n\t\tsuper(LocalGlobalRNN, self).__init__()\r\n\r\n\t\tself.window_size = window_size\r\n\t\tself.hidden_size = hidden_size\r\n\r\n\t\tself.att_W = Parameter(th.Tensor(1, hidden_size, hidden_size))\r\n\r\n\t\tself.i2h_W = Parameter(th.Tensor(hidden_size, hidden_size))\r\n\t\tself.h2h_W = Parameter(th.Tensor(hidden_size, hidden_size))\r\n\r\n\t\tself.i2h_b = Parameter(th.Tensor(hidden_size))\r\n\t\tself.h2h_b = Parameter(th.Tensor(hidden_size))\r\n\r\n\t\tself.reset()\r\n\r\n\tdef reset(self):\r\n\t\tstdv = np.sqrt(2.0/self.hidden_size)\r\n\r\n\t\tself.att_W.data.uniform_(-stdv, stdv)\r\n\r\n\t\tself.i2h_W.data.uniform_(-stdv, stdv)\r\n\t\tself.h2h_W.data.uniform_(-stdv, stdv)\r\n\r\n\t\tself.i2h_b.data.uniform_(-stdv, stdv)\r\n\t\tself.h2h_b.data.uniform_(-stdv, stdv)\r\n\r\n\t\treturn self\r\n\r\n\tdef forward(self, input, window=None):\r\n\t\tseq_length, batch_size, hidden_size = input.size()\r\n\r\n\t\tadd_buffer = Variable(input.data.new(batch_size).fill_(1))\r\n\r\n\t\toutput = []\r\n\r\n\t\tif window is None:\r\n\t\t\twindow = [Variable(input.data.new(batch_size, 1, hidden_size).zero_())]*self.window_size\r\n\r\n\t\tfor t in range(seq_length):\r\n\t\t\tx_t = input[t]\r\n\r\n\t\t\tw_t = th.cat(window[-self.window_size:], 1)\r\n\r\n\t\t\tatt_W = self.att_W.expand(batch_size, hidden_size, hidden_size)\r\n\r\n\t\t\th_tm1 = th.bmm(softmax(th.bmm(w_t, th.bmm(att_W, x_t.unsqueeze(2)))).transpose(1, 2), w_t).squeeze()\r\n\r\n\t\t\th_t = relu(th.mm(x_t, self.i2h_W).addr_(add_buffer, self.i2h_b).addmm(h_tm1, self.h2h_W).addr_(add_buffer, self.h2h_b))\r\n\r\n\t\t\toutput.append(h_t.unsqueeze(0))\r\n\t\t\twindow.append(h_t.unsqueeze(1))\r\n\r\n\t\toutput = th.cat(output)\r\n\r\n\t\treturn output\r\n```\r\nWith an input of size 100 x 50 x 512 (batch_first=False) forward prop takes ~0.6 s, but for some reason autograd back prop takes ~16 s, over 20x longer!  Am I using autograd incorrectly (I'm just stacking this module with other modules) or is this a bug?  How do I profile the backward graph to find the bottleneck?"}