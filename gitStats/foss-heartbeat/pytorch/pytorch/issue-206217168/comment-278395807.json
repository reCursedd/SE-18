{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/278395807", "html_url": "https://github.com/pytorch/pytorch/issues/700#issuecomment-278395807", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/700", "id": 278395807, "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODM5NTgwNw==", "user": {"login": "shawnjhenry", "id": 9464836, "node_id": "MDQ6VXNlcjk0NjQ4MzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9464836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shawnjhenry", "html_url": "https://github.com/shawnjhenry", "followers_url": "https://api.github.com/users/shawnjhenry/followers", "following_url": "https://api.github.com/users/shawnjhenry/following{/other_user}", "gists_url": "https://api.github.com/users/shawnjhenry/gists{/gist_id}", "starred_url": "https://api.github.com/users/shawnjhenry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shawnjhenry/subscriptions", "organizations_url": "https://api.github.com/users/shawnjhenry/orgs", "repos_url": "https://api.github.com/users/shawnjhenry/repos", "events_url": "https://api.github.com/users/shawnjhenry/events{/privacy}", "received_events_url": "https://api.github.com/users/shawnjhenry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-08T17:18:00Z", "updated_at": "2017-02-08T17:18:00Z", "author_association": "NONE", "body_html": "<p>Why would <code>window</code> accumulate over training?  It's not returned by <code>forward</code>, it's either created and passed in for each batch, or created in the <code>forward</code> call.  I used a list of tensors because that turned out to be faster than narrowing and concatenating in each time step by a small amount.  That shouldn't be relevant - that's how the standard RNN implementation collects the outputs.</p>\n<p>Anyway, I'm talking about a single forward and backward call.  For any network those are expected to take the same order of magnitude amount of time.  If I push the hidden size high enough, back prop can take 100 x longer than forward prop, which means that either I'm doing something wrong or there is a bug.</p>", "body_text": "Why would window accumulate over training?  It's not returned by forward, it's either created and passed in for each batch, or created in the forward call.  I used a list of tensors because that turned out to be faster than narrowing and concatenating in each time step by a small amount.  That shouldn't be relevant - that's how the standard RNN implementation collects the outputs.\nAnyway, I'm talking about a single forward and backward call.  For any network those are expected to take the same order of magnitude amount of time.  If I push the hidden size high enough, back prop can take 100 x longer than forward prop, which means that either I'm doing something wrong or there is a bug.", "body": "Why would `window` accumulate over training?  It's not returned by `forward`, it's either created and passed in for each batch, or created in the `forward` call.  I used a list of tensors because that turned out to be faster than narrowing and concatenating in each time step by a small amount.  That shouldn't be relevant - that's how the standard RNN implementation collects the outputs. \r\n\r\nAnyway, I'm talking about a single forward and backward call.  For any network those are expected to take the same order of magnitude amount of time.  If I push the hidden size high enough, back prop can take 100 x longer than forward prop, which means that either I'm doing something wrong or there is a bug."}