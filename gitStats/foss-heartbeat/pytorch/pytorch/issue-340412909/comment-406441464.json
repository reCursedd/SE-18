{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406441464", "html_url": "https://github.com/pytorch/pytorch/pull/9360#issuecomment-406441464", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9360", "id": 406441464, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ0MTQ2NA==", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T23:11:36Z", "updated_at": "2018-07-19T23:11:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'll remove the copy pasta.<br>\nThis is meant for merging. It is a good set of operators covering common use cases like inputs vs. arguments, having no state vs having state, having variable number of inputs, ...<br>\nAll designs we want to experiment with in the future need to make sure they support these cases, so this is basically a test that they do. Also, this allows future integration work (say C10 into ATen) to be tested with actual operators to call. There will likely have to be many changes to C10OperatorWrapper when we change to boxed, but probably fewer to the kernels themselves.<br>\nThese operators are btw not meant to be used in any production code, that's why they're in the experimental directory and have such weird operator names. There's for example only CPU kernels currently and even on CPU, they might not support all argument combinations that are supported by caffe2.</p>", "body_text": "I'll remove the copy pasta.\nThis is meant for merging. It is a good set of operators covering common use cases like inputs vs. arguments, having no state vs having state, having variable number of inputs, ...\nAll designs we want to experiment with in the future need to make sure they support these cases, so this is basically a test that they do. Also, this allows future integration work (say C10 into ATen) to be tested with actual operators to call. There will likely have to be many changes to C10OperatorWrapper when we change to boxed, but probably fewer to the kernels themselves.\nThese operators are btw not meant to be used in any production code, that's why they're in the experimental directory and have such weird operator names. There's for example only CPU kernels currently and even on CPU, they might not support all argument combinations that are supported by caffe2.", "body": "I'll remove the copy pasta.\r\nThis is meant for merging. It is a good set of operators covering common use cases like inputs vs. arguments, having no state vs having state, having variable number of inputs, ...\r\nAll designs we want to experiment with in the future need to make sure they support these cases, so this is basically a test that they do. Also, this allows future integration work (say C10 into ATen) to be tested with actual operators to call. There will likely have to be many changes to C10OperatorWrapper when we change to boxed, but probably fewer to the kernels themselves.\r\nThese operators are btw not meant to be used in any production code, that's why they're in the experimental directory and have such weird operator names. There's for example only CPU kernels currently and even on CPU, they might not support all argument combinations that are supported by caffe2."}