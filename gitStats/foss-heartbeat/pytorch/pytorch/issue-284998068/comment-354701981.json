{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354701981", "html_url": "https://github.com/pytorch/pytorch/issues/4396#issuecomment-354701981", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4396", "id": 354701981, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDcwMTk4MQ==", "user": {"login": "deepbrain", "id": 10003025, "node_id": "MDQ6VXNlcjEwMDAzMDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/10003025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deepbrain", "html_url": "https://github.com/deepbrain", "followers_url": "https://api.github.com/users/deepbrain/followers", "following_url": "https://api.github.com/users/deepbrain/following{/other_user}", "gists_url": "https://api.github.com/users/deepbrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/deepbrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deepbrain/subscriptions", "organizations_url": "https://api.github.com/users/deepbrain/orgs", "repos_url": "https://api.github.com/users/deepbrain/repos", "events_url": "https://api.github.com/users/deepbrain/events{/privacy}", "received_events_url": "https://api.github.com/users/deepbrain/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-02T04:28:36Z", "updated_at": "2018-01-02T04:28:36Z", "author_association": "NONE", "body_html": "<p>I was talking about a real model that has hundreds of python lines in the forward call. It executes considerably faster (50-70% faster) if compiled with the jit.compile method, but unfortunately leaks the memory when the dropout is included. With the decorations I see no speedup. The simple code above is just as a greatly simplified test case for the memory leak.</p>\n<p>It would be nice if jit.compile would work, as the decorations seem to be too restrictive when building more complex dynamic networks.</p>", "body_text": "I was talking about a real model that has hundreds of python lines in the forward call. It executes considerably faster (50-70% faster) if compiled with the jit.compile method, but unfortunately leaks the memory when the dropout is included. With the decorations I see no speedup. The simple code above is just as a greatly simplified test case for the memory leak.\nIt would be nice if jit.compile would work, as the decorations seem to be too restrictive when building more complex dynamic networks.", "body": "I was talking about a real model that has hundreds of python lines in the forward call. It executes considerably faster (50-70% faster) if compiled with the jit.compile method, but unfortunately leaks the memory when the dropout is included. With the decorations I see no speedup. The simple code above is just as a greatly simplified test case for the memory leak.\r\n\r\nIt would be nice if jit.compile would work, as the decorations seem to be too restrictive when building more complex dynamic networks.\r\n\r\n"}