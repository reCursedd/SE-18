{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13376", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13376/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13376/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13376/events", "html_url": "https://github.com/pytorch/pytorch/issues/13376", "id": 375818684, "node_id": "MDU6SXNzdWUzNzU4MTg2ODQ=", "number": 13376, "title": "`len(Tensor)` doesn't work in script", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-31T06:35:07Z", "updated_at": "2018-10-31T20:15:08Z", "closed_at": "2018-10-31T20:15:08Z", "author_association": "MEMBER", "body_html": "<p>Minimal repro:</p>\n<pre><code>import torch\n\ntensor = torch.IntTensor(4, 2).zero_()\nprint(len(tensor))  # prints 4\n\n@torch.jit.script\ndef foo(tensor):\n    print(len(tensor)) # this is dispatching to aten::len(Tensor[])\nfoo(tensor)  # prints 1\n</code></pre>\n<p>In PyTorch, <code>len()</code> should work like in NumPy (print the size of the first dimension). Right now the tensor argument gets promoted to a single-element list via the logic <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/compiler.cpp#L587\">here</a> and gets passed to <code>listLen</code>. This is because we don't have a binding for <code>aten::len(Tensor)</code> at all.</p>\n<p>Reported by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=28248770\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/phi-go\">@phi-go</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"371237234\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12780\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/12780/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/12780\">#12780</a>.</p>", "body_text": "Minimal repro:\nimport torch\n\ntensor = torch.IntTensor(4, 2).zero_()\nprint(len(tensor))  # prints 4\n\n@torch.jit.script\ndef foo(tensor):\n    print(len(tensor)) # this is dispatching to aten::len(Tensor[])\nfoo(tensor)  # prints 1\n\nIn PyTorch, len() should work like in NumPy (print the size of the first dimension). Right now the tensor argument gets promoted to a single-element list via the logic here and gets passed to listLen. This is because we don't have a binding for aten::len(Tensor) at all.\nReported by @phi-go in #12780.", "body": "Minimal repro:\r\n```\r\nimport torch\r\n\r\ntensor = torch.IntTensor(4, 2).zero_()\r\nprint(len(tensor))  # prints 4\r\n\r\n@torch.jit.script\r\ndef foo(tensor):\r\n    print(len(tensor)) # this is dispatching to aten::len(Tensor[])\r\nfoo(tensor)  # prints 1\r\n```\r\n\r\nIn PyTorch, `len()` should work like in NumPy (print the size of the first dimension). Right now the tensor argument gets promoted to a single-element list via the logic [here](https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/compiler.cpp#L587) and gets passed to `listLen`. This is because we don't have a binding for `aten::len(Tensor)` at all.\r\n\r\nReported by @phi-go in #12780."}