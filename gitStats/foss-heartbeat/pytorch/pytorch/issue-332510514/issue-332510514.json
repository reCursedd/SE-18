{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8495", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8495/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8495/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8495/events", "html_url": "https://github.com/pytorch/pytorch/issues/8495", "id": 332510514, "node_id": "MDU6SXNzdWUzMzI1MTA1MTQ=", "number": 8495, "title": "Get rid of expand nodes from broadcasting operators when tracing", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}, {"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-14T18:16:32Z", "updated_at": "2018-09-11T17:05:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Historically, when we trace <code>add(x, y)</code>, this will trace as <code>add(expand(x), expand(y))</code>. This has widely been considered to be a bad idea.</p>\n<p>We are pretty close to being able to change the tracing behavior here:</p>\n<ul>\n<li>We need to modify the Variable generation to having the broadcasting add perform a trace. This accidentally happened in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"331814067\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8409\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8409/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8409\">#8409</a> when we moved <code>add</code> from TH to native (the expand behavior is <em>specifically</em> coded in the TH codebath; it doesn't apply in the native codepath) and it should be a relatively simple matter to flip it to the other regime.</li>\n<li>The JIT graph executor codepath has a pass to explicitly remove all expands. We can delete this pass.</li>\n<li>The ONNX exporter uses expand nodes to determine whether or not to toggle the broadcast flag. But the ONNX spec has switched to Numpy style broadcasting. So we can get rid of all of this logic, assuming we can bump our opset version late enough (there may be other blockers here.)</li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> also intends to delete explicit expand operations from ATen, in favor of kernels which explicitly know how to deal with broadcasting.</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=30275821\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/houseroad\">@houseroad</a></p>", "body_text": "Historically, when we trace add(x, y), this will trace as add(expand(x), expand(y)). This has widely been considered to be a bad idea.\nWe are pretty close to being able to change the tracing behavior here:\n\nWe need to modify the Variable generation to having the broadcasting add perform a trace. This accidentally happened in #8409 when we moved add from TH to native (the expand behavior is specifically coded in the TH codebath; it doesn't apply in the native codepath) and it should be a relatively simple matter to flip it to the other regime.\nThe JIT graph executor codepath has a pass to explicitly remove all expands. We can delete this pass.\nThe ONNX exporter uses expand nodes to determine whether or not to toggle the broadcast flag. But the ONNX spec has switched to Numpy style broadcasting. So we can get rid of all of this logic, assuming we can bump our opset version late enough (there may be other blockers here.)\n\n@colesbury also intends to delete explicit expand operations from ATen, in favor of kernels which explicitly know how to deal with broadcasting.\nCC @houseroad", "body": "Historically, when we trace `add(x, y)`, this will trace as `add(expand(x), expand(y))`. This has widely been considered to be a bad idea.\r\n\r\nWe are pretty close to being able to change the tracing behavior here:\r\n\r\n- We need to modify the Variable generation to having the broadcasting add perform a trace. This accidentally happened in https://github.com/pytorch/pytorch/pull/8409 when we moved `add` from TH to native (the expand behavior is *specifically* coded in the TH codebath; it doesn't apply in the native codepath) and it should be a relatively simple matter to flip it to the other regime.\r\n- The JIT graph executor codepath has a pass to explicitly remove all expands. We can delete this pass.\r\n- The ONNX exporter uses expand nodes to determine whether or not to toggle the broadcast flag. But the ONNX spec has switched to Numpy style broadcasting. So we can get rid of all of this logic, assuming we can bump our opset version late enough (there may be other blockers here.)\r\n\r\n@colesbury also intends to delete explicit expand operations from ATen, in favor of kernels which explicitly know how to deal with broadcasting.\r\n\r\nCC @houseroad "}