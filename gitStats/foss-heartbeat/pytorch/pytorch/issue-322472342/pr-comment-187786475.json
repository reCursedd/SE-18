{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187786475", "pull_request_review_id": 119640265, "id": 187786475, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NjQ3NQ==", "diff_hunk": "@@ -271,7 +271,8 @@ def forward(input, weight, hx, batch_sizes):\n             cx = None\n \n         handle = cudnn.get_handle()\n-        dropout_ts = cudnn.rnn.init_dropout_state(torch.uint8, torch.device('cuda'), dropout,\n+        with torch.cuda.device(input.get_device()):\n+            dropout_ts = cudnn.rnn.init_dropout_state(torch.uint8, torch.device('cuda'), dropout,", "path": "torch/nn/_functions/rnn.py", "position": null, "original_position": 6, "commit_id": "a3de50274ca4a91a718be5a24494e31bf8cee5e5", "original_commit_id": "368226aa0d12d514a3f46df9b911828d171320e2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It's kind of inconvenient, because the actual allocation happens in `cudnn/Descriptors.h`:\r\n\r\n```\r\n    state = ty.tensor({static_cast<int64_t>(state_size)});\r\n```\r\n\r\nAnd there isn't any way to say, from the C++ API, what device you want when you allocate a tensor this way:\r\n\r\n```\r\n  virtual Tensor tensor(Storage & storage, int64_t storageOffset, IntList size, IntList stride={}) const;\r\n  virtual Tensor tensor(IntList size) const;\r\n  virtual Tensor tensor(IntList size, IntList stride) const;\r\n  virtual Tensor tensor() const;\r\n```\r\n\r\nThis should all be fixed, but I wouldn't let it block a perfectly good bugfix.", "created_at": "2018-05-13T01:05:41Z", "updated_at": "2018-11-23T15:43:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/7515#discussion_r187786475", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7515", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187786475"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7515#discussion_r187786475"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7515"}}, "body_html": "<p>It's kind of inconvenient, because the actual allocation happens in <code>cudnn/Descriptors.h</code>:</p>\n<pre><code>    state = ty.tensor({static_cast&lt;int64_t&gt;(state_size)});\n</code></pre>\n<p>And there isn't any way to say, from the C++ API, what device you want when you allocate a tensor this way:</p>\n<pre><code>  virtual Tensor tensor(Storage &amp; storage, int64_t storageOffset, IntList size, IntList stride={}) const;\n  virtual Tensor tensor(IntList size) const;\n  virtual Tensor tensor(IntList size, IntList stride) const;\n  virtual Tensor tensor() const;\n</code></pre>\n<p>This should all be fixed, but I wouldn't let it block a perfectly good bugfix.</p>", "body_text": "It's kind of inconvenient, because the actual allocation happens in cudnn/Descriptors.h:\n    state = ty.tensor({static_cast<int64_t>(state_size)});\n\nAnd there isn't any way to say, from the C++ API, what device you want when you allocate a tensor this way:\n  virtual Tensor tensor(Storage & storage, int64_t storageOffset, IntList size, IntList stride={}) const;\n  virtual Tensor tensor(IntList size) const;\n  virtual Tensor tensor(IntList size, IntList stride) const;\n  virtual Tensor tensor() const;\n\nThis should all be fixed, but I wouldn't let it block a perfectly good bugfix.", "in_reply_to_id": 187768872}