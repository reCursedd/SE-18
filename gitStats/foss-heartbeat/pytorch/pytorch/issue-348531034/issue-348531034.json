{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10337", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10337/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10337/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10337/events", "html_url": "https://github.com/pytorch/pytorch/pull/10337", "id": 348531034, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA2ODYwODE1", "number": 10337, "title": "[RFC] mutable list support", "user": {"login": "suo", "id": 1617424, "node_id": "MDQ6VXNlcjE2MTc0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1617424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suo", "html_url": "https://github.com/suo", "followers_url": "https://api.github.com/users/suo/followers", "following_url": "https://api.github.com/users/suo/following{/other_user}", "gists_url": "https://api.github.com/users/suo/gists{/gist_id}", "starred_url": "https://api.github.com/users/suo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suo/subscriptions", "organizations_url": "https://api.github.com/users/suo/orgs", "repos_url": "https://api.github.com/users/suo/repos", "events_url": "https://api.github.com/users/suo/events{/privacy}", "received_events_url": "https://api.github.com/users/suo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-08T00:19:48Z", "updated_at": "2018-08-08T05:16:32Z", "closed_at": "2018-08-08T05:15:28Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10337", "html_url": "https://github.com/pytorch/pytorch/pull/10337", "diff_url": "https://github.com/pytorch/pytorch/pull/10337.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10337.patch"}, "body_html": "<p>Very rough draft of mutable list support. Lots of TODOs and messy stuff, but I wanted to get early feedback on the approach.</p>\n<p>Per <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>'s <a href=\"https://fb.quip.com/epjvAHP9EJcH\" rel=\"nofollow\">design</a>, I added a <code>World</code> token that tracks memory mutations and a mutable list type. Operations that produce and operate on mutable lists take a <code>World</code> and return a new one. The compiler checks that each <code>World</code> token is used no more than once (should this be exactly once?)</p>\n<p>Right now, this is implemented through builtins so the user has to pass around <code>World</code> tokens themselves. After the implementation settles I'll add some sugar so that \"regular\" Python expressions work.</p>\n<p>I wanted to get feedback on the following items:</p>\n<ul>\n<li>What to name the <code>World</code> token?</li>\n<li>Better way to check the graph for multiple uses of a given <code>World</code> value? I'm concerned that searching every node could be expensive, but we need to wait until after <code>LowerTuples()</code> to make sure assignments and argument unpacking don't generate spurious uses of a given <code>World</code>.</li>\n<li>Is a distinct mutable list type necessary? Mutations are explicitly tracked using World so it seems redundant.</li>\n</ul>", "body_text": "Very rough draft of mutable list support. Lots of TODOs and messy stuff, but I wanted to get early feedback on the approach.\nPer @ezyang's design, I added a World token that tracks memory mutations and a mutable list type. Operations that produce and operate on mutable lists take a World and return a new one. The compiler checks that each World token is used no more than once (should this be exactly once?)\nRight now, this is implemented through builtins so the user has to pass around World tokens themselves. After the implementation settles I'll add some sugar so that \"regular\" Python expressions work.\nI wanted to get feedback on the following items:\n\nWhat to name the World token?\nBetter way to check the graph for multiple uses of a given World value? I'm concerned that searching every node could be expensive, but we need to wait until after LowerTuples() to make sure assignments and argument unpacking don't generate spurious uses of a given World.\nIs a distinct mutable list type necessary? Mutations are explicitly tracked using World so it seems redundant.", "body": "Very rough draft of mutable list support. Lots of TODOs and messy stuff, but I wanted to get early feedback on the approach.\r\n\r\nPer @ezyang's [design](https://fb.quip.com/epjvAHP9EJcH), I added a `World` token that tracks memory mutations and a mutable list type. Operations that produce and operate on mutable lists take a `World` and return a new one. The compiler checks that each `World` token is used no more than once (should this be exactly once?)\r\n\r\nRight now, this is implemented through builtins so the user has to pass around `World` tokens themselves. After the implementation settles I'll add some sugar so that \"regular\" Python expressions work.\r\n\r\nI wanted to get feedback on the following items:\r\n- What to name the `World` token?\r\n- Better way to check the graph for multiple uses of a given `World` value? I'm concerned that searching every node could be expensive, but we need to wait until after `LowerTuples()` to make sure assignments and argument unpacking don't generate spurious uses of a given `World`.\r\n- Is a distinct mutable list type necessary? Mutations are explicitly tracked using World so it seems redundant."}