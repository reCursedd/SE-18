{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386586331", "html_url": "https://github.com/pytorch/pytorch/issues/6919#issuecomment-386586331", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6919", "id": 386586331, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjU4NjMzMQ==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-04T12:29:24Z", "updated_at": "2018-05-04T12:29:24Z", "author_association": "MEMBER", "body_html": "<p>I can't reproduce in v0.4.</p>\n<p>Also, all the cases you have presented can be more simply implemented using standard advanced indexing.</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.IntTensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])\na1 <span class=\"pl-k\">=</span> a[a <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> or for byte masks</span>\na <span class=\"pl-k\">=</span> torch.arange(<span class=\"pl-c1\">9</span>).reshape(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>)\nindex <span class=\"pl-k\">=</span> torch.tensor([<span class=\"pl-c1\">False</span>, <span class=\"pl-c1\">True</span>, <span class=\"pl-c1\">False</span>])\nb <span class=\"pl-k\">=</span> a[index]\nc <span class=\"pl-k\">=</span> a[:, index]</pre></div>", "body_text": "I can't reproduce in v0.4.\nAlso, all the cases you have presented can be more simply implemented using standard advanced indexing.\na = torch.IntTensor([1, 2, 3])\na1 = a[a > 0]\n\n# or for byte masks\na = torch.arange(9).reshape(3, 3)\nindex = torch.tensor([False, True, False])\nb = a[index]\nc = a[:, index]", "body": "I can't reproduce in v0.4.\r\n\r\nAlso, all the cases you have presented can be more simply implemented using standard advanced indexing.\r\n\r\n```python\r\na = torch.IntTensor([1, 2, 3])\r\na1 = a[a > 0]\r\n\r\n# or for byte masks\r\na = torch.arange(9).reshape(3, 3)\r\nindex = torch.tensor([False, True, False])\r\nb = a[index]\r\nc = a[:, index]\r\n```"}