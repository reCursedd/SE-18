{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6919", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6919/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6919/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6919/events", "html_url": "https://github.com/pytorch/pytorch/issues/6919", "id": 317443664, "node_id": "MDU6SXNzdWUzMTc0NDM2NjQ=", "number": 6919, "title": "index_select, take can't receive zero dim index", "user": {"login": "mttbx", "id": 38148377, "node_id": "MDQ6VXNlcjM4MTQ4Mzc3", "avatar_url": "https://avatars3.githubusercontent.com/u/38148377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mttbx", "html_url": "https://github.com/mttbx", "followers_url": "https://api.github.com/users/mttbx/followers", "following_url": "https://api.github.com/users/mttbx/following{/other_user}", "gists_url": "https://api.github.com/users/mttbx/gists{/gist_id}", "starred_url": "https://api.github.com/users/mttbx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mttbx/subscriptions", "organizations_url": "https://api.github.com/users/mttbx/orgs", "repos_url": "https://api.github.com/users/mttbx/repos", "events_url": "https://api.github.com/users/mttbx/events{/privacy}", "received_events_url": "https://api.github.com/users/mttbx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 545367190, "node_id": "MDU6TGFiZWw1NDUzNjcxOTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/awaiting%20response", "name": "awaiting response", "color": "5319e7", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-25T00:52:05Z", "updated_at": "2018-05-18T14:55:07Z", "closed_at": "2018-05-18T14:55:07Z", "author_association": "NONE", "body_html": "<p>Hi,<br>\nIt seems that some torch api function like torch.take and torch.index_select can't make it right when the index is 0 dims.</p>\n<p>for example:<br>\nI need pick the some element from a vector.</p>\n<pre><code>a = torch.IntTensor([1, 2, 3])\n\n// implement 1.\nindex1 = torch.nonzero(a&gt;3)[:, 0]\nindex2 = torch.nonzero(a&gt;1)[:, 0]\na1 = torch.index_select(a, 0, index1) // error! the index dim is zero\na2 = torch.index_select(a, 0, index2)\nc = torch.cat((a1, a2))\n\n// implement 2.\nindex1 = torch.nonzero(a&gt;3)[:, 0]\nindex2 = torch.nonzero(a&gt;1)[:, 0]\na1 = torch.take(a, index1) // error! the index dim is zero\na2 = torch.take(a, index2)\nc = torch.cat((a1, a2))\n\n// implement 3.\na1 = torch.masked_select(a, a&gt;3)\na2 = torch.masked_select(a, a&gt;1)\nc = torch.cat((a1, a2))\n</code></pre>\n<p>implement 1 and 2 can't work. I can only use implement 3. However torch.masked_select can't be directly used for non-vector situation. So I need some work around, that's not good...<br>\nCan we make torch.index_select and torch.take do receive  zero dim index and return zero dim tensor?<br>\nBesides, torch.cat can do the job when some of the operand is zero dim...</p>", "body_text": "Hi,\nIt seems that some torch api function like torch.take and torch.index_select can't make it right when the index is 0 dims.\nfor example:\nI need pick the some element from a vector.\na = torch.IntTensor([1, 2, 3])\n\n// implement 1.\nindex1 = torch.nonzero(a>3)[:, 0]\nindex2 = torch.nonzero(a>1)[:, 0]\na1 = torch.index_select(a, 0, index1) // error! the index dim is zero\na2 = torch.index_select(a, 0, index2)\nc = torch.cat((a1, a2))\n\n// implement 2.\nindex1 = torch.nonzero(a>3)[:, 0]\nindex2 = torch.nonzero(a>1)[:, 0]\na1 = torch.take(a, index1) // error! the index dim is zero\na2 = torch.take(a, index2)\nc = torch.cat((a1, a2))\n\n// implement 3.\na1 = torch.masked_select(a, a>3)\na2 = torch.masked_select(a, a>1)\nc = torch.cat((a1, a2))\n\nimplement 1 and 2 can't work. I can only use implement 3. However torch.masked_select can't be directly used for non-vector situation. So I need some work around, that's not good...\nCan we make torch.index_select and torch.take do receive  zero dim index and return zero dim tensor?\nBesides, torch.cat can do the job when some of the operand is zero dim...", "body": "Hi,\r\nIt seems that some torch api function like torch.take and torch.index_select can't make it right when the index is 0 dims.\r\n\r\nfor example:\r\n I need pick the some element from a vector.\r\n```\r\na = torch.IntTensor([1, 2, 3])\r\n\r\n// implement 1.\r\nindex1 = torch.nonzero(a>3)[:, 0]\r\nindex2 = torch.nonzero(a>1)[:, 0]\r\na1 = torch.index_select(a, 0, index1) // error! the index dim is zero\r\na2 = torch.index_select(a, 0, index2)\r\nc = torch.cat((a1, a2))\r\n\r\n// implement 2.\r\nindex1 = torch.nonzero(a>3)[:, 0]\r\nindex2 = torch.nonzero(a>1)[:, 0]\r\na1 = torch.take(a, index1) // error! the index dim is zero\r\na2 = torch.take(a, index2)\r\nc = torch.cat((a1, a2))\r\n\r\n// implement 3.\r\na1 = torch.masked_select(a, a>3)\r\na2 = torch.masked_select(a, a>1)\r\nc = torch.cat((a1, a2))\r\n```\r\n\r\nimplement 1 and 2 can't work. I can only use implement 3. However torch.masked_select can't be directly used for non-vector situation. So I need some work around, that's not good...\r\nCan we make torch.index_select and torch.take do receive  zero dim index and return zero dim tensor?\r\nBesides, torch.cat can do the job when some of the operand is zero dim...\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}