{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/418656312", "html_url": "https://github.com/pytorch/pytorch/issues/11202#issuecomment-418656312", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11202", "id": 418656312, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODY1NjMxMg==", "user": {"login": "rragundez", "id": 16643700, "node_id": "MDQ6VXNlcjE2NjQzNzAw", "avatar_url": "https://avatars2.githubusercontent.com/u/16643700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rragundez", "html_url": "https://github.com/rragundez", "followers_url": "https://api.github.com/users/rragundez/followers", "following_url": "https://api.github.com/users/rragundez/following{/other_user}", "gists_url": "https://api.github.com/users/rragundez/gists{/gist_id}", "starred_url": "https://api.github.com/users/rragundez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rragundez/subscriptions", "organizations_url": "https://api.github.com/users/rragundez/orgs", "repos_url": "https://api.github.com/users/rragundez/repos", "events_url": "https://api.github.com/users/rragundez/events{/privacy}", "received_events_url": "https://api.github.com/users/rragundez/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-05T09:06:01Z", "updated_at": "2018-09-05T09:13:39Z", "author_association": "NONE", "body_html": "<p>I think that is a good idea, but still, you won't be able to do it using two different tensors like:</p>\n<p><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_distances.html\" rel=\"nofollow\">http://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_distances.html</a></p>\n<p>I can start there just to get things moving and later I can concentrate in adding this label which I think is a great idea for the <code>pdist</code>.</p>\n<p>So what do you think?</p>\n<p>Also it is still unclear to me the use of the <code>cosine_similarity</code> function as it is right now, why would it not compute for all combinations of samples across certain dimension. The current implementation is a special case of this. So actually I would prefer changing <code>cosine_similarity</code> function, and add a <code>only_diagonal</code> parameter or something like that. Could you point to a similar function in scipy of sklearn of the current <code>cosine_similarity</code> implementation in <code>pytorch</code>? seems like a poor/initial decision of how to apply this function to tensors.</p>", "body_text": "I think that is a good idea, but still, you won't be able to do it using two different tensors like:\nhttp://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_distances.html\nI can start there just to get things moving and later I can concentrate in adding this label which I think is a great idea for the pdist.\nSo what do you think?\nAlso it is still unclear to me the use of the cosine_similarity function as it is right now, why would it not compute for all combinations of samples across certain dimension. The current implementation is a special case of this. So actually I would prefer changing cosine_similarity function, and add a only_diagonal parameter or something like that. Could you point to a similar function in scipy of sklearn of the current cosine_similarity implementation in pytorch? seems like a poor/initial decision of how to apply this function to tensors.", "body": "I think that is a good idea, but still, you won't be able to do it using two different tensors like: \r\n\r\nhttp://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_distances.html\r\n\r\nI can start there just to get things moving and later I can concentrate in adding this label which I think is a great idea for the `pdist`.\r\n\r\nSo what do you think?\r\n\r\nAlso it is still unclear to me the use of the `cosine_similarity` function as it is right now, why would it not compute for all combinations of samples across certain dimension. The current implementation is a special case of this. So actually I would prefer changing `cosine_similarity` function, and add a `only_diagonal` parameter or something like that. Could you point to a similar function in scipy of sklearn of the current `cosine_similarity` implementation in `pytorch`? seems like a poor/initial decision of how to apply this function to tensors."}