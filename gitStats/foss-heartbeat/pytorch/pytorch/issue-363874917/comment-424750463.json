{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/424750463", "html_url": "https://github.com/pytorch/pytorch/pull/12077#issuecomment-424750463", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12077", "id": 424750463, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDc1MDQ2Mw==", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T15:04:25Z", "updated_at": "2018-09-26T15:04:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>re directory structure, here is what I am thinking (for now):</p>\n<ul>\n<li>for public header: we might want to have a c10/c10.h that dependent libraries use. Similar to aten/aten.h.</li>\n<li>for internal code structure:\n<ul>\n<li>macros/ contains all macros and does not depend on anything else</li>\n<li>util/ contains util functions, registry etc that is framework independent</li>\n<li>(future) core/ contains core abstractions of framework, like tensors, devices etc. We can also choose to call it framework/</li>\n<li>(future) serde/ contains serialization and deserialization, with PRIVATE HEADERS and PRIVATE DEPENDENCY on protobuf, effectively hiding our protobuf usage as a public header and that will resolve the protobuf version problem once and for all.</li>\n</ul>\n</li>\n</ul>\n<p>Does that make sense?</p>", "body_text": "re directory structure, here is what I am thinking (for now):\n\nfor public header: we might want to have a c10/c10.h that dependent libraries use. Similar to aten/aten.h.\nfor internal code structure:\n\nmacros/ contains all macros and does not depend on anything else\nutil/ contains util functions, registry etc that is framework independent\n(future) core/ contains core abstractions of framework, like tensors, devices etc. We can also choose to call it framework/\n(future) serde/ contains serialization and deserialization, with PRIVATE HEADERS and PRIVATE DEPENDENCY on protobuf, effectively hiding our protobuf usage as a public header and that will resolve the protobuf version problem once and for all.\n\n\n\nDoes that make sense?", "body": "re directory structure, here is what I am thinking (for now):\r\n\r\n- for public header: we might want to have a c10/c10.h that dependent libraries use. Similar to aten/aten.h.\r\n- for internal code structure:\r\n  - macros/ contains all macros and does not depend on anything else\r\n  - util/ contains util functions, registry etc that is framework independent\r\n  - (future) core/ contains core abstractions of framework, like tensors, devices etc. We can also choose to call it framework/\r\n  - (future) serde/ contains serialization and deserialization, with PRIVATE HEADERS and PRIVATE DEPENDENCY on protobuf, effectively hiding our protobuf usage as a public header and that will resolve the protobuf version problem once and for all.\r\n\r\nDoes that make sense? "}