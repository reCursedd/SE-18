{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220592105", "pull_request_review_id": 159033756, "id": 220592105, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDU5MjEwNQ==", "diff_hunk": "@@ -126,92 +125,83 @@ class CAFFE2_API Registerer {\n \n   template <class DerivedType>\n   static ObjectPtrType DefaultCreator(Args... args) {\n-    // TODO(jiayq): old versions of NVCC does not handle make_unique well\n-    // so we are forced to use a unique_ptr constructor here. Check if it is\n-    // fine to use make_unique in the future.\n-    // return make_unique<DerivedType>(args...);\n     return ObjectPtrType(new DerivedType(args...));\n   }\n };\n \n /**\n- * AT_ANONYMOUS_VARIABLE(str) introduces an identifier starting with\n+ * C10_ANONYMOUS_VARIABLE(str) introduces an identifier starting with\n  * str and ending with a number that varies with the line.\n- * Pretty much a copy from 'folly/Preprocessor.h'\n  */\n-#define AT_CONCATENATE_IMPL(s1, s2) s1##s2\n-#define AT_CONCATENATE(s1, s2) AT_CONCATENATE_IMPL(s1, s2)\n+#define C10_CONCATENATE_IMPL(s1, s2) s1##s2\n+#define C10_CONCATENATE(s1, s2) C10_CONCATENATE_IMPL(s1, s2)\n #ifdef __COUNTER__\n-#define AT_ANONYMOUS_VARIABLE(str) AT_CONCATENATE(str, __COUNTER__)\n+#define C10_ANONYMOUS_VARIABLE(str) C10_CONCATENATE(str, __COUNTER__)\n #else\n-#define AT_ANONYMOUS_VARIABLE(str) AT_CONCATENATE(str, __LINE__)\n+#define C10_ANONYMOUS_VARIABLE(str) C10_CONCATENATE(str, __LINE__)\n #endif\n \n /**\n- * AT_DECLARE_TYPED_REGISTRY is a macro that expands to a function\n+ * C10_DECLARE_TYPED_REGISTRY is a macro that expands to a function\n  * declaration, as well as creating a convenient typename for its corresponding\n  * registerer.\n  */\n-#define AT_DECLARE_TYPED_REGISTRY(                                \\\n+#define C10_DECLARE_TYPED_REGISTRY(                                \\\n     RegistryName, SrcType, ObjectType, PtrType, ...)              \\\n-  CAFFE2_API Registry<SrcType, PtrType<ObjectType>, __VA_ARGS__>* \\\n+  C10_IMPORT ::c10::Registry<SrcType, PtrType<ObjectType>, ##__VA_ARGS__>* \\", "path": "c10/util/Registry.h", "position": 129, "original_position": 116, "commit_id": "0f4377afed19a4bc5b8444255394bff97fbe9559", "original_commit_id": "e393dc538498133938629877101c1a4814b67a32", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "body": "Will do :)", "created_at": "2018-09-26T14:40:50Z", "updated_at": "2018-11-23T15:52:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/12077#discussion_r220592105", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12077", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220592105"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12077#discussion_r220592105"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12077"}}, "body_html": "<p>Will do :)</p>", "body_text": "Will do :)", "in_reply_to_id": 220568222}