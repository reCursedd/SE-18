{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103060263", "pull_request_review_id": 23840469, "id": 103060263, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzA2MDI2Mw==", "diff_hunk": "@@ -1,25 +1,36 @@\n+import torch\n from torch.autograd import Variable\n from ._functions import Scatter, Gather\n+from torch.cuda.comm import broadcast\n \n \n-def scatter(input, target_gpus):\n-    \"\"\"Slices a given variable into approximately equal chunks and distributes\n-       them accross given GPUs\n+def scatter(input, target_gpus, dim=0):\n+    \"\"\"\n+    Slices a given variable into approximately equal chunks and distributes\n+      them accross given GPUs\n+    Duplicates references to objects that are not variables.\n     \"\"\"\n     def scatter_map(obj):\n         if isinstance(obj, Variable):\n-            return Scatter(target_gpus)(obj)\n-        return tuple(zip(*map(scatter_map, obj)))\n+            return Scatter(target_gpus, dim=dim)(obj)\n+        if isinstance(obj, tuple) or isinstance(obj, list):\n+            return type(obj)(zip(*map(scatter_map, obj)))\n+        if torch.is_tensor(obj):\n+            return broadcast(obj, target_gpus)", "path": "torch/nn/parallel/scatter_gather.py", "position": null, "original_position": 24, "commit_id": "f0189e462c383c56f42a18aec85806f3291e2133", "original_commit_id": "5f5704f96f04183c6b861821dd62b47b4e7b1634", "user": {"login": "csarofeen", "id": 22205833, "node_id": "MDQ6VXNlcjIyMjA1ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/22205833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csarofeen", "html_url": "https://github.com/csarofeen", "followers_url": "https://api.github.com/users/csarofeen/followers", "following_url": "https://api.github.com/users/csarofeen/following{/other_user}", "gists_url": "https://api.github.com/users/csarofeen/gists{/gist_id}", "starred_url": "https://api.github.com/users/csarofeen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csarofeen/subscriptions", "organizations_url": "https://api.github.com/users/csarofeen/orgs", "repos_url": "https://api.github.com/users/csarofeen/repos", "events_url": "https://api.github.com/users/csarofeen/events{/privacy}", "received_events_url": "https://api.github.com/users/csarofeen/received_events", "type": "User", "site_admin": false}, "body": "Variables seem to be the only obvious thing to scatter. Also there's no obvious way to broadcast anything that would be contained in a tensor in data parallel. Not sure of a specific use case but could imagine an easy method to broadcast something instead of scattering could be useful.", "created_at": "2017-02-25T00:22:58Z", "updated_at": "2018-11-23T15:32:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/843#discussion_r103060263", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/843", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103060263"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/843#discussion_r103060263"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/843"}}, "body_html": "<p>Variables seem to be the only obvious thing to scatter. Also there's no obvious way to broadcast anything that would be contained in a tensor in data parallel. Not sure of a specific use case but could imagine an easy method to broadcast something instead of scattering could be useful.</p>", "body_text": "Variables seem to be the only obvious thing to scatter. Also there's no obvious way to broadcast anything that would be contained in a tensor in data parallel. Not sure of a specific use case but could imagine an easy method to broadcast something instead of scattering could be useful.", "in_reply_to_id": 103059031}