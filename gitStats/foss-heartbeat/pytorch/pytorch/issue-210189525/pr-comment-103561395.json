{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103561395", "pull_request_review_id": 24351631, "id": 103561395, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzU2MTM5NQ==", "diff_hunk": "@@ -8,31 +8,44 @@\n     import Queue as queue\n \n \n-def parallel_apply(modules, inputs):\n+def parallel_apply(modules, inputs, kwargs):\n     assert len(modules) == len(inputs)\n+    if kwargs:\n+        assert len(modules) == len(kwargs)\n+\n     # Fast track\n     if len(modules) == 1:\n-        return (modules[0](*inputs[0]),)\n+        if kwargs is None:\n+            return (modules[0](*inputs[0]),)\n+        else:\n+            return (modules[0](*inputs[0], **kwargs[0]),)\n \n     lock = threading.Lock()\n     results = {}\n \n-    def _worker(module, input, results, lock):\n+    def _worker(module, input, kwargs, results, lock):\n         var_input = input\n         while not isinstance(var_input, Variable):\n             var_input = var_input[0]\n         try:\n             with torch.cuda.device_of(var_input):\n-                output = module(*input)\n+                if kwargs is not None:\n+                    output = module(*input, **kwargs)\n+                else:\n+                    output = module(*input)\n             with lock:\n                 results[input] = output\n         except Exception as e:\n             with lock:\n                 results[input] = e\n-\n-    threads = [threading.Thread(target=_worker,\n-                                args=(module, input, results, lock))\n-               for module, input in zip(modules, inputs)]\n+    if kwargs is None:\n+        threads = [threading.Thread(target=_worker,\n+                                    args=(module, input, kwargs, results, lock))\n+                   for module, input in zip(modules, inputs)]\n+    else:\n+        threads = [threading.Thread(target=_worker,\n+                                    args=(module, input, kwargs, results, lock))\n+                   for module, input, kwargs in zip(modules, inputs, kwargs)]", "path": "torch/nn/parallel/parallel_apply.py", "position": null, "original_position": 49, "commit_id": "f0189e462c383c56f42a18aec85806f3291e2133", "original_commit_id": "90fa6a81284042c7494e6b38f3281bd2f4d1bb3d", "user": {"login": "csarofeen", "id": 22205833, "node_id": "MDQ6VXNlcjIyMjA1ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/22205833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csarofeen", "html_url": "https://github.com/csarofeen", "followers_url": "https://api.github.com/users/csarofeen/followers", "following_url": "https://api.github.com/users/csarofeen/following{/other_user}", "gists_url": "https://api.github.com/users/csarofeen/gists{/gist_id}", "starred_url": "https://api.github.com/users/csarofeen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csarofeen/subscriptions", "organizations_url": "https://api.github.com/users/csarofeen/orgs", "repos_url": "https://api.github.com/users/csarofeen/repos", "events_url": "https://api.github.com/users/csarofeen/events{/privacy}", "received_events_url": "https://api.github.com/users/csarofeen/received_events", "type": "User", "site_admin": false}, "body": "Got it cleaned up, thanks.", "created_at": "2017-02-28T21:57:59Z", "updated_at": "2018-11-23T15:32:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/843#discussion_r103561395", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/843", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/103561395"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/843#discussion_r103561395"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/843"}}, "body_html": "<p>Got it cleaned up, thanks.</p>", "body_text": "Got it cleaned up, thanks.", "in_reply_to_id": 103545949}