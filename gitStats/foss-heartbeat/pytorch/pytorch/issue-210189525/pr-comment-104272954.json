{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104272954", "pull_request_review_id": 24331818, "id": 104272954, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDI3Mjk1NA==", "diff_hunk": "@@ -36,48 +43,71 @@ class DataParallel(Module):\n     \"\"\"\n \n     # TODO: update notes/cuda.rst when this class handles 8+ GPUs well\n-    def __init__(self, module, device_ids=None, output_device=None):\n+\n+    def __init__(self, module, device_ids=None, output_device=None, dim=0):\n         super(DataParallel, self).__init__()\n         if device_ids is None:\n             device_ids = list(range(torch.cuda.device_count()))\n         if output_device is None:\n             output_device = device_ids[0]\n+        self.dim = dim\n         self.module = module\n         self.device_ids = device_ids\n         self.output_device = output_device\n         if len(self.device_ids) == 1:\n             self.module.cuda(device_ids[0])\n \n-    def forward(self, *inputs):\n+    def forward(self, *inputs, **kwargs):\n         def _to_cuda(obj):\n             if isinstance(obj, Variable):\n                 return obj.cuda()\n-            return tuple((map(_to_cuda, obj)))\n+            if isinstance(obj, tuple) or isinstance(obj, list):\n+                return type(obj)((map(_to_cuda, obj)))\n+            return obj\n \n         if len(self.device_ids) == 1:\n             with torch.cuda.device(self.device_ids[0]):\n                 inputs_cuda = _to_cuda(inputs)\n-            return self.module(*inputs_cuda)\n+                if kwargs:\n+                    gpu_dict = {}\n+                    for key in kwargs.keys():\n+                        gpu_dict[key] = _to_cuda(kwargs[key])\n+                    return self.module(*inputs_cuda, **gpu_dict)\n+                else:\n+                    return self.module(*inputs_cuda)\n+\n         replicas = self.replicate(self.module, self.device_ids)\n         scattered = self.scatter(inputs, self.device_ids)\n+\n+        gpu_dicts = None\n+        if kwargs:\n+            scatter_kwargs = {}\n+            for key in kwargs.keys():\n+                scatter_kwargs[key] = self.scatter(\n+                    _to_cuda(kwargs[key]), self.device_ids)\n+            gpu_dicts = tuple([\n+                dict([(key, values[i])\n+                     for key, values in scatter_kwargs.items()])\n+                for i in self.device_ids\n+            ])\n         replicas = replicas[:len(scattered)]\n-        outputs = self.parallel_apply(replicas, scattered)\n+        outputs = self.parallel_apply(replicas, scattered, gpu_dicts)\n         return self.gather(outputs, self.output_device)\n \n     def replicate(self, module, device_ids):\n         return replicate(module, device_ids)\n \n     def scatter(self, input, device_ids):\n-        return scatter(input, device_ids)\n+        return scatter(input, device_ids, dim=self.dim)\n \n-    def parallel_apply(self, replicas, inputs):\n-        return parallel_apply(replicas, inputs)\n+    def parallel_apply(self, replicas, inputs, kwargs):\n+        return parallel_apply(replicas, inputs, kwargs)\n \n     def gather(self, outputs, output_device):\n-        return gather(outputs, output_device)\n+        return gather(outputs, output_device, dim=self.dim)\n \n \n-def data_parallel(module, inputs, device_ids, output_device=None):\n+def data_parallel(module, inputs, device_ids, module_kwargs=None, output_device=None, dim=0):", "path": "torch/nn/parallel/data_parallel.py", "position": null, "original_position": 99, "commit_id": "f0189e462c383c56f42a18aec85806f3291e2133", "original_commit_id": "52f7b010fdc2c8ff4d5d73f9de69f1e0143c592d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think it's better to add `module_kwargs` at the end of argument list just in case someone has been using the `output_device` arg.", "created_at": "2017-03-04T01:21:25Z", "updated_at": "2018-11-23T15:32:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/843#discussion_r104272954", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/843", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104272954"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/843#discussion_r104272954"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/843"}}, "body_html": "<p>I think it's better to add <code>module_kwargs</code> at the end of argument list just in case someone has been using the <code>output_device</code> arg.</p>", "body_text": "I think it's better to add module_kwargs at the end of argument list just in case someone has been using the output_device arg."}