{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9138", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9138/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9138/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9138/events", "html_url": "https://github.com/pytorch/pytorch/issues/9138", "id": 337922717, "node_id": "MDU6SXNzdWUzMzc5MjI3MTc=", "number": 9138, "title": "Different behavior between Tensor.sub() and Tensor.sub_() after expanded", "user": {"login": "tete1030", "id": 4312115, "node_id": "MDQ6VXNlcjQzMTIxMTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4312115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tete1030", "html_url": "https://github.com/tete1030", "followers_url": "https://api.github.com/users/tete1030/followers", "following_url": "https://api.github.com/users/tete1030/following{/other_user}", "gists_url": "https://api.github.com/users/tete1030/gists{/gist_id}", "starred_url": "https://api.github.com/users/tete1030/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tete1030/subscriptions", "organizations_url": "https://api.github.com/users/tete1030/orgs", "repos_url": "https://api.github.com/users/tete1030/repos", "events_url": "https://api.github.com/users/tete1030/events{/privacy}", "received_events_url": "https://api.github.com/users/tete1030/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-03T14:24:06Z", "updated_at": "2018-07-03T14:40:25Z", "closed_at": "2018-07-03T14:40:25Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>The behavior between <code>Tensor.sub()</code> and <code>Tensor.sub_()</code> can be different after the Tensor is expanded.</p>\n<p>I can see why the inplace version <code>sub_()</code> produced such result. Each time <code>a</code> is subtracted, it is actually applied on original storage of <code>a</code>. So the three-time subtraction is applied on the same memory place.</p>\n<p>However, if such behavior is intended, I suggest add note in the document of <code>sub_()</code>, and <code>add_()</code> etc, instead of only saying 'In-place version of <code>sub()</code>' , which is confusing considering AFAIK for most cases the inplace version function produces the same result as its normal version.</p>\n<h2>Code example</h2>\n<pre><code>a = torch.tensor([[1,2]]).expand(3, -1)\nb = torch.tensor([[10], [20], [30]])\n</code></pre>\n<p><code>a.sub(b)</code> returns</p>\n<pre><code>tensor([[ -9,  -8],\n        [-19, -18],\n        [-29, -28]])\n</code></pre>\n<p>while <code>a.sub_(b)</code> returns</p>\n<pre><code>tensor([[-59, -58],\n        [-59, -58],\n        [-59, -58]])\n</code></pre>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: None</p>\n<p>OS: Mac OSX 10.13.5<br>\nGCC version: Could not collect<br>\nCMake version: version 3.9.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: No<br>\nCUDA runtime version: No CUDA<br>\nGPU models and configuration: No CUDA<br>\nNvidia driver version: No CUDA<br>\ncuDNN version: No CUDA</p>\n<p>Versions of relevant libraries:<br>\n[pip3] numpy (1.14.3)<br>\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch<br>\n[conda] torchvision               0.2.1                    py36_1    pytorch</p>", "body_text": "Issue description\nThe behavior between Tensor.sub() and Tensor.sub_() can be different after the Tensor is expanded.\nI can see why the inplace version sub_() produced such result. Each time a is subtracted, it is actually applied on original storage of a. So the three-time subtraction is applied on the same memory place.\nHowever, if such behavior is intended, I suggest add note in the document of sub_(), and add_() etc, instead of only saying 'In-place version of sub()' , which is confusing considering AFAIK for most cases the inplace version function produces the same result as its normal version.\nCode example\na = torch.tensor([[1,2]]).expand(3, -1)\nb = torch.tensor([[10], [20], [30]])\n\na.sub(b) returns\ntensor([[ -9,  -8],\n        [-19, -18],\n        [-29, -28]])\n\nwhile a.sub_(b) returns\ntensor([[-59, -58],\n        [-59, -58],\n        [-59, -58]])\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: None\nOS: Mac OSX 10.13.5\nGCC version: Could not collect\nCMake version: version 3.9.1\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nVersions of relevant libraries:\n[pip3] numpy (1.14.3)\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\n\r\nThe behavior between `Tensor.sub()` and `Tensor.sub_()` can be different after the Tensor is expanded.\r\n\r\nI can see why the inplace version `sub_()` produced such result. Each time `a` is subtracted, it is actually applied on original storage of `a`. So the three-time subtraction is applied on the same memory place.\r\n\r\nHowever, if such behavior is intended, I suggest add note in the document of `sub_()`, and `add_()` etc, instead of only saying 'In-place version of `sub()`' , which is confusing considering AFAIK for most cases the inplace version function produces the same result as its normal version.\r\n\r\n## Code example\r\n\r\n```\r\na = torch.tensor([[1,2]]).expand(3, -1)\r\nb = torch.tensor([[10], [20], [30]])\r\n```\r\n\r\n`a.sub(b)` returns\r\n```\r\ntensor([[ -9,  -8],\r\n        [-19, -18],\r\n        [-29, -28]])\r\n```\r\nwhile `a.sub_(b)` returns\r\n```\r\ntensor([[-59, -58],\r\n        [-59, -58],\r\n        [-59, -58]])\r\n```\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: None\r\n\r\nOS: Mac OSX 10.13.5\r\nGCC version: Could not collect\r\nCMake version: version 3.9.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.14.3)\r\n[conda] pytorch                   0.4.0           py36_cuda0.0_cudnn0.0_1    pytorch\r\n[conda] torchvision               0.2.1                    py36_1    pytorch"}