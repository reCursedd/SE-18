{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/120746615", "pull_request_review_id": 42096944, "id": 120746615, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDc0NjYxNQ==", "diff_hunk": "@@ -0,0 +1,313 @@\n+import sys\n+import math\n+import threading\n+\n+import torch\n+from torch import nn\n+from torch.autograd import Variable\n+from torch._utils import _flatten_tensors, _unflatten_tensors\n+from torch.cuda.comm import broadcast_coalesced\n+from torch.cuda import nccl\n+import torch.distributed as dist\n+\n+from .replicate import replicate\n+from .scatter_gather import scatter_kwargs, gather\n+from .parallel_apply import parallel_apply\n+\n+if sys.version_info[0] == 3:\n+    import queue\n+else:\n+    import Queue as queue\n+\n+\n+class DistributedDataParallel(nn.Module):\n+    \"\"\"Implements distributed data parallelism at the module level.\n+\n+    This container parallelizes the application of the given module by\n+    splitting the input across the specified devices by chunking in the batch\n+    dimension. The module is replicated on each machine and each device, and\n+    each such replica handles a portion of the input. During the backwards\n+    pass, gradients from each node are averaged.\n+\n+    The batch size should be larger than the number of GPUs used locally. It should\n+    also be an integer multiple of the number of GPUs so that each chunk is the\n+    same size (so that each GPU processes the same number of samples).\n+\n+    See also: :ref:`cuda-nn-dataparallel-instead`. The same constraints on input\n+    as in :class:`torch.nn.DataParallel` apply.\n+\n+    .. warning::\n+        Constructor, forward method, and differentiation of the output (or a\n+        function of the output of this module) is a distributed synchronization\n+        point. Take that into account in case different processes might be executing\n+        different code.\n+\n+    .. warning::\n+        This module assumes all parameters are registered in the model by the time\n+        it is created. No parameters should be added nor removed later. Same applies\n+        to buffers.\n+\n+    .. warning::\n+        This module doesn't work with :func:`torch.autograd.grad` (i.e. it will only\n+        work if gradients are to be accumulated in ``.grad`` attributes of parameters).\n+\n+    .. note::\n+        Parameters are never broadcast between processes. The module performs\n+        an all-reduce step on gradients and assumes that they will be modified by the\n+        optimizer in all processes in the same way. Buffers (e.g. BatchNorm stats) are\n+        broadcast form the module in process of rank 0, to all other replicas in the\n+        system in every iteration.\n+\n+    Args:\n+        module: module to be parallelized\n+        device_ids: CUDA devices (default: all devices)\n+        output_device: device location of output (default: device_ids[0])\n+\n+    Example::\n+\n+        >>> net = torch.nn.DataParallel(model, device_ids=[0, 1, 2])", "path": "torch/nn/parallel/distributed.py", "position": null, "original_position": 68, "commit_id": "d9d50f80c7f162c9c6c6d95c0b51f9e6fd8fccee", "original_commit_id": "84eb23719f40840f55df54eab7bb6c37e43275a2", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "`s/DataParallel/DistributedDataParallel`\r\n\r\nIf there are environment variables that need to be set to use it, this would be a good place give some examples of that too.\r\n\r\nSame with any functions you need to call to rendezvous before creating DistributedDataParallel", "created_at": "2017-06-07T21:14:45Z", "updated_at": "2018-11-23T15:33:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/1715#discussion_r120746615", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1715", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/120746615"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1715#discussion_r120746615"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1715"}}, "body_html": "<p><code>s/DataParallel/DistributedDataParallel</code></p>\n<p>If there are environment variables that need to be set to use it, this would be a good place give some examples of that too.</p>\n<p>Same with any functions you need to call to rendezvous before creating DistributedDataParallel</p>", "body_text": "s/DataParallel/DistributedDataParallel\nIf there are environment variables that need to be set to use it, this would be a good place give some examples of that too.\nSame with any functions you need to call to rendezvous before creating DistributedDataParallel"}