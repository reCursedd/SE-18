{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11456", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11456/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11456/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11456/events", "html_url": "https://github.com/pytorch/pytorch/issues/11456", "id": 358650027, "node_id": "MDU6SXNzdWUzNTg2NTAwMjc=", "number": 11456, "title": "[Bug or Requirement?] ONNX unpacked the tuple of parameters of the model", "user": {"login": "thlinh", "id": 1904846, "node_id": "MDQ6VXNlcjE5MDQ4NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1904846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thlinh", "html_url": "https://github.com/thlinh", "followers_url": "https://api.github.com/users/thlinh/followers", "following_url": "https://api.github.com/users/thlinh/following{/other_user}", "gists_url": "https://api.github.com/users/thlinh/gists{/gist_id}", "starred_url": "https://api.github.com/users/thlinh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thlinh/subscriptions", "organizations_url": "https://api.github.com/users/thlinh/orgs", "repos_url": "https://api.github.com/users/thlinh/repos", "events_url": "https://api.github.com/users/thlinh/events{/privacy}", "received_events_url": "https://api.github.com/users/thlinh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-10T14:30:29Z", "updated_at": "2018-09-13T14:48:23Z", "closed_at": "2018-09-10T22:22:15Z", "author_association": "NONE", "body_html": "<p>If you have a question or would like help and support, please ask at our<br>\n<a href=\"https://discuss.pytorch.org/\" rel=\"nofollow\">forums</a>.</p>\n<p>If you are submitting a feature request, please preface the title with [feature request].<br>\nIf you are submitting a bug report, please fill in the following details.</p>\n<h2>Issue description</h2>\n<p>Hi,<br>\nI have a problem when converting a PyTorch model into ONNX. My model expects its input is a tuple of tensors (one input only). But when running torch.onnx.export(), the input is unpacked and passed into the model as a number of tensors, which generates error (since only 1 parameter is expected). I have a simplified version shown down here:</p>\n<h2>Code example</h2>\n<pre><code>import torch\nimport torch.nn as nn\n\nclass sim_test(nn.Module):\n    def __init__(self, args):\n        super(sim_test, self).__init__()\n        print(args)\n\n    def forward(self, inp_tuple):\n        x = inp_tuple[0]\n        print(x.type())\n        print(x.size())\n        y = inp_tuple[1]\n        z = inp_tuple[2]\n        return x + y + z\n\ndef main():\n    model = sim_test(\"Test me\")\n    inp_x = torch.FloatTensor(1, 5).uniform_()\n    inp_y = torch.FloatTensor(1, 5).uniform_()\n    inp_z = torch.FloatTensor(1, 5).uniform_()\n    total_inp = (inp_x,inp_y,inp_z)\n    result = model(total_inp)\n    print (\"Result is: \", result)\n\n    torch.onnx.export(model, total_inp, \"simple_test.onnx\", verbose=True)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>The result screen is:</p>\n<pre lang=\"Test\" data-meta=\"me\"><code>torch.FloatTensor\ntorch.Size([1, 5])\nResult is:  tensor([[1.2815, 1.8511, 0.9751, 1.1096, 1.4900]])\nTraceback (most recent call last):\n  File \"simple_test.py\", line 30, in &lt;module&gt;\n    main()\n  File \"simple_test.py\", line 27, in main\n    torch.onnx.export(model, total_inp, \"simple_test.onnx\", verbose=True)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/__init__.py\", line 26, in export\n    return utils.export(*args, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 94, in export\n    operator_export_type=operator_export_type)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 227, in _export\n    example_outputs, propagate)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 178, in _model_to_graph\n    graph, torch_out = _trace_and_get_graph_from_model(model, args, training)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 145, in _trace_and_get_graph_from_model\n    trace, torch_out = torch.jit.get_trace_graph(model, args)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/jit/__init__.py\", line 77, in get_trace_graph\n    return LegacyTracedModule(f)(*args, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 477, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/jit/__init__.py\", line 109, in forward\n    out = self.inner(*trace_inputs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 475, in __call__\n    result = self._slow_forward(*input, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 465, in _slow_forward\n    result = self.forward(*input, **kwargs)\nTypeError: forward() takes 2 positional arguments but 4 were given\n</code></pre>\n<p>The problem can be now by-passed by changing the definition of forward() to:</p>\n<pre><code>def forward(self, *inp_tuple):\n</code></pre>\n<p>and call it as:</p>\n<pre><code>result = model(*total_inp)\n</code></pre>\n<p>I wonder if this is a requirement that we cannot use directly tuple as input into a model?<br>\nThank you very much for your coming helps! <g-emoji class=\"g-emoji\" alias=\"smiley\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png\">\ud83d\ude03</g-emoji></p>\n<h2>System Info</h2>\n<pre><code>Collecting environment information...\nPyTorch version: 0.4.1.post2\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.5.0-12ubuntu1~16.04) 5.5.0 20171010\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 7.5.17\nGPU models and configuration: GPU 0: Tesla K40c\nNvidia driver version: 396.51\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.1\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7.1.4\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip3] numpy (1.15.1)\n[pip3] torch (0.4.1.post2)\n[pip3] torchsummary (1.4)\n[pip3] torchtext (0.2.3)\n[pip3] torchvision (0.2.1)\n[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch\n[conda] torchsummary              1.4                       &lt;pip&gt;\n[conda] torchtext                 0.2.3                     &lt;pip&gt;\n[conda] torchvision               0.2.1                    py36_1    pytorch\n</code></pre>", "body_text": "If you have a question or would like help and support, please ask at our\nforums.\nIf you are submitting a feature request, please preface the title with [feature request].\nIf you are submitting a bug report, please fill in the following details.\nIssue description\nHi,\nI have a problem when converting a PyTorch model into ONNX. My model expects its input is a tuple of tensors (one input only). But when running torch.onnx.export(), the input is unpacked and passed into the model as a number of tensors, which generates error (since only 1 parameter is expected). I have a simplified version shown down here:\nCode example\nimport torch\nimport torch.nn as nn\n\nclass sim_test(nn.Module):\n    def __init__(self, args):\n        super(sim_test, self).__init__()\n        print(args)\n\n    def forward(self, inp_tuple):\n        x = inp_tuple[0]\n        print(x.type())\n        print(x.size())\n        y = inp_tuple[1]\n        z = inp_tuple[2]\n        return x + y + z\n\ndef main():\n    model = sim_test(\"Test me\")\n    inp_x = torch.FloatTensor(1, 5).uniform_()\n    inp_y = torch.FloatTensor(1, 5).uniform_()\n    inp_z = torch.FloatTensor(1, 5).uniform_()\n    total_inp = (inp_x,inp_y,inp_z)\n    result = model(total_inp)\n    print (\"Result is: \", result)\n\n    torch.onnx.export(model, total_inp, \"simple_test.onnx\", verbose=True)\n\nif __name__ == '__main__':\n    main()\n\nThe result screen is:\ntorch.FloatTensor\ntorch.Size([1, 5])\nResult is:  tensor([[1.2815, 1.8511, 0.9751, 1.1096, 1.4900]])\nTraceback (most recent call last):\n  File \"simple_test.py\", line 30, in <module>\n    main()\n  File \"simple_test.py\", line 27, in main\n    torch.onnx.export(model, total_inp, \"simple_test.onnx\", verbose=True)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/__init__.py\", line 26, in export\n    return utils.export(*args, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 94, in export\n    operator_export_type=operator_export_type)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 227, in _export\n    example_outputs, propagate)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 178, in _model_to_graph\n    graph, torch_out = _trace_and_get_graph_from_model(model, args, training)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 145, in _trace_and_get_graph_from_model\n    trace, torch_out = torch.jit.get_trace_graph(model, args)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/jit/__init__.py\", line 77, in get_trace_graph\n    return LegacyTracedModule(f)(*args, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 477, in __call__\n    result = self.forward(*input, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/jit/__init__.py\", line 109, in forward\n    out = self.inner(*trace_inputs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 475, in __call__\n    result = self._slow_forward(*input, **kwargs)\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 465, in _slow_forward\n    result = self.forward(*input, **kwargs)\nTypeError: forward() takes 2 positional arguments but 4 were given\n\nThe problem can be now by-passed by changing the definition of forward() to:\ndef forward(self, *inp_tuple):\n\nand call it as:\nresult = model(*total_inp)\n\nI wonder if this is a requirement that we cannot use directly tuple as input into a model?\nThank you very much for your coming helps! \ud83d\ude03\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.1.post2\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.5.0-12ubuntu1~16.04) 5.5.0 20171010\nCMake version: version 3.5.1\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 7.5.17\nGPU models and configuration: GPU 0: Tesla K40c\nNvidia driver version: 396.51\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.1\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7.1.4\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip3] numpy (1.15.1)\n[pip3] torch (0.4.1.post2)\n[pip3] torchsummary (1.4)\n[pip3] torchtext (0.2.3)\n[pip3] torchvision (0.2.1)\n[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch\n[conda] torchsummary              1.4                       <pip>\n[conda] torchtext                 0.2.3                     <pip>\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "If you have a question or would like help and support, please ask at our\r\n[forums](https://discuss.pytorch.org/).\r\n\r\nIf you are submitting a feature request, please preface the title with [feature request].\r\nIf you are submitting a bug report, please fill in the following details.\r\n\r\n## Issue description\r\n\r\nHi,\r\nI have a problem when converting a PyTorch model into ONNX. My model expects its input is a tuple of tensors (one input only). But when running torch.onnx.export(), the input is unpacked and passed into the model as a number of tensors, which generates error (since only 1 parameter is expected). I have a simplified version shown down here:\r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\n\r\nclass sim_test(nn.Module):\r\n    def __init__(self, args):\r\n        super(sim_test, self).__init__()\r\n        print(args)\r\n\r\n    def forward(self, inp_tuple):\r\n        x = inp_tuple[0]\r\n        print(x.type())\r\n        print(x.size())\r\n        y = inp_tuple[1]\r\n        z = inp_tuple[2]\r\n        return x + y + z\r\n\r\ndef main():\r\n    model = sim_test(\"Test me\")\r\n    inp_x = torch.FloatTensor(1, 5).uniform_()\r\n    inp_y = torch.FloatTensor(1, 5).uniform_()\r\n    inp_z = torch.FloatTensor(1, 5).uniform_()\r\n    total_inp = (inp_x,inp_y,inp_z)\r\n    result = model(total_inp)\r\n    print (\"Result is: \", result)\r\n\r\n    torch.onnx.export(model, total_inp, \"simple_test.onnx\", verbose=True)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\nThe result screen is:\r\n```Test me\r\ntorch.FloatTensor\r\ntorch.Size([1, 5])\r\nResult is:  tensor([[1.2815, 1.8511, 0.9751, 1.1096, 1.4900]])\r\nTraceback (most recent call last):\r\n  File \"simple_test.py\", line 30, in <module>\r\n    main()\r\n  File \"simple_test.py\", line 27, in main\r\n    torch.onnx.export(model, total_inp, \"simple_test.onnx\", verbose=True)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/__init__.py\", line 26, in export\r\n    return utils.export(*args, **kwargs)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 94, in export\r\n    operator_export_type=operator_export_type)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 227, in _export\r\n    example_outputs, propagate)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 178, in _model_to_graph\r\n    graph, torch_out = _trace_and_get_graph_from_model(model, args, training)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/onnx/utils.py\", line 145, in _trace_and_get_graph_from_model\r\n    trace, torch_out = torch.jit.get_trace_graph(model, args)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/jit/__init__.py\", line 77, in get_trace_graph\r\n    return LegacyTracedModule(f)(*args, **kwargs)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 477, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/jit/__init__.py\", line 109, in forward\r\n    out = self.inner(*trace_inputs)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 475, in __call__\r\n    result = self._slow_forward(*input, **kwargs)\r\n  File \"/home/h00472437/.conda/envs/Py36/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 465, in _slow_forward\r\n    result = self.forward(*input, **kwargs)\r\nTypeError: forward() takes 2 positional arguments but 4 were given\r\n```\r\nThe problem can be now by-passed by changing the definition of forward() to:\r\n```\r\ndef forward(self, *inp_tuple):\r\n```\r\nand call it as:\r\n```\r\nresult = model(*total_inp)\r\n```\r\nI wonder if this is a requirement that we cannot use directly tuple as input into a model?\r\nThank you very much for your coming helps! :smiley: \r\n\r\n\r\n## System Info\r\n```\r\nCollecting environment information...\r\nPyTorch version: 0.4.1.post2\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 5.5.0-12ubuntu1~16.04) 5.5.0 20171010\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 7.5.17\r\nGPU models and configuration: GPU 0: Tesla K40c\r\nNvidia driver version: 396.51\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.4\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.1\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn.so.7.1.4\r\n/usr/local/cuda-9.2/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.15.1)\r\n[pip3] torch (0.4.1.post2)\r\n[pip3] torchsummary (1.4)\r\n[pip3] torchtext (0.2.3)\r\n[pip3] torchvision (0.2.1)\r\n[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch\r\n[conda] torchsummary              1.4                       <pip>\r\n[conda] torchtext                 0.2.3                     <pip>\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n"}