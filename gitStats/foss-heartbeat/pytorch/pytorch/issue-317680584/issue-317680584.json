{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6950", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6950/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6950/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6950/events", "html_url": "https://github.com/pytorch/pytorch/issues/6950", "id": 317680584, "node_id": "MDU6SXNzdWUzMTc2ODA1ODQ=", "number": 6950, "title": "Incorrect default initialization for convolutional kernels", "user": {"login": "emitch", "id": 7739114, "node_id": "MDQ6VXNlcjc3MzkxMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7739114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emitch", "html_url": "https://github.com/emitch", "followers_url": "https://api.github.com/users/emitch/followers", "following_url": "https://api.github.com/users/emitch/following{/other_user}", "gists_url": "https://api.github.com/users/emitch/gists{/gist_id}", "starred_url": "https://api.github.com/users/emitch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emitch/subscriptions", "organizations_url": "https://api.github.com/users/emitch/orgs", "repos_url": "https://api.github.com/users/emitch/repos", "events_url": "https://api.github.com/users/emitch/events{/privacy}", "received_events_url": "https://api.github.com/users/emitch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-25T15:30:45Z", "updated_at": "2018-09-09T16:38:45Z", "closed_at": "2018-09-09T16:38:45Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>The default initialization for convolutional kernels is missing a factor of sqrt(3), which causes exponential decay in the variance of the outputs in deep networks. The weights are drawn from a uniform distribution, the standard deviation of which has been computed incorrectly.</p>\n<h2>Code example</h2>\n<p>The following code in torch.nn.modules.conv contains the problem:</p>\n<pre><code>def reset_parameters(self):\n    n = self.in_channels\n    for k in self.kernel_size:\n        n *= k\n    stdv = 1. / math.sqrt(n)\n    self.weight.data.uniform_(-stdv, stdv)\n    if self.bias is not None:\n        self.bias.data.uniform_(-stdv, stdv)\n</code></pre>\n<p>The standard deviation is computed as 1. / sqrt(n), when it should be sqrt(3) / sqrt(n) in order to preserve the standard deviation of the inputs. It is less clear that this is a problem for the biases (though it isn't clear why the biases are being generated the way they are anyway).</p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.3.0.post4<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 16.04.4 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 2.7<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 8.0.61<br>\nGPU models and configuration:<br>\nGPU 0: GeForce GTX 1080 Ti<br>\nGPU 1: GeForce GTX 1080 Ti<br>\nGPU 2: GeForce GTX 1080 Ti<br>\nGPU 3: GeForce GTX 1080 Ti</p>\n<p>Nvidia driver version: 390.25<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7<br>\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/lib64/libcudnn_static.a<br>\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-900fef33.so.7.0.5<br>\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-a2b758a6.so.7.0.3</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.2)<br>\n[pip] torch (0.3.0.post4)<br>\n[pip] torchfile (0.1.0)<br>\n[pip] torchnet (0.0.1)<br>\n[pip] torchvision (0.2.0)<br>\n[conda] Could not collect</p>", "body_text": "Issue description\nThe default initialization for convolutional kernels is missing a factor of sqrt(3), which causes exponential decay in the variance of the outputs in deep networks. The weights are drawn from a uniform distribution, the standard deviation of which has been computed incorrectly.\nCode example\nThe following code in torch.nn.modules.conv contains the problem:\ndef reset_parameters(self):\n    n = self.in_channels\n    for k in self.kernel_size:\n        n *= k\n    stdv = 1. / math.sqrt(n)\n    self.weight.data.uniform_(-stdv, stdv)\n    if self.bias is not None:\n        self.bias.data.uniform_(-stdv, stdv)\n\nThe standard deviation is computed as 1. / sqrt(n), when it should be sqrt(3) / sqrt(n) in order to preserve the standard deviation of the inputs. It is less clear that this is a problem for the biases (though it isn't clear why the biases are being generated the way they are anyway).\nSystem Info\nPyTorch version: 0.3.0.post4\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 2.7\nIs CUDA available: Yes\nCUDA runtime version: 8.0.61\nGPU models and configuration:\nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: GeForce GTX 1080 Ti\nGPU 3: GeForce GTX 1080 Ti\nNvidia driver version: 390.25\ncuDNN version: Probably one of the following:\n/usr/local/cuda-8.0/lib64/libcudnn.so\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-900fef33.so.7.0.5\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-a2b758a6.so.7.0.3\nVersions of relevant libraries:\n[pip] numpy (1.14.2)\n[pip] torch (0.3.0.post4)\n[pip] torchfile (0.1.0)\n[pip] torchnet (0.0.1)\n[pip] torchvision (0.2.0)\n[conda] Could not collect", "body": "## Issue description\r\n\r\nThe default initialization for convolutional kernels is missing a factor of sqrt(3), which causes exponential decay in the variance of the outputs in deep networks. The weights are drawn from a uniform distribution, the standard deviation of which has been computed incorrectly.\r\n\r\n## Code example\r\n\r\nThe following code in torch.nn.modules.conv contains the problem:\r\n\r\n    def reset_parameters(self):\r\n        n = self.in_channels\r\n        for k in self.kernel_size:\r\n            n *= k\r\n        stdv = 1. / math.sqrt(n)\r\n        self.weight.data.uniform_(-stdv, stdv)\r\n        if self.bias is not None:\r\n            self.bias.data.uniform_(-stdv, stdv)\r\n\r\nThe standard deviation is computed as 1. / sqrt(n), when it should be sqrt(3) / sqrt(n) in order to preserve the standard deviation of the inputs. It is less clear that this is a problem for the biases (though it isn't clear why the biases are being generated the way they are anyway).\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.3.0.post4\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 2.7\r\nIs CUDA available: Yes\r\nCUDA runtime version: 8.0.61\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1080 Ti\r\nGPU 2: GeForce GTX 1080 Ti\r\nGPU 3: GeForce GTX 1080 Ti\r\n\r\nNvidia driver version: 390.25\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-8.0/lib64/libcudnn.so\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7\r\n/usr/local/cuda-8.0/lib64/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n/usr/local/lib/python2.7/dist-packages/torch/lib/libcudnn-900fef33.so.7.0.5\r\n/usr/local/lib/python3.5/dist-packages/torch/lib/libcudnn-a2b758a6.so.7.0.3\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.2)\r\n[pip] torch (0.3.0.post4)\r\n[pip] torchfile (0.1.0)\r\n[pip] torchnet (0.0.1)\r\n[pip] torchvision (0.2.0)\r\n[conda] Could not collect\r\n"}