{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164085583", "pull_request_review_id": 91806153, "id": 164085583, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDA4NTU4Mw==", "diff_hunk": "@@ -64,6 +64,15 @@ $PYCMD test_cuda.py $@\n echo \"Running NCCL tests\"\n $PYCMD test_nccl.py $@\n \n+echo \"Running C++ Extensions tests\"\n+cd cpp_extensions\n+$PYCMD setup.py install --record installed_files.txt", "path": "test/run_test.sh", "position": null, "original_position": 6, "commit_id": "b59581fc5713bac320c0a0942d28cf43203f7d3e", "original_commit_id": "ca164047a8b49eabf191f37df1b53b0ced2ca626", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Maybe we could test if `virtualenv` is available and skip the tests otherwise? This would be a very safe way install the modules. Alternatively, I think we could try playing with [arguments that can be given to `install`](https://docs.python.org/3.6/install/index.html) e.g. `--install-base` or `--home`, to install the package locally, and then add it to `sys.path` or `PYTHONHOME` or something like that. This also makes the cleanup much easier since we can just `rm -rf install_dir`", "created_at": "2018-01-26T11:07:57Z", "updated_at": "2018-11-23T15:38:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/4842#discussion_r164085583", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4842", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164085583"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4842#discussion_r164085583"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4842"}}, "body_html": "<p>Maybe we could test if <code>virtualenv</code> is available and skip the tests otherwise? This would be a very safe way install the modules. Alternatively, I think we could try playing with <a href=\"https://docs.python.org/3.6/install/index.html\" rel=\"nofollow\">arguments that can be given to <code>install</code></a> e.g. <code>--install-base</code> or <code>--home</code>, to install the package locally, and then add it to <code>sys.path</code> or <code>PYTHONHOME</code> or something like that. This also makes the cleanup much easier since we can just <code>rm -rf install_dir</code></p>", "body_text": "Maybe we could test if virtualenv is available and skip the tests otherwise? This would be a very safe way install the modules. Alternatively, I think we could try playing with arguments that can be given to install e.g. --install-base or --home, to install the package locally, and then add it to sys.path or PYTHONHOME or something like that. This also makes the cleanup much easier since we can just rm -rf install_dir"}