{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164027839", "pull_request_review_id": 91739606, "id": 164027839, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDAyNzgzOQ==", "diff_hunk": "@@ -0,0 +1,188 @@\n+import imp\n+import os\n+import subprocess\n+import sys\n+import sysconfig\n+import tempfile\n+\n+from setuptools.command.build_ext import build_ext\n+\n+\n+class BuildExtension(build_ext):\n+    \"\"\"A custom build extension for adding compiler-specific options.\"\"\"\n+\n+    def build_extensions(self):\n+        for extension in self.extensions:\n+            extension.extra_compile_args = ['-std=c++11']\n+        build_ext.build_extensions(self)\n+\n+\n+def include_paths():\n+    here = os.path.abspath(__file__)\n+    torch_path = os.path.dirname(os.path.dirname(here))\n+    return [os.path.join(torch_path, 'lib', 'include')]\n+\n+\n+def load(name,\n+         sources,\n+         extra_cflags=None,\n+         extra_ldflags=None,\n+         extra_include_paths=None,\n+         build_directory=None,\n+         verbose=False):\n+    '''\n+    Loads a C++ PyTorch extension.\n+\n+    To load an extension, a Ninja build file is emitted, which is used to\n+    compile the given sources into a dynamic library. This library is\n+    subsequently loaded into the current Python process as a module and returned\n+    from this function, ready for use.\n+\n+    By default, the directory to which the build file is emitted and the\n+    resulting library compiled to is `<tmp>/torch_extensions`, where `<tmp>` is\n+    the temporary folder on the current platform. This location can be overriden\n+    in two ways. First, if the `TORCH_EXTENSIONS_DIR` environment variable is\n+    set, it replaces `<tmp>` and all extensions will be compiled into subfolders\n+    of this directory. Second, if the `build_directory` argument to this\n+    function is supplied, it overrides the entire path, i.e. the library will be\n+    compiled into that folder directly.\n+\n+    To compile the sources, the default system compiler (`c++`) is used, which\n+    can be overriden by setting the CXX environment variable. To pass additional\n+    arguments to the compilation process, `extra_cflags` or `extra_ldflags` can\n+    be provided. For example, to compile your extension with optimizations, pass\n+    `extra_cflags=['-O3']`. You can also use `extra_cflags` to pass further\n+    include directories (`-I`).\n+\n+    Args:\n+        name: The name of the module to build.\n+        sources: A list of relative or absolute paths to C++ source files.\n+        extra_cflags: optional list of compiler flags to forward to the build.\n+        extra_ldflags: optional list of linker flags to forward to the build.\n+        extra_include_paths: optional list of include directories to forward\n+            to the build.\n+        build_directory: optional path to use as build workspace.\n+        verbose: If `True`, turns on verbose logging of load steps.\n+\n+    Returns:\n+        The loaded PyTorch extension as a Python module.\n+    '''\n+\n+    # Allows sources to be a single path or a list of paths.\n+    if isinstance(sources, str):\n+        sources = [sources]\n+\n+    if build_directory is None:\n+        build_directory = _get_build_directory(name, verbose)\n+\n+    build_file_path = os.path.join(build_directory, 'build.ninja')\n+    if verbose:\n+        print('Emitting ninja build file {}...'.format(build_file_path))\n+    # NOTE: Emitting a new ninja build file does not cause re-compilation if\n+    # the sources did not change, so it's ok to re-emit (and it's fast).\n+    _write_ninja_file(\n+        build_file_path,\n+        name,\n+        sources,\n+        extra_cflags or [],\n+        extra_ldflags or [],\n+        extra_include_paths or [])\n+\n+    if verbose:\n+        print('Building extension module {}...'.format(name))\n+    _build_extension_module(name, build_directory)\n+\n+    if verbose:\n+        print('Loading extension module {}...'.format(name))\n+    return _import_module_from_library(name, build_directory)\n+\n+\n+def _get_build_directory(name, verbose):\n+    root_extensions_directory = os.environ.get('TORCH_EXTENSIONS_DIR')\n+    if root_extensions_directory is None:\n+        # tempfile.gettempdir() will be /tmp on UNIX and \\TEMP on Windows.\n+        root_extensions_directory = os.path.join(tempfile.gettempdir(),\n+                                                 'torch_extensions')\n+\n+    if verbose:\n+        print('Using {} as PyTorch extensions root...'.format(\n+            root_extensions_directory))\n+\n+    build_directory = os.path.join(root_extensions_directory, name)\n+    if not os.path.exists(build_directory):\n+        if verbose:\n+            print('Creating extension directory {}...'.format(build_directory))\n+        # This is like mkdir -p, i.e. will also create parent directories.\n+        os.makedirs(build_directory)\n+\n+    return build_directory\n+\n+\n+def _build_extension_module(name, build_directory):\n+    try:\n+        subprocess.check_output(\n+            ['ninja', '-v'], stderr=subprocess.STDOUT, cwd=build_directory)\n+    except subprocess.CalledProcessError:\n+        # Python 2 and 3 compatible way of getting the error object.\n+        _, error, _ = sys.exc_info()\n+        # error.output contains the stdout and stderr of the build attempt.\n+        raise RuntimeError(\"Error building extension '{}': {}\".format(\n+            name, error.output.decode()))\n+\n+\n+def _import_module_from_library(module_name, path):\n+    # https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path\n+    file, path, description = imp.find_module(module_name, [path])\n+    # Close the .so file after load.\n+    with file:\n+        return imp.load_module(module_name, file, path, description)\n+\n+\n+def _write_ninja_file(\n+        path,\n+        name,\n+        sources,\n+        extra_cflags,\n+        extra_ldflags,\n+        extra_include_paths):\n+    try:\n+        import ninja\n+    except ImportError:\n+        raise RuntimeError(\"Ninja is required to load C++ extensions. \"\n+                           \"Install it with 'pip install ninja'.\")\n+    with open(path, 'w') as build_file:\n+        writer = ninja.Writer(build_file)\n+        writer.variable('ninja_required_version', '1.3')\n+        writer.variable('cxx', os.environ.get('CXX', 'c++'))\n+\n+        # Turn into absolute paths so we can emit them into the ninja build\n+        # file wherever it is.\n+        sources = [os.path.abspath(file) for file in sources]\n+        includes = [os.path.abspath(file) for file in extra_include_paths]\n+\n+        # include_paths() gives us the location of torch/torch.h\n+        includes += include_paths()\n+        # sysconfig.get_paths()['include'] gives us the location of Python.h\n+        includes.append(sysconfig.get_paths()['include'])\n+\n+        cflags = ['-fPIC', '-std=c++11']\n+        cflags += ['-I{}'.format(include) for include in includes]\n+        cflags += extra_cflags\n+        writer.variable('cflags', ' '.join(cflags))\n+\n+        ldflags = ['-shared'] + extra_ldflags\n+        if sys.platform == 'darwin':\n+            ldflags.append('-undefined dynamic_lookup')\n+        writer.variable('ldflags', ' '.join(ldflags))\n+\n+        writer.rule(\n+            'compile',\n+            command='$cxx -MMD -MF $out.d $ldflags $cflags $in -o $out',\n+            depfile='$out.d',\n+            deps='gcc')\n+\n+        target = '{}.so'.format(name)\n+        writer.build(outputs=target, rule='compile', inputs=sources)", "path": "torch/utils/cpp_extension.py", "position": null, "original_position": 185, "commit_id": "b59581fc5713bac320c0a0942d28cf43203f7d3e", "original_commit_id": "4aee9a6d13cff754282c0f8e8432951f1ad551aa", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We should have per-file builds and a separate link (`g++ foo.cpp -o foo.o`, `g++ foo.o bar.o`) -- this will allow incremental compilation and parallel builds. This can be in a follow up PR if you want.", "created_at": "2018-01-26T03:23:37Z", "updated_at": "2018-11-23T15:38:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/4842#discussion_r164027839", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4842", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164027839"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4842#discussion_r164027839"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4842"}}, "body_html": "<p>We should have per-file builds and a separate link (<code>g++ foo.cpp -o foo.o</code>, <code>g++ foo.o bar.o</code>) -- this will allow incremental compilation and parallel builds. This can be in a follow up PR if you want.</p>", "body_text": "We should have per-file builds and a separate link (g++ foo.cpp -o foo.o, g++ foo.o bar.o) -- this will allow incremental compilation and parallel builds. This can be in a follow up PR if you want."}