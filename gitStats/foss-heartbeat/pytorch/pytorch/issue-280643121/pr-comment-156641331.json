{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156641331", "pull_request_review_id": 83149956, "id": 156641331, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjY0MTMzMQ==", "diff_hunk": "@@ -263,3 +265,166 @@ def det(var):\n     if torch.is_tensor(var):\n         raise ValueError(\"det is currently only supported on Variable\")\n     return var.det()\n+\n+\n+def stft(var, frame_length, hop, fft_size=None, window=None, pad_end=0):\n+    r\"\"\"Short-time Fourier transform (STFT).\n+\n+    Ignoring the batch dimension, this method computes the following expression:\n+\n+    .. math::\n+        X[m, \\omega] = \\sum_{k = 0}^{frame\\_length} window[k]\\ signal[m \\times hop + k]\\ e^{- j \\frac{2 \\pi \\cdot \\omega k}{frame\\_length}}\n+\n+    , where :math:`m` is the index of the sliding window, and :math:`\\omega` is\n+    the frequency that :math:`0 \\leq \\omega < fft\\_size`.\n+\n+    The input :attr:`signal` must be 1-D sequence :math:`(T)` or 2-D a batch of\n+    sequences :math:`(N, T)`. If :attr:`fft_size` is ``None``, it is default to\n+    same value as  :attr:``frame_length``. :attr:`window` can be a 1-D tensor of\n+    size :math:`(frame\\_length)`, e.g., see :meth:`torch.hann`. If\n+    :attr:`window` is the default value ``None``, it is treated as having\n+    :math:`1` everywhere in the frame. :attr:`pad_end` indicates the amount of\n+    zero padding at the end of :attr:`signal` before STFT.\n+\n+    Returns the magnitude and the phase each of size :math:`(*, frame\\_length)`,\n+    where :math:`*` is the shape of input :attr:`signal`, and the last\n+    dimension indicates the frequency.\n+\n+    Arguments:\n+        signal (Tensor): the inpute tensor\n+        frame_length (int): the size of window frame and STFT filter\n+        hop (int): the distance between neighboring sliding window frames\n+        fft_size (int, optional): size of Fourier transform\n+        window (Tensor, optional): the optional window function\n+        pad_end (int, optional): implicit zero padding at the end of :attr:`signal`\n+\n+    Returns:\n+        (Tensor, Tensor): A tuple containing\n+\n+            - the magnitudes of STFT result\n+            - the phases of STFT result\n+    \"\"\"\n+    if torch.is_tensor(var):\n+        raise ValueError(\"stft is currently only supported on Variable\")\n+    return var.stft(frame_length, hop, window, pad_end)\n+\n+def hann_window(window_length, periordic=True):\n+    r\"\"\"Hann window function.\n+\n+    This method computes the Hann window function:\n+\n+    .. math::\n+        w[n] = \\frac{1}{2}\\ [1 - \\cos \\left( \\frac{2 \\pi n}{N - 1} \\right)] = \\sin^2 \\left( \\frac{\\pi n}{N - 1} \\right)\n+\n+    , where :math:`N` is the full window size.\n+\n+    The input :attr:`window_length` is a positive integer controlling the\n+    returned window size. :attr:`periodic` flag determines whether the returned\n+    window trims off the last duplicate value from the symmetric window and is\n+    ready to be used as a periodic window with functions like\n+    :meth:`torch.stft`. Therefore, if:attr:`periodic` is true, the :math:`N` in\n+    above formula is in fact :math:`window\\_length + 1`. Also, we always have\n+    ``torch.equal(torch.hann_window(L, periodic=True), torch.hann_window(L + 1, periodic=False)[:-1])``.\n+\n+    .. note::\n+        If :attr:`window_length` :math:`\\leq 2`, the returned window contains a single value 1.\n+\n+    Arguments:\n+        window_length (int): the size of returned window\n+        periordic (bool): If True, returns a window to be used as periodic function.\n+            If False, return a symmetric window.\n+\n+    Returns:\n+        Tensor: A 1-D tensor of size :math:`(window\\_length)` containing the window\n+    \"\"\"\n+    if window_length <= 0:\n+        raise ValueError('window_length must be positive')\n+    return hamming_window(window_length, periordic=periordic, alpha=0.5, beta=0.5)\n+\n+def hamming_window(window_length, periordic=True, alpha=0.53836, beta=0.46164):", "path": "torch/functional.py", "position": null, "original_position": 144, "commit_id": "87bdc6fb3644200d8c662f3dbc3b22e50ae6e4ca", "original_commit_id": "ad46de8776c2100bfc2607266df418cf0aeaca12", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "nit: did you mean `periodic`?", "created_at": "2017-12-13T12:11:10Z", "updated_at": "2018-11-23T15:37:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/4095#discussion_r156641331", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4095", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/156641331"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4095#discussion_r156641331"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4095"}}, "body_html": "<p>nit: did you mean <code>periodic</code>?</p>", "body_text": "nit: did you mean periodic?"}