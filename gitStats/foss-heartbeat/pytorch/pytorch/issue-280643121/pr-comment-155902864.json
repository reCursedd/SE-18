{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155902864", "pull_request_review_id": 82300167, "id": 155902864, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkwMjg2NA==", "diff_hunk": "@@ -263,3 +263,46 @@ def det(var):\n     if torch.is_tensor(var):\n         raise ValueError(\"det is currently only supported on Variable\")\n     return var.det()\n+\n+\n+def stft(var, frame_length, hop, window=None, pad_end=0):\n+    r\"\"\"stft(signal, frame_length, hop, window=None, pad_end=0) -> Tensor, Tensor\n+\n+    Short-time Fourier transform (STFT).\n+\n+    Ignoring the batch dimension, this method computes the following expression:\n+\n+    .. math::\n+        X[m, \\omega] = \\sum_{k = 0}^{frame\\_length} window[k]\\ signal[m \\times hop + k]\\ e^{- j \\frac{2 \\pi \\cdot \\omega k}{frame\\_length}}\n+\n+    , where :math:`m` is the index of the sliding window, and :math:`\\omega` is\n+    the frequency that :math:`0 \\leq \\omega < frame\\_length`.\n+\n+    The input :attr:`signal` must be 1-D sequence :math:`(T)` or 2-D a batch of\n+    sequences :math:`(N, T)`. :attr:`frame_length` is used both as sliding frame\n+    window size and STFT filter size. :attr:`window` can be a 1-D tensor of size\n+    :math:`(frame\\_length)`. If :attr:`window` is the default value ``None``, it\n+    is treated as having :math:`1` everywhere in the frame. :attr:`pad_end`\n+    indicates the amount of zero padding at the end of :attr:`signal` before\n+    STFT.\n+\n+    Returns the magnitude and the phase each of size :math:`(*, frame\\_length)`,\n+    where :math:`*` is the shape of input :attr:`signal`, and the last\n+    dimension indicates the frequency.\n+\n+    Arguments:\n+        signal (Tensor): the inpute tensor\n+        frame_length (int): the size of window frame and STFT filter\n+        hop (int): the distance between neighboring sliding window frames\n+        window (Tensor, optional): the optional window function\n+        hope_end (int, optional): implicit zero padding at the end of :attr:`signal`", "path": "torch/functional.py", "position": null, "original_position": 96, "commit_id": "87bdc6fb3644200d8c662f3dbc3b22e50ae6e4ca", "original_commit_id": "134730d085e028bbb23a94b7113b491a74224172", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "pad_end?", "created_at": "2017-12-09T00:07:38Z", "updated_at": "2018-11-23T15:37:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/4095#discussion_r155902864", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4095", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155902864"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4095#discussion_r155902864"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4095"}}, "body_html": "<p>pad_end?</p>", "body_text": "pad_end?"}