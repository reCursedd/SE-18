{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4095", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4095/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4095/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4095/events", "html_url": "https://github.com/pytorch/pytorch/pull/4095", "id": 280643121, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU3MzUyNTE2", "number": 4095, "title": "Add python only default init expression; Implement stft, hann/hamming/bartlett window.", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-12-08T23:04:15Z", "updated_at": "2018-11-23T15:37:18Z", "closed_at": "2017-12-18T17:28:24Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4095", "html_url": "https://github.com/pytorch/pytorch/pull/4095", "diff_url": "https://github.com/pytorch/pytorch/pull/4095.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4095.patch"}, "body_html": "<p>This PR</p>\n<ol>\n<li>Implements short-time fourier transform <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"275111739\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3775\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3775/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3775\">#3775</a> with tests against Scipy.</li>\n<li>Adds <code>atan2</code> for cuda double &amp; half tensors. Refactored <code>atan2</code> to <code>THCNumerics</code>, Op to <code>THCTensorMathPointwise.cuh</code>.</li>\n<li>Adds support for python only default init in the parsers. This allows us to write argument with a default value that can either cause ambiguity in c++ (e.g., <code>Scalar p</code> in <code>norm</code>) or have a type that doesn't allow default value <code>None/NULL/nullptr</code> (e.g., <code>int64_t fft_size</code> in <code>stft</code>).<br>\na. Changes <code>norm</code> to also use this in both <code>Declarations.cwrap</code> for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"225447803\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1419/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1419\">#1419</a> . When <code>Tensor</code> and <code>Variable</code> merge, it should fix the issues in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"225447803\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1419/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1419\">#1419</a> .</li>\n<li>Implements three commonly used window functions (Hann, Hamming, Bartlett) with tests against Scipy</li>\n</ol>\n<p>On 3: Now in <code>python_variable_methods.cpp</code>, if an argument has python only default value, it will be generated like the following. I added the comment for clarification purpose. It won't be in actual code.</p>\n<pre><code>static PyObject * THPVariable_stft(PyObject* self, PyObject* args, PyObject* kwargs)\n{\n  HANDLE_TH_ERRORS\n  static PythonArgParser parser({\n    \"stft(int64_t frame_length, int64_t hop, int64_t fft_size=None, Tensor window=None, int64_t pad_end=0)\",\n  });\n  auto&amp; self_ = reinterpret_cast&lt;THPVariable*&gt;(self)-&gt;cdata;\n  PyObject* parsed_args[6];\n  auto r = parser.parse(args, kwargs, parsed_args);\n  if (r.idx == 0) {\n    Tensor &amp; self = self_;\n    int64_t frame_length = r.toInt64(0);\n    int64_t hop = r.toInt64(1);\n    const Tensor &amp; window = r.tensor(3);\n    int64_t pad_end = r.toInt64(4);\n    // fft_size has python only default, so it will be generated last\n    int64_t fft_size = r.toInt64WithDefault(2, frame_length);  \n    return wrap(dispatch_stft(self, frame_length, hop, fft_size, window, pad_end));\n  }\n  Py_RETURN_NONE;\n  END_HANDLE_TH_ERRORS\n}\n</code></pre>", "body_text": "This PR\n\nImplements short-time fourier transform #3775 with tests against Scipy.\nAdds atan2 for cuda double & half tensors. Refactored atan2 to THCNumerics, Op to THCTensorMathPointwise.cuh.\nAdds support for python only default init in the parsers. This allows us to write argument with a default value that can either cause ambiguity in c++ (e.g., Scalar p in norm) or have a type that doesn't allow default value None/NULL/nullptr (e.g., int64_t fft_size in stft).\na. Changes norm to also use this in both Declarations.cwrap for #1419 . When Tensor and Variable merge, it should fix the issues in #1419 .\nImplements three commonly used window functions (Hann, Hamming, Bartlett) with tests against Scipy\n\nOn 3: Now in python_variable_methods.cpp, if an argument has python only default value, it will be generated like the following. I added the comment for clarification purpose. It won't be in actual code.\nstatic PyObject * THPVariable_stft(PyObject* self, PyObject* args, PyObject* kwargs)\n{\n  HANDLE_TH_ERRORS\n  static PythonArgParser parser({\n    \"stft(int64_t frame_length, int64_t hop, int64_t fft_size=None, Tensor window=None, int64_t pad_end=0)\",\n  });\n  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\n  PyObject* parsed_args[6];\n  auto r = parser.parse(args, kwargs, parsed_args);\n  if (r.idx == 0) {\n    Tensor & self = self_;\n    int64_t frame_length = r.toInt64(0);\n    int64_t hop = r.toInt64(1);\n    const Tensor & window = r.tensor(3);\n    int64_t pad_end = r.toInt64(4);\n    // fft_size has python only default, so it will be generated last\n    int64_t fft_size = r.toInt64WithDefault(2, frame_length);  \n    return wrap(dispatch_stft(self, frame_length, hop, fft_size, window, pad_end));\n  }\n  Py_RETURN_NONE;\n  END_HANDLE_TH_ERRORS\n}", "body": "This PR\r\n\r\n1. Implements short-time fourier transform #3775 with tests against Scipy.\r\n2. Adds `atan2` for cuda double & half tensors. Refactored `atan2` to `THCNumerics`, Op to `THCTensorMathPointwise.cuh`.\r\n3. Adds support for python only default init in the parsers. This allows us to write argument with a default value that can either cause ambiguity in c++ (e.g., `Scalar p` in `norm`) or have a type that doesn't allow default value `None/NULL/nullptr` (e.g., `int64_t fft_size` in `stft`).\r\n  a. Changes `norm` to also use this in both `Declarations.cwrap` for #1419 . When `Tensor` and `Variable` merge, it should fix the issues in #1419 .\r\n4. Implements three commonly used window functions (Hann, Hamming, Bartlett) with tests against Scipy\r\n\r\nOn 3: Now in `python_variable_methods.cpp`, if an argument has python only default value, it will be generated like the following. I added the comment for clarification purpose. It won't be in actual code. \r\n```\r\nstatic PyObject * THPVariable_stft(PyObject* self, PyObject* args, PyObject* kwargs)\r\n{\r\n  HANDLE_TH_ERRORS\r\n  static PythonArgParser parser({\r\n    \"stft(int64_t frame_length, int64_t hop, int64_t fft_size=None, Tensor window=None, int64_t pad_end=0)\",\r\n  });\r\n  auto& self_ = reinterpret_cast<THPVariable*>(self)->cdata;\r\n  PyObject* parsed_args[6];\r\n  auto r = parser.parse(args, kwargs, parsed_args);\r\n  if (r.idx == 0) {\r\n    Tensor & self = self_;\r\n    int64_t frame_length = r.toInt64(0);\r\n    int64_t hop = r.toInt64(1);\r\n    const Tensor & window = r.tensor(3);\r\n    int64_t pad_end = r.toInt64(4);\r\n    // fft_size has python only default, so it will be generated last\r\n    int64_t fft_size = r.toInt64WithDefault(2, frame_length);  \r\n    return wrap(dispatch_stft(self, frame_length, hop, fft_size, window, pad_end));\r\n  }\r\n  Py_RETURN_NONE;\r\n  END_HANDLE_TH_ERRORS\r\n}\r\n```\r\n"}