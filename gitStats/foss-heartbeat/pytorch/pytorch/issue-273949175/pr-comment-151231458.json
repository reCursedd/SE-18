{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151231458", "pull_request_review_id": 76906161, "id": 151231458, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTIzMTQ1OA==", "diff_hunk": "@@ -514,7 +514,11 @@\n - name: squeeze(Tensor self, int64_t dim)\n   self: maybe_unsqueeze(grad, dim, self.size(dim) == 1 && self.sizes().size() != 1)\n \n-- name: std\n+- name: std(Tensor self, bool unbiased)\n+  self: var_backward(grad * (result * 2).reciprocal(), self, unbiased)\n+\n+- name: std(Tensor self, int64_t dim, bool unbiased, bool keepdim)\n+  self: var_backward(grad * (destination * 2).reciprocal(), self, dim, unbiased, keepdim)", "path": "tools/autograd/derivatives.yaml", "position": 9, "original_position": 9, "commit_id": "3fa4bc20655866a17283cb0ab597453c0214e65f", "original_commit_id": "3fa4bc20655866a17283cb0ab597453c0214e65f", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I'm ok with that or just allowing you to manually specify the name for cases like this in the format of native_functions.yaml, e.g.\r\n```\r\n- name: std(...) -> destination\r\n```\r\nor\r\n```\r\n- name: func_with_2_returns(...) -> max, indices\r\n```\r\nI'm not sure if that fits in with how we are doing the code gen, but at least it's not a dangling reference.", "created_at": "2017-11-15T19:42:01Z", "updated_at": "2018-11-23T15:36:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/3704#discussion_r151231458", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3704", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151231458"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3704#discussion_r151231458"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3704"}}, "body_html": "<p>I'm ok with that or just allowing you to manually specify the name for cases like this in the format of native_functions.yaml, e.g.</p>\n<pre><code>- name: std(...) -&gt; destination\n</code></pre>\n<p>or</p>\n<pre><code>- name: func_with_2_returns(...) -&gt; max, indices\n</code></pre>\n<p>I'm not sure if that fits in with how we are doing the code gen, but at least it's not a dangling reference.</p>", "body_text": "I'm ok with that or just allowing you to manually specify the name for cases like this in the format of native_functions.yaml, e.g.\n- name: std(...) -> destination\n\nor\n- name: func_with_2_returns(...) -> max, indices\n\nI'm not sure if that fits in with how we are doing the code gen, but at least it's not a dangling reference.", "in_reply_to_id": 151229544}