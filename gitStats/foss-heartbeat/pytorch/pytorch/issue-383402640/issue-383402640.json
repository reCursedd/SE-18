{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14312", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14312/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14312/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14312/events", "html_url": "https://github.com/pytorch/pytorch/issues/14312", "id": 383402640, "node_id": "MDU6SXNzdWUzODM0MDI2NDA=", "number": 14312, "title": "[Caffe2] Cannot get repeated argument in custom operator in CUDA context", "user": {"login": "alexbuyval", "id": 2115811, "node_id": "MDQ6VXNlcjIxMTU4MTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2115811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbuyval", "html_url": "https://github.com/alexbuyval", "followers_url": "https://api.github.com/users/alexbuyval/followers", "following_url": "https://api.github.com/users/alexbuyval/following{/other_user}", "gists_url": "https://api.github.com/users/alexbuyval/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbuyval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbuyval/subscriptions", "organizations_url": "https://api.github.com/users/alexbuyval/orgs", "repos_url": "https://api.github.com/users/alexbuyval/repos", "events_url": "https://api.github.com/users/alexbuyval/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbuyval/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-22T06:55:39Z", "updated_at": "2018-11-22T06:57:15Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>I am trying to build own custom operator for caffe2. My operator has some arguments. Some of them are repeated (vectors of numbers). In operator constructor I get the arguments, however, when I run my operator in CPU context I am able to get all arguments, when I run in CUDA context all repeated arguments are empty.</p>\n<h2>To Reproduce</h2>\n<p>Operator constructor</p>\n<pre><code>template &lt;typename T,class Context&gt;\nclass YoloOp final:public Operator&lt;Context&gt; {\npublic:\n    USE_OPERATOR_CONTEXT_FUNCTIONS;\n    YoloOp(const OperatorDef&amp; operator_def, Workspace* ws)\n        : Operator&lt;Context&gt;(operator_def, ws),\n          anchor_mask_(this-&gt;template GetRepeatedArgument&lt;int&gt;(\"anchor_mask\")),\n          anchors_(OperatorBase::GetRepeatedArgument&lt;int&gt;(\"anchors\")),\n          numclass_(OperatorBase::GetSingleArgument&lt;int&gt;(\"numclass\",80)),\n...\nstd::cout &lt;&lt; \"YOLO num_classes: \" &lt;&lt; this-&gt;numclass_ &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Anchors: \" &lt;&lt; this-&gt;anchors_ &lt;&lt; std::endl;\n</code></pre>\n<p>Example of running operation:</p>\n<pre><code>    caffe2::DeviceOption deviceOptionCPU;\n    deviceOptionCPU.set_device_type(PROTO_CPU);\n    caffe2::OperatorDef op = caffe2::CreateOperatorDef(\"Yolo\",\"MyYolo\",vector&lt;string&gt;{\"inputYOLO_\"+idx_str},\n                                                       vector&lt;string&gt;{\"out_\"+idx_str,\"tx_\"+idx_str,\"ty_\"+idx_str,\"tw_\"+idx_str,\"th_\"+idx_str,\"det_conf_\"+idx_str,\"class_prob_\"+idx_str,\"tmp\"+idx_str},\n                                                       deviceOptionCPU);\n\n    caffe2::AddArgument(\"numclass\",60, &amp;op);\n\n    std::vector&lt;int&gt; anchors({ 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326});\n    caffe2::AddArgument(\"anchors\",anchors, &amp;op);\n</code></pre>\n<h2>Expected behavior</h2>\n<p>When I run my operator in CPU context I get the following output:</p>\n<pre><code>YOLO num_classes: 60\nAnchors: 10 13 16 30 33 23 30 61 62 45 59 119 116 90 156 198 373 326\n</code></pre>\n<p>When I run my operator in GPU context it just output empty anchors:</p>\n<pre><code>YOLO num_classes: 60\nAnchors: \n</code></pre>\n<h2>Environment</h2>\n<pre><code>Collecting environment information...\nPyTorch version: 1.0.0a0+ff608a9\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.12.2\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1050 Ti\nNvidia driver version: 384.130\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.2.1\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] torch                     1.0.0a0+ff608a9           &lt;pip&gt;\n</code></pre>\n<h2>Additional context</h2>\n", "body_text": "\ud83d\udc1b Bug\nI am trying to build own custom operator for caffe2. My operator has some arguments. Some of them are repeated (vectors of numbers). In operator constructor I get the arguments, however, when I run my operator in CPU context I am able to get all arguments, when I run in CUDA context all repeated arguments are empty.\nTo Reproduce\nOperator constructor\ntemplate <typename T,class Context>\nclass YoloOp final:public Operator<Context> {\npublic:\n    USE_OPERATOR_CONTEXT_FUNCTIONS;\n    YoloOp(const OperatorDef& operator_def, Workspace* ws)\n        : Operator<Context>(operator_def, ws),\n          anchor_mask_(this->template GetRepeatedArgument<int>(\"anchor_mask\")),\n          anchors_(OperatorBase::GetRepeatedArgument<int>(\"anchors\")),\n          numclass_(OperatorBase::GetSingleArgument<int>(\"numclass\",80)),\n...\nstd::cout << \"YOLO num_classes: \" << this->numclass_ << std::endl;\nstd::cout << \"Anchors: \" << this->anchors_ << std::endl;\n\nExample of running operation:\n    caffe2::DeviceOption deviceOptionCPU;\n    deviceOptionCPU.set_device_type(PROTO_CPU);\n    caffe2::OperatorDef op = caffe2::CreateOperatorDef(\"Yolo\",\"MyYolo\",vector<string>{\"inputYOLO_\"+idx_str},\n                                                       vector<string>{\"out_\"+idx_str,\"tx_\"+idx_str,\"ty_\"+idx_str,\"tw_\"+idx_str,\"th_\"+idx_str,\"det_conf_\"+idx_str,\"class_prob_\"+idx_str,\"tmp\"+idx_str},\n                                                       deviceOptionCPU);\n\n    caffe2::AddArgument(\"numclass\",60, &op);\n\n    std::vector<int> anchors({ 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326});\n    caffe2::AddArgument(\"anchors\",anchors, &op);\n\nExpected behavior\nWhen I run my operator in CPU context I get the following output:\nYOLO num_classes: 60\nAnchors: 10 13 16 30 33 23 30 61 62 45 59 119 116 90 156 198 373 326\n\nWhen I run my operator in GPU context it just output empty anchors:\nYOLO num_classes: 60\nAnchors: \n\nEnvironment\nCollecting environment information...\nPyTorch version: 1.0.0a0+ff608a9\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\n\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.12.2\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration: GPU 0: GeForce GTX 1050 Ti\nNvidia driver version: 384.130\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.2.1\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] torch                     1.0.0a0+ff608a9           <pip>\n\nAdditional context", "body": "## \ud83d\udc1b Bug\r\n\r\nI am trying to build own custom operator for caffe2. My operator has some arguments. Some of them are repeated (vectors of numbers). In operator constructor I get the arguments, however, when I run my operator in CPU context I am able to get all arguments, when I run in CUDA context all repeated arguments are empty. \r\n\r\n## To Reproduce\r\n\r\nOperator constructor\r\n```\r\ntemplate <typename T,class Context>\r\nclass YoloOp final:public Operator<Context> {\r\npublic:\r\n    USE_OPERATOR_CONTEXT_FUNCTIONS;\r\n    YoloOp(const OperatorDef& operator_def, Workspace* ws)\r\n        : Operator<Context>(operator_def, ws),\r\n          anchor_mask_(this->template GetRepeatedArgument<int>(\"anchor_mask\")),\r\n          anchors_(OperatorBase::GetRepeatedArgument<int>(\"anchors\")),\r\n          numclass_(OperatorBase::GetSingleArgument<int>(\"numclass\",80)),\r\n...\r\nstd::cout << \"YOLO num_classes: \" << this->numclass_ << std::endl;\r\nstd::cout << \"Anchors: \" << this->anchors_ << std::endl;\r\n```\r\n\r\nExample of running operation:\r\n```\r\n    caffe2::DeviceOption deviceOptionCPU;\r\n    deviceOptionCPU.set_device_type(PROTO_CPU);\r\n    caffe2::OperatorDef op = caffe2::CreateOperatorDef(\"Yolo\",\"MyYolo\",vector<string>{\"inputYOLO_\"+idx_str},\r\n                                                       vector<string>{\"out_\"+idx_str,\"tx_\"+idx_str,\"ty_\"+idx_str,\"tw_\"+idx_str,\"th_\"+idx_str,\"det_conf_\"+idx_str,\"class_prob_\"+idx_str,\"tmp\"+idx_str},\r\n                                                       deviceOptionCPU);\r\n\r\n    caffe2::AddArgument(\"numclass\",60, &op);\r\n\r\n    std::vector<int> anchors({ 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326});\r\n    caffe2::AddArgument(\"anchors\",anchors, &op);\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nWhen I run my operator in CPU context I get the following output:\r\n```\r\nYOLO num_classes: 60\r\nAnchors: 10 13 16 30 33 23 30 61 62 45 59 119 116 90 156 198 373 326\r\n```\r\nWhen I run my operator in GPU context it just output empty anchors:\r\n```\r\nYOLO num_classes: 60\r\nAnchors: \r\n```\r\n\r\n## Environment\r\n\r\n```\r\nCollecting environment information...\r\nPyTorch version: 1.0.0a0+ff608a9\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.12.2\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration: GPU 0: GeForce GTX 1050 Ti\r\nNvidia driver version: 384.130\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.2.1\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] torch                     1.0.0a0+ff608a9           <pip>\r\n```\r\n\r\n## Additional context\r\n\r\n<!-- Add any other context about the problem here. -->\r\n"}