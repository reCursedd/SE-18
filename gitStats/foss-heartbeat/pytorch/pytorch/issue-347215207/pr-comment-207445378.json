{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207445378", "pull_request_review_id": 143057346, "id": 207445378, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ0NTM3OA==", "diff_hunk": "@@ -432,20 +432,8 @@ void initJitScriptBindings(PyObject* module) {\n   // public.\n   py::class_<Module, std::shared_ptr<Module>>(m, \"ScriptModule\")\n       .def(py::init<>())\n-      .def(\"export\", [](const std::shared_ptr<Module> m) {\n-        std::string module;\n-        RawDataExportMap export_map;\n-        std::tie(module, export_map) = ExportModule(m);\n-        std::unordered_map<std::string, py::bytes> python_serialized_export_map;\n-        for (auto& kv : export_map) {\n-          auto t = kv.second;\n-          size_t copy_bytes = t.type().elementSizeInBytes() * t.numel();\n-          // TODO: this is an unecessary copy. In theory we can directly return\n-          // the map from identifier to Tensor, but we need some API in Python\n-          // to get raw `bytes` containing the raw tensor data.\n-          python_serialized_export_map[kv.first] = py::bytes(static_cast<const char*>(t.data_ptr()), copy_bytes);\n-        }\n-        return std::make_tuple(py::bytes(module), python_serialized_export_map);\n+      .def(\"export\", [](const std::shared_ptr<Module> m, const std::string& filename) {\n+        ExportModule(m, filename);", "path": "torch/csrc/jit/script/init.cpp", "position": null, "original_position": 19, "commit_id": "6cb3261fba1587d67dcb0a61520d22deb245a7d3", "original_commit_id": "f9e92728d6a9ff223afdbb06868516b6728f06ab", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Also, please add `Module::save` to `Module` (the C++ class), and have it just call `ExportModule`. This is to keep the C++ and Python API consistent.", "created_at": "2018-08-03T05:39:10Z", "updated_at": "2018-11-23T15:48:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/10191#discussion_r207445378", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10191", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207445378"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10191#discussion_r207445378"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10191"}}, "body_html": "<p>Also, please add <code>Module::save</code> to <code>Module</code> (the C++ class), and have it just call <code>ExportModule</code>. This is to keep the C++ and Python API consistent.</p>", "body_text": "Also, please add Module::save to Module (the C++ class), and have it just call ExportModule. This is to keep the C++ and Python API consistent."}