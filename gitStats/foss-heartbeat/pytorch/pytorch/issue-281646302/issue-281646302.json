{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4144", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4144/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4144/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4144/events", "html_url": "https://github.com/pytorch/pytorch/issues/4144", "id": 281646302, "node_id": "MDU6SXNzdWUyODE2NDYzMDI=", "number": 4144, "title": "Cuda assert fails: device-side assert triggered at /pytorch/torch/lib/THC/THCTensorSort.cu:61", "user": {"login": "rajarsheem", "id": 6441313, "node_id": "MDQ6VXNlcjY0NDEzMTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6441313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rajarsheem", "html_url": "https://github.com/rajarsheem", "followers_url": "https://api.github.com/users/rajarsheem/followers", "following_url": "https://api.github.com/users/rajarsheem/following{/other_user}", "gists_url": "https://api.github.com/users/rajarsheem/gists{/gist_id}", "starred_url": "https://api.github.com/users/rajarsheem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rajarsheem/subscriptions", "organizations_url": "https://api.github.com/users/rajarsheem/orgs", "repos_url": "https://api.github.com/users/rajarsheem/repos", "events_url": "https://api.github.com/users/rajarsheem/events{/privacy}", "received_events_url": "https://api.github.com/users/rajarsheem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-12-13T07:11:40Z", "updated_at": "2018-06-05T15:16:03Z", "closed_at": "2017-12-13T08:37:00Z", "author_association": "NONE", "body_html": "<p>I have a RNN module:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">RNN</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span> RNN that handles padded sequences <span class=\"pl-pds\">\"\"\"</span></span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input_size</span>, <span class=\"pl-smi\">hidden_size</span>, <span class=\"pl-smi\">bidirectional</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n        <span class=\"pl-c1\">super</span>(<span class=\"pl-c1\">RNN</span>, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.bidirectional <span class=\"pl-k\">=</span> bidirectional\n        <span class=\"pl-c1\">self</span>.gru <span class=\"pl-k\">=</span> nn.GRU(input_size, hidden_size, <span class=\"pl-v\">batch_first</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">bidirectional</span><span class=\"pl-k\">=</span>bidirectional)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">seq</span>, <span class=\"pl-smi\">seq_length</span>):\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span> seq =&gt; [batch_size, seq_length, feats], seq_length =&gt; [batch_size]. Both are Variables <span class=\"pl-pds\">\"\"\"</span></span>\n        <span class=\"pl-c1\">print</span>(seq_length.size())\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> input()</span>\n        seq_length, idx_sort <span class=\"pl-k\">=</span> torch.sort(seq_length, <span class=\"pl-c1\">0</span>, <span class=\"pl-v\">descending</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        _, idx_unsort <span class=\"pl-k\">=</span> idx_sort.sort(<span class=\"pl-c1\">0</span>)\n        seq <span class=\"pl-k\">=</span> seq[idx_sort]\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(seq_length)</span>\n        seq <span class=\"pl-k\">=</span> pack_padded_sequence(seq, seq_length.data.cpu().numpy(), <span class=\"pl-v\">batch_first</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        o, s <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.gru(seq)\n        s <span class=\"pl-k\">=</span> s.squeeze()\n        o, _ <span class=\"pl-k\">=</span> pad_packed_sequence(o, <span class=\"pl-v\">batch_first</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(o.squeeze().data.cpu().numpy())</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(s.squeeze().data.cpu().numpy())</span>\n        o <span class=\"pl-k\">=</span> o[idx_unsort]\n        s <span class=\"pl-k\">=</span> s[idx_unsort]\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(o.squeeze().data.cpu().numpy())</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.bidirectional:\n            s <span class=\"pl-k\">=</span> torch.cat([s[<span class=\"pl-c1\">0</span>], s[<span class=\"pl-c1\">1</span>]], <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(o.size(), s.size())</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> input()</span>\n        <span class=\"pl-k\">return</span> o, s</pre></div>\n<p>When I call it <strong>twice</strong> with a batch of sequences and their lengths, I get an error at the 2nd call:</p>\n<pre><code>seq_length, idx_sort = torch.sort(seq_length, 0, descending=True)\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/torch/lib/THC/THCTensorSort.cu:61\n</code></pre>", "body_text": "I have a RNN module:\nclass RNN(nn.Module):\n    \"\"\" RNN that handles padded sequences \"\"\"\n\n    def __init__(self, input_size, hidden_size, bidirectional=False):\n        super(RNN, self).__init__()\n        self.bidirectional = bidirectional\n        self.gru = nn.GRU(input_size, hidden_size, batch_first=True, bidirectional=bidirectional)\n\n    def forward(self, seq, seq_length):\n        \"\"\" seq => [batch_size, seq_length, feats], seq_length => [batch_size]. Both are Variables \"\"\"\n        print(seq_length.size())\n        # input()\n        seq_length, idx_sort = torch.sort(seq_length, 0, descending=True)\n        _, idx_unsort = idx_sort.sort(0)\n        seq = seq[idx_sort]\n        # print(seq_length)\n        seq = pack_padded_sequence(seq, seq_length.data.cpu().numpy(), batch_first=True)\n        o, s = self.gru(seq)\n        s = s.squeeze()\n        o, _ = pad_packed_sequence(o, batch_first=True)\n        # print(o.squeeze().data.cpu().numpy())\n        # print(s.squeeze().data.cpu().numpy())\n        o = o[idx_unsort]\n        s = s[idx_unsort]\n        # print(o.squeeze().data.cpu().numpy())\n        if self.bidirectional:\n            s = torch.cat([s[0], s[1]], dim=-1)\n        # print(o.size(), s.size())\n        # input()\n        return o, s\nWhen I call it twice with a batch of sequences and their lengths, I get an error at the 2nd call:\nseq_length, idx_sort = torch.sort(seq_length, 0, descending=True)\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/torch/lib/THC/THCTensorSort.cu:61", "body": "I have a RNN module:\r\n```python\r\nclass RNN(nn.Module):\r\n    \"\"\" RNN that handles padded sequences \"\"\"\r\n\r\n    def __init__(self, input_size, hidden_size, bidirectional=False):\r\n        super(RNN, self).__init__()\r\n        self.bidirectional = bidirectional\r\n        self.gru = nn.GRU(input_size, hidden_size, batch_first=True, bidirectional=bidirectional)\r\n\r\n    def forward(self, seq, seq_length):\r\n        \"\"\" seq => [batch_size, seq_length, feats], seq_length => [batch_size]. Both are Variables \"\"\"\r\n        print(seq_length.size())\r\n        # input()\r\n        seq_length, idx_sort = torch.sort(seq_length, 0, descending=True)\r\n        _, idx_unsort = idx_sort.sort(0)\r\n        seq = seq[idx_sort]\r\n        # print(seq_length)\r\n        seq = pack_padded_sequence(seq, seq_length.data.cpu().numpy(), batch_first=True)\r\n        o, s = self.gru(seq)\r\n        s = s.squeeze()\r\n        o, _ = pad_packed_sequence(o, batch_first=True)\r\n        # print(o.squeeze().data.cpu().numpy())\r\n        # print(s.squeeze().data.cpu().numpy())\r\n        o = o[idx_unsort]\r\n        s = s[idx_unsort]\r\n        # print(o.squeeze().data.cpu().numpy())\r\n        if self.bidirectional:\r\n            s = torch.cat([s[0], s[1]], dim=-1)\r\n        # print(o.size(), s.size())\r\n        # input()\r\n        return o, s\r\n```\r\nWhen I call it **twice** with a batch of sequences and their lengths, I get an error at the 2nd call:\r\n```\r\nseq_length, idx_sort = torch.sort(seq_length, 0, descending=True)\r\nRuntimeError: cuda runtime error (59) : device-side assert triggered at /pytorch/torch/lib/THC/THCTensorSort.cu:61\r\n```"}