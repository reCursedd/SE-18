{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/284194641", "html_url": "https://github.com/pytorch/pytorch/issues/921#issuecomment-284194641", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/921", "id": 284194641, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE5NDY0MQ==", "user": {"login": "anantzoid", "id": 7965181, "node_id": "MDQ6VXNlcjc5NjUxODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7965181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anantzoid", "html_url": "https://github.com/anantzoid", "followers_url": "https://api.github.com/users/anantzoid/followers", "following_url": "https://api.github.com/users/anantzoid/following{/other_user}", "gists_url": "https://api.github.com/users/anantzoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/anantzoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anantzoid/subscriptions", "organizations_url": "https://api.github.com/users/anantzoid/orgs", "repos_url": "https://api.github.com/users/anantzoid/repos", "events_url": "https://api.github.com/users/anantzoid/events{/privacy}", "received_events_url": "https://api.github.com/users/anantzoid/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-05T00:09:18Z", "updated_at": "2017-03-05T00:09:18Z", "author_association": "NONE", "body_html": "<p>My Auxnet is a Maxout layer that permutes channel to last dimension, performs linear transformation, creates extra dimension and take max of it and then changes back dimension of channel:</p>\n<pre><code>class Maxout(nn.Module):\n    def __init__(self, num_pieces):\n        super(Maxout, self).__init__()\n        self.num_pieces = num_pieces\n\n    def forward(self, input):\n        input = input.permute(0, 2, 3, 1)\n        shape = input.size()\n        self.linear = nn.Linear(shape[-1], shape[-1] * self.num_pieces, bias=False)\n        if isinstance(input.data, torch.cuda.FloatTensor):\n            self.linear.cuda()\n\n        input = self.linear(input.contiguous().view(-1, shape[-1])).view(\n                                shape[0], shape[1], shape[2], shape[3] * self.num_pieces)\n        shape = input.size()\n        num_filters = shape[-1] // self.num_pieces\n        new_shape = shape[:-1] + (num_filters, self.num_pieces)\n        last_dim = len(new_shape) - 1\n        m,i = input.contiguous().view(*new_shape).max(last_dim)\n        return m.squeeze(last_dim).permute(0, 3, 1, 2)\n</code></pre>\n<p>Should I be using the <code>nn.functional</code> interface for this?</p>", "body_text": "My Auxnet is a Maxout layer that permutes channel to last dimension, performs linear transformation, creates extra dimension and take max of it and then changes back dimension of channel:\nclass Maxout(nn.Module):\n    def __init__(self, num_pieces):\n        super(Maxout, self).__init__()\n        self.num_pieces = num_pieces\n\n    def forward(self, input):\n        input = input.permute(0, 2, 3, 1)\n        shape = input.size()\n        self.linear = nn.Linear(shape[-1], shape[-1] * self.num_pieces, bias=False)\n        if isinstance(input.data, torch.cuda.FloatTensor):\n            self.linear.cuda()\n\n        input = self.linear(input.contiguous().view(-1, shape[-1])).view(\n                                shape[0], shape[1], shape[2], shape[3] * self.num_pieces)\n        shape = input.size()\n        num_filters = shape[-1] // self.num_pieces\n        new_shape = shape[:-1] + (num_filters, self.num_pieces)\n        last_dim = len(new_shape) - 1\n        m,i = input.contiguous().view(*new_shape).max(last_dim)\n        return m.squeeze(last_dim).permute(0, 3, 1, 2)\n\nShould I be using the nn.functional interface for this?", "body": "My Auxnet is a Maxout layer that permutes channel to last dimension, performs linear transformation, creates extra dimension and take max of it and then changes back dimension of channel:\r\n\r\n```\r\nclass Maxout(nn.Module):\r\n    def __init__(self, num_pieces):\r\n        super(Maxout, self).__init__()\r\n        self.num_pieces = num_pieces\r\n\r\n    def forward(self, input):\r\n        input = input.permute(0, 2, 3, 1)\r\n        shape = input.size()\r\n        self.linear = nn.Linear(shape[-1], shape[-1] * self.num_pieces, bias=False)\r\n        if isinstance(input.data, torch.cuda.FloatTensor):\r\n            self.linear.cuda()\r\n\r\n        input = self.linear(input.contiguous().view(-1, shape[-1])).view(\r\n                                shape[0], shape[1], shape[2], shape[3] * self.num_pieces)\r\n        shape = input.size()\r\n        num_filters = shape[-1] // self.num_pieces\r\n        new_shape = shape[:-1] + (num_filters, self.num_pieces)\r\n        last_dim = len(new_shape) - 1\r\n        m,i = input.contiguous().view(*new_shape).max(last_dim)\r\n        return m.squeeze(last_dim).permute(0, 3, 1, 2)\r\n```\r\n\r\nShould I be using the `nn.functional` interface for this?"}