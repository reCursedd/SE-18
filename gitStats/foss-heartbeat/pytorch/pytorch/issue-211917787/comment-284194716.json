{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/284194716", "html_url": "https://github.com/pytorch/pytorch/issues/921#issuecomment-284194716", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/921", "id": 284194716, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE5NDcxNg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-05T00:11:18Z", "updated_at": "2017-03-05T00:11:18Z", "author_association": "MEMBER", "body_html": "<p>I don't really know what's your plan. As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11729078\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jekbradbury\">@jekbradbury</a> noticed, you're reinitializing the layer at every forward. You probably want to do sth like that:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Maxout</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">num_pieces</span>, <span class=\"pl-smi\">input_shape</span>):\n        <span class=\"pl-c1\">super</span>(Maxout, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.num_pieces <span class=\"pl-k\">=</span> num_pieces\n        <span class=\"pl-c1\">self</span>.linear <span class=\"pl-k\">=</span> nn.Linear(input_shape, input_shape <span class=\"pl-k\">*</span> num_pieces, <span class=\"pl-v\">bias</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forwad</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> here you can use self.linear</span></pre></div>", "body_text": "I don't really know what's your plan. As @jekbradbury noticed, you're reinitializing the layer at every forward. You probably want to do sth like that:\nclass Maxout(nn.Module):\n    def __init__(self, num_pieces, input_shape):\n        super(Maxout, self).__init__()\n        self.num_pieces = num_pieces\n        self.linear = nn.Linear(input_shape, input_shape * num_pieces, bias=False)\n\n    def forwad(self, input):\n        # here you can use self.linear", "body": "I don't really know what's your plan. As @jekbradbury noticed, you're reinitializing the layer at every forward. You probably want to do sth like that:\r\n```python\r\nclass Maxout(nn.Module):\r\n    def __init__(self, num_pieces, input_shape):\r\n        super(Maxout, self).__init__()\r\n        self.num_pieces = num_pieces\r\n        self.linear = nn.Linear(input_shape, input_shape * num_pieces, bias=False)\r\n\r\n    def forwad(self, input):\r\n        # here you can use self.linear\r\n```"}