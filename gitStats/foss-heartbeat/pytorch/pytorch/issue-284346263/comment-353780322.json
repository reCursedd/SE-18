{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/353780322", "html_url": "https://github.com/pytorch/pytorch/issues/4343#issuecomment-353780322", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4343", "id": 353780322, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzc4MDMyMg==", "user": {"login": "hhsecond", "id": 13761737, "node_id": "MDQ6VXNlcjEzNzYxNzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/13761737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhsecond", "html_url": "https://github.com/hhsecond", "followers_url": "https://api.github.com/users/hhsecond/followers", "following_url": "https://api.github.com/users/hhsecond/following{/other_user}", "gists_url": "https://api.github.com/users/hhsecond/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhsecond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhsecond/subscriptions", "organizations_url": "https://api.github.com/users/hhsecond/orgs", "repos_url": "https://api.github.com/users/hhsecond/repos", "events_url": "https://api.github.com/users/hhsecond/events{/privacy}", "received_events_url": "https://api.github.com/users/hhsecond/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-24T11:56:49Z", "updated_at": "2017-12-24T12:09:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>onnx.export</code> expects the first argument to be a model (inherited from torch.nn.Module) that has <code>forward</code> method and can be backpropagated. In the above case, you are passing a <code>Variable</code>.<br>\nFor making your computations into a model you could create a Module  class and and do as below</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\nimport torch.onnx\n\nclass Simple(torch.nn.Module):\n    def forward(self, x):\n        y = x * 2\n        z = y.mean()\n        return z\n\n\nx = torch.randn(3)\nx = Variable(x, requires_grad=True)\nnet = Simple()\ntorch.onnx.export(net, x, 'cg.onnx.pb', verbose=True)\n\n</code></pre>\n<p>This <a href=\"http://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html\" rel=\"nofollow\">tutorial</a> gives you a more concrete example</p>", "body_text": "onnx.export expects the first argument to be a model (inherited from torch.nn.Module) that has forward method and can be backpropagated. In the above case, you are passing a Variable.\nFor making your computations into a model you could create a Module  class and and do as below\nimport torch\nfrom torch.autograd import Variable\nimport torch.onnx\n\nclass Simple(torch.nn.Module):\n    def forward(self, x):\n        y = x * 2\n        z = y.mean()\n        return z\n\n\nx = torch.randn(3)\nx = Variable(x, requires_grad=True)\nnet = Simple()\ntorch.onnx.export(net, x, 'cg.onnx.pb', verbose=True)\n\n\nThis tutorial gives you a more concrete example", "body": "``onnx.export`` expects the first argument to be a model (inherited from torch.nn.Module) that has ``forward`` method and can be backpropagated. In the above case, you are passing a ``Variable``.\r\nFor making your computations into a model you could create a Module  class and and do as below\r\n\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nimport torch.onnx\r\n\r\nclass Simple(torch.nn.Module):\r\n    def forward(self, x):\r\n        y = x * 2\r\n        z = y.mean()\r\n        return z\r\n\r\n\r\nx = torch.randn(3)\r\nx = Variable(x, requires_grad=True)\r\nnet = Simple()\r\ntorch.onnx.export(net, x, 'cg.onnx.pb', verbose=True)\r\n\r\n```\r\n\r\nThis [tutorial](http://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html) gives you a more concrete example\r\n"}