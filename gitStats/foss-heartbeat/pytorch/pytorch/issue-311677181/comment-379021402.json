{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/379021402", "html_url": "https://github.com/pytorch/pytorch/issues/6318#issuecomment-379021402", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6318", "id": 379021402, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTAyMTQwMg==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-05T17:51:39Z", "updated_at": "2018-04-05T17:52:25Z", "author_association": "MEMBER", "body_html": "<p>So, the reason why it works in one case but not the other is the following.<br>\nAccording to the python doc, <a href=\"https://docs.python.org/3/reference/expressions.html#membership-test-details\" rel=\"nofollow\"><code>x in y</code> can be translated to</a></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">any</span>(x <span class=\"pl-k\">is</span> e <span class=\"pl-k\">or</span> x <span class=\"pl-k\">==</span> e <span class=\"pl-k\">for</span> e <span class=\"pl-k\">in</span> y)</pre></div>\n<p>in the first case, <code>a is c[0]</code> is True, but in the second case it's not, so it compares <code>b == c[0]</code>, which returns a 3d tensor which can't be cast to a single bool.</p>\n<p>You have a few possibilities:<br>\n1 - if you only want to see if the exact same tensor (no clones) is in the list</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-c1\">any</span>(a <span class=\"pl-k\">is</span> e <span class=\"pl-k\">for</span> e <span class=\"pl-k\">in</span> c):</pre></div>\n<p>2 - if you want to accept copies:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-c1\">any</span>(a <span class=\"pl-k\">is</span> e <span class=\"pl-k\">or</span> a.equal(e) <span class=\"pl-k\">for</span> e <span class=\"pl-k\">in</span> c):</pre></div>\n<p>PyTorch behavior is compatible with numpy's in this case btw, and I don't think we will be changing it.</p>", "body_text": "So, the reason why it works in one case but not the other is the following.\nAccording to the python doc, x in y can be translated to\nany(x is e or x == e for e in y)\nin the first case, a is c[0] is True, but in the second case it's not, so it compares b == c[0], which returns a 3d tensor which can't be cast to a single bool.\nYou have a few possibilities:\n1 - if you only want to see if the exact same tensor (no clones) is in the list\nif any(a is e for e in c):\n2 - if you want to accept copies:\nif any(a is e or a.equal(e) for e in c):\nPyTorch behavior is compatible with numpy's in this case btw, and I don't think we will be changing it.", "body": "So, the reason why it works in one case but not the other is the following.\r\nAccording to the python doc, [`x in y` can be translated to](https://docs.python.org/3/reference/expressions.html#membership-test-details)\r\n```python\r\nany(x is e or x == e for e in y)\r\n```\r\nin the first case, `a is c[0]` is True, but in the second case it's not, so it compares `b == c[0]`, which returns a 3d tensor which can't be cast to a single bool.\r\n\r\nYou have a few possibilities:\r\n1 - if you only want to see if the exact same tensor (no clones) is in the list\r\n```python\r\nif any(a is e for e in c):\r\n```\r\n2 - if you want to accept copies:\r\n```python\r\nif any(a is e or a.equal(e) for e in c):\r\n```\r\n\r\nPyTorch behavior is compatible with numpy's in this case btw, and I don't think we will be changing it."}