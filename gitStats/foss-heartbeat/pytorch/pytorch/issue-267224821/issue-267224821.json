{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3205", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3205/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3205/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3205/events", "html_url": "https://github.com/pytorch/pytorch/issues/3205", "id": 267224821, "node_id": "MDU6SXNzdWUyNjcyMjQ4MjE=", "number": 3205, "title": "torch.gels on GPU doesn't support m < n", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-20T16:04:04Z", "updated_at": "2017-10-20T16:04:22Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p><a href=\"http://pytorch.org/docs/master/torch.html#torch.gels\" rel=\"nofollow\">The documentation for torch.gels</a> suggests that when m &lt; n for the input matrix A, then it solves the least norms problem. torch.gels with cuda tensor arguments doesn't do this.</p>\n<pre><code>import torch\nb = torch.randn(3 ,1)\nA = torch.randn(3, 5)\nX, _ = torch.gels(b,A)\nY, _ = torch.gels(b.cuda(),A.cuda())  \n&gt;&gt; Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: invalid argument 2: A should have m &gt;= n at /home/rzou/pytorch/torch/lib/THC/generic/THCTens\norMathMagma.cu:107\n</code></pre>", "body_text": "The documentation for torch.gels suggests that when m < n for the input matrix A, then it solves the least norms problem. torch.gels with cuda tensor arguments doesn't do this.\nimport torch\nb = torch.randn(3 ,1)\nA = torch.randn(3, 5)\nX, _ = torch.gels(b,A)\nY, _ = torch.gels(b.cuda(),A.cuda())  \n>> Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: invalid argument 2: A should have m >= n at /home/rzou/pytorch/torch/lib/THC/generic/THCTens\norMathMagma.cu:107", "body": "[The documentation for torch.gels](http://pytorch.org/docs/master/torch.html#torch.gels) suggests that when m < n for the input matrix A, then it solves the least norms problem. torch.gels with cuda tensor arguments doesn't do this.\r\n```\r\nimport torch\r\nb = torch.randn(3 ,1)\r\nA = torch.randn(3, 5)\r\nX, _ = torch.gels(b,A)\r\nY, _ = torch.gels(b.cuda(),A.cuda())  \r\n>> Traceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: invalid argument 2: A should have m >= n at /home/rzou/pytorch/torch/lib/THC/generic/THCTens\r\norMathMagma.cu:107\r\n```"}