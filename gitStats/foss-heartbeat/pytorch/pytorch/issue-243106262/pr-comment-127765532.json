{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/127765532", "pull_request_review_id": 50383277, "id": 127765532, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzc2NTUzMg==", "diff_hunk": "@@ -7,54 +7,107 @@\n \n \n class PReLU(Function):\n-\n-    def forward(self, input, weight):\n-        self._backend = type2backend[type(input)]\n+    @staticmethod\n+    def forward(ctx, input, weight):\n+        ctx._backend = type2backend[type(input)]\n         output = input.new()\n-        self.num_parameters = weight.numel()\n-        if self.num_parameters == 1:\n-            self.num_parameters = 0\n-        self._backend.PReLU_updateOutput(\n-            self._backend.library_state,\n+        ctx.num_parameters = weight.numel()\n+        if ctx.num_parameters == 1:\n+            ctx.num_parameters = 0\n+        ctx._backend.PReLU_updateOutput(\n+            ctx._backend.library_state,\n             input,\n             output,\n             weight,\n-            self.num_parameters\n+            ctx.num_parameters\n         )\n-        self.save_for_backward(input, weight)\n+        ctx.save_for_backward(input, weight)\n         return output\n \n-    def backward(self, grad_output):\n-        input, weight = self.saved_tensors\n-        # TODO: check if requires grad\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        input, weight = ctx.saved_variables\n+        # alternatively, we could recalculate _backend, num_parameters\n+        return PReLUBackward.apply(input, weight, grad_output, ctx._backend, ctx.num_parameters)\n+\n+\n+class PReLUBackward(Function):\n+    @staticmethod\n+    def forward(ctx, input, weight, grad_output, backend, num_parameters):\n+        ctx.save_for_backward(input, weight, grad_output)\n+        ctx.num_parameters = num_parameters\n         grad_input = input.new()\n-        self._backend.PReLU_updateGradInput(\n-            self._backend.library_state,\n+        backend.PReLU_updateGradInput(\n+            backend.library_state,\n             input,\n             grad_output,\n             grad_input,\n             weight,\n-            self.num_parameters\n+            num_parameters\n         )\n \n         buf = weight.new()\n         buf2 = weight.new()\n         # TODO: this won't have to be zeroed in the future\n         grad_weight = weight.new().resize_as_(weight).zero_()\n-        self._backend.PReLU_accGradParameters(\n-            self._backend.library_state,\n+        backend.PReLU_accGradParameters(\n+            backend.library_state,\n             input,\n             grad_output,\n             grad_input,\n             weight,\n             grad_weight,\n             buf,\n             buf2,\n-            self.num_parameters,\n+            num_parameters,\n             1\n         )\n         return grad_input, grad_weight\n \n+    @staticmethod\n+    def backward(ctx, ggI, ggW):\n+        input, weight, gO = ctx.saved_variables\n+        positive_mask = (input > 0).type_as(ggI)\n+        nonpositive_mask = (input <= 0).type_as(ggW)\n+        # Explanation: Let input be i, weight be w, grad_output be gO.\n+        # f(i, w) = i  if i > 0\n+        #         = wi if i <= 0\n+        # df/dx * gO  = gO      if i > 0      df/dw * g0 = 0      if i > 0", "path": "torch/nn/_functions/thnn/activation.py", "position": null, "original_position": 88, "commit_id": "62a071357fd6d39b8be2fa6472c27121dfe28e96", "original_commit_id": "2f20bcbc9f68564b0f6bedb8e91ca5427405e439", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "good catch.", "created_at": "2017-07-17T17:08:36Z", "updated_at": "2018-11-23T15:34:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/2106#discussion_r127765532", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2106", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/127765532"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2106#discussion_r127765532"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2106"}}, "body_html": "<p>good catch.</p>", "body_text": "good catch.", "in_reply_to_id": 127561510}