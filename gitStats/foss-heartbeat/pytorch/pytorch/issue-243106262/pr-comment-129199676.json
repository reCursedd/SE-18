{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/129199676", "pull_request_review_id": 51946376, "id": 129199676, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTE5OTY3Ng==", "diff_hunk": "@@ -86,41 +108,47 @@ def has_argument(fn, name):\n         buffers['acc_grad_parameters'] = _find_buffers(\n             acc_grad_parameters.arguments[3:], ignored_args)\n \n-    # This and __init__ assume that only the last argument can be\n+    # This assumes that only the last argument can be\n     # an inplace flag\n     is_inplace = update_output.arguments[-1].name == 'inplace'\n \n-    def __init__(self, *args):\n-        if is_inplace:\n-            InplaceFunction.__init__(self, args[-1])\n-        else:\n-            Function.__init__(self)\n-        self.additional_args = list(args)\n-\n-    def _initialize_buffers(self, fn_name):\n-        additional_args = self.additional_args\n+    @staticmethod\n+    def _initialize_buffers(ctx, fn_name):\n+        additional_args = ctx.additional_args\n         for idx, name in buffers[fn_name]:\n             # TODO: some buffers are necessary only for update output and can be\n             # freed right afterwards\n-            buffer = self.buffers[name]\n+            buffer = ctx.buffers[name]\n             additional_args = additional_args[:idx] + [buffer] + additional_args[idx:]\n         return tuple(additional_args)\n \n-    def forward(self, input, *params):\n-        self._backend = type2backend[type(input)]\n+    @staticmethod\n+    def forward(ctx, input, *params):\n+        ctx._backend = type2backend[type(input)]\n \n+        ctx.additional_args = []\n+        tensor_param_list = []\n         for param in params:\n-            if type(param) != type(input):\n-                raise RuntimeError(\"input type ({}) doesn't match the type of \"\n-                                   \"a parameter tensor ({})\".format(torch.typename(input),\n-                                                                    torch.typename(param)))\n+            if torch.is_tensor(param):\n+                if type(param) != type(input):\n+                    raise RuntimeError(\"input type ({}) doesn't match the type of \"\n+                                       \"a parameter tensor ({})\".format(torch.typename(input),\n+                                                                        torch.typename(param)))\n+                tensor_param_list.append(param)\n+            else:\n+                ctx.additional_args.append(param)\n \n+        tensor_params = tuple(tensor_param_list)\n+        if is_inplace:\n+            ctx.inplace = params[-1]\n         # Allocate temporary buffers and insert them into additional_args\n-        self.buffers = defaultdict(type(input))\n-        additional_args = self._initialize_buffers('update_output')\n+        ctx.buffers = defaultdict(type(input))\n+        # we need to call __func__ here because the method is static; we could move it\n+        # to outside the class but that would take some restructuring.\n+        additional_args = _initialize_buffers.__func__(ctx, 'update_output')", "path": "torch/nn/_functions/thnn/auto.py", "position": 160, "original_position": 160, "commit_id": "62a071357fd6d39b8be2fa6472c27121dfe28e96", "original_commit_id": "62a071357fd6d39b8be2fa6472c27121dfe28e96", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You could just capture `_initialize_buffer` as part of the closure. There's no need to assign it as a class method and use these hacks", "created_at": "2017-07-25T02:27:21Z", "updated_at": "2018-11-23T15:34:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/2106#discussion_r129199676", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2106", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/129199676"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2106#discussion_r129199676"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2106"}}, "body_html": "<p>You could just capture <code>_initialize_buffer</code> as part of the closure. There's no need to assign it as a class method and use these hacks</p>", "body_text": "You could just capture _initialize_buffer as part of the closure. There's no need to assign it as a class method and use these hacks"}