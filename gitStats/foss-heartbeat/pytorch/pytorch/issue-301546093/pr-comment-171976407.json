{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171976407", "pull_request_review_id": 100929664, "id": 171976407, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTk3NjQwNw==", "diff_hunk": "@@ -0,0 +1,65 @@\n+// Returns unique elements of input tensor.\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+\n+#include <set>\n+#include <tuple>\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+namespace at {\n+namespace native{\n+\n+namespace {\n+\n+template <template <class...> class set_type, typename scalar_t>\n+void _unique_cpu_template(\n+    const Tensor& self,\n+    const bool return_inverse,\n+    Tensor* output,\n+    Tensor* inverse_indices) {\n+  set_type<scalar_t> set(\n+      self.data<scalar_t>(), self.data<scalar_t>() + self.numel());\n+  output->resize_({static_cast<long long>(set.size())});\n+  std::copy(set.begin(), set.end(), output->data<scalar_t>());\n+\n+  if (return_inverse) {\n+    inverse_indices->resize_(self.sizes());\n+    std::unordered_map<scalar_t, int64_t> inverse_map;\n+    inverse_map.reserve(output->numel());\n+    for (int i = 0; i < output->numel(); ++i) {\n+      inverse_map[output->data<scalar_t>()[i]] = i;\n+    }\n+    for (int i = 0; i < self.numel(); ++i) {\n+      inverse_indices->data<int64_t>()[i] =\n+          inverse_map[self.data<scalar_t>()[i]];\n+    }\n+  }\n+}\n+} // namespace\n+\n+std::tuple<Tensor, Tensor>\n+unique_cpu(const Tensor& self, const bool sorted, const bool return_inverse) {\n+  // output will be resized in unique_template once we know how big it is.\n+  // inverse_indices may also be resized depending on return_inverse.\n+  Tensor output = self.type().tensor({0});\n+  Tensor inverse_indices = self.type().toScalarType(kLong).tensor({0});\n+\n+  if (sorted) {\n+    AT_DISPATCH_ALL_TYPES(self.type(), \"unique\", [&] {\n+      _unique_cpu_template<std::set, scalar_t>(", "path": "aten/src/ATen/native/Unique.cpp", "position": null, "original_position": 51, "commit_id": "eeebf16c94770df8b05401d4934f767ec9ea9044", "original_commit_id": "a016ea268bed7294ced66f93f4b94b9bfc7f1e8b", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I believe `AT_DISPATCH_ALL_TYPES` can return a value. I think it will be a bit cleaner to make `output` and `inverse_indices` return values from `_unique_cpu_template` instead of output arguments.", "created_at": "2018-03-02T22:11:26Z", "updated_at": "2018-11-23T15:40:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171976407", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5503", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171976407"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171976407"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5503"}}, "body_html": "<p>I believe <code>AT_DISPATCH_ALL_TYPES</code> can return a value. I think it will be a bit cleaner to make <code>output</code> and <code>inverse_indices</code> return values from <code>_unique_cpu_template</code> instead of output arguments.</p>", "body_text": "I believe AT_DISPATCH_ALL_TYPES can return a value. I think it will be a bit cleaner to make output and inverse_indices return values from _unique_cpu_template instead of output arguments."}