{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370058501", "html_url": "https://github.com/pytorch/pytorch/pull/5503#issuecomment-370058501", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5503", "id": 370058501, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDA1ODUwMQ==", "user": {"login": "theweiho", "id": 6696956, "node_id": "MDQ6VXNlcjY2OTY5NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6696956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theweiho", "html_url": "https://github.com/theweiho", "followers_url": "https://api.github.com/users/theweiho/followers", "following_url": "https://api.github.com/users/theweiho/following{/other_user}", "gists_url": "https://api.github.com/users/theweiho/gists{/gist_id}", "starred_url": "https://api.github.com/users/theweiho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theweiho/subscriptions", "organizations_url": "https://api.github.com/users/theweiho/orgs", "repos_url": "https://api.github.com/users/theweiho/repos", "events_url": "https://api.github.com/users/theweiho/events{/privacy}", "received_events_url": "https://api.github.com/users/theweiho/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-02T21:31:35Z", "updated_at": "2018-03-02T21:31:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> - is there some way to use Travis CI (or something else) to test the CUDA part of the code you suggested?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> - that was the way we were considering doing, but not sure that totally makes sense. Attributing the gradient to the first unique element seems a bit arbitrary? (Considering all occurrences of that element \"contributes\" to the unique equally) I also wasn't sure what a use case for the unique gradient would be, so figured it may make sense to defer it until someone has concrete requirements.</p>", "body_text": "@SsnL - is there some way to use Travis CI (or something else) to test the CUDA part of the code you suggested?\n@fmassa - that was the way we were considering doing, but not sure that totally makes sense. Attributing the gradient to the first unique element seems a bit arbitrary? (Considering all occurrences of that element \"contributes\" to the unique equally) I also wasn't sure what a use case for the unique gradient would be, so figured it may make sense to defer it until someone has concrete requirements.", "body": "@SsnL - is there some way to use Travis CI (or something else) to test the CUDA part of the code you suggested?\r\n\r\n@fmassa - that was the way we were considering doing, but not sure that totally makes sense. Attributing the gradient to the first unique element seems a bit arbitrary? (Considering all occurrences of that element \"contributes\" to the unique equally) I also wasn't sure what a use case for the unique gradient would be, so figured it may make sense to defer it until someone has concrete requirements. "}