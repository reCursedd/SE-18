{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171697801", "pull_request_review_id": 100598050, "id": 171697801, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY5NzgwMQ==", "diff_hunk": "@@ -0,0 +1,44 @@\n+// Returns unique elements of input tensor.\n+\n+#include \"ATen/ATen.h\"\n+\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+namespace at {\n+namespace native{\n+\n+std::tuple<Tensor, Tensor> unique(\n+    const Tensor& self, const bool sorted, const bool return_inverse) {\n+  std::unordered_set<int64_t> set(\n+      self.data<int64_t>(), self.data<int64_t>() + self.numel());\n+  Tensor output = self.type().tensor({static_cast<long long>(set.size())});", "path": "aten/src/ATen/native/Unique.cpp", "position": null, "original_position": 15, "commit_id": "eeebf16c94770df8b05401d4934f767ec9ea9044", "original_commit_id": "bbfc3f06a5edd400d6e24493084cefb10e2018e9", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I don't think we should use an `unordered_set` here. The `!sorted` case below has no guarantee that `set.begin()` and `set.end()` is ordered in a way. \r\n\r\nIn fact, why do you need a set? Can't you just use torch's sort (if needed)? Then just iterate through once will be enough. Also it gives indices so computing `inverse_indices` should also be convenient.", "created_at": "2018-03-01T21:23:22Z", "updated_at": "2018-11-23T15:40:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171697801", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5503", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171697801"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171697801"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5503"}}, "body_html": "<p>I don't think we should use an <code>unordered_set</code> here. The <code>!sorted</code> case below has no guarantee that <code>set.begin()</code> and <code>set.end()</code> is ordered in a way.</p>\n<p>In fact, why do you need a set? Can't you just use torch's sort (if needed)? Then just iterate through once will be enough. Also it gives indices so computing <code>inverse_indices</code> should also be convenient.</p>", "body_text": "I don't think we should use an unordered_set here. The !sorted case below has no guarantee that set.begin() and set.end() is ordered in a way.\nIn fact, why do you need a set? Can't you just use torch's sort (if needed)? Then just iterate through once will be enough. Also it gives indices so computing inverse_indices should also be convenient."}