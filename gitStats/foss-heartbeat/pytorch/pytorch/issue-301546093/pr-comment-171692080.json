{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171692080", "pull_request_review_id": 100590728, "id": 171692080, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY5MjA4MA==", "diff_hunk": "@@ -0,0 +1,45 @@\n+// Returns unique elements of input tensor.\n+\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+#include \"ATen/ATen.h\"\n+\n+namespace at {\n+namespace native{\n+\n+std::tuple<Tensor, Tensor> unique(\n+    const Tensor& self, const bool sorted, const bool return_inverse) {\n+  std::unordered_set<int64_t> set(\n+      self.data<int64_t>(), self.data<int64_t>() + self.numel());\n+  Tensor output = self.type().tensor({static_cast<long long>(set.size())});\n+  \n+  if (!sorted) {\n+    std::copy(set.begin(), set.end(), output.data<int64_t>());\n+  } else {\n+    std::vector<int64_t> vec(set.begin(), set.end());\n+    std::sort(vec.begin(), vec.end());\n+    std::copy(vec.begin(), vec.end(), output.data<int64_t>());\n+  }\n+\n+  Tensor inverse_indices;\n+  if (!return_inverse) {\n+    inverse_indices = self.type().toScalarType(kLong).tensor({0});\n+    ", "path": "aten/src/ATen/native/Unique.cpp", "position": null, "original_position": 28, "commit_id": "eeebf16c94770df8b05401d4934f767ec9ea9044", "original_commit_id": "6c28ec7d8b3eda403571f6bd99b810c9f769d7cc", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "Also flip the cases again", "created_at": "2018-03-01T21:00:36Z", "updated_at": "2018-11-23T15:40:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171692080", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5503", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171692080"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171692080"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5503"}}, "body_html": "<p>Also flip the cases again</p>", "body_text": "Also flip the cases again", "in_reply_to_id": 171692031}