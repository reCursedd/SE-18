{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171824097", "pull_request_review_id": 100738036, "id": 171824097, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTgyNDA5Nw==", "diff_hunk": "@@ -5422,6 +5422,65 @@ def test_set_flush_denormal(self):\n         self.assertEqual(double_tensor[2], 0.0, prec=0.0)  # tiny_double to zero\n         torch.set_flush_denormal(False)\n \n+    def test_unique(self):\n+        x = torch.LongTensor([1, 2, 3, 2, 8, 5, 2, 3])\n+        expected_unique = torch.LongTensor([1, 2, 3, 5, 8])\n+        expected_inverse = torch.LongTensor([0, 1, 2, 1, 4, 3, 1, 2])\n+        empty_inverse = torch.LongTensor([])\n+\n+        if TEST_NUMPY:\n+            x_unique, x_inverse = torch.unique(x)\n+            self.assertEqual(\n+                expected_unique.numpy().tolist(),\n+                sorted(x_unique.numpy().tolist())\n+            )\n+            self.assertEqual(empty_inverse, x_inverse)\n+\n+            x_unique, x_inverse = x.unique(return_inverse=True)\n+            self.assertEqual(\n+                expected_unique.numpy().tolist(),\n+                sorted(x_unique.numpy().tolist())\n+            )\n+            self.assertEqual(expected_inverse.numel(), x_inverse.numel())\n+\n+        x_unique, x_inverse = x.unique(sorted=True)\n+        self.assertEqual(expected_unique, x_unique)\n+        self.assertEqual(empty_inverse, x_inverse)\n+\n+        x_unique, x_inverse = torch.autograd.Variable.unique(\n+            x, sorted=True, return_inverse=True)\n+        self.assertEqual(expected_unique, x_unique)\n+        self.assertEqual(expected_inverse, x_inverse)\n+\n+        # Tests per-element unique on a higher rank tensor.\n+        y = x.view(2, 2, 2)\n+        y_unique, y_inverse = y.unique(sorted=True, return_inverse=True)\n+        self.assertEqual(expected_unique, y_unique)\n+        self.assertEqual(expected_inverse.view(y.size()), y_inverse)\n+\n+        # Tests unique on other types.\n+        int_unique, int_inverse = torch.unique(\n+            torch.IntTensor([2, 1, 2]), sorted=True, return_inverse=True)\n+        self.assertEqual(torch.IntTensor([1, 2]), int_unique)\n+        self.assertEqual(torch.LongTensor([1, 0, 1]), int_inverse)\n+\n+        double_unique, double_inverse = torch.unique(\n+            torch.DoubleTensor([2., 1.5, 2.1, 2.]),\n+            sorted=True,\n+            return_inverse=True,\n+        )\n+        self.assertEqual(torch.DoubleTensor([1.5, 2., 2.1]), double_unique)\n+        self.assertEqual(torch.LongTensor([1, 0, 2, 1]), double_inverse)\n+\n+        byte_unique, byte_inverse = torch.unique(\n+            torch.ByteTensor([133, 7, 7, 7, 42, 128]),\n+            sorted=True,\n+            return_inverse=True,\n+        )\n+        self.assertEqual(torch.ByteTensor([7, 42, 128, 133]), byte_unique)\n+        self.assertEqual(torch.LongTensor([3, 0, 0, 0, 1, 2]), byte_inverse)", "path": "test/test_torch.py", "position": 52, "original_position": 60, "commit_id": "eeebf16c94770df8b05401d4934f767ec9ea9044", "original_commit_id": "a3dc7b23e8efad32c99507eb24fc35c6c0ccdec4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be better to implement `unique` reference implementation in Python, and then have a list of examples that we loop over and compare outputs. Here's an example:\r\n```python\r\ndef unique(tensor):\r\n    values = sorted(set(tensor))\r\n    value_map = {i: v for i, v in enumerate(values)}\r\n    inverse = torch.LongTensor([value_map[v.item()] for v in values])\r\n    return values, inverse\r\n```", "created_at": "2018-03-02T11:25:27Z", "updated_at": "2018-11-23T15:40:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171824097", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5503", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171824097"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171824097"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5503"}}, "body_html": "<p>It would be better to implement <code>unique</code> reference implementation in Python, and then have a list of examples that we loop over and compare outputs. Here's an example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">unique</span>(<span class=\"pl-smi\">tensor</span>):\n    values <span class=\"pl-k\">=</span> <span class=\"pl-c1\">sorted</span>(<span class=\"pl-c1\">set</span>(tensor))\n    value_map <span class=\"pl-k\">=</span> {i: v <span class=\"pl-k\">for</span> i, v <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(values)}\n    inverse <span class=\"pl-k\">=</span> torch.LongTensor([value_map[v.item()] <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values])\n    <span class=\"pl-k\">return</span> values, inverse</pre></div>", "body_text": "It would be better to implement unique reference implementation in Python, and then have a list of examples that we loop over and compare outputs. Here's an example:\ndef unique(tensor):\n    values = sorted(set(tensor))\n    value_map = {i: v for i, v in enumerate(values)}\n    inverse = torch.LongTensor([value_map[v.item()] for v in values])\n    return values, inverse"}