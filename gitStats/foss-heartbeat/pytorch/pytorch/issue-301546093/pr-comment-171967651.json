{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171967651", "pull_request_review_id": 100919500, "id": 171967651, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTk2NzY1MQ==", "diff_hunk": "@@ -5422,6 +5422,65 @@ def test_set_flush_denormal(self):\n         self.assertEqual(double_tensor[2], 0.0, prec=0.0)  # tiny_double to zero\n         torch.set_flush_denormal(False)\n \n+    def test_unique(self):\n+        x = torch.LongTensor([1, 2, 3, 2, 8, 5, 2, 3])\n+        expected_unique = torch.LongTensor([1, 2, 3, 5, 8])\n+        expected_inverse = torch.LongTensor([0, 1, 2, 1, 4, 3, 1, 2])\n+        empty_inverse = torch.LongTensor([])\n+\n+        if TEST_NUMPY:\n+            x_unique, x_inverse = torch.unique(x)\n+            self.assertEqual(\n+                expected_unique.numpy().tolist(),\n+                sorted(x_unique.numpy().tolist())\n+            )\n+            self.assertEqual(empty_inverse, x_inverse)\n+\n+            x_unique, x_inverse = x.unique(return_inverse=True)\n+            self.assertEqual(\n+                expected_unique.numpy().tolist(),\n+                sorted(x_unique.numpy().tolist())\n+            )\n+            self.assertEqual(expected_inverse.numel(), x_inverse.numel())\n+\n+        x_unique, x_inverse = x.unique(sorted=True)\n+        self.assertEqual(expected_unique, x_unique)\n+        self.assertEqual(empty_inverse, x_inverse)\n+\n+        x_unique, x_inverse = torch.autograd.Variable.unique(\n+            x, sorted=True, return_inverse=True)\n+        self.assertEqual(expected_unique, x_unique)\n+        self.assertEqual(expected_inverse, x_inverse)\n+\n+        # Tests per-element unique on a higher rank tensor.\n+        y = x.view(2, 2, 2)\n+        y_unique, y_inverse = y.unique(sorted=True, return_inverse=True)\n+        self.assertEqual(expected_unique, y_unique)\n+        self.assertEqual(expected_inverse.view(y.size()), y_inverse)\n+\n+        # Tests unique on other types.\n+        int_unique, int_inverse = torch.unique(\n+            torch.IntTensor([2, 1, 2]), sorted=True, return_inverse=True)\n+        self.assertEqual(torch.IntTensor([1, 2]), int_unique)\n+        self.assertEqual(torch.LongTensor([1, 0, 1]), int_inverse)\n+\n+        double_unique, double_inverse = torch.unique(\n+            torch.DoubleTensor([2., 1.5, 2.1, 2.]),\n+            sorted=True,\n+            return_inverse=True,\n+        )\n+        self.assertEqual(torch.DoubleTensor([1.5, 2., 2.1]), double_unique)\n+        self.assertEqual(torch.LongTensor([1, 0, 2, 1]), double_inverse)\n+\n+        byte_unique, byte_inverse = torch.unique(\n+            torch.ByteTensor([133, 7, 7, 7, 42, 128]),\n+            sorted=True,\n+            return_inverse=True,\n+        )\n+        self.assertEqual(torch.ByteTensor([7, 42, 128, 133]), byte_unique)\n+        self.assertEqual(torch.LongTensor([3, 0, 0, 0, 1, 2]), byte_inverse)", "path": "test/test_torch.py", "position": 52, "original_position": 60, "commit_id": "eeebf16c94770df8b05401d4934f767ec9ea9044", "original_commit_id": "a3dc7b23e8efad32c99507eb24fc35c6c0ccdec4", "user": {"login": "theweiho", "id": 6696956, "node_id": "MDQ6VXNlcjY2OTY5NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6696956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theweiho", "html_url": "https://github.com/theweiho", "followers_url": "https://api.github.com/users/theweiho/followers", "following_url": "https://api.github.com/users/theweiho/following{/other_user}", "gists_url": "https://api.github.com/users/theweiho/gists{/gist_id}", "starred_url": "https://api.github.com/users/theweiho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theweiho/subscriptions", "organizations_url": "https://api.github.com/users/theweiho/orgs", "repos_url": "https://api.github.com/users/theweiho/repos", "events_url": "https://api.github.com/users/theweiho/events{/privacy}", "received_events_url": "https://api.github.com/users/theweiho/received_events", "type": "User", "site_admin": false}, "body": "Hmm - for unit tests, I usually prefer to err on the side of verbosity and explicitness rather than doing things programmatically - since that makes it easier for people to see what the expected return values are and also serve as additional documentation for what we expect the function to return.\r\n\r\nI could change to doing a reference implementation though, if you feel strongly about this.", "created_at": "2018-03-02T21:29:23Z", "updated_at": "2018-11-23T15:40:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171967651", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5503", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171967651"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5503#discussion_r171967651"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5503"}}, "body_html": "<p>Hmm - for unit tests, I usually prefer to err on the side of verbosity and explicitness rather than doing things programmatically - since that makes it easier for people to see what the expected return values are and also serve as additional documentation for what we expect the function to return.</p>\n<p>I could change to doing a reference implementation though, if you feel strongly about this.</p>", "body_text": "Hmm - for unit tests, I usually prefer to err on the side of verbosity and explicitness rather than doing things programmatically - since that makes it easier for people to see what the expected return values are and also serve as additional documentation for what we expect the function to return.\nI could change to doing a reference implementation though, if you feel strongly about this.", "in_reply_to_id": 171824097}