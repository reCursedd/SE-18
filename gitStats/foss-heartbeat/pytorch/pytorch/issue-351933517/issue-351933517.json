{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10672", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10672/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10672/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10672/events", "html_url": "https://github.com/pytorch/pytorch/pull/10672", "id": 351933517, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA5Mzc5MDY4", "number": 10672, "title": "orthogonal_ norm conservation", "user": {"login": "mariogeiger", "id": 333780, "node_id": "MDQ6VXNlcjMzMzc4MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/333780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mariogeiger", "html_url": "https://github.com/mariogeiger", "followers_url": "https://api.github.com/users/mariogeiger/followers", "following_url": "https://api.github.com/users/mariogeiger/following{/other_user}", "gists_url": "https://api.github.com/users/mariogeiger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mariogeiger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mariogeiger/subscriptions", "organizations_url": "https://api.github.com/users/mariogeiger/orgs", "repos_url": "https://api.github.com/users/mariogeiger/repos", "events_url": "https://api.github.com/users/mariogeiger/events{/privacy}", "received_events_url": "https://api.github.com/users/mariogeiger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-19T20:52:57Z", "updated_at": "2018-09-19T21:33:28Z", "closed_at": null, "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10672", "html_url": "https://github.com/pytorch/pytorch/pull/10672", "diff_url": "https://github.com/pytorch/pytorch/pull/10672.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10672.patch"}, "body_html": "<p>I propose to modify <code>nn.init.orthogonal_</code> such that the variance is conserved.<br>\nIn all the modules, <code>weight</code> has its first index as output index:</p>\n<ul>\n<li><code>(out_features, in_features)</code> for <code>nn.Linear</code></li>\n<li><code>(out_channels, in_channels, kH, kW)</code> for <code>nn.Conv2d</code></li>\n</ul>\n<p>I propose to modify the behavior of <code>nn.init.orthogonal_</code> for the case <code>rows &gt; cols</code> such that</p>\n<div class=\"highlight highlight-source-python\"><pre>lin <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">5</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> rows &gt; cols</span>\nnn.init.orthogonal_(lin.weight)\nx <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">20</span>)\nlin(x).std()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> is equal to 1 in expectancy</span></pre></div>\n<p>To do so I propose to split the matrix <code>rows x cols</code> into a pile of orthogonal square matrices of size <code>cols x cols</code>.</p>", "body_text": "I propose to modify nn.init.orthogonal_ such that the variance is conserved.\nIn all the modules, weight has its first index as output index:\n\n(out_features, in_features) for nn.Linear\n(out_channels, in_channels, kH, kW) for nn.Conv2d\n\nI propose to modify the behavior of nn.init.orthogonal_ for the case rows > cols such that\nlin = nn.Linear(20, 5)  # rows > cols\nnn.init.orthogonal_(lin.weight)\nx = torch.randn(100, 20)\nlin(x).std()  # is equal to 1 in expectancy\nTo do so I propose to split the matrix rows x cols into a pile of orthogonal square matrices of size cols x cols.", "body": "I propose to modify `nn.init.orthogonal_` such that the variance is conserved.\r\nIn all the modules, `weight` has its first index as output index:\r\n\r\n- `(out_features, in_features)` for `nn.Linear`\r\n- `(out_channels, in_channels, kH, kW)` for `nn.Conv2d`\r\n\r\nI propose to modify the behavior of `nn.init.orthogonal_` for the case `rows > cols` such that\r\n```python\r\nlin = nn.Linear(20, 5)  # rows > cols\r\nnn.init.orthogonal_(lin.weight)\r\nx = torch.randn(100, 20)\r\nlin(x).std()  # is equal to 1 in expectancy\r\n```\r\n\r\nTo do so I propose to split the matrix `rows x cols` into a pile of orthogonal square matrices of size `cols x cols`."}