{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232411330", "pull_request_review_id": 173608687, "id": 232411330, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQxMTMzMA==", "diff_hunk": "@@ -179,6 +180,24 @@ struct THCCachingAllocator\n       block = *it;\n       free_blocks.erase(it);\n     } else {\n+\n+      // Check that if device_guard is off, then we are on the correct device.\n+#ifdef DEBUG\n+      if (!device_guard) {\n+        int current_device;\n+        THCudaCheck(cudaGetDevice(&current_device));\n+        AT_ASSERTM(device == current_device,\n+            \"THCCachingAllocator::malloc: current device (\", current_device,\n+            \") does not match requested device (\", device, \") for allocations\");\n+      }\n+#endif\n+\n+      // NB: This is an optimization. If we know we are allocating on the current\n+      // device then there is no need to DeviceGuard.\n+      c10::optional<at::cuda::CUDAGuard> guard;", "path": "aten/src/THC/THCCachingAllocator.cpp", "position": null, "original_position": 52, "commit_id": "71b7bc61871238f63f2b8e5f4ac1a4a9ab71ad72", "original_commit_id": "5d07529210e9620682415433c99f0a1845e716f4", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "The `optional<>` is unnecessary:\r\n\r\n```\r\nDeviceGuard guard;\r\nif (...) {\r\n  guard.set_device(device);\r\n}\r\n```\r\n\r\nIf you're not managing streams, I think `DeviceGuard` is sufficient.", "created_at": "2018-11-09T22:23:18Z", "updated_at": "2018-11-23T15:54:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/13785#discussion_r232411330", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13785", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232411330"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13785#discussion_r232411330"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13785"}}, "body_html": "<p>The <code>optional&lt;&gt;</code> is unnecessary:</p>\n<pre><code>DeviceGuard guard;\nif (...) {\n  guard.set_device(device);\n}\n</code></pre>\n<p>If you're not managing streams, I think <code>DeviceGuard</code> is sufficient.</p>", "body_text": "The optional<> is unnecessary:\nDeviceGuard guard;\nif (...) {\n  guard.set_device(device);\n}\n\nIf you're not managing streams, I think DeviceGuard is sufficient."}