{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232410363", "pull_request_review_id": 173608687, "id": 232410363, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQxMDM2Mw==", "diff_hunk": "@@ -42,11 +44,30 @@ Tensor& eye_out_cuda(Tensor& result, int64_t n, int64_t m) {\n Tensor empty_cuda(IntList size, const TensorOptions& options) {\n   AT_ASSERT(options.backend() == at::Backend::CUDA);\n   AT_ASSERT(!options.is_variable());  // is_variable should have been 'unpacked'\n+\n+  // NB: For performance reasons, empty_cuda does not unconditionally use DeviceGuard.\n+  // Instead, allocator->allocate_on_device(...) grabs one if necessary.\n+\n+  int64_t numel = 1;\n+  for (int64_t i : size) {\n+    numel *= i;\n+  }\n+\n+  auto dtype = options.dtype();\n+  auto* allocator = static_cast<cuda::CudaCachingAllocator*>(", "path": "aten/src/ATen/native/cuda/TensorFactories.cu", "position": null, "original_position": 23, "commit_id": "71b7bc61871238f63f2b8e5f4ac1a4a9ab71ad72", "original_commit_id": "5d07529210e9620682415433c99f0a1845e716f4", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This is worrying. If we require it to be of type `CudaCachingAllocator*` then the function should have return type CudaCachingAllocator.", "created_at": "2018-11-09T22:18:30Z", "updated_at": "2018-11-23T15:54:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/13785#discussion_r232410363", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13785", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232410363"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13785#discussion_r232410363"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13785"}}, "body_html": "<p>This is worrying. If we require it to be of type <code>CudaCachingAllocator*</code> then the function should have return type CudaCachingAllocator.</p>", "body_text": "This is worrying. If we require it to be of type CudaCachingAllocator* then the function should have return type CudaCachingAllocator."}