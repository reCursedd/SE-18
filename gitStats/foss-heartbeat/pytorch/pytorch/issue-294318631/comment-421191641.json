{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421191641", "html_url": "https://github.com/pytorch/pytorch/issues/5045#issuecomment-421191641", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5045", "id": 421191641, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTE5MTY0MQ==", "user": {"login": "ragulpr", "id": 10998266, "node_id": "MDQ6VXNlcjEwOTk4MjY2", "avatar_url": "https://avatars3.githubusercontent.com/u/10998266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ragulpr", "html_url": "https://github.com/ragulpr", "followers_url": "https://api.github.com/users/ragulpr/followers", "following_url": "https://api.github.com/users/ragulpr/following{/other_user}", "gists_url": "https://api.github.com/users/ragulpr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ragulpr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ragulpr/subscriptions", "organizations_url": "https://api.github.com/users/ragulpr/orgs", "repos_url": "https://api.github.com/users/ragulpr/repos", "events_url": "https://api.github.com/users/ragulpr/events{/privacy}", "received_events_url": "https://api.github.com/users/ragulpr/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-14T00:18:31Z", "updated_at": "2018-09-14T00:18:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This was actually addressed starting from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"289750781\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4726\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4726/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4726\">#4726</a> with <code>torch.testing</code> which has some of this functionality, see <a href=\"https://github.com/pytorch/pytorch/blame/master/torch/testing/__init__.py\">here</a></p>\n<p>Example:</p>\n<pre><code>In [8]: x = torch.ones(1)\n\nIn [9]: y = x+1\n\nIn [10]: torch.testing.assert_allclose(x,y)\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n&lt;ipython-input-10-3b698e9eddbf&gt; in &lt;module&gt;()\n----&gt; 1 torch.testing.assert_allclose(x,y)\n\n/usr/local/anaconda3/envs/pytorch/lib/python3.6/site-packages/torch/testing/__init__.py in assert_allclose(actual, expected, rtol, atol, equal_nan)\n     55     raise AssertionError(msg.format(\n     56         rtol, atol, list(index), actual[index].item(), expected[index].item(),\n---&gt; 57         count - 1, 100 * count / actual.numel()))\n     58 \n     59 \n\nAssertionError: Not within tolerance rtol=0.0001 atol=1e-05 at input[0] (1.0 vs. 2.0) and 0 other locations (100.00%)\n\n</code></pre>\n<p>Great work thanks!</p>", "body_text": "This was actually addressed starting from #4726 with torch.testing which has some of this functionality, see here\nExample:\nIn [8]: x = torch.ones(1)\n\nIn [9]: y = x+1\n\nIn [10]: torch.testing.assert_allclose(x,y)\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n<ipython-input-10-3b698e9eddbf> in <module>()\n----> 1 torch.testing.assert_allclose(x,y)\n\n/usr/local/anaconda3/envs/pytorch/lib/python3.6/site-packages/torch/testing/__init__.py in assert_allclose(actual, expected, rtol, atol, equal_nan)\n     55     raise AssertionError(msg.format(\n     56         rtol, atol, list(index), actual[index].item(), expected[index].item(),\n---> 57         count - 1, 100 * count / actual.numel()))\n     58 \n     59 \n\nAssertionError: Not within tolerance rtol=0.0001 atol=1e-05 at input[0] (1.0 vs. 2.0) and 0 other locations (100.00%)\n\n\nGreat work thanks!", "body": "This was actually addressed starting from #4726 with `torch.testing` which has some of this functionality, see [here](https://github.com/pytorch/pytorch/blame/master/torch/testing/__init__.py)\r\n\r\nExample:\r\n\r\n```\r\nIn [8]: x = torch.ones(1)\r\n\r\nIn [9]: y = x+1\r\n\r\nIn [10]: torch.testing.assert_allclose(x,y)\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-10-3b698e9eddbf> in <module>()\r\n----> 1 torch.testing.assert_allclose(x,y)\r\n\r\n/usr/local/anaconda3/envs/pytorch/lib/python3.6/site-packages/torch/testing/__init__.py in assert_allclose(actual, expected, rtol, atol, equal_nan)\r\n     55     raise AssertionError(msg.format(\r\n     56         rtol, atol, list(index), actual[index].item(), expected[index].item(),\r\n---> 57         count - 1, 100 * count / actual.numel()))\r\n     58 \r\n     59 \r\n\r\nAssertionError: Not within tolerance rtol=0.0001 atol=1e-05 at input[0] (1.0 vs. 2.0) and 0 other locations (100.00%)\r\n\r\n````\r\nGreat work thanks!"}