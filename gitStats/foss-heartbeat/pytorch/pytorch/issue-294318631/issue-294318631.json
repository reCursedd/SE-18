{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5045", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5045/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5045/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5045/events", "html_url": "https://github.com/pytorch/pytorch/issues/5045", "id": 294318631, "node_id": "MDU6SXNzdWUyOTQzMTg2MzE=", "number": 5045, "title": " [feature request] Expose testing functions from `test.common`", "user": {"login": "ragulpr", "id": 10998266, "node_id": "MDQ6VXNlcjEwOTk4MjY2", "avatar_url": "https://avatars3.githubusercontent.com/u/10998266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ragulpr", "html_url": "https://github.com/ragulpr", "followers_url": "https://api.github.com/users/ragulpr/followers", "following_url": "https://api.github.com/users/ragulpr/following{/other_user}", "gists_url": "https://api.github.com/users/ragulpr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ragulpr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ragulpr/subscriptions", "organizations_url": "https://api.github.com/users/ragulpr/orgs", "repos_url": "https://api.github.com/users/ragulpr/repos", "events_url": "https://api.github.com/users/ragulpr/events{/privacy}", "received_events_url": "https://api.github.com/users/ragulpr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-05T09:08:53Z", "updated_at": "2018-09-14T00:18:31Z", "closed_at": "2018-09-14T00:18:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I find myself doing ugly hacks to write simple tests. This is an antipattern that slows down my development speed and code-quality significantly.</p>\n<p>Having readily access to tools as those in <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.testing.html\" rel=\"nofollow\"><code>numpy.testing</code></a> like <code>np.testing.assert_almost_equal</code> would solve this.</p>\n<p>It's already implemented in <code>test.common</code>, see for example <a href=\"https://github.com/pytorch/pytorch/blob/c65bd6660e1f9da92c331382ab73c1ca87820f3e/test/common.py#L251\"><code>almostEqual</code></a> but as I can't find it after <code>import torch</code> I can't use it in a simple way.</p>\n<p>Is it possible to move the testing tools from <code>test</code> to <code>torch</code>, or can I find them somewhere already? Only thing I can find is  <code>tensor_a.equal(tensor_b)</code></p>\n<p>A simple hotfix would be to just make it possible to import &amp; subclass <code>test.common.TestCase</code> as <code>torch.TestCase</code> directly. I would submit a PR but I'm not sure about how this would be done in least awkward way. Example usage</p>\n<pre><code>from torch import TestCase\ntesting = TestCase()\ntesting.assertAlmostEqual(torch.ones(1),torch.ones(1))\n</code></pre>\n<p>thanks</p>", "body_text": "I find myself doing ugly hacks to write simple tests. This is an antipattern that slows down my development speed and code-quality significantly.\nHaving readily access to tools as those in numpy.testing like np.testing.assert_almost_equal would solve this.\nIt's already implemented in test.common, see for example almostEqual but as I can't find it after import torch I can't use it in a simple way.\nIs it possible to move the testing tools from test to torch, or can I find them somewhere already? Only thing I can find is  tensor_a.equal(tensor_b)\nA simple hotfix would be to just make it possible to import & subclass test.common.TestCase as torch.TestCase directly. I would submit a PR but I'm not sure about how this would be done in least awkward way. Example usage\nfrom torch import TestCase\ntesting = TestCase()\ntesting.assertAlmostEqual(torch.ones(1),torch.ones(1))\n\nthanks", "body": "I find myself doing ugly hacks to write simple tests. This is an antipattern that slows down my development speed and code-quality significantly.\r\n\r\nHaving readily access to tools as those in [`numpy.testing`](https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.testing.html) like `np.testing.assert_almost_equal` would solve this.\r\n\r\nIt's already implemented in `test.common`, see for example [`almostEqual`](https://github.com/pytorch/pytorch/blob/c65bd6660e1f9da92c331382ab73c1ca87820f3e/test/common.py#L251) but as I can't find it after `import torch` I can't use it in a simple way.\r\n\r\nIs it possible to move the testing tools from `test` to `torch`, or can I find them somewhere already? Only thing I can find is  `tensor_a.equal(tensor_b)`\r\n\r\nA simple hotfix would be to just make it possible to import & subclass `test.common.TestCase` as `torch.TestCase` directly. I would submit a PR but I'm not sure about how this would be done in least awkward way. Example usage\r\n\r\n```\r\nfrom torch import TestCase\r\ntesting = TestCase()\r\ntesting.assertAlmostEqual(torch.ones(1),torch.ones(1))\r\n```\r\n\r\nthanks"}