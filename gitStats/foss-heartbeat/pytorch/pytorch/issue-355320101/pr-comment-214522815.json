{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214522815", "pull_request_review_id": 151603128, "id": 214522815, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUyMjgxNQ==", "diff_hunk": "@@ -0,0 +1,36 @@\n+#include \"torch/csrc/jit/passes/onnx/prepare_division_for_onnx.h\"\n+#include \"torch/csrc/jit/constants.h\"\n+\n+namespace torch { namespace jit {\n+\n+static void PrepareDivisionForONNXOnBlock(Block* block) {\n+  for (auto it = block->nodes().begin(); it != block->nodes().end(); ++it) {\n+    for (auto sub : it->blocks()) {\n+      PrepareDivisionForONNXOnBlock(sub);\n+    }\n+    WithInsertPoint guard(*it);\n+    auto* subgraph = it->owningGraph();\n+\n+    if (it->matches(\"aten::div(int a, int b) -> float\")) {\n+      // Use onnx::cast before dividing\n+      std::vector<Value*> floattensor_inputs = fmap(it->inputs(), [&](Value* input) {\n+        Value* longtensor = subgraph->insertNode(subgraph->createNumToTensor(input))->output();\n+        // FLOAT = 1\n+        // https://github.com/onnx/onnx/blob/6bedd27b0307c9295039bd847895a27275160a98/onnx/onnx.in.proto#L282\n+        Node* cast = subgraph->create(onnx::Cast, {longtensor})->i_(attr::to, 1);", "path": "torch/csrc/jit/passes/onnx/prepare_division_for_onnx.cpp", "position": null, "original_position": 20, "commit_id": "ac3a92975152f3768c9120ea813760b18e763d65", "original_commit_id": "666eecf19e03183a2060e3982cf7da630560654d", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "re: zach's comment below, make this emit an `aten::_cast_Float` operator. Then the ONNX pass later can correctly translate this based on which mode it's in (i.e. raw mode will pass that through, but ONNX mode will call the symbolic and insert what you have now)", "created_at": "2018-09-01T20:50:05Z", "updated_at": "2018-11-23T15:50:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/11016#discussion_r214522815", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11016", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214522815"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11016#discussion_r214522815"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11016"}}, "body_html": "<p>re: zach's comment below, make this emit an <code>aten::_cast_Float</code> operator. Then the ONNX pass later can correctly translate this based on which mode it's in (i.e. raw mode will pass that through, but ONNX mode will call the symbolic and insert what you have now)</p>", "body_text": "re: zach's comment below, make this emit an aten::_cast_Float operator. Then the ONNX pass later can correctly translate this based on which mode it's in (i.e. raw mode will pass that through, but ONNX mode will call the symbolic and insert what you have now)"}