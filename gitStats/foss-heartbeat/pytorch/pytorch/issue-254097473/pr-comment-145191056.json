{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145191056", "pull_request_review_id": 69930458, "id": 145191056, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTE5MTA1Ng==", "diff_hunk": "@@ -0,0 +1,201 @@\n+#ifndef THC_GENERIC_FILE\n+#define THC_GENERIC_FILE \"generic/Im2Col.cu\"\n+#else\n+\n+static inline void THNN_(Im2Col_shapeCheck)(\n+                         THCState *state,\n+                         THCTensor *input,\n+                         THCTensor *gradOutput,\n+                         int kH, int kW, int dH, int dW,\n+                         int padH, int padW, int sH, int sW) {\n+\n+  THArgCheck(kW > 0 && kH > 0, 9,\n+             \"kernel size should be greater than zero, but got kH: %d kW: %d\", kH, kW);\n+  THArgCheck(sW > 0 && sH > 0, 11,\n+             \"stride should be greater than zero, but got sH: %d sW: %d\", sH, sW);\n+  THArgCheck(dW > 0 && dH > 0, 11,\n+             \"dilation should be greater than zero, but got dH: %d dW: %d\", dH, dW);\n+\n+  int ndim = input->nDimension;\n+  int dimf = 0;\n+  int dimh = 1;\n+  int dimw = 2;\n+\n+  if (ndim == 4) {\n+      dimf++;\n+      dimh++;\n+      dimw++;\n+  }\n+\n+  THCUNN_argCheck(state, ndim == 3 || ndim == 4, 2, input,\n+                  \"3D or 4D input tensor expected but got: %s\");\n+\n+  long nInputPlane  = input->size[dimf];\n+  long inputHeight  = input->size[dimh];\n+  long inputWidth   = input->size[dimw];\n+\n+  long outputHeight = (inputHeight + 2*padH - (dH * (kH - 1)) + 1) / sH + 1;\n+  long outputWidth  = (inputWidth + 2*padW - (dW * (kW - 1)) + 1) / sW + 1;\n+  long nOutputPlane = nInputPlane * kW * kH;\n+  long outputLength = outputHeight * outputWidth;\n+\n+  if (outputWidth < 1 || outputHeight < 1)\n+      THError(\"Given input size: (%d x %d x %d). \"\n+              \"Calculated output size: (%d x %d). Output size is too small\",\n+              nInputPlane,inputHeight,inputWidth,nOutputPlane,outputLength);\n+\n+  THCUNN_check_dim_size(state, input, ndim, dimf, nInputPlane);\n+\n+  if (gradOutput != NULL) {\n+    THCUNN_check_dim_size(state, gradOutput, 3, dimf, nOutputPlane);\n+    THCUNN_check_dim_size(state, gradOutput, 3, dimh, outputLength);\n+  }\n+}\n+\n+void THNN_(Im2Col_updateOutput)(\n+           THCState *state,\n+           THCTensor *input,\n+           THCTensor *output,\n+           int kH, int kW,\n+           int dH, int dW,\n+           int padH, int padW,\n+           int sH, int sW) {\n+\n+  THCUNN_assertSameGPU(state, 2, input, output);\n+\n+  THNN_(Im2Col_shapeCheck)\n+       (state, input, NULL, kH, kW, dH, dW, padH, padW, sH, sW);\n+\n+  input = THCTensor_(newContiguous)(state, input);\n+  int batch = 1;\n+  if (input->nDimension == 3) {\n+      // Force batch\n+      batch = 0;\n+      THCTensor_(resize4d)(state, input, 1, input->size[0], input->size[1], input->size[2]);\n+  }\n+\n+  // Batch_size + input planes\n+  long batchSize = input->size[0];\n+\n+  // Params:\n+  long nInputPlane = input->size[1];\n+  long inputHeight  = input->size[2];\n+  long inputWidth   = input->size[3];\n+\n+  long outputHeight = (inputHeight + 2*padH - (dH * (kH - 1)) + 1) / sH + 1;\n+  long outputWidth  = (inputWidth + 2*padW - (dW * (kW - 1)) + 1) / sW + 1;\n+  long nOutputPlane = nInputPlane * kW * kH;\n+  long outputLength = outputHeight*outputWidth;", "path": "torch/lib/THCUNN/generic/Im2Col.cu", "position": null, "original_position": 88, "commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "original_commit_id": "3151928d2a2e38f67892dcb47323738c6a4d5ca7", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "nit: leave space before and after * operator", "created_at": "2017-10-17T16:58:28Z", "updated_at": "2018-11-23T15:35:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/2580#discussion_r145191056", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2580", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145191056"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2580#discussion_r145191056"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2580"}}, "body_html": "<p>nit: leave space before and after * operator</p>", "body_text": "nit: leave space before and after * operator"}