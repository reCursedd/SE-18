{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162452092", "pull_request_review_id": 89911852, "id": 162452092, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1MjA5Mg==", "diff_hunk": "@@ -0,0 +1,164 @@\n+#ifndef TH_GENERIC_FILE\n+#define TH_GENERIC_FILE \"generic/Col2Im.c\"\n+#else\n+\n+static void THNN_(im2col)(const real* data_im, const int channels,\n+      const int height, const int width, const int kernel_h, const int kernel_w,\n+      const int pad_h, const int pad_w,\n+      const int stride_h, const int stride_w,\n+      const int dilation_h, const int dilation_w,\n+      real* data_col) {\n+  const int height_col = (height + 2 * pad_h -\n+                          (dilation_h * (kernel_h - 1) + 1)) / stride_h + 1;\n+  const int width_col = (width + 2 * pad_w -\n+                         (dilation_w * (kernel_w - 1) + 1)) / stride_w + 1;\n+  const int channels_col = channels * kernel_h * kernel_w;\n+  for (int c_col = 0; c_col < channels_col; ++c_col) {\n+    int w_offset = c_col % kernel_w;\n+    int h_offset = (c_col / kernel_w) % kernel_h;\n+    int c_im = c_col / kernel_h / kernel_w;\n+    for (int h_col = 0; h_col < height_col; ++h_col) {\n+      for (int w_col = 0; w_col < width_col; ++w_col) {\n+        int h_im = h_col * stride_h - pad_h + h_offset * dilation_h;\n+        int w_im = w_col * stride_w - pad_w + w_offset * dilation_w;\n+        data_col[(c_col * height_col + h_col) * width_col + w_col] =\n+          (h_im >= 0 && w_im >= 0 && h_im < height && w_im < width) ?\n+          data_im[(c_im * height + h_im) * width + w_im] : 0;\n+      }\n+    }\n+  }\n+}\n+\n+static void THNN_(col2im)(const real* data_col, const int channels,\n+      const int height, const int width,\n+      const int output_height, const int output_width,\n+      const int kernel_h, const int kernel_w,\n+      const int pad_h, const int pad_w,\n+      const int stride_h, const int stride_w,\n+      const int dilation_h, const int dilation_w,\n+      real* data_im) {\n+  memset(data_im, 0, sizeof(real) * height * width * channels);\n+  const int height_col = output_height;\n+  const int width_col = output_width;\n+  const int channels_col = channels * kernel_h * kernel_w;\n+  for (int c_col = 0; c_col < channels_col; ++c_col) {\n+    int w_offset = c_col % kernel_w;\n+    int h_offset = (c_col / kernel_w) % kernel_h;\n+    int c_im = c_col / kernel_h / kernel_w;\n+    for (int h_col = 0; h_col < height_col; ++h_col) {\n+      for (int w_col = 0; w_col < width_col; ++w_col) {\n+        int h_im = h_col * stride_h - pad_h + h_offset * dilation_h;\n+        int w_im = w_col * stride_w - pad_w + w_offset * dilation_w;\n+        if (h_im >= 0 && h_im < height && w_im >= 0 && w_im < width)\n+          data_im[(c_im * height + h_im) * width + w_im] +=\n+            data_col[(c_col * height_col + h_col) * width_col + w_col];\n+      }\n+    }\n+  }\n+}\n+\n+static inline void THNN_(Col2Im_shapeCheck)(\n+                         THNNState *state,\n+                         THTensor *input,\n+                         THTensor *gradOutput,\n+                         int outputHeight, int outputWidth,\n+                         int kH, int kW, int dH, int dW,\n+                         int padH, int padW, int sH, int sW) {\n+\n+  THArgCheck(kW > 0 && kH > 0, 6,\n+             \"kernel size should be greater than zero, but got kH: %d kW: %d\", kH, kW);\n+  THArgCheck(sW > 0 && sH > 0, 12,\n+             \"stride should be greater than zero, but got sH: %d sW: %d\", sH, sW);\n+  THArgCheck(dW > 0 && dH > 0, 8,\n+             \"dilation should be greater than zero, but got dH: %d dW: %d\", dH, dW);\n+\n+  int ndim = THTensor_(nDimension)(input);\n+  THNN_ARGCHECK(ndim == 2 || ndim == 3, 2, input,\n+                \"2D or 3D input tensor expected but got %s\");\n+\n+  int batch_dim = (ndim == 4) ? 0 : -1;\n+  long nInputPlane  = input->size[batch_dim + 1];\n+  long inputLength  = input->size[batch_dim + 2];\n+\n+  long nOutputPlane = nInputPlane / (kW * kH);\n+\n+  if (outputWidth < 1 || outputHeight < 1) {\n+    THError(\"Given input size: (%d x %d). \"\n+            \"Calculated output size: (%d x %d x %d). Output size is too small\",\n+            nInputPlane, inputLength, nOutputPlane, outputHeight, outputWidth);", "path": "aten/src/THNN/generic/Col2Im.c", "position": 88, "original_position": 88, "commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "original_commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Same as above.", "created_at": "2018-01-18T19:55:57Z", "updated_at": "2018-11-23T15:38:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/2580#discussion_r162452092", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2580", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162452092"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2580#discussion_r162452092"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2580"}}, "body_html": "<p>Same as above.</p>", "body_text": "Same as above."}