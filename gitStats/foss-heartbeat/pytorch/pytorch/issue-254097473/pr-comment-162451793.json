{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162451793", "pull_request_review_id": 89911852, "id": 162451793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1MTc5Mw==", "diff_hunk": "@@ -0,0 +1,113 @@\n+#ifndef THC_GENERIC_FILE\n+#define THC_GENERIC_FILE \"generic/Col2Im.cu\"\n+#else\n+\n+static inline void THNN_(Col2Im_shapeCheck)(\n+                         THCState *state,\n+                         THCTensor *input,\n+                         THCTensor *gradOutput,\n+                         int outputHeight, int outputWidth,\n+                         int kH, int kW, int dH, int dW,\n+                         int padH, int padW, int sH, int sW) {\n+\n+  THArgCheck(kW > 0 && kH > 0, 6,\n+             \"kernel size should be greater than zero, but got kH: %d kW: %d\", kH, kW);\n+  THArgCheck(sW > 0 && sH > 0, 12,\n+             \"stride should be greater than zero, but got sH: %d sW: %d\", sH, sW);\n+  THArgCheck(dW > 0 && dH > 0, 8,\n+             \"dilation should be greater than zero, but got dH: %d dW: %d\", dH, dW);\n+\n+  int ndim = THCTensor_(nDimension)(state, input);\n+  THCUNN_argCheck(state, ndim == 2 || ndim == 3, 2, input,\n+                  \"2D or 3D input tensor expected but got %s\");\n+\n+  int batch_dim = (ndim == 4) ? 0 : -1;\n+  long nInputPlane  = input->size[batch_dim + 1];\n+  long inputLength  = input->size[batch_dim + 2];\n+\n+  long nOutputPlane = nInputPlane / (kW * kH);\n+\n+  if (outputWidth < 1 || outputHeight < 1) {\n+    THError(\"Given input size: (%d x %d). \"\n+            \"Calculated output size: (%d x %d x %d). Output size is too small\",\n+            nInputPlane, inputLength, nOutputPlane, outputHeight, outputWidth);", "path": "aten/src/THCUNN/generic/Col2Im.cu", "position": 33, "original_position": 33, "commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "original_commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Some of these arguments are `long`. On a 64-bit machine (we only support pytorch for 64-bit), `long` is 64-bit, so the descriptor `%d` doesn't fit those.\r\n\r\nYou can use `%lld` and cast things like `nOutputPlane` to `(long long)nOutputPlane` to get that to work.", "created_at": "2018-01-18T19:54:47Z", "updated_at": "2018-11-23T15:38:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/2580#discussion_r162451793", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2580", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162451793"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2580#discussion_r162451793"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2580"}}, "body_html": "<p>Some of these arguments are <code>long</code>. On a 64-bit machine (we only support pytorch for 64-bit), <code>long</code> is 64-bit, so the descriptor <code>%d</code> doesn't fit those.</p>\n<p>You can use <code>%lld</code> and cast things like <code>nOutputPlane</code> to <code>(long long)nOutputPlane</code> to get that to work.</p>", "body_text": "Some of these arguments are long. On a 64-bit machine (we only support pytorch for 64-bit), long is 64-bit, so the descriptor %d doesn't fit those.\nYou can use %lld and cast things like nOutputPlane to (long long)nOutputPlane to get that to work."}