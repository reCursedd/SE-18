{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148913716", "pull_request_review_id": 74236661, "id": 148913716, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkxMzcxNg==", "diff_hunk": "@@ -0,0 +1,165 @@\n+#ifndef TH_GENERIC_FILE\n+#define TH_GENERIC_FILE \"generic/Col2Im.c\"\n+#else\n+\n+static void THNN_(im2col)(const real* data_im, const int channels,\n+      const int height, const int width, const int kernel_h, const int kernel_w,\n+      const int pad_h, const int pad_w,\n+      const int stride_h, const int stride_w,\n+      const int dilation_h, const int dilation_w,\n+      real* data_col) {\n+  const int height_col = (height + 2 * pad_h -\n+                          (dilation_h * (kernel_h - 1) + 1)) / stride_h + 1;\n+  const int width_col = (width + 2 * pad_w -\n+                         (dilation_w * (kernel_w - 1) + 1)) / stride_w + 1;\n+  const int channels_col = channels * kernel_h * kernel_w;\n+  for (int c_col = 0; c_col < channels_col; ++c_col) {\n+    int w_offset = c_col % kernel_w;\n+    int h_offset = (c_col / kernel_w) % kernel_h;\n+    int c_im = c_col / kernel_h / kernel_w;\n+    for (int h_col = 0; h_col < height_col; ++h_col) {\n+      for (int w_col = 0; w_col < width_col; ++w_col) {\n+        int h_im = h_col * stride_h - pad_h + h_offset * dilation_h;\n+        int w_im = w_col * stride_w - pad_w + w_offset * dilation_w;\n+        data_col[(c_col * height_col + h_col) * width_col + w_col] =\n+          (h_im >= 0 && w_im >= 0 && h_im < height && w_im < width) ?\n+          data_im[(c_im * height + h_im) * width + w_im] : 0;\n+      }\n+    }\n+  }\n+}\n+\n+static void THNN_(col2im)(const real* data_col, const int channels,\n+      const int height, const int width,\n+      const int output_height, const int output_width,\n+      const int kernel_h, const int kernel_w,\n+      const int pad_h, const int pad_w,\n+      const int stride_h, const int stride_w,\n+      const int dilation_h, const int dilation_w,\n+      real* data_im) {\n+  memset(data_im, 0, sizeof(real) * height * width * channels);\n+  const int height_col = output_height;\n+  const int width_col = output_width;\n+  const int channels_col = channels * kernel_h * kernel_w;\n+  for (int c_col = 0; c_col < channels_col; ++c_col) {\n+    int w_offset = c_col % kernel_w;\n+    int h_offset = (c_col / kernel_w) % kernel_h;\n+    int c_im = c_col / kernel_h / kernel_w;\n+    for (int h_col = 0; h_col < height_col; ++h_col) {\n+      for (int w_col = 0; w_col < width_col; ++w_col) {\n+        int h_im = h_col * stride_h - pad_h + h_offset * dilation_h;\n+        int w_im = w_col * stride_w - pad_w + w_offset * dilation_w;\n+        if (h_im >= 0 && h_im < height && w_im >= 0 && w_im < width)\n+          data_im[(c_im * height + h_im) * width + w_im] +=\n+            data_col[(c_col * height_col + h_col) * width_col + w_col];\n+      }\n+    }\n+  }\n+}\n+\n+static inline void THNN_(Col2Im_shapeCheck)(\n+                         THNNState *state,\n+                         THTensor *input,\n+                         THTensor *gradOutput,\n+                         int outputHeight, int outputWidth,\n+                         int kH, int kW, int dH, int dW,\n+                         int padH, int padW, int sH, int sW) {\n+\n+  THArgCheck(kW > 0 && kH > 0, 6,", "path": "aten/src/THNN/generic/Col2Im.c", "position": 68, "original_position": 68, "commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "original_commit_id": "87b291aaa5ed196e6dc1c45a37a54571f4ae08c9", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "Same comment as above", "created_at": "2017-11-03T23:42:07Z", "updated_at": "2018-11-23T15:35:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/2580#discussion_r148913716", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2580", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148913716"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2580#discussion_r148913716"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2580"}}, "body_html": "<p>Same comment as above</p>", "body_text": "Same comment as above"}