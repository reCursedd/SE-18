{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/136167204", "pull_request_review_id": 59667912, "id": 136167204, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjE2NzIwNA==", "diff_hunk": "@@ -0,0 +1,79 @@\n+import torch\n+from torch.autograd import Variable\n+\n+from .module import Module\n+from .utils import _single, _pair, _triple\n+from .. import functional as F\n+\n+\n+class Im2Col(Module):\n+    \"\"\"\n+    Rearranges image blocks into columns.\n+\n+    Converts each sliding :math:`(kH, kW)` block of the input into a column of\n+    the output with no zero padding.  The output has :math:`kH x kW` rows and\n+    contains as many columns as there are :math:`(kH, kW)` neighborhoods of the\n+    input according to the stride values :math:`(sH, sW)`.\n+\n+    | If :attr:`padH` and :attr:`padW` are non-zero, then the input is implicitly\n+    zero-padded on both sides by :attr:`padW` number of points and on the top\n+    and bottom by :attr:`padH` number of points\n+    | :attr:`dH` and :attr: `dW` controls the spacing between the kernel points.\n+    It is harder to describe, but this `link`_ has a nice visualization of what\n+    dilation does.\n+\n+    Args:\n+        kH: the height of the neighborhoods to convert\n+        kW: the width of the neighborhoods to convert\n+        sH: the vertical stride of the sliding neighborhood\n+        sW: the horizontal stride of the sliding neighborhood\n+        padH: implicit zero padding to be added on both sides of input\n+        padW: implicit zero padding to be added to the top and bottom of input\n+        dH: a parameter that controls the vertical stride of elements in the\n+            neighborhood\n+        dH: a parameter that controls the horizontal stride of elements in the\n+            neighborhood\n+\n+    Shape:\n+        - Input: :math:`(C, H_{in}, W_{in})`\n+        - Output: :math:`(C * kH * kW, H_{out} * W_{out},)` where\n+          :math:`H_{out} = floor((H_{in} + 2 * padH - dH * (kH - 1) - 1) / sH + 1)\n+          :math:`W_{out} = floor((W_{in} + 2 * padW - dW * (kW - 1) - 1) / sW + 1)\n+\n+    Examples::\n+\n+        >>> # kernel size (2, 2), dilation (1, 1), padding (0, 0), stride (1, 1)\n+        >>> im2col = nn.Im2Col(2, 2, 1, 1, 0, 0, 1, 1)\n+        >>> input = autograd.Variable(torch.randn(1, 256, 256))\n+        >>> output = im2col(input)\n+\n+    .. _link:\n+        https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md\n+    \"\"\"\n+\n+    def __init__(self, kH, kW, dH, dW, padH, padW, sH, sW):", "path": "torch/nn/modules/im2col.py", "position": null, "original_position": 54, "commit_id": "529d931a13ffc07d57b0da544adf5eef96a501d8", "original_commit_id": "ed245b02214199ae58ccfdcae2566d9ee2c6e213", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Same comments as in `functional.py`", "created_at": "2017-08-30T19:30:20Z", "updated_at": "2018-11-23T15:34:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/2580#discussion_r136167204", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2580", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/136167204"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2580#discussion_r136167204"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2580"}}, "body_html": "<p>Same comments as in <code>functional.py</code></p>", "body_text": "Same comments as in functional.py"}