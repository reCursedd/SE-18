{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115164699", "pull_request_review_id": 36683717, "id": 115164699, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTE2NDY5OQ==", "diff_hunk": "@@ -92,7 +92,7 @@ __global__ void THCudaTensor_gatherKernel(\n                                                           tensor, &tensorOffset,\n                                                           src, &srcOffset);\n \n-    IndexType indexValue = (IndexType)index.data[indexOffset] - TH_INDEX_BASE;\n+    long indexValue = index.data[indexOffset] - TH_INDEX_BASE;", "path": "torch/lib/THC/THCTensorScatterGather.cu", "position": 5, "original_position": 5, "commit_id": "7cb4849be04ab5de5cb48462379572e50de66011", "original_commit_id": "7cb4849be04ab5de5cb48462379572e50de66011", "user": {"login": "killeent", "id": 4529377, "node_id": "MDQ6VXNlcjQ1MjkzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4529377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killeent", "html_url": "https://github.com/killeent", "followers_url": "https://api.github.com/users/killeent/followers", "following_url": "https://api.github.com/users/killeent/following{/other_user}", "gists_url": "https://api.github.com/users/killeent/gists{/gist_id}", "starred_url": "https://api.github.com/users/killeent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killeent/subscriptions", "organizations_url": "https://api.github.com/users/killeent/orgs", "repos_url": "https://api.github.com/users/killeent/repos", "events_url": "https://api.github.com/users/killeent/events{/privacy}", "received_events_url": "https://api.github.com/users/killeent/received_events", "type": "User", "site_admin": false}, "body": "Hmm how about this:\r\n\r\n```\r\nassert(index.data[indexOffset] >= TH_INDEX_BASE)\r\nIndexType indexValue = index.data[indexOffset] - TH_INDEX_BASE;\r\nassert(index.data < tensor.sizes[dim]);\r\n...\r\n```\r\n\r\nBecause the index is guaranteed to fit in IndexType, and we can assert non-negative before storing? I'm not 100% sure how this would work in terms of the code it would generate.", "created_at": "2017-05-08T02:24:46Z", "updated_at": "2018-11-23T15:33:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/1469#discussion_r115164699", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1469", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115164699"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1469#discussion_r115164699"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1469"}}, "body_html": "<p>Hmm how about this:</p>\n<pre><code>assert(index.data[indexOffset] &gt;= TH_INDEX_BASE)\nIndexType indexValue = index.data[indexOffset] - TH_INDEX_BASE;\nassert(index.data &lt; tensor.sizes[dim]);\n...\n</code></pre>\n<p>Because the index is guaranteed to fit in IndexType, and we can assert non-negative before storing? I'm not 100% sure how this would work in terms of the code it would generate.</p>", "body_text": "Hmm how about this:\nassert(index.data[indexOffset] >= TH_INDEX_BASE)\nIndexType indexValue = index.data[indexOffset] - TH_INDEX_BASE;\nassert(index.data < tensor.sizes[dim]);\n...\n\nBecause the index is guaranteed to fit in IndexType, and we can assert non-negative before storing? I'm not 100% sure how this would work in terms of the code it would generate.", "in_reply_to_id": 114780873}