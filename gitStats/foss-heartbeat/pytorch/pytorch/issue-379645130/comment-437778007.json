{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/437778007", "html_url": "https://github.com/pytorch/pytorch/issues/13833#issuecomment-437778007", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13833", "id": 437778007, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzc3ODAwNw==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-12T07:05:47Z", "updated_at": "2018-11-12T07:05:47Z", "author_association": "MEMBER", "body_html": "<p>I'm also surprised that</p>\n<pre><code>for (auto output : outputs) {\n    graph-&gt;registerOutput(output);\n  }\n</code></pre>\n<p>creates a</p>\n<pre><code>%9 : Tuple = prim::TupleConstruct(%6, %7, %8)\n  return (%9);\n</code></pre>\n<p>instead of:</p>\n<pre><code>return (%6, %7, %8)\n</code></pre>\n<p>Because the following Python snippet that returns 2 outputs doesn't have a <code>TupleConstruct</code>:</p>\n<pre><code>import torch\n\ndef foo(x):\n    y, z = torch.nn.functional.max_pool2d(x, 2, return_indices=True)\n   return y, z\n\ng = torch.jit.trace(foo, (torch.randn(1, 1, 4, 4),))\n\nprint(g.graph)\n</code></pre>\n<p>Output:</p>\n<pre><code>graph(%0 : Float(1, 1, 4, 4)) {\n  %1 : int = prim::Constant[value=2]()\n  %2 : int = prim::Constant[value=2]()\n  %3 : int[] = prim::ListConstruct(%1, %2)\n  %4 : int[] = prim::ListConstruct()\n  %5 : int = prim::Constant[value=0]()\n  %6 : int = prim::Constant[value=0]()\n  %7 : int[] = prim::ListConstruct(%5, %6)\n  %8 : int = prim::Constant[value=1]()\n  %9 : int = prim::Constant[value=1]()\n  %10 : int[] = prim::ListConstruct(%8, %9)\n  %11 : bool = prim::Constant[value=0]()\n  %12 : Float(1, 1, 2, 2), %13 : Long(1, 1, 2, 2) = aten::max_pool2d_with_indices(%0, %3, %4, %7, %10, %11)\n  return (%12, %13);\n}\n</code></pre>", "body_text": "I'm also surprised that\nfor (auto output : outputs) {\n    graph->registerOutput(output);\n  }\n\ncreates a\n%9 : Tuple = prim::TupleConstruct(%6, %7, %8)\n  return (%9);\n\ninstead of:\nreturn (%6, %7, %8)\n\nBecause the following Python snippet that returns 2 outputs doesn't have a TupleConstruct:\nimport torch\n\ndef foo(x):\n    y, z = torch.nn.functional.max_pool2d(x, 2, return_indices=True)\n   return y, z\n\ng = torch.jit.trace(foo, (torch.randn(1, 1, 4, 4),))\n\nprint(g.graph)\n\nOutput:\ngraph(%0 : Float(1, 1, 4, 4)) {\n  %1 : int = prim::Constant[value=2]()\n  %2 : int = prim::Constant[value=2]()\n  %3 : int[] = prim::ListConstruct(%1, %2)\n  %4 : int[] = prim::ListConstruct()\n  %5 : int = prim::Constant[value=0]()\n  %6 : int = prim::Constant[value=0]()\n  %7 : int[] = prim::ListConstruct(%5, %6)\n  %8 : int = prim::Constant[value=1]()\n  %9 : int = prim::Constant[value=1]()\n  %10 : int[] = prim::ListConstruct(%8, %9)\n  %11 : bool = prim::Constant[value=0]()\n  %12 : Float(1, 1, 2, 2), %13 : Long(1, 1, 2, 2) = aten::max_pool2d_with_indices(%0, %3, %4, %7, %10, %11)\n  return (%12, %13);\n}", "body": "I'm also surprised that\r\n\r\n```\r\nfor (auto output : outputs) {\r\n    graph->registerOutput(output);\r\n  }\r\n```\r\n\r\ncreates a\r\n\r\n```\r\n%9 : Tuple = prim::TupleConstruct(%6, %7, %8)\r\n  return (%9);\r\n```\r\n\r\ninstead of:\r\n\r\n```\r\nreturn (%6, %7, %8)\r\n```\r\n\r\n\r\nBecause the following Python snippet that returns 2 outputs doesn't have a `TupleConstruct`:\r\n\r\n```\r\nimport torch\r\n\r\ndef foo(x):\r\n    y, z = torch.nn.functional.max_pool2d(x, 2, return_indices=True)\r\n   return y, z\r\n\r\ng = torch.jit.trace(foo, (torch.randn(1, 1, 4, 4),))\r\n\r\nprint(g.graph)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\ngraph(%0 : Float(1, 1, 4, 4)) {\r\n  %1 : int = prim::Constant[value=2]()\r\n  %2 : int = prim::Constant[value=2]()\r\n  %3 : int[] = prim::ListConstruct(%1, %2)\r\n  %4 : int[] = prim::ListConstruct()\r\n  %5 : int = prim::Constant[value=0]()\r\n  %6 : int = prim::Constant[value=0]()\r\n  %7 : int[] = prim::ListConstruct(%5, %6)\r\n  %8 : int = prim::Constant[value=1]()\r\n  %9 : int = prim::Constant[value=1]()\r\n  %10 : int[] = prim::ListConstruct(%8, %9)\r\n  %11 : bool = prim::Constant[value=0]()\r\n  %12 : Float(1, 1, 2, 2), %13 : Long(1, 1, 2, 2) = aten::max_pool2d_with_indices(%0, %3, %4, %7, %10, %11)\r\n  return (%12, %13);\r\n}\r\n```"}