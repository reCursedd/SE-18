{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370370519", "html_url": "https://github.com/pytorch/pytorch/pull/4640#issuecomment-370370519", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4640", "id": 370370519, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDM3MDUxOQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-05T10:08:36Z", "updated_at": "2018-03-05T10:08:36Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=238488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/grafi-tt\">@grafi-tt</a> oh I see. This makes sense but is still not ideal:</p>\n<ul>\n<li>you still need a bunch of synchronization, and everyone needs to lock the shared memory and put their random state in it, while everyone else is just waiting (this is a fairly expensive memcpy)</li>\n<li>you really want to make the random sequences in different workers to seem independent of each other. If I understand correctly you will can end up with this behavior with two workers:\n<ul>\n<li>worker 1 starts, reads state 0</li>\n<li>worker 2 starts, reads state 0</li>\n<li>both workers do some work and sample e.g. twice. since both started from the same random state, they both end up in state 1</li>\n<li>worker 1 finishes, saves state 1</li>\n<li>worker 2 finishes, saves state 1</li>\n<li>then the process repeats, and the sampling results are identical in both workers.</li>\n</ul>\n</li>\n</ul>", "body_text": "@grafi-tt oh I see. This makes sense but is still not ideal:\n\nyou still need a bunch of synchronization, and everyone needs to lock the shared memory and put their random state in it, while everyone else is just waiting (this is a fairly expensive memcpy)\nyou really want to make the random sequences in different workers to seem independent of each other. If I understand correctly you will can end up with this behavior with two workers:\n\nworker 1 starts, reads state 0\nworker 2 starts, reads state 0\nboth workers do some work and sample e.g. twice. since both started from the same random state, they both end up in state 1\nworker 1 finishes, saves state 1\nworker 2 finishes, saves state 1\nthen the process repeats, and the sampling results are identical in both workers.", "body": "@grafi-tt oh I see. This makes sense but is still not ideal:\r\n- you still need a bunch of synchronization, and everyone needs to lock the shared memory and put their random state in it, while everyone else is just waiting (this is a fairly expensive memcpy)\r\n- you really want to make the random sequences in different workers to seem independent of each other. If I understand correctly you will can end up with this behavior with two workers:\r\n    - worker 1 starts, reads state 0\r\n    - worker 2 starts, reads state 0\r\n    - both workers do some work and sample e.g. twice. since both started from the same random state, they both end up in state 1\r\n    - worker 1 finishes, saves state 1\r\n    - worker 2 finishes, saves state 1\r\n    - then the process repeats, and the sampling results are identical in both workers."}