{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396459121", "html_url": "https://github.com/pytorch/pytorch/pull/4640#issuecomment-396459121", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4640", "id": 396459121, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjQ1OTEyMQ==", "user": {"login": "bombs-kim", "id": 11001573, "node_id": "MDQ6VXNlcjExMDAxNTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/11001573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bombs-kim", "html_url": "https://github.com/bombs-kim", "followers_url": "https://api.github.com/users/bombs-kim/followers", "following_url": "https://api.github.com/users/bombs-kim/following{/other_user}", "gists_url": "https://api.github.com/users/bombs-kim/gists{/gist_id}", "starred_url": "https://api.github.com/users/bombs-kim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bombs-kim/subscriptions", "organizations_url": "https://api.github.com/users/bombs-kim/orgs", "repos_url": "https://api.github.com/users/bombs-kim/repos", "events_url": "https://api.github.com/users/bombs-kim/events{/privacy}", "received_events_url": "https://api.github.com/users/bombs-kim/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-12T04:04:28Z", "updated_at": "2018-06-12T04:17:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17885281\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AlexanderRadionov\">@AlexanderRadionov</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I agree that having reproducible results is very important, but that doesn't mean that you have to synchronize workers in the dataloader. Multiprocessing are working non-deterministically in nature and if you try to have some unnatural synchronization there must be some performance trade-off whether it's trivial or not. Also the synchronization makes the code more complicated and harder to maintain.</p>\n<p>I think what you really need is a deterministic dataset, rather than a deterministic data loader.</p>\n<pre><code>set_seed(GLOBAL_SEED)\n\nclass SomeDataset(Datset):\n    def __init__(self, data):\n        self.data = data\n        self.random_numbers = make_random_numbers_in_advance(len(self.data))\n\n    def __getitem__(self, idx):\n        random_number = self.random_numbers[idx]\n        # do some works with random_number and self.data[idx]\n        return processed_item\n</code></pre>", "body_text": "@AlexanderRadionov @SsnL @apaszke I agree that having reproducible results is very important, but that doesn't mean that you have to synchronize workers in the dataloader. Multiprocessing are working non-deterministically in nature and if you try to have some unnatural synchronization there must be some performance trade-off whether it's trivial or not. Also the synchronization makes the code more complicated and harder to maintain.\nI think what you really need is a deterministic dataset, rather than a deterministic data loader.\nset_seed(GLOBAL_SEED)\n\nclass SomeDataset(Datset):\n    def __init__(self, data):\n        self.data = data\n        self.random_numbers = make_random_numbers_in_advance(len(self.data))\n\n    def __getitem__(self, idx):\n        random_number = self.random_numbers[idx]\n        # do some works with random_number and self.data[idx]\n        return processed_item", "body": "@AlexanderRadionov @SsnL @apaszke I agree that having reproducible results is very important, but that doesn't mean that you have to synchronize workers in the dataloader. Multiprocessing are working non-deterministically in nature and if you try to have some unnatural synchronization there must be some performance trade-off whether it's trivial or not. Also the synchronization makes the code more complicated and harder to maintain.\r\n\r\nI think what you really need is a deterministic dataset, rather than a deterministic data loader.\r\n\r\n```\r\nset_seed(GLOBAL_SEED)\r\n\r\nclass SomeDataset(Datset):\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.random_numbers = make_random_numbers_in_advance(len(self.data))\r\n\r\n    def __getitem__(self, idx):\r\n        random_number = self.random_numbers[idx]\r\n        # do some works with random_number and self.data[idx]\r\n        return processed_item\r\n```"}