{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/370288613", "html_url": "https://github.com/pytorch/pytorch/pull/4640#issuecomment-370288613", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4640", "id": 370288613, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDI4ODYxMw==", "user": {"login": "grafi-tt", "id": 238488, "node_id": "MDQ6VXNlcjIzODQ4OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/238488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grafi-tt", "html_url": "https://github.com/grafi-tt", "followers_url": "https://api.github.com/users/grafi-tt/followers", "following_url": "https://api.github.com/users/grafi-tt/following{/other_user}", "gists_url": "https://api.github.com/users/grafi-tt/gists{/gist_id}", "starred_url": "https://api.github.com/users/grafi-tt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grafi-tt/subscriptions", "organizations_url": "https://api.github.com/users/grafi-tt/orgs", "repos_url": "https://api.github.com/users/grafi-tt/repos", "events_url": "https://api.github.com/users/grafi-tt/events{/privacy}", "received_events_url": "https://api.github.com/users/grafi-tt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-05T01:57:34Z", "updated_at": "2018-03-05T01:57:34Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> It's simple: cache the state. When a worker process is resumed, a PRNG state is deserialized from shared memory (by e.g. <code>numpy.RandomState.set_state()</code>). When the worker process yields a result, the PRNG state is serialized to shared memory (by e.g. <code>numpy.RandomState.get_state()</code>). During the worker is running, there is no overhead.</p>", "body_text": "@apaszke It's simple: cache the state. When a worker process is resumed, a PRNG state is deserialized from shared memory (by e.g. numpy.RandomState.set_state()). When the worker process yields a result, the PRNG state is serialized to shared memory (by e.g. numpy.RandomState.get_state()). During the worker is running, there is no overhead.", "body": "@apaszke It's simple: cache the state. When a worker process is resumed, a PRNG state is deserialized from shared memory (by e.g. `numpy.RandomState.set_state()`). When the worker process yields a result, the PRNG state is serialized to shared memory (by e.g. `numpy.RandomState.get_state()`). During the worker is running, there is no overhead."}