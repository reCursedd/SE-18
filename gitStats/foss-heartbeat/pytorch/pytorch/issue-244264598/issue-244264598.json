{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2159", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2159/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2159/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2159/events", "html_url": "https://github.com/pytorch/pytorch/issues/2159", "id": 244264598, "node_id": "MDU6SXNzdWUyNDQyNjQ1OTg=", "number": 2159, "title": "Efficient forward pass in nn.Linear", "user": {"login": "yunjey", "id": 15663219, "node_id": "MDQ6VXNlcjE1NjYzMjE5", "avatar_url": "https://avatars2.githubusercontent.com/u/15663219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yunjey", "html_url": "https://github.com/yunjey", "followers_url": "https://api.github.com/users/yunjey/followers", "following_url": "https://api.github.com/users/yunjey/following{/other_user}", "gists_url": "https://api.github.com/users/yunjey/gists{/gist_id}", "starred_url": "https://api.github.com/users/yunjey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yunjey/subscriptions", "organizations_url": "https://api.github.com/users/yunjey/orgs", "repos_url": "https://api.github.com/users/yunjey/repos", "events_url": "https://api.github.com/users/yunjey/events{/privacy}", "received_events_url": "https://api.github.com/users/yunjey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-20T07:05:29Z", "updated_at": "2018-05-18T01:40:41Z", "closed_at": "2017-07-20T07:26:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,</p>\n<p>Maybe we can improve the operation speed in <code>nn.Linear</code>.</p>\n<p><code>nn.Linear</code> creates a weight matrix of shape (out_features, in_features) as you can see <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/linear.py#L39\">here</a>.<br>\nThen, as you can see in <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L550-L558\">F.linear</a>, input matrix is multiplied by the transpose of the weight matrix.</p>\n<p>I think the transpose operation is unnecessary. What if we create a weight matrix of shape (in_features, out_features)? Then, the input matrix can be multiplied by the weight matrix (we don't need to calculate transpose of the matrix).</p>\n<p>Does this sound right? If i'm right, can i do pull request?</p>\n<p>Thanks</p>", "body_text": "Hi,\nMaybe we can improve the operation speed in nn.Linear.\nnn.Linear creates a weight matrix of shape (out_features, in_features) as you can see here.\nThen, as you can see in F.linear, input matrix is multiplied by the transpose of the weight matrix.\nI think the transpose operation is unnecessary. What if we create a weight matrix of shape (in_features, out_features)? Then, the input matrix can be multiplied by the weight matrix (we don't need to calculate transpose of the matrix).\nDoes this sound right? If i'm right, can i do pull request?\nThanks", "body": "Hi, \r\n\r\nMaybe we can improve the operation speed in `nn.Linear`.\r\n\r\n`nn.Linear` creates a weight matrix of shape (out_features, in_features) as you can see [here](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/linear.py#L39).\r\nThen, as you can see in [F.linear](https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L550-L558), input matrix is multiplied by the transpose of the weight matrix.\r\n\r\nI think the transpose operation is unnecessary. What if we create a weight matrix of shape (in_features, out_features)? Then, the input matrix can be multiplied by the weight matrix (we don't need to calculate transpose of the matrix).\r\n\r\nDoes this sound right? If i'm right, can i do pull request?\r\n\r\nThanks"}