{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/316771185", "html_url": "https://github.com/pytorch/pytorch/issues/2159#issuecomment-316771185", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2159", "id": 316771185, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjc3MTE4NQ==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-20T17:15:23Z", "updated_at": "2017-07-20T17:15:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Typically, nn kernels are slightly faster than nt, so it might be a slight performance gain, but then backward multiplies might become less efficient than they are now, because now transposes in backward will be different.  FWIW, cudnn rnn, when doing a longer time sequence, starts by transposing weight matrix, and in most cases it's a net performance gain, but it's doing this for forward only.</p>", "body_text": "Typically, nn kernels are slightly faster than nt, so it might be a slight performance gain, but then backward multiplies might become less efficient than they are now, because now transposes in backward will be different.  FWIW, cudnn rnn, when doing a longer time sequence, starts by transposing weight matrix, and in most cases it's a net performance gain, but it's doing this for forward only.", "body": "Typically, nn kernels are slightly faster than nt, so it might be a slight performance gain, but then backward multiplies might become less efficient than they are now, because now transposes in backward will be different.  FWIW, cudnn rnn, when doing a longer time sequence, starts by transposing weight matrix, and in most cases it's a net performance gain, but it's doing this for forward only. "}