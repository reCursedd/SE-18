{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7313", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7313/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7313/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7313/events", "html_url": "https://github.com/pytorch/pytorch/issues/7313", "id": 320453909, "node_id": "MDU6SXNzdWUzMjA0NTM5MDk=", "number": 7313, "title": "[proposal] [discussion] An abstraction to facilitate building weight_norm/spectral_norm-like things", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 466131885, "node_id": "MDU6TGFiZWw0NjYxMzE4ODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs%20discussion", "name": "needs discussion", "color": "cc317c", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2018-05-04T23:03:28Z", "updated_at": "2018-07-02T18:04:08Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Currently the <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/weight_norm.py\">weight_norm</a> and <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/spectral_norm.py\">spectral_norm</a> are patching a passed module + implement special functions for adding/removing these from a module.</p>\n<p>Some ideas for refactoring to make it less tricky:</p>\n<ul>\n<li>provide a stable signature for getting weight, then they can be cleanly used with methods such as <code>torch.matmul</code> and <code>F.conv2d</code></li>\n<li>if module patching (adding some new buffers as parameters and registering a hook) is needed and is a reasonable pattern, provide a user-facing stable abstraction for it (especially adding and removal of parameters). It seems we have a chain of decorators-hooks, and each of them may have some extra buffers, and currently they are all patched into the passed module object.</li>\n</ul>", "body_text": "Currently the weight_norm and spectral_norm are patching a passed module + implement special functions for adding/removing these from a module.\nSome ideas for refactoring to make it less tricky:\n\nprovide a stable signature for getting weight, then they can be cleanly used with methods such as torch.matmul and F.conv2d\nif module patching (adding some new buffers as parameters and registering a hook) is needed and is a reasonable pattern, provide a user-facing stable abstraction for it (especially adding and removal of parameters). It seems we have a chain of decorators-hooks, and each of them may have some extra buffers, and currently they are all patched into the passed module object.", "body": "Currently the [weight_norm](https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/weight_norm.py) and [spectral_norm](https://github.com/pytorch/pytorch/blob/master/torch/nn/utils/spectral_norm.py) are patching a passed module + implement special functions for adding/removing these from a module.\r\n\r\nSome ideas for refactoring to make it less tricky:\r\n- provide a stable signature for getting weight, then they can be cleanly used with methods such as `torch.matmul` and `F.conv2d`\r\n- if module patching (adding some new buffers as parameters and registering a hook) is needed and is a reasonable pattern, provide a user-facing stable abstraction for it (especially adding and removal of parameters). It seems we have a chain of decorators-hooks, and each of them may have some extra buffers, and currently they are all patched into the passed module object."}