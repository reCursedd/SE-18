{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/388490440", "html_url": "https://github.com/pytorch/pytorch/issues/7313#issuecomment-388490440", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7313", "id": 388490440, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODQ5MDQ0MA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-11T21:28:37Z", "updated_at": "2018-05-11T21:28:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So to put some code here (not remotely tested enough):<br>\n<a href=\"https://github.com/t-vi/pytorch/tree/calculated_param\">https://github.com/t-vi/pytorch/tree/calculated_param</a><br>\nhas the adaptation of Module to introduce CalculatedParameter (and Parameter, optim.SGD, optim.Adam are adapted).<br>\nThe biggest weakness (in my opinion) of the implementation is that it \"needs help\" to detect parameter updates. The typical case will be the optimizer doing it, so the optimizer needs to call param.updated().</p>\n<p>Note how the <a href=\"https://github.com/t-vi/pytorch/blob/63a1c82a103670a23bd373bef2163dac06d6a2eb/torch/nn/utils/spectral_norm.py#L10\">spectral norm</a> class now looks like a regular module - to the point where you would not need to have the utility spectral_norm and remove_spectral_norm functions (the latter could just be replaced <code>m.weight = nn.Parameter(m.weight.data)</code> if you don't need to programmatically control the name and check whether weight was a parameter).</p>\n<p>While it does add some trickery in <code>module.py</code>, I think the user of calculated parameters gets a much better interface.</p>", "body_text": "So to put some code here (not remotely tested enough):\nhttps://github.com/t-vi/pytorch/tree/calculated_param\nhas the adaptation of Module to introduce CalculatedParameter (and Parameter, optim.SGD, optim.Adam are adapted).\nThe biggest weakness (in my opinion) of the implementation is that it \"needs help\" to detect parameter updates. The typical case will be the optimizer doing it, so the optimizer needs to call param.updated().\nNote how the spectral norm class now looks like a regular module - to the point where you would not need to have the utility spectral_norm and remove_spectral_norm functions (the latter could just be replaced m.weight = nn.Parameter(m.weight.data) if you don't need to programmatically control the name and check whether weight was a parameter).\nWhile it does add some trickery in module.py, I think the user of calculated parameters gets a much better interface.", "body": "So to put some code here (not remotely tested enough):\r\n   https://github.com/t-vi/pytorch/tree/calculated_param\r\nhas the adaptation of Module to introduce CalculatedParameter (and Parameter, optim.SGD, optim.Adam are adapted).\r\nThe biggest weakness (in my opinion) of the implementation is that it \"needs help\" to detect parameter updates. The typical case will be the optimizer doing it, so the optimizer needs to call param.updated().\r\n\r\nNote how the [spectral norm](https://github.com/t-vi/pytorch/blob/63a1c82a103670a23bd373bef2163dac06d6a2eb/torch/nn/utils/spectral_norm.py#L10) class now looks like a regular module - to the point where you would not need to have the utility spectral_norm and remove_spectral_norm functions (the latter could just be replaced `m.weight = nn.Parameter(m.weight.data)` if you don't need to programmatically control the name and check whether weight was a parameter).\r\n\r\nWhile it does add some trickery in `module.py`, I think the user of calculated parameters gets a much better interface.\r\n"}