{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389487984", "html_url": "https://github.com/pytorch/pytorch/issues/7313#issuecomment-389487984", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7313", "id": 389487984, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTQ4Nzk4NA==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-16T11:36:49Z", "updated_at": "2018-05-16T11:37:44Z", "author_association": "NONE", "body_html": "<p>Imagine we have a parameter precalc with for an op (pseudo-code):</p>\n<pre><code>weight, bias, other_param = ..., ..., ....\nweight, bias = apply_spectral_norm_or_something_else(weight, other_param)\ny = F.conv2d(x, weight, bias)\n</code></pre>\n<ol>\n<li>Are we supporting this functional scenario easily? (I think that we should)</li>\n<li>Shoud we support differentiating to other_param? (I think the user should have a choice. The hooks-based solution doesn't allow it, does it? And the CalculatedParameter?)</li>\n<li>Do we want to support this kind of joint param pre-calculation?</li>\n</ol>\n<p>For the question of wrapper vs patching, I think wrapper is still cleaner (even if the user has to type <code>.module</code> to get to original module and may abstruct model inspection a bit), because for the case of chained parameter-precalc (imagine applying weight-norm and spectral-norm together, if it made sense) the order of the precalc ops is clear to user.</p>", "body_text": "Imagine we have a parameter precalc with for an op (pseudo-code):\nweight, bias, other_param = ..., ..., ....\nweight, bias = apply_spectral_norm_or_something_else(weight, other_param)\ny = F.conv2d(x, weight, bias)\n\n\nAre we supporting this functional scenario easily? (I think that we should)\nShoud we support differentiating to other_param? (I think the user should have a choice. The hooks-based solution doesn't allow it, does it? And the CalculatedParameter?)\nDo we want to support this kind of joint param pre-calculation?\n\nFor the question of wrapper vs patching, I think wrapper is still cleaner (even if the user has to type .module to get to original module and may abstruct model inspection a bit), because for the case of chained parameter-precalc (imagine applying weight-norm and spectral-norm together, if it made sense) the order of the precalc ops is clear to user.", "body": "Imagine we have a parameter precalc with for an op (pseudo-code):\r\n```\r\nweight, bias, other_param = ..., ..., ....\r\nweight, bias = apply_spectral_norm_or_something_else(weight, other_param)\r\ny = F.conv2d(x, weight, bias)\r\n```\r\n\r\n1. Are we supporting this functional scenario easily? (I think that we should)\r\n2. Shoud we support differentiating to other_param? (I think the user should have a choice. The hooks-based solution doesn't allow it, does it? And the CalculatedParameter?)\r\n3. Do we want to support this kind of joint param pre-calculation?\r\n\r\nFor the question of wrapper vs patching, I think wrapper is still cleaner (even if the user has to type `.module` to get to original module and may abstruct model inspection a bit), because for the case of chained parameter-precalc (imagine applying weight-norm and spectral-norm together, if it made sense) the order of the precalc ops is clear to user."}