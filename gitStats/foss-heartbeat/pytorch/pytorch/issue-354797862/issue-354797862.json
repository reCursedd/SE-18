{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10952", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10952/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10952/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10952/events", "html_url": "https://github.com/pytorch/pytorch/pull/10952", "id": 354797862, "node_id": "MDExOlB1bGxSZXF1ZXN0MjExNDc0ODE0", "number": 10952, "title": "[jit] Fix scalar tensor assert in fusion compiler", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-28T15:59:30Z", "updated_at": "2018-11-23T15:50:34Z", "closed_at": "2018-09-06T14:56:19Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10952", "html_url": "https://github.com/pytorch/pytorch/pull/10952", "diff_url": "https://github.com/pytorch/pytorch/pull/10952.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10952.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #8560.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"332859634\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8560\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/8560/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/8560\">#8560</a>.<br>\nUnblocks <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"352355590\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10715\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/10715/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/10715\">#10715</a>.</p>\n<p>The assert (nDim &lt;= uncompressedDims) was being triggered for a scalar<br>\ntensor because we compute nDim to be 1 for a scalar tensor but<br>\nuncompressedDim = 0.</p>\n<p>This PR changes it so that we compute nDim to be 0 for a scalar tensor. This<br>\nworks because indexing in a kernel depends on nDim. If nDim = 0, then<br>\noffset is always 0, which is what we want.</p>\n<p>Some other (small) changes were necessary to make this work:</p>\n<ul>\n<li>One cannot define a 0-length array <code>IndexType arr[0]</code> so the code<br>\nguards against that</li>\n<li>Needed to change some of the maxTensorInfoSize logic to handle the<br>\ncase when uncompressedDim == 0.</li>\n</ul>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "Fixes #8560.\nUnblocks #10715.\nThe assert (nDim <= uncompressedDims) was being triggered for a scalar\ntensor because we compute nDim to be 1 for a scalar tensor but\nuncompressedDim = 0.\nThis PR changes it so that we compute nDim to be 0 for a scalar tensor. This\nworks because indexing in a kernel depends on nDim. If nDim = 0, then\noffset is always 0, which is what we want.\nSome other (small) changes were necessary to make this work:\n\nOne cannot define a 0-length array IndexType arr[0] so the code\nguards against that\nNeeded to change some of the maxTensorInfoSize logic to handle the\ncase when uncompressedDim == 0.\n\ncc @apaszke @zdevito", "body": "Fixes #8560.\r\nUnblocks #10715.\r\n\r\nThe assert (nDim <= uncompressedDims) was being triggered for a scalar\r\ntensor because we compute nDim to be 1 for a scalar tensor but\r\nuncompressedDim = 0.\r\n\r\nThis PR changes it so that we compute nDim to be 0 for a scalar tensor. This\r\nworks because indexing in a kernel depends on nDim. If nDim = 0, then\r\noffset is always 0, which is what we want.\r\n\r\nSome other (small) changes were necessary to make this work:\r\n- One cannot define a 0-length array `IndexType arr[0]` so the code\r\n  guards against that\r\n- Needed to change some of the maxTensorInfoSize logic to handle the\r\n  case when uncompressedDim == 0.\r\n\r\ncc @apaszke @zdevito \r\n"}