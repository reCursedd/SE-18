{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204412116", "pull_request_review_id": 139216652, "id": 204412116, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQxMjExNg==", "diff_hunk": "@@ -110,19 +119,32 @@ RegisterOperators reg({\n         prim::Print,\n         [](Node* node) {\n           size_t num_inputs = node->inputs().size();\n-          return [num_inputs](Stack& stack) {\n+          std::string format = node->s(attr::string);\n+          std::vector<std::string> strings;\n+          for(size_t i = 0; i < format.size(); i++) {\n+            if (format[i] == 's') {\n+              strings.push_back(node->inputs()[i]->node()->s(attr::string));\n+            }\n+          }\n+          return [num_inputs, format, strings](Stack & stack) {\n+            auto inputs = last(stack, num_inputs);\n             bool first = true;\n-            for (at::Tensor i : last(stack, num_inputs)) {\n-              if (!first)\n-                std::cout << \" \";\n+            size_t str_i = 0;\n+            for(size_t i = 0; i < format.size(); i++) {\n+              if (!first) std::cout << \" \";\n               first = false;\n-              if (auto tensor_impl = dynamic_cast<at::TensorImpl*>(i.get())) {\n-                std::cout << at::Tensor(tensor_impl, true);\n-              } else if (!i.defined()) {\n-                std::cout << \"<undefined tensor>\";\n+              if (format[i] == 's') {\n+                std::cout << strings[str_i++];", "path": "torch/csrc/jit/register_prim_ops.cpp", "position": null, "original_position": 43, "commit_id": "e905658d61f902d3c9b75bf08d2504eb7e7b3e6f", "original_commit_id": "7389ef601171f8ea0e5fab864a81f5d0b4c80da1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Use `.at` or assert that there are enough strings outside of this lambda (count `s`es, take the size of the vector). Otherwise we can end up with out of bounds accesses and that's a pain to debug", "created_at": "2018-07-23T14:01:42Z", "updated_at": "2018-11-23T15:47:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/9324#discussion_r204412116", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9324", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204412116"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9324#discussion_r204412116"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9324"}}, "body_html": "<p>Use <code>.at</code> or assert that there are enough strings outside of this lambda (count <code>s</code>es, take the size of the vector). Otherwise we can end up with out of bounds accesses and that's a pain to debug</p>", "body_text": "Use .at or assert that there are enough strings outside of this lambda (count ses, take the size of the vector). Otherwise we can end up with out of bounds accesses and that's a pain to debug"}