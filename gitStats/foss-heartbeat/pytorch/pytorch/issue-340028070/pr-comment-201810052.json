{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201810052", "pull_request_review_id": 136385315, "id": 201810052, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgxMDA1Mg==", "diff_hunk": "@@ -190,6 +191,46 @@ struct SharedParserData {\n     *len = endptr - startptr;\n     return *len > 0;\n   }\n+\n+  bool isCharCount(char c, const std::string& str, size_t start, int len) {\n+    //count checks from [start, start + len) \n+    return start + len <= str.size() && std::count(str.begin() + start, str.begin() + start + len, c) == len; \n+  }\n+\n+  // python conconcatenates all adjacent strings \"a\" \"b\" == \"ab\"\n+  // strings can be enclosed with 1 or 3 single or double quotes\n+  // if enclosed 3 quotes newlines are valid\n+  // as elsewhere, backslash and new line should be ignored\n+  bool isString(const std::string& str, size_t start, size_t* len) {\n+    char quote = str[start];\n+    if (quote != '\\\"' && quote != '\\'')\n+      return false;\n+    int quote_len = isCharCount(quote, str, start, 3) ? 3 : 1; \n+    size_t end = start + quote_len; \n+    while(end < str.size() && !isCharCount(quote, str, end, quote_len)) {\n+      if (str[end] == '\\n' && quote_len != 3) {\n+        return false;\n+      }\n+      if (str[end] == '\\\\') {", "path": "torch/csrc/jit/script/lexer.h", "position": null, "original_position": 32, "commit_id": "e905658d61f902d3c9b75bf08d2504eb7e7b3e6f", "original_commit_id": "b2decb1ecffef6120bd76460622caa004bf0bac0", "user": {"login": "eellison", "id": 11477974, "node_id": "MDQ6VXNlcjExNDc3OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/11477974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eellison", "html_url": "https://github.com/eellison", "followers_url": "https://api.github.com/users/eellison/followers", "following_url": "https://api.github.com/users/eellison/following{/other_user}", "gists_url": "https://api.github.com/users/eellison/gists{/gist_id}", "starred_url": "https://api.github.com/users/eellison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eellison/subscriptions", "organizations_url": "https://api.github.com/users/eellison/orgs", "repos_url": "https://api.github.com/users/eellison/repos", "events_url": "https://api.github.com/users/eellison/events{/privacy}", "received_events_url": "https://api.github.com/users/eellison/received_events", "type": "User", "site_admin": false}, "body": "This ignores escaped quotations or escaped new lines,  ^ as your above question asks.", "created_at": "2018-07-11T19:16:40Z", "updated_at": "2018-11-23T15:47:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/9324#discussion_r201810052", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9324", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201810052"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9324#discussion_r201810052"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9324"}}, "body_html": "<p>This ignores escaped quotations or escaped new lines,  ^ as your above question asks.</p>", "body_text": "This ignores escaped quotations or escaped new lines,  ^ as your above question asks.", "in_reply_to_id": 201760410}