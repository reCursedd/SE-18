{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205581023", "pull_request_review_id": 140861933, "id": 205581023, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTU4MTAyMw==", "diff_hunk": "@@ -185,6 +186,36 @@ struct SharedParserData {\n     *len = endptr - startptr;\n     return *len > 0;\n   }\n+\n+  bool isCharCount(char c, const std::string& str, size_t start, int len) {\n+    //count checks from [start, start + len)\n+    return start + len <= str.size() && std::count(str.begin() + start, str.begin() + start + len, c) == len;\n+  }\n+\n+  // python conconcatenates all adjacent strings \"a\" \"b\" == \"ab\"\n+  // strings can be enclosed with 1 or 3 single or double quotes\n+  // if enclosed 3 quotes newlines are valid\n+  // as elsewhere, backslash and new line should be ignored\n+  bool isString(const std::string& str, size_t start, size_t* len) {\n+    char quote = str[start];\n+    if (quote != '\\\"' && quote != '\\'')\n+      return false;\n+    int quote_len = isCharCount(quote, str, start, 3) ? 3 : 1;\n+    size_t end = start + quote_len;\n+    while(end < str.size() && !isCharCount(quote, str, end, quote_len)) {\n+      if (str[end] == '\\n' && quote_len != 3) {\n+        return false;", "path": "torch/csrc/jit/script/lexer.h", "position": null, "original_position": 30, "commit_id": "e905658d61f902d3c9b75bf08d2504eb7e7b3e6f", "original_commit_id": "928abfd14883a073b10a2ce6b5cdc4dae676993d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This is probably fine. The reason we can't report an error here is because the error report infrastructure exists above this level of abstraction. The error will just get reported as unknown token at the higher level.", "created_at": "2018-07-26T19:48:35Z", "updated_at": "2018-11-23T15:48:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/9324#discussion_r205581023", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9324", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205581023"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9324#discussion_r205581023"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9324"}}, "body_html": "<p>This is probably fine. The reason we can't report an error here is because the error report infrastructure exists above this level of abstraction. The error will just get reported as unknown token at the higher level.</p>", "body_text": "This is probably fine. The reason we can't report an error here is because the error report infrastructure exists above this level of abstraction. The error will just get reported as unknown token at the higher level.", "in_reply_to_id": 205470698}