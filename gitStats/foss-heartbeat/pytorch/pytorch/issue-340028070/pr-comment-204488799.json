{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204488799", "pull_request_review_id": 139575096, "id": 204488799, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ4ODc5OQ==", "diff_hunk": "@@ -110,19 +119,32 @@ RegisterOperators reg({\n         prim::Print,\n         [](Node* node) {\n           size_t num_inputs = node->inputs().size();\n-          return [num_inputs](Stack& stack) {\n+          std::string format = node->s(attr::string);\n+          std::vector<std::string> strings;\n+          for(size_t i = 0; i < format.size(); i++) {\n+            if (format[i] == 's') {\n+              strings.push_back(node->inputs()[i]->node()->s(attr::string));\n+            }\n+          }\n+          return [num_inputs, format, strings](Stack & stack) {\n+            auto inputs = last(stack, num_inputs);\n             bool first = true;\n-            for (at::Tensor i : last(stack, num_inputs)) {\n-              if (!first)\n-                std::cout << \" \";\n+            size_t str_i = 0;\n+            for(size_t i = 0; i < format.size(); i++) {\n+              if (!first) std::cout << \" \";\n               first = false;\n-              if (auto tensor_impl = dynamic_cast<at::TensorImpl*>(i.get())) {\n-                std::cout << at::Tensor(tensor_impl, true);\n-              } else if (!i.defined()) {\n-                std::cout << \"<undefined tensor>\";\n+              if (format[i] == 's') {\n+                std::cout << strings[str_i++];", "path": "torch/csrc/jit/register_prim_ops.cpp", "position": null, "original_position": 43, "commit_id": "e905658d61f902d3c9b75bf08d2504eb7e7b3e6f", "original_commit_id": "7389ef601171f8ea0e5fab864a81f5d0b4c80da1", "user": {"login": "eellison", "id": 11477974, "node_id": "MDQ6VXNlcjExNDc3OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/11477974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eellison", "html_url": "https://github.com/eellison", "followers_url": "https://api.github.com/users/eellison/followers", "following_url": "https://api.github.com/users/eellison/following{/other_user}", "gists_url": "https://api.github.com/users/eellison/gists{/gist_id}", "starred_url": "https://api.github.com/users/eellison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eellison/subscriptions", "organizations_url": "https://api.github.com/users/eellison/orgs", "repos_url": "https://api.github.com/users/eellison/repos", "events_url": "https://api.github.com/users/eellison/events{/privacy}", "received_events_url": "https://api.github.com/users/eellison/received_events", "type": "User", "site_admin": false}, "body": "col_offset points to the first column of the actual string, and constructs a string literal with the actual string. When we do the lexing + parsing ourselves it is tokenized with the quotation marks included, than the parsing removes them. In both cases when StringLiteral is created the quotations have been removed.   ", "created_at": "2018-07-23T17:25:22Z", "updated_at": "2018-11-23T15:47:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/9324#discussion_r204488799", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9324", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204488799"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9324#discussion_r204488799"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9324"}}, "body_html": "<p>col_offset points to the first column of the actual string, and constructs a string literal with the actual string. When we do the lexing + parsing ourselves it is tokenized with the quotation marks included, than the parsing removes them. In both cases when StringLiteral is created the quotations have been removed.</p>", "body_text": "col_offset points to the first column of the actual string, and constructs a string literal with the actual string. When we do the lexing + parsing ourselves it is tokenized with the quotation marks included, than the parsing removes them. In both cases when StringLiteral is created the quotations have been removed.", "in_reply_to_id": 204412116}