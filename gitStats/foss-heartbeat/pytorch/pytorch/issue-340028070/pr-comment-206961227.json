{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206961227", "pull_request_review_id": 142476563, "id": 206961227, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjk2MTIyNw==", "diff_hunk": "@@ -46,9 +46,29 @@ struct PrintValue : public SugaredValue {\n       auto& g = *m.graph();\n       if (!attributes.empty())\n         throw ErrorReport(loc) << \"print doesn't accept any keyword arguments\";\n-      auto values = toValues(inputs);\n-      ensureTensors(loc, values);\n-      g.insertNode(g.create(prim::Print, values, 0)\n+\n+      //temporary hack to allow print statements to work in python 2, where\n+      //print(a, b) is treated as a (a, b) tuple input.\n+\n+      //logic from lower_tuples, here we are lowering tuples before they are\n+      //inputs to the node\n+      std::vector<Value*> lowered_inputs = toValues(inputs);\n+      for(size_t i = 0; i < lowered_inputs.size();) {\n+        auto input = lowered_inputs[i];\n+        if(TupleTypePtr tt = input->type()->cast<TupleType>()) {\n+          JIT_ASSERTM(input->node()->kind() == prim::TupleConstruct, \"tuple use not matched to tuple construct\");", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 17, "commit_id": "e905658d61f902d3c9b75bf08d2504eb7e7b3e6f", "original_commit_id": "4cdb804b91f9556cb19595191fb4e23ca95f94fc", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "There are a couple problems here.\r\n\r\n1. This should only apply if there is a _single_ tuple argument to print. Otherwise you are going to introduce all sorts of weird behavior if people `print(a, (b,c))` for instance.\r\n2. You should not assert that there was a TupleConstruct node. It is perfectly valid for someone to write `print a` where `a` is a tuple argument not produced from a TupleConstruct. Instead this should apply _only_ when there is a single literal tuple construct argument in print:\r\n\r\n```\r\nif(lowered_inputs.size() == 1 && lower_inputs.at(0)->node()->kind() == prim::TupleConstruct) {\r\n...\r\n}\r\n```", "created_at": "2018-08-01T17:12:40Z", "updated_at": "2018-11-23T15:48:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/9324#discussion_r206961227", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9324", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206961227"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9324#discussion_r206961227"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9324"}}, "body_html": "<p>There are a couple problems here.</p>\n<ol>\n<li>This should only apply if there is a <em>single</em> tuple argument to print. Otherwise you are going to introduce all sorts of weird behavior if people <code>print(a, (b,c))</code> for instance.</li>\n<li>You should not assert that there was a TupleConstruct node. It is perfectly valid for someone to write <code>print a</code> where <code>a</code> is a tuple argument not produced from a TupleConstruct. Instead this should apply <em>only</em> when there is a single literal tuple construct argument in print:</li>\n</ol>\n<pre><code>if(lowered_inputs.size() == 1 &amp;&amp; lower_inputs.at(0)-&gt;node()-&gt;kind() == prim::TupleConstruct) {\n...\n}\n</code></pre>", "body_text": "There are a couple problems here.\n\nThis should only apply if there is a single tuple argument to print. Otherwise you are going to introduce all sorts of weird behavior if people print(a, (b,c)) for instance.\nYou should not assert that there was a TupleConstruct node. It is perfectly valid for someone to write print a where a is a tuple argument not produced from a TupleConstruct. Instead this should apply only when there is a single literal tuple construct argument in print:\n\nif(lowered_inputs.size() == 1 && lower_inputs.at(0)->node()->kind() == prim::TupleConstruct) {\n...\n}"}