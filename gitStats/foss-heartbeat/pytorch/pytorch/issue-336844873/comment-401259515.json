{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/401259515", "html_url": "https://github.com/pytorch/pytorch/issues/9015#issuecomment-401259515", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9015", "id": 401259515, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTI1OTUxNQ==", "user": {"login": "jaxony", "id": 12774152, "node_id": "MDQ6VXNlcjEyNzc0MTUy", "avatar_url": "https://avatars3.githubusercontent.com/u/12774152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaxony", "html_url": "https://github.com/jaxony", "followers_url": "https://api.github.com/users/jaxony/followers", "following_url": "https://api.github.com/users/jaxony/following{/other_user}", "gists_url": "https://api.github.com/users/jaxony/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaxony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaxony/subscriptions", "organizations_url": "https://api.github.com/users/jaxony/orgs", "repos_url": "https://api.github.com/users/jaxony/repos", "events_url": "https://api.github.com/users/jaxony/events{/privacy}", "received_events_url": "https://api.github.com/users/jaxony/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-29T06:21:55Z", "updated_at": "2018-06-29T06:21:55Z", "author_association": "NONE", "body_html": "<p>Thanks for the fast reply <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a>.</p>\n<p>Environment:</p>\n<ul>\n<li>OS: Ubuntu 16.04.4</li>\n<li>Python distribution: Anaconda 4.5.4, Python 3.6</li>\n<li>PyTorch: built from master branch at <code>commit 77484d91db052</code></li>\n<li>fastText: pip install from master branch at <code>commit 25d0bb04bf43d8b674f</code></li>\n</ul>\n<p>This is (most of) my Dataset code. <code>self.embedding</code> is a <code>FastText</code> object.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ImageVecDataset</span>(<span class=\"pl-e\">Dataset</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>A sample in this dataset is a single image</span>\n<span class=\"pl-s\">    and its associated 'semantic' vector.</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">csv_file</span>, <span class=\"pl-smi\">root_dir</span>, <span class=\"pl-smi\">embedding</span>, <span class=\"pl-smi\">transform</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">        Args:</span>\n<span class=\"pl-s\">            csv_file (string): Path to the csv file with titles.</span>\n<span class=\"pl-s\">            root_dir (string): Directory with all the images.</span>\n<span class=\"pl-s\">            embedding (object): Object containing pretrained word embedding.</span>\n<span class=\"pl-s\">            transform (callable, optional): Optional transform to be applied</span>\n<span class=\"pl-s\">                on a sample.</span>\n<span class=\"pl-s\">        <span class=\"pl-pds\">\"\"\"</span></span>\n        <span class=\"pl-c1\">self</span>.df <span class=\"pl-k\">=</span> utils.load_df(csv_file, <span class=\"pl-v\">preprocess</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">drop_duplicates</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n        <span class=\"pl-c1\">self</span>.df <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.df.sample(<span class=\"pl-v\">frac</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c1\">self</span>.root_dir <span class=\"pl-k\">=</span> root_dir\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.root_dir[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">!=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">self</span>.root_dir <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>\n\n        <span class=\"pl-c1\">self</span>.transform <span class=\"pl-k\">=</span> transform\n        <span class=\"pl-c1\">self</span>.embedding <span class=\"pl-k\">=</span> embedding\n        \n     <span class=\"pl-c1\">...</span>\n    \n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">len</span>(<span class=\"pl-c1\">self</span>.df)        \n    \n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">idx</span>):\n        item <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.df.iloc[idx]\n        im_url <span class=\"pl-k\">=</span> item[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>im_url<span class=\"pl-pds\">'</span></span>]\n        title <span class=\"pl-k\">=</span> item[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>title<span class=\"pl-pds\">'</span></span>]\n        \n        <span class=\"pl-k\">try</span>:\n            image_path <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._get_image_path(im_url)\n            image <span class=\"pl-k\">=</span> Image.open(image_path)\n        <span class=\"pl-k\">except</span>:\n            <span class=\"pl-c\"><span class=\"pl-c\">#</span> many images may be missing</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">None</span>\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.transform:\n            image <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.transform(image)\n        label <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.embedding.get_sentence_vector(title)\n        <span class=\"pl-k\">return</span> image, label</pre></div>", "body_text": "Thanks for the fast reply @SsnL.\nEnvironment:\n\nOS: Ubuntu 16.04.4\nPython distribution: Anaconda 4.5.4, Python 3.6\nPyTorch: built from master branch at commit 77484d91db052\nfastText: pip install from master branch at commit 25d0bb04bf43d8b674f\n\nThis is (most of) my Dataset code. self.embedding is a FastText object.\nclass ImageVecDataset(Dataset):\n    \"\"\"A sample in this dataset is a single image\n    and its associated 'semantic' vector.\n    \"\"\"\n\n    def __init__(self, csv_file, root_dir, embedding, transform=None):\n        \"\"\"\n        Args:\n            csv_file (string): Path to the csv file with titles.\n            root_dir (string): Directory with all the images.\n            embedding (object): Object containing pretrained word embedding.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"\n        self.df = utils.load_df(csv_file, preprocess=False, drop_duplicates=False)\n        self.df = self.df.sample(frac=1)\n        self.root_dir = root_dir\n        if self.root_dir[-1] != \"/\": self.root_dir += \"/\"\n\n        self.transform = transform\n        self.embedding = embedding\n        \n     ...\n    \n    def __len__(self):\n        return len(self.df)        \n    \n    def __getitem__(self, idx):\n        item = self.df.iloc[idx]\n        im_url = item['im_url']\n        title = item['title']\n        \n        try:\n            image_path = self._get_image_path(im_url)\n            image = Image.open(image_path)\n        except:\n            # many images may be missing\n            return None\n\n        if self.transform:\n            image = self.transform(image)\n        label = self.embedding.get_sentence_vector(title)\n        return image, label", "body": "Thanks for the fast reply @SsnL.\r\n\r\nEnvironment:\r\n* OS: Ubuntu 16.04.4\r\n* Python distribution: Anaconda 4.5.4, Python 3.6\r\n* PyTorch: built from master branch at `commit 77484d91db052`\r\n* fastText: pip install from master branch at `commit 25d0bb04bf43d8b674f`\r\n \r\nThis is (most of) my Dataset code. `self.embedding` is a `FastText` object.\r\n```python\r\nclass ImageVecDataset(Dataset):\r\n    \"\"\"A sample in this dataset is a single image\r\n    and its associated 'semantic' vector.\r\n    \"\"\"\r\n\r\n    def __init__(self, csv_file, root_dir, embedding, transform=None):\r\n        \"\"\"\r\n        Args:\r\n            csv_file (string): Path to the csv file with titles.\r\n            root_dir (string): Directory with all the images.\r\n            embedding (object): Object containing pretrained word embedding.\r\n            transform (callable, optional): Optional transform to be applied\r\n                on a sample.\r\n        \"\"\"\r\n        self.df = utils.load_df(csv_file, preprocess=False, drop_duplicates=False)\r\n        self.df = self.df.sample(frac=1)\r\n        self.root_dir = root_dir\r\n        if self.root_dir[-1] != \"/\": self.root_dir += \"/\"\r\n\r\n        self.transform = transform\r\n        self.embedding = embedding\r\n        \r\n     ...\r\n    \r\n    def __len__(self):\r\n        return len(self.df)        \r\n    \r\n    def __getitem__(self, idx):\r\n        item = self.df.iloc[idx]\r\n        im_url = item['im_url']\r\n        title = item['title']\r\n        \r\n        try:\r\n            image_path = self._get_image_path(im_url)\r\n            image = Image.open(image_path)\r\n        except:\r\n            # many images may be missing\r\n            return None\r\n\r\n        if self.transform:\r\n            image = self.transform(image)\r\n        label = self.embedding.get_sentence_vector(title)\r\n        return image, label\r\n```"}