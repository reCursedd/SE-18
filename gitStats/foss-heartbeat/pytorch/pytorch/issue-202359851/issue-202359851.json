{"url": "https://api.github.com/repos/pytorch/pytorch/issues/541", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/541/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/541/events", "html_url": "https://github.com/pytorch/pytorch/issues/541", "id": 202359851, "node_id": "MDU6SXNzdWUyMDIzNTk4NTE=", "number": 541, "title": "Inferring NumPy array type when using `from_numpy`", "user": {"login": "rasbt", "id": 5618407, "node_id": "MDQ6VXNlcjU2MTg0MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5618407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasbt", "html_url": "https://github.com/rasbt", "followers_url": "https://api.github.com/users/rasbt/followers", "following_url": "https://api.github.com/users/rasbt/following{/other_user}", "gists_url": "https://api.github.com/users/rasbt/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasbt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasbt/subscriptions", "organizations_url": "https://api.github.com/users/rasbt/orgs", "repos_url": "https://api.github.com/users/rasbt/repos", "events_url": "https://api.github.com/users/rasbt/events{/privacy}", "received_events_url": "https://api.github.com/users/rasbt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-22T04:43:23Z", "updated_at": "2017-11-13T18:56:38Z", "closed_at": "2017-01-22T10:27:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,<br>\nI love the PyTorch library so far, but I wanted to note one little annoyance that I encountered  -- something that could be improved in future. For instance, when I convert numpy arrays to torch tensors, it disregards the original NumPy type and creates <code>torch.DoubleTensor /torch.cuda.DoubleTensor</code>s. I think it would make more sense to inherit the array type float, int, etc. to create the tensors.</p>\n<p>Here's a simple example:</p>\n<pre lang=\"import\" data-meta=\"torch\"><code>import numpy as np\nimport torch\n\ny = np.array([[1., 2., 3.],\n              [4., 5., 6.]])\n\ntorch.from_numpy(y)\n</code></pre>\n<p>Output:</p>\n<pre><code>1  2  3\n4  5  6\n[torch.DoubleTensor of size 2x3]\n</code></pre>", "body_text": "Hi,\nI love the PyTorch library so far, but I wanted to note one little annoyance that I encountered  -- something that could be improved in future. For instance, when I convert numpy arrays to torch tensors, it disregards the original NumPy type and creates torch.DoubleTensor /torch.cuda.DoubleTensors. I think it would make more sense to inherit the array type float, int, etc. to create the tensors.\nHere's a simple example:\nimport numpy as np\nimport torch\n\ny = np.array([[1., 2., 3.],\n              [4., 5., 6.]])\n\ntorch.from_numpy(y)\n\nOutput:\n1  2  3\n4  5  6\n[torch.DoubleTensor of size 2x3]", "body": "Hi,\r\nI love the PyTorch library so far, but I wanted to note one little annoyance that I encountered  -- something that could be improved in future. For instance, when I convert numpy arrays to torch tensors, it disregards the original NumPy type and creates `torch.DoubleTensor /torch.cuda.DoubleTensor`s. I think it would make more sense to inherit the array type float, int, etc. to create the tensors.\r\n\r\nHere's a simple example:\r\n\r\n```import torch\r\nimport numpy as np\r\nimport torch\r\n\r\ny = np.array([[1., 2., 3.],\r\n              [4., 5., 6.]])\r\n\r\ntorch.from_numpy(y)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n1  2  3\r\n4  5  6\r\n[torch.DoubleTensor of size 2x3]\r\n```"}