{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8710", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8710/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8710/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8710/events", "html_url": "https://github.com/pytorch/pytorch/issues/8710", "id": 334249746, "node_id": "MDU6SXNzdWUzMzQyNDk3NDY=", "number": 8710, "title": "Incorrect calculation for torch.nn.MSELoss", "user": {"login": "protossw512", "id": 18194209, "node_id": "MDQ6VXNlcjE4MTk0MjA5", "avatar_url": "https://avatars1.githubusercontent.com/u/18194209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protossw512", "html_url": "https://github.com/protossw512", "followers_url": "https://api.github.com/users/protossw512/followers", "following_url": "https://api.github.com/users/protossw512/following{/other_user}", "gists_url": "https://api.github.com/users/protossw512/gists{/gist_id}", "starred_url": "https://api.github.com/users/protossw512/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protossw512/subscriptions", "organizations_url": "https://api.github.com/users/protossw512/orgs", "repos_url": "https://api.github.com/users/protossw512/repos", "events_url": "https://api.github.com/users/protossw512/events{/privacy}", "received_events_url": "https://api.github.com/users/protossw512/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-06-20T21:07:23Z", "updated_at": "2018-07-11T17:26:36Z", "closed_at": "2018-07-11T17:26:36Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>torch.nn.MSELoss seems to get inaccurate calculation when size_average=True and reduce=True</p>\n<h2>Code example</h2>\n<p>For tensors of 0.1's and 0's, the desired output should be 0.01. (0.1 - 0)^2 = 0.01.<br>\nI can get correct result by code below:</p>\n<pre><code>In [10]: preds = torch.ones(5, 68, 64, 64) / 10\nIn [11]: res = torch.pow((preds - labels), 2)\nIn [12]: torch.mean(res)\nOut[12]: \ntensor(1.00000e-02 *\n       1.0000)\n</code></pre>\n<p>However, if I do something like below, I get inaccurate results:</p>\n<pre><code>In [16]: criterion = torch.nn.MSELoss()\nIn [17]: criterion(labels, preds)\nOut[17]: \ntensor(1.00000e-03 *\n       9.8371)\n</code></pre>\n<p>But when I turned off size_average and reduce and calculate mean manually, I get desired output:</p>\n<pre><code>In [21]: criterion = torch.nn.MSELoss(False, False)\nIn [22]: torch.sum(criterion(labels, preds)) / (5*68*64*64)\nOut[22]: \ntensor(1.00000e-02 *\n       1.0000)\n</code></pre>\n<p>Or:</p>\n<pre><code>In [23]: torch.mean(criterion(labels, preds))\nOut[23]: \ntensor(1.00000e-02 *\n       1.0000)\n</code></pre>\n<p>I kind of know that you cannot get exactly number when you using float datatype, but 0.01 and 0.00983 seems to be too off for me.<br>\nI am not quite sure if it is intended to be like that or I am not using it correctly.</p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.3 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 2.7<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration:<br>\nGPU 0: GeForce GTX 1080 Ti<br>\nGPU 1: GeForce GTX 1080 Ti<br>\nGPU 2: GeForce GTX 1080 Ti</p>\n<p>Nvidia driver version: 387.34<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.2<br>\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.4<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.5)<br>\n[pip] torch (0.4.0)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] Could not collect</p>", "body_text": "Issue description\ntorch.nn.MSELoss seems to get inaccurate calculation when size_average=True and reduce=True\nCode example\nFor tensors of 0.1's and 0's, the desired output should be 0.01. (0.1 - 0)^2 = 0.01.\nI can get correct result by code below:\nIn [10]: preds = torch.ones(5, 68, 64, 64) / 10\nIn [11]: res = torch.pow((preds - labels), 2)\nIn [12]: torch.mean(res)\nOut[12]: \ntensor(1.00000e-02 *\n       1.0000)\n\nHowever, if I do something like below, I get inaccurate results:\nIn [16]: criterion = torch.nn.MSELoss()\nIn [17]: criterion(labels, preds)\nOut[17]: \ntensor(1.00000e-03 *\n       9.8371)\n\nBut when I turned off size_average and reduce and calculate mean manually, I get desired output:\nIn [21]: criterion = torch.nn.MSELoss(False, False)\nIn [22]: torch.sum(criterion(labels, preds)) / (5*68*64*64)\nOut[22]: \ntensor(1.00000e-02 *\n       1.0000)\n\nOr:\nIn [23]: torch.mean(criterion(labels, preds))\nOut[23]: \ntensor(1.00000e-02 *\n       1.0000)\n\nI kind of know that you cannot get exactly number when you using float datatype, but 0.01 and 0.00983 seems to be too off for me.\nI am not quite sure if it is intended to be like that or I am not using it correctly.\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.3 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 2.7\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\nGPU 2: GeForce GTX 1080 Ti\nNvidia driver version: 387.34\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.2\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.4\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\nVersions of relevant libraries:\n[pip] numpy (1.14.5)\n[pip] torch (0.4.0)\n[pip] torchvision (0.2.1)\n[conda] Could not collect", "body": "## Issue description\r\ntorch.nn.MSELoss seems to get inaccurate calculation when size_average=True and reduce=True\r\n\r\n## Code example\r\n\r\nFor tensors of 0.1's and 0's, the desired output should be 0.01. (0.1 - 0)^2 = 0.01.\r\nI can get correct result by code below:\r\n```\r\nIn [10]: preds = torch.ones(5, 68, 64, 64) / 10\r\nIn [11]: res = torch.pow((preds - labels), 2)\r\nIn [12]: torch.mean(res)\r\nOut[12]: \r\ntensor(1.00000e-02 *\r\n       1.0000)\r\n```\r\n\r\nHowever, if I do something like below, I get inaccurate results:\r\n```\r\nIn [16]: criterion = torch.nn.MSELoss()\r\nIn [17]: criterion(labels, preds)\r\nOut[17]: \r\ntensor(1.00000e-03 *\r\n       9.8371)\r\n```\r\n\r\nBut when I turned off size_average and reduce and calculate mean manually, I get desired output:\r\n```\r\nIn [21]: criterion = torch.nn.MSELoss(False, False)\r\nIn [22]: torch.sum(criterion(labels, preds)) / (5*68*64*64)\r\nOut[22]: \r\ntensor(1.00000e-02 *\r\n       1.0000)\r\n```\r\nOr:\r\n\r\n```\r\nIn [23]: torch.mean(criterion(labels, preds))\r\nOut[23]: \r\ntensor(1.00000e-02 *\r\n       1.0000)\r\n```\r\n\r\nI kind of know that you cannot get exactly number when you using float datatype, but 0.01 and 0.00983 seems to be too off for me.\r\nI am not quite sure if it is intended to be like that or I am not using it correctly.\r\n\r\n## System Info\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.3 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 2.7\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1080 Ti\r\nGPU 2: GeForce GTX 1080 Ti\r\n\r\nNvidia driver version: 387.34\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/x86_64-linux-gnu/libcudnn.so.7.1.2\r\n/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.4\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.5)\r\n[pip] torch (0.4.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] Could not collect\r\n"}