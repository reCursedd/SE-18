{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390688742", "html_url": "https://github.com/pytorch/pytorch/pull/7663#issuecomment-390688742", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7663", "id": 390688742, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDY4ODc0Mg==", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-21T15:27:21Z", "updated_at": "2018-05-21T15:27:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>And progressive numbers is not very like pytorch, and is not super backwards compatible: you always have to add new parameters to the end of your list. I'm generally happy with a macro for ease of naming for users, like</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">define</span> <span class=\"pl-en\">REGISTER</span>(<span class=\"pl-v\">x, expr</span>) <span class=\"pl-k\">register</span>(#x, &amp;(decltype(*<span class=\"pl-c1\">this</span>):: ## x), expr);\n\nusage:\n<span class=\"pl-en\">REGISTER</span>(weight, at::ones(at::CPU(at::<span class=\"pl-c1\">kFloat</span>), {<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>})));</pre></div>\n<p>though it does add a little bit of magic, and you can't have unbound parameters. However, I think this is the same case in pytorch.</p>", "body_text": "And progressive numbers is not very like pytorch, and is not super backwards compatible: you always have to add new parameters to the end of your list. I'm generally happy with a macro for ease of naming for users, like\n#define REGISTER(x, expr) register(#x, &(decltype(*this):: ## x), expr);\n\nusage:\nREGISTER(weight, at::ones(at::CPU(at::kFloat), {3, 3})));\nthough it does add a little bit of magic, and you can't have unbound parameters. However, I think this is the same case in pytorch.", "body": "And progressive numbers is not very like pytorch, and is not super backwards compatible: you always have to add new parameters to the end of your list. I'm generally happy with a macro for ease of naming for users, like\r\n\r\n```c++\r\n#define REGISTER(x, expr) register(#x, &(decltype(*this):: ## x), expr);\r\n\r\nusage:\r\nREGISTER(weight, at::ones(at::CPU(at::kFloat), {3, 3})));\r\n```\r\n\r\nthough it does add a little bit of magic, and you can't have unbound parameters. However, I think this is the same case in pytorch."}