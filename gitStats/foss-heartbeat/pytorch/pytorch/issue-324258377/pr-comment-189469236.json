{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189469236", "pull_request_review_id": 121653752, "id": 189469236, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2OTIzNg==", "diff_hunk": "@@ -87,13 +87,70 @@ class Module {\n   }\n \n  protected:\n-  std::shared_ptr<nn::Module> add(\n-      std::shared_ptr<nn::Module>,\n-      std::string const&);\n-  // Be careful when registering Tensors that are not variables\n-  Variable& add(Variable, std::string const&);\n+  using ModulePtr = std::shared_ptr<nn::Module>;\n+\n+  template <typename Derived, typename M>\n+  void register_module(\n+      const std::string& name,\n+      std::shared_ptr<M> Derived::*module,\n+      std::shared_ptr<M> new_module) {\n+    check_name(\"Module\", name);\n+    auto base_module =\n+        reinterpret_cast<std::shared_ptr<nn::Module> Derived::*>(module);\n+    const auto pair = children_.emplace(name, base_module);\n+    AT_CHECK(pair.second, \"Module \" + name + \" has already been registered\");\n+    (pair.first->second)(static_cast<Derived*>(this)) = std::move(new_module);\n+  }\n+\n+  // Hack for Sequential, should remove/figure out to do this better\n+  template <typename Derived>\n+  void register_module(\n+      const std::string& name,\n+      std::vector<std::shared_ptr<Module>> Derived::*modules,\n+      size_t index) {\n+    const auto pair = children_.insert({name, {modules, index}});\n+    AT_CHECK(pair.second, \"Module \" + name + \" has already been registered\");\n+  }\n+\n+  template <typename Derived>\n+  void register_parameter(\n+      const std::string& name,\n+      Variable Derived::*variable,\n+      Tensor tensor) {\n+    check_name(\"Parameter\", name);\n+    const auto pair = parameters_.emplace(name, variable);\n+    AT_CHECK(pair.second, \"Parameter \" + name + \" has already been registered\");\n+    (pair.first->second)(static_cast<Derived*>(this)) =\n+        autograd::make_variable(tensor, /*requires_grad=*/true);\n+  }\n+\n+  template <typename Derived>\n+  void register_parameters(ParameterList Derived::*parameter_list) {", "path": "torch/csrc/api/include/torch/nn/module.h", "position": null, "original_position": 72, "commit_id": "f82bd37e337af4d606efb5adfd6e3a85453f83d5", "original_commit_id": "a478435beb5f154bd8c984a9e6a3611bc1f4b107", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Meh, can we implement this as an RNN method? When would that be useful to people in general?", "created_at": "2018-05-20T20:14:45Z", "updated_at": "2018-11-23T15:44:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/7663#discussion_r189469236", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7663", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189469236"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7663#discussion_r189469236"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7663"}}, "body_html": "<p>Meh, can we implement this as an RNN method? When would that be useful to people in general?</p>", "body_text": "Meh, can we implement this as an RNN method? When would that be useful to people in general?"}