{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7663", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7663/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7663/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7663/events", "html_url": "https://github.com/pytorch/pytorch/pull/7663", "id": 324258377, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg4OTEzMjIy", "number": 7663, "title": "[C++ API] Using new registration mechanism", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-18T03:29:22Z", "updated_at": "2018-11-23T15:44:28Z", "closed_at": "2018-05-22T00:59:22Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7663", "html_url": "https://github.com/pytorch/pytorch/pull/7663", "diff_url": "https://github.com/pytorch/pytorch/pull/7663.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7663.patch"}, "body_html": "<p>To solve the problem of references to parameters/submodules in the base module getting invalidated on <code>clone()</code> and reassignment of variables in submodules, this PR implements a change discussed by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> and I, which, instead of storing references, stores functions that can be passed the <code>this</code> pointer to access the members. You can think of this as a fancy way of storing the offsets into the subclass.</p>\n<p>Posting as MVP to discuss. It's a little batshit crazy, but only a little.</p>\n<p>Review order:</p>\n<ol>\n<li><code>torch/detail/member_ref.h</code></li>\n<li><code>torch/nn/module.h</code></li>\n<li><code>torch/nn/modules/linear.cpp</code> and other modules</li>\n<li>Other stuff</li>\n</ol>\n<p>Pros:</p>\n<ul>\n<li>Solves reference invalidation</li>\n<li>Allows use of constructors instead of <code>reset()</code> function (not implemented yet!)</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Complicated code</li>\n<li>Unsafe, I accidentally passed the wrong object to access the member and fortunately (!) it segfaulted. This could be improved by using our <code>std::any</code> shim instead of <code>void*</code> in the implementation of <code>MemberRef</code></li>\n<li>Registration is a little verbose: <code>register_parameter(\"weight\", &amp;MyModule::weight, at::ones(at::CPU(at::kFloat), {3, 3})</code></li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "To solve the problem of references to parameters/submodules in the base module getting invalidated on clone() and reassignment of variables in submodules, this PR implements a change discussed by @ezyang, @ebetica and I, which, instead of storing references, stores functions that can be passed the this pointer to access the members. You can think of this as a fancy way of storing the offsets into the subclass.\nPosting as MVP to discuss. It's a little batshit crazy, but only a little.\nReview order:\n\ntorch/detail/member_ref.h\ntorch/nn/module.h\ntorch/nn/modules/linear.cpp and other modules\nOther stuff\n\nPros:\n\nSolves reference invalidation\nAllows use of constructors instead of reset() function (not implemented yet!)\n\nCons:\n\nComplicated code\nUnsafe, I accidentally passed the wrong object to access the member and fortunately (!) it segfaulted. This could be improved by using our std::any shim instead of void* in the implementation of MemberRef\nRegistration is a little verbose: register_parameter(\"weight\", &MyModule::weight, at::ones(at::CPU(at::kFloat), {3, 3})\n\n@ezyang @ebetica @apaszke", "body": "To solve the problem of references to parameters/submodules in the base module getting invalidated on `clone()` and reassignment of variables in submodules, this PR implements a change discussed by @ezyang, @ebetica and I, which, instead of storing references, stores functions that can be passed the `this` pointer to access the members. You can think of this as a fancy way of storing the offsets into the subclass.\r\n\r\nPosting as MVP to discuss. It's a little batshit crazy, but only a little.\r\n\r\nReview order:\r\n1. `torch/detail/member_ref.h`\r\n2. `torch/nn/module.h`\r\n3. `torch/nn/modules/linear.cpp` and other modules\r\n4. Other stuff\r\n\r\nPros:\r\n+ Solves reference invalidation\r\n+ Allows use of constructors instead of `reset()` function (not implemented yet!)\r\n\r\nCons:\r\n\r\n+ Complicated code\r\n+ Unsafe, I accidentally passed the wrong object to access the member and fortunately (!) it segfaulted. This could be improved by using our `std::any` shim instead of `void*` in the implementation of `MemberRef`\r\n+ Registration is a little verbose: `register_parameter(\"weight\", &MyModule::weight, at::ones(at::CPU(at::kFloat), {3, 3})`\r\n\r\n@ezyang @ebetica @apaszke "}