{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10409", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10409/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10409/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10409/events", "html_url": "https://github.com/pytorch/pytorch/pull/10409", "id": 349601551, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA3Njc4OTY2", "number": 10409, "title": "Add nn functional tests in JIT", "user": {"login": "wanchaol", "id": 9443650, "node_id": "MDQ6VXNlcjk0NDM2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9443650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanchaol", "html_url": "https://github.com/wanchaol", "followers_url": "https://api.github.com/users/wanchaol/followers", "following_url": "https://api.github.com/users/wanchaol/following{/other_user}", "gists_url": "https://api.github.com/users/wanchaol/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanchaol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanchaol/subscriptions", "organizations_url": "https://api.github.com/users/wanchaol/orgs", "repos_url": "https://api.github.com/users/wanchaol/repos", "events_url": "https://api.github.com/users/wanchaol/events{/privacy}", "received_events_url": "https://api.github.com/users/wanchaol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-10T17:43:56Z", "updated_at": "2018-11-23T15:49:24Z", "closed_at": "2018-08-17T18:10:57Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10409", "html_url": "https://github.com/pytorch/pytorch/pull/10409", "diff_url": "https://github.com/pytorch/pytorch/pull/10409.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10409.patch"}, "body_html": "<p>The PR is the first step to integrate torch.nn library with JIT. It adds the tests for nn functional interfaces in trace/script mode, and tries to find out the different between torch.nn.functional ops and the ATen ops, to see the work need to be done in order to support a full set of nn functional in script mode.</p>\n<p>Some statistics in summary:</p>\n<ul>\n<li>\n<p>Totally 84 useful functions in torch.nn.functional (the number does not include helper funcs and deprecated funcs in torch.nn.functional).</p>\n</li>\n<li>\n<p>7 functions/ops does not support higher gradient, so just excluded from the whole test.</p>\n</li>\n<li>\n<p>36 functions is different with the Aten op for different reasons. Among those 36 functions, bunch of them (roughly around 10-15) are just naming difference and simple transformation using other ops inside the function.</p>\n</li>\n</ul>", "body_text": "The PR is the first step to integrate torch.nn library with JIT. It adds the tests for nn functional interfaces in trace/script mode, and tries to find out the different between torch.nn.functional ops and the ATen ops, to see the work need to be done in order to support a full set of nn functional in script mode.\nSome statistics in summary:\n\n\nTotally 84 useful functions in torch.nn.functional (the number does not include helper funcs and deprecated funcs in torch.nn.functional).\n\n\n7 functions/ops does not support higher gradient, so just excluded from the whole test.\n\n\n36 functions is different with the Aten op for different reasons. Among those 36 functions, bunch of them (roughly around 10-15) are just naming difference and simple transformation using other ops inside the function.", "body": "The PR is the first step to integrate torch.nn library with JIT. It adds the tests for nn functional interfaces in trace/script mode, and tries to find out the different between torch.nn.functional ops and the ATen ops, to see the work need to be done in order to support a full set of nn functional in script mode. \r\n\r\nSome statistics in summary:\r\n\r\n- Totally 84 useful functions in torch.nn.functional (the number does not include helper funcs and deprecated funcs in torch.nn.functional). \r\n\r\n- 7 functions/ops does not support higher gradient, so just excluded from the whole test.\r\n\r\n- 36 functions is different with the Aten op for different reasons. Among those 36 functions, bunch of them (roughly around 10-15) are just naming difference and simple transformation using other ops inside the function. "}