{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8970", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8970/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8970/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8970/events", "html_url": "https://github.com/pytorch/pytorch/pull/8970", "id": 336416122, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk3ODc1NDQy", "number": 8970, "title": "[C++ API] Create nn::Module::is", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-06-27T22:57:48Z", "updated_at": "2018-07-02T16:38:34Z", "closed_at": "2018-06-28T23:11:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8970", "html_url": "https://github.com/pytorch/pytorch/pull/8970", "diff_url": "https://github.com/pytorch/pytorch/pull/8970.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8970.patch"}, "body_html": "<p>When initializing weights for my C++ model, I had to write</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">initialize_weights</span>(nn::Module&amp; module) {\n  <span class=\"pl-k\">if</span> (module.<span class=\"pl-c1\">name</span>().<span class=\"pl-c1\">find</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Conv2d<span class=\"pl-pds\">\"</span></span>) != std::string::npos) {\n    module.<span class=\"pl-c1\">parameters</span>()[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span>].<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">normal_</span>(<span class=\"pl-c1\">0.0</span>, <span class=\"pl-c1\">0.02</span>);\n  } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (module.<span class=\"pl-c1\">name</span>().<span class=\"pl-c1\">find</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>BatchNorm<span class=\"pl-pds\">\"</span></span>) != std::string::npos) {\n    <span class=\"pl-k\">auto</span> parameters = module.<span class=\"pl-c1\">parameters</span>();\n    parameters[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span>].<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">normal_</span>(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">0.02</span>);\n    parameters[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bias<span class=\"pl-pds\">\"</span></span>].<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">fill_</span>(<span class=\"pl-c1\">0</span>);\n  }\n}</pre></div>\n<p>The string-based module determination is not very nice, and not very C++-y. So I created <code>nn::Module::is&lt;T&gt;</code> which does a <code>dynamic_cast</code> inside. It also handles the <code>ModuleHolder</code> vs. <code>Module</code> distinction.</p>\n<p>It now becomes</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">if</span> (module.is&lt;nn::Conv2d&gt;()) {\n    module.<span class=\"pl-c1\">parameters</span>()[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span>].<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">normal_</span>(<span class=\"pl-c1\">0.0</span>, <span class=\"pl-c1\">0.02</span>);\n  } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (module.is&lt;nn::BatchNorm&gt;()) {\n    <span class=\"pl-k\">auto</span> parameters = module.<span class=\"pl-c1\">parameters</span>();\n    parameters[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span>].<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">normal_</span>(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">0.02</span>);\n    parameters[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bias<span class=\"pl-pds\">\"</span></span>].<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">fill_</span>(<span class=\"pl-c1\">0</span>);\n  }</pre></div>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "When initializing weights for my C++ model, I had to write\nvoid initialize_weights(nn::Module& module) {\n  if (module.name().find(\"Conv2d\") != std::string::npos) {\n    module.parameters()[\"weight\"].data().normal_(0.0, 0.02);\n  } else if (module.name().find(\"BatchNorm\") != std::string::npos) {\n    auto parameters = module.parameters();\n    parameters[\"weight\"].data().normal_(1.0, 0.02);\n    parameters[\"bias\"].data().fill_(0);\n  }\n}\nThe string-based module determination is not very nice, and not very C++-y. So I created nn::Module::is<T> which does a dynamic_cast inside. It also handles the ModuleHolder vs. Module distinction.\nIt now becomes\nif (module.is<nn::Conv2d>()) {\n    module.parameters()[\"weight\"].data().normal_(0.0, 0.02);\n  } else if (module.is<nn::BatchNorm>()) {\n    auto parameters = module.parameters();\n    parameters[\"weight\"].data().normal_(1.0, 0.02);\n    parameters[\"bias\"].data().fill_(0);\n  }\n@ebetica @ezyang @apaszke", "body": "When initializing weights for my C++ model, I had to write\r\n\r\n```cpp\r\nvoid initialize_weights(nn::Module& module) {\r\n  if (module.name().find(\"Conv2d\") != std::string::npos) {\r\n    module.parameters()[\"weight\"].data().normal_(0.0, 0.02);\r\n  } else if (module.name().find(\"BatchNorm\") != std::string::npos) {\r\n    auto parameters = module.parameters();\r\n    parameters[\"weight\"].data().normal_(1.0, 0.02);\r\n    parameters[\"bias\"].data().fill_(0);\r\n  }\r\n}\r\n```\r\n\r\nThe string-based module determination is not very nice, and not very C++-y. So I created `nn::Module::is<T>` which does a `dynamic_cast` inside. It also handles the `ModuleHolder` vs. `Module` distinction.\r\n\r\nIt now becomes\r\n\r\n```cpp\r\nif (module.is<nn::Conv2d>()) {\r\n    module.parameters()[\"weight\"].data().normal_(0.0, 0.02);\r\n  } else if (module.is<nn::BatchNorm>()) {\r\n    auto parameters = module.parameters();\r\n    parameters[\"weight\"].data().normal_(1.0, 0.02);\r\n    parameters[\"bias\"].data().fill_(0);\r\n  }\r\n```\r\n\r\n@ebetica @ezyang @apaszke "}