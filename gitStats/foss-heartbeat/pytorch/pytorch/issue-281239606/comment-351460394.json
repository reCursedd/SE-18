{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351460394", "html_url": "https://github.com/pytorch/pytorch/pull/4127#issuecomment-351460394", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4127", "id": 351460394, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2MDM5NA==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-13T17:19:24Z", "updated_at": "2017-12-13T17:19:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It means that the underlying implementation is implemented in terms of other differentiable functions, so you can \"call it directly\"; i.e., the same thing what primitive/non-primitive means in the AD literature. I think in <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a>'s nomenclature that means delegate to the super-class Type, though I find stating it in terms of this implementation detail difficult to understand (and the delegation to the baseType is never really just \"delegation\", since there's all sorts of unpacking/wrapping to do).</p>", "body_text": "It means that the underlying implementation is implemented in terms of other differentiable functions, so you can \"call it directly\"; i.e., the same thing what primitive/non-primitive means in the AD literature. I think in @colesbury's nomenclature that means delegate to the super-class Type, though I find stating it in terms of this implementation detail difficult to understand (and the delegation to the baseType is never really just \"delegation\", since there's all sorts of unpacking/wrapping to do).", "body": "It means that the underlying implementation is implemented in terms of other differentiable functions, so you can \"call it directly\"; i.e., the same thing what primitive/non-primitive means in the AD literature. I think in @colesbury's nomenclature that means delegate to the super-class Type, though I find stating it in terms of this implementation detail difficult to understand (and the delegation to the baseType is never really just \"delegation\", since there's all sorts of unpacking/wrapping to do)."}