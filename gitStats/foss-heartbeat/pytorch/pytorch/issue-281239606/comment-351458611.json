{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351458611", "html_url": "https://github.com/pytorch/pytorch/pull/4127#issuecomment-351458611", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4127", "id": 351458611, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ1ODYxMQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-13T17:13:27Z", "updated_at": "2017-12-13T17:13:27Z", "author_association": "MEMBER", "body_html": "<p>Is that the same thing as saying that it's implemented on the base <code>at::Type</code> class? The question we usually ask in <code>VariableType</code> is whether we should delegate to the super-class <code>Type</code> or the wrapped object <code>baseType</code>.</p>", "body_text": "Is that the same thing as saying that it's implemented on the base at::Type class? The question we usually ask in VariableType is whether we should delegate to the super-class Type or the wrapped object baseType.", "body": "Is that the same thing as saying that it's implemented on the base `at::Type` class? The question we usually ask in `VariableType` is whether we should delegate to the super-class `Type` or the wrapped object `baseType`."}