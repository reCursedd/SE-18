{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4127", "id": 157724649, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU3NzI0NjQ5", "html_url": "https://github.com/pytorch/pytorch/pull/4127", "diff_url": "https://github.com/pytorch/pytorch/pull/4127.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4127.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4127", "number": 4127, "state": "closed", "locked": false, "title": "Trace ATen native functions as themselves, not their implementations.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "```\r\n    Trace ATen non-primitive functions as themselves, not their implementations.\r\n    \r\n    Previously, if I invoked an ATen non-primitive function foo, which in turn\r\n    called subfoo, I would always see 'subfoo' in the trace (e.g., tracing\r\n    'inlines' all of these operations.)  Such inlining is bad for ONNX\r\n    (and can be bad for optimization) as it prevents high-level\r\n    optimizations from taking advantage of the structure.  It might\r\n    be right to inline, but give the optimizer a chance to work before\r\n    inlining happens!\r\n    \r\n    The implementation here is surprisingly simple, because it uses\r\n    the \"DCE trick\".  Essentially, it doesn't matter if the constituent\r\n    calls perform tracing, because you can always trace it again, and\r\n    override the trace nodes associated with the returned variables.\r\n    The original trace becomes dead and can be DCE'd.\r\n    \r\n    While implementing this, I also refactored how 'isTracing' and\r\n    'trace_outputs' works:\r\n    \r\n    - isTracing was previously a single function with overloads for\r\n      both Tensor and Variable arguments.  Unfortunately, such overloads\r\n      are not safe, because of how C++ implicit conversions work.  You\r\n      would think that C++ should never confuse an overload for\r\n      Variable with ArrayRef<Tensor>, but this is exactly what can\r\n      happen: Tensor is convertible to both Variable and ArrayRef<Tensor>,\r\n      thus it's ambiguous and C++ doesn't like it.  The last time I ran\r\n      into this problem, I applied initializer lists to everything and\r\n      called it a day.  A more robust fix is to separate out the\r\n      Variable and Tensor overloads, which I have done in this patch.\r\n    \r\n    - trace_outputs was fed as an initializer list, which doesn't work\r\n      when you have heterogenous inputs.  So instead we first feed\r\n      everything through 'flatten', which has overloads for each of the\r\n      argument patterns in ATen, which then goes on to the recordTrace\r\n      (which takes an ArrayRef).  This is *no less efficient*, because\r\n      we were allocating a vector anyway (to do the conversion from\r\n      vector of Tensor to vector of Variable).\r\n    \r\n    This fixes mean that 'index' can properly be traced... although the\r\n    JIT still does not support it.  A failing test case has been added to\r\n    this effect.\r\n    \r\n    Some knock-on effects:\r\n    \r\n    - The fuser now knows about chunk as well as split.  They're pretty\r\n      similar so there is no problem.\r\n    \r\n    - There is a new 'canonicalize' pass in the JIT which renumbers a graph\r\n      so that all structurally equivalent graphs render the same.\r\n    \r\n    - We run DCE before the fuser tests, to make sure dead nodes don't\r\n      block fusion.\r\n    \r\n    - There are new ONNX exports for the newly introduced higher level ATen\r\n      operations.  This includes type_as (no-op case only), chunk, select.\r\n    \r\n    Zach didn't like the extra use of 'native' in the new codegen, so\r\n    we've introduced a new concept, 'primitive'.  A primitive function\r\n    is one that cannot be differentiated automatically; you need to\r\n    specify the backward somehow.  ATen Declarations.yaml generation\r\n    is updated to produce this bit, and gen_variable_type.py makes\r\n    use of this information to decide which dispatch path to codegen.\r\n```", "created_at": "2017-12-12T02:52:40Z", "updated_at": "2018-11-23T15:37:16Z", "closed_at": "2017-12-15T18:50:32Z", "merged_at": "2017-12-15T18:50:32Z", "merge_commit_sha": "6d72c829855607953ac001a21e34692f278f6439", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4127/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4127/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4127/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/2e37b5ac26214da7c445ce2c582bed309dfd26f7", "head": {"label": "ezyang:node-scope", "ref": "node-scope", "sha": "2e37b5ac26214da7c445ce2c582bed309dfd26f7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "repo": {"id": 101798885, "node_id": "MDEwOlJlcG9zaXRvcnkxMDE3OTg4ODU=", "name": "pytorch", "full_name": "ezyang/pytorch", "private": false, "owner": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ezyang/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/ezyang/pytorch", "forks_url": "https://api.github.com/repos/ezyang/pytorch/forks", "keys_url": "https://api.github.com/repos/ezyang/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ezyang/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ezyang/pytorch/teams", "hooks_url": "https://api.github.com/repos/ezyang/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/ezyang/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/ezyang/pytorch/events", "assignees_url": "https://api.github.com/repos/ezyang/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/ezyang/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/ezyang/pytorch/tags", "blobs_url": "https://api.github.com/repos/ezyang/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ezyang/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ezyang/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ezyang/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ezyang/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/ezyang/pytorch/languages", "stargazers_url": "https://api.github.com/repos/ezyang/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/ezyang/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/ezyang/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/ezyang/pytorch/subscription", "commits_url": "https://api.github.com/repos/ezyang/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ezyang/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ezyang/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ezyang/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ezyang/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/ezyang/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ezyang/pytorch/merges", "archive_url": "https://api.github.com/repos/ezyang/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ezyang/pytorch/downloads", "issues_url": "https://api.github.com/repos/ezyang/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/ezyang/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/ezyang/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/ezyang/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ezyang/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/ezyang/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/ezyang/pytorch/deployments", "created_at": "2017-08-29T19:28:39Z", "updated_at": "2018-10-29T15:06:40Z", "pushed_at": "2018-11-21T22:30:09Z", "git_url": "git://github.com/ezyang/pytorch.git", "ssh_url": "git@github.com:ezyang/pytorch.git", "clone_url": "https://github.com/ezyang/pytorch.git", "svn_url": "https://github.com/ezyang/pytorch", "homepage": "http://pytorch.org", "size": 88254, "stargazers_count": 1, "watchers_count": 1, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 2, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 2, "watchers": 1, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "dde10e1d4b20d624c8a74aeb68f08fd6f5538ea3", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2197, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2197, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4127"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4127"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/4127"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/4127/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4127/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4127/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/2e37b5ac26214da7c445ce2c582bed309dfd26f7"}}, "author_association": "CONTRIBUTOR", "body_html": "<pre><code>    Trace ATen non-primitive functions as themselves, not their implementations.\n    \n    Previously, if I invoked an ATen non-primitive function foo, which in turn\n    called subfoo, I would always see 'subfoo' in the trace (e.g., tracing\n    'inlines' all of these operations.)  Such inlining is bad for ONNX\n    (and can be bad for optimization) as it prevents high-level\n    optimizations from taking advantage of the structure.  It might\n    be right to inline, but give the optimizer a chance to work before\n    inlining happens!\n    \n    The implementation here is surprisingly simple, because it uses\n    the \"DCE trick\".  Essentially, it doesn't matter if the constituent\n    calls perform tracing, because you can always trace it again, and\n    override the trace nodes associated with the returned variables.\n    The original trace becomes dead and can be DCE'd.\n    \n    While implementing this, I also refactored how 'isTracing' and\n    'trace_outputs' works:\n    \n    - isTracing was previously a single function with overloads for\n      both Tensor and Variable arguments.  Unfortunately, such overloads\n      are not safe, because of how C++ implicit conversions work.  You\n      would think that C++ should never confuse an overload for\n      Variable with ArrayRef&lt;Tensor&gt;, but this is exactly what can\n      happen: Tensor is convertible to both Variable and ArrayRef&lt;Tensor&gt;,\n      thus it's ambiguous and C++ doesn't like it.  The last time I ran\n      into this problem, I applied initializer lists to everything and\n      called it a day.  A more robust fix is to separate out the\n      Variable and Tensor overloads, which I have done in this patch.\n    \n    - trace_outputs was fed as an initializer list, which doesn't work\n      when you have heterogenous inputs.  So instead we first feed\n      everything through 'flatten', which has overloads for each of the\n      argument patterns in ATen, which then goes on to the recordTrace\n      (which takes an ArrayRef).  This is *no less efficient*, because\n      we were allocating a vector anyway (to do the conversion from\n      vector of Tensor to vector of Variable).\n    \n    This fixes mean that 'index' can properly be traced... although the\n    JIT still does not support it.  A failing test case has been added to\n    this effect.\n    \n    Some knock-on effects:\n    \n    - The fuser now knows about chunk as well as split.  They're pretty\n      similar so there is no problem.\n    \n    - There is a new 'canonicalize' pass in the JIT which renumbers a graph\n      so that all structurally equivalent graphs render the same.\n    \n    - We run DCE before the fuser tests, to make sure dead nodes don't\n      block fusion.\n    \n    - There are new ONNX exports for the newly introduced higher level ATen\n      operations.  This includes type_as (no-op case only), chunk, select.\n    \n    Zach didn't like the extra use of 'native' in the new codegen, so\n    we've introduced a new concept, 'primitive'.  A primitive function\n    is one that cannot be differentiated automatically; you need to\n    specify the backward somehow.  ATen Declarations.yaml generation\n    is updated to produce this bit, and gen_variable_type.py makes\n    use of this information to decide which dispatch path to codegen.\n</code></pre>", "body_text": "Trace ATen non-primitive functions as themselves, not their implementations.\n    \n    Previously, if I invoked an ATen non-primitive function foo, which in turn\n    called subfoo, I would always see 'subfoo' in the trace (e.g., tracing\n    'inlines' all of these operations.)  Such inlining is bad for ONNX\n    (and can be bad for optimization) as it prevents high-level\n    optimizations from taking advantage of the structure.  It might\n    be right to inline, but give the optimizer a chance to work before\n    inlining happens!\n    \n    The implementation here is surprisingly simple, because it uses\n    the \"DCE trick\".  Essentially, it doesn't matter if the constituent\n    calls perform tracing, because you can always trace it again, and\n    override the trace nodes associated with the returned variables.\n    The original trace becomes dead and can be DCE'd.\n    \n    While implementing this, I also refactored how 'isTracing' and\n    'trace_outputs' works:\n    \n    - isTracing was previously a single function with overloads for\n      both Tensor and Variable arguments.  Unfortunately, such overloads\n      are not safe, because of how C++ implicit conversions work.  You\n      would think that C++ should never confuse an overload for\n      Variable with ArrayRef<Tensor>, but this is exactly what can\n      happen: Tensor is convertible to both Variable and ArrayRef<Tensor>,\n      thus it's ambiguous and C++ doesn't like it.  The last time I ran\n      into this problem, I applied initializer lists to everything and\n      called it a day.  A more robust fix is to separate out the\n      Variable and Tensor overloads, which I have done in this patch.\n    \n    - trace_outputs was fed as an initializer list, which doesn't work\n      when you have heterogenous inputs.  So instead we first feed\n      everything through 'flatten', which has overloads for each of the\n      argument patterns in ATen, which then goes on to the recordTrace\n      (which takes an ArrayRef).  This is *no less efficient*, because\n      we were allocating a vector anyway (to do the conversion from\n      vector of Tensor to vector of Variable).\n    \n    This fixes mean that 'index' can properly be traced... although the\n    JIT still does not support it.  A failing test case has been added to\n    this effect.\n    \n    Some knock-on effects:\n    \n    - The fuser now knows about chunk as well as split.  They're pretty\n      similar so there is no problem.\n    \n    - There is a new 'canonicalize' pass in the JIT which renumbers a graph\n      so that all structurally equivalent graphs render the same.\n    \n    - We run DCE before the fuser tests, to make sure dead nodes don't\n      block fusion.\n    \n    - There are new ONNX exports for the newly introduced higher level ATen\n      operations.  This includes type_as (no-op case only), chunk, select.\n    \n    Zach didn't like the extra use of 'native' in the new codegen, so\n    we've introduced a new concept, 'primitive'.  A primitive function\n    is one that cannot be differentiated automatically; you need to\n    specify the backward somehow.  ATen Declarations.yaml generation\n    is updated to produce this bit, and gen_variable_type.py makes\n    use of this information to decide which dispatch path to codegen.", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "comments": 16, "review_comments": 9, "maintainer_can_modify": false, "commits": 8, "additions": 448, "deletions": 139, "changed_files": 26}