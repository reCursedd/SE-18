{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/311986159", "html_url": "https://github.com/pytorch/pytorch/issues/1939#issuecomment-311986159", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1939", "id": 311986159, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTk4NjE1OQ==", "user": {"login": "martinarjovsky", "id": 5272722, "node_id": "MDQ6VXNlcjUyNzI3MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5272722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinarjovsky", "html_url": "https://github.com/martinarjovsky", "followers_url": "https://api.github.com/users/martinarjovsky/followers", "following_url": "https://api.github.com/users/martinarjovsky/following{/other_user}", "gists_url": "https://api.github.com/users/martinarjovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinarjovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinarjovsky/subscriptions", "organizations_url": "https://api.github.com/users/martinarjovsky/orgs", "repos_url": "https://api.github.com/users/martinarjovsky/repos", "events_url": "https://api.github.com/users/martinarjovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/martinarjovsky/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-29T14:35:30Z", "updated_at": "2017-06-29T14:35:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=687194\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alykhantejani\">@alykhantejani</a> Actually, both of these are batched (64 would be the batch size). You have this behaviour in <a href=\"https://github.com/pytorch/examples/blob/master/imagenet/main.py#L169\">https://github.com/pytorch/examples/blob/master/imagenet/main.py#L169</a> as well with multiclass classification (which doesn't have this bug), where output is 256 x 1000 and target is 256. In here, you have 64 x 1 and target is 64.</p>", "body_text": "@alykhantejani Actually, both of these are batched (64 would be the batch size). You have this behaviour in https://github.com/pytorch/examples/blob/master/imagenet/main.py#L169 as well with multiclass classification (which doesn't have this bug), where output is 256 x 1000 and target is 256. In here, you have 64 x 1 and target is 64.", "body": "@alykhantejani Actually, both of these are batched (64 would be the batch size). You have this behaviour in https://github.com/pytorch/examples/blob/master/imagenet/main.py#L169 as well with multiclass classification (which doesn't have this bug), where output is 256 x 1000 and target is 256. In here, you have 64 x 1 and target is 64."}