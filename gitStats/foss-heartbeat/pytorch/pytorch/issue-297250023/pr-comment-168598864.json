{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168598864", "pull_request_review_id": 96995143, "id": 168598864, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODU5ODg2NA==", "diff_hunk": "@@ -1079,6 +1079,25 @@ def test_ones_like_multiple_device(self):\n         output = torch.ones_like(x)\n         self.assertEqual(output, expected)\n \n+    def test_dtypes(self):\n+        cpu_dtypes = [torch.uint8, torch.int8, torch.int16, torch.int32, torch.int64,\n+                      torch.float16, torch.float32, torch.float64]\n+        cuda_dtypes = [torch.cuda.uint8, torch.cuda.int8, torch.cuda.int16, torch.cuda.int32, torch.cuda.int64,\n+                       torch.cuda.float16, torch.cuda.float32, torch.cuda.float64]\n+        dtypes = cpu_dtypes + (cuda_dtypes if torch.cuda.is_available() else [])\n+\n+        for dtype in dtypes:\n+            # no ops on float16 currently, cuda.float16 doesn't work on windows\n+            if dtype != torch.float16 and not (dtype == torch.cuda.float16 and IS_WINDOWS):\n+                out = torch._C._VariableFunctions.eye(3, 3, dtype=dtype)\n+                self.assertEqual(out.dtype, dtype)\n+            self.assertEqual(dtype in cuda_dtypes, dtype.is_cuda)\n+            self.assertFalse(dtype.is_sparse)", "path": "test/test_torch.py", "position": null, "original_position": 17, "commit_id": "5709cb6ebc6aaa48dca67dc0a4352d23a5e648b5", "original_commit_id": "8965d4fbaeb5a2bc7e9aeade5b8e32297d888483", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can we deduplicate this test into a generic thing, and call that from `test_sparse`?", "created_at": "2018-02-15T20:30:19Z", "updated_at": "2018-11-23T15:39:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/5245#discussion_r168598864", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5245", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168598864"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5245#discussion_r168598864"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5245"}}, "body_html": "<p>Can we deduplicate this test into a generic thing, and call that from <code>test_sparse</code>?</p>", "body_text": "Can we deduplicate this test into a generic thing, and call that from test_sparse?"}