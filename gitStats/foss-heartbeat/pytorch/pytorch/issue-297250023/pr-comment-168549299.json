{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168549299", "pull_request_review_id": 96934270, "id": 168549299, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODU0OTI5OQ==", "diff_hunk": "@@ -0,0 +1,116 @@\n+#include \"Dtype.h\"\n+\n+#include <cstring>\n+#include <structmember.h>\n+#include \"torch/csrc/utils/python_strings.h\"\n+#include \"torch/csrc/utils/tensor_dtypes.h\"\n+#include \"torch/csrc/utils/tensor_types.h\"\n+#include \"THP.h\"\n+\n+PyObject* THPDtypeClass = nullptr;\n+\n+PyObject * THPDtype_New(at::Type* cdata, const std::string& name, bool is_cuda, bool is_sparse)\n+{\n+  auto type = (PyTypeObject*)THPDtypeClass;\n+  auto self = THPObjectPtr{type->tp_alloc(type, 0)};\n+  if (!self) throw python_error();\n+  auto self_ = reinterpret_cast<THPDtype*>(self.get());\n+  self_->cdata = cdata;\n+  char *name_cstr = new char[name.length() + 1];", "path": "torch/csrc/Dtype.cpp", "position": null, "original_position": 19, "commit_id": "5709cb6ebc6aaa48dca67dc0a4352d23a5e648b5", "original_commit_id": "8965d4fbaeb5a2bc7e9aeade5b8e32297d888483", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This leaks the name which isn't great. You can make the name storage part of the type struct:\r\n\r\n```\r\nstruct THPDtype {\r\n...\r\n  char name[64];\r\n};\r\n```\r\n\r\n(Just make sure it ends with a `0` byte and the copy doesn't overflow)", "created_at": "2018-02-15T17:28:30Z", "updated_at": "2018-11-23T15:39:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/5245#discussion_r168549299", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5245", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168549299"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5245#discussion_r168549299"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5245"}}, "body_html": "<p>This leaks the name which isn't great. You can make the name storage part of the type struct:</p>\n<pre><code>struct THPDtype {\n...\n  char name[64];\n};\n</code></pre>\n<p>(Just make sure it ends with a <code>0</code> byte and the copy doesn't overflow)</p>", "body_text": "This leaks the name which isn't great. You can make the name storage part of the type struct:\nstruct THPDtype {\n...\n  char name[64];\n};\n\n(Just make sure it ends with a 0 byte and the copy doesn't overflow)"}