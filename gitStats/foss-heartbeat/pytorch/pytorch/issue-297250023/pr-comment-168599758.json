{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168599758", "pull_request_review_id": 96934270, "id": 168599758, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODU5OTc1OA==", "diff_hunk": "@@ -0,0 +1,93 @@\n+#include <Python.h>\n+#include \"tensor_dtypes.h\"\n+#include \"torch/csrc/Dtype.h\"\n+#include \"torch/csrc/DynamicTypes.h\"\n+#include \"torch/csrc/Exceptions.h\"\n+#include \"torch/csrc/autograd/generated/VariableType.h\"\n+#include \"torch/csrc/utils/tensor_types.h\"\n+\n+namespace torch { namespace utils {\n+\n+static std::pair<std::string, std::string> getDtypeNames(at::ScalarType scalarType) {\n+  switch(scalarType) {\n+    case at::ScalarType::Byte:\n+      // no \"byte\" because byte is signed in numpy and we overload\n+      // byte to mean bool often\n+      return std::make_pair(\"uint8\", \"\");\n+    case at::ScalarType::Char:\n+      // no \"char\" because it is not consistently signed or unsigned; we want\n+      // to move to int8\n+      return std::make_pair(\"int8\", \"\");\n+    case at::ScalarType::Double:\n+      return std::make_pair(\"float64\", \"double\");\n+    case at::ScalarType::Float:\n+      return std::make_pair(\"float32\", \"float\");\n+    case at::ScalarType::Int:\n+      return std::make_pair(\"int32\", \"int\");\n+    case at::ScalarType::Long:\n+      return std::make_pair(\"int64\", \"long\");\n+    case at::ScalarType::Short:\n+      return std::make_pair(\"int16\", \"short\");\n+    case at::ScalarType::Half:\n+      return std::make_pair(\"float16\", \"half\");\n+    default:\n+      throw std::runtime_error(\"Unimplemented scalar type\");\n+  }\n+}\n+\n+void initializeDtypes() {\n+  auto torch_module = THPObjectPtr(PyImport_ImportModule(\"torch\"));\n+  auto cuda_module = THPObjectPtr(PyImport_ImportModule(\"torch.cuda\"));\n+  auto sparse_module = THPObjectPtr(PyImport_ImportModule(\"torch.sparse\"));\n+  auto cuda_sparse_module = THPObjectPtr(PyImport_ImportModule(\"torch.cuda.sparse\"));", "path": "torch/csrc/utils/tensor_dtypes.cpp", "position": null, "original_position": 42, "commit_id": "5709cb6ebc6aaa48dca67dc0a4352d23a5e648b5", "original_commit_id": "8965d4fbaeb5a2bc7e9aeade5b8e32297d888483", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "You should check for null (and throw `python_error()`) after these calls.", "created_at": "2018-02-15T20:33:50Z", "updated_at": "2018-11-23T15:39:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/5245#discussion_r168599758", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5245", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168599758"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5245#discussion_r168599758"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5245"}}, "body_html": "<p>You should check for null (and throw <code>python_error()</code>) after these calls.</p>", "body_text": "You should check for null (and throw python_error()) after these calls."}