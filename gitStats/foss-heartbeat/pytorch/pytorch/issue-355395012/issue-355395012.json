{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11057", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11057/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11057/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11057/events", "html_url": "https://github.com/pytorch/pytorch/issues/11057", "id": 355395012, "node_id": "MDU6SXNzdWUzNTUzOTUwMTI=", "number": 11057, "title": "[JIT] Bad error message when tracing a function with unsupported return type", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-30T02:00:04Z", "updated_at": "2018-09-05T17:58:14Z", "closed_at": "2018-09-05T17:58:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Code example:</p>\n<pre><code>import torch\n\n@torch.jit.trace(torch.rand(3, 4))\ndef foo(x):\n    pass\n</code></pre>\n<p>Output:</p>\n<pre><code>Traceback (most recent call last):\n  File \"retval.py\", line 3, in &lt;module&gt;\n    @torch.jit.trace(torch.rand(3, 4))\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 446, in wrapper\n    module._create_method_from_trace('forward', func, tuple(args))\nRuntimeError: Only tensors and tuples of tensors are supported as inputs to traced functions (toIValue at /Users/jamesreed/onnx-fairseq/pytorch/torch/csrc/jit/pybind_utils.h:62)\nframe #0: torch::jit::toIValue(pybind11::handle) + 725 (0x10f0ee125 in _C.cpython-36m-darwin.so)\nframe #1: torch::jit::toStack(pybind11::tuple const&amp;) + 54 (0x10f0edd66 in _C.cpython-36m-darwin.so)\nframe #2: torch::jit::tracer::createGraphByTracing(pybind11::function, std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;, at::optional&lt;unsigned long&gt;) + 1443 (0x10f213973 in _C.cpython-36m-darwin.so)\nframe #3: torch::jit::script::initJitScriptBindings(_object*)::$_13::operator()(torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple) const + 1660 (0x10f29368c in _C.cpython-36m-darwin.so)\nframe #4: void pybind11::detail::argument_loader&lt;torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple&gt;::call_impl&lt;void, torch::jit::script::initJitScriptBindings(_object*)::$_13&amp;, 0ul, 1ul, 2ul, 3ul, pybind11::detail::void_type&gt;(torch::jit::script::initJitScriptBindings(_object*)::$_13&amp;&amp;&amp;, pybind11::detail::index_sequence&lt;0ul, 1ul, 2ul, 3ul&gt;, pybind11::detail::void_type&amp;&amp;) + 318 (0x10f292f9e in _C.cpython-36m-darwin.so)\nframe #5: std::__1::enable_if&lt;std::is_void&lt;void&gt;::value, pybind11::detail::void_type&gt;::type pybind11::detail::argument_loader&lt;torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple&gt;::call&lt;void, pybind11::detail::void_type, torch::jit::script::initJitScriptBindings(_object*)::$_13&amp;&gt;(torch::jit::script::initJitScriptBindings(_object*)::$_13&amp;&amp;&amp;) + 49 (0x10f2925c1 in _C.cpython-36m-darwin.so)\nframe #6: void pybind11::cpp_function::initialize&lt;torch::jit::script::initJitScriptBindings(_object*)::$_13, void, torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(torch::jit::script::initJitScriptBindings(_object*)::$_13&amp;&amp;, void (*)(torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple), pybind11::name const&amp;, pybind11::is_method const&amp;, pybind11::sibling const&amp;)::'lambda'(pybind11::detail::function_call&amp;)::operator()(pybind11::detail::function_call&amp;) const + 233 (0x10f2924a9 in _C.cpython-36m-darwin.so)\nframe #7: void pybind11::cpp_function::initialize&lt;torch::jit::script::initJitScriptBindings(_object*)::$_13, void, torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(torch::jit::script::initJitScriptBindings(_object*)::$_13&amp;&amp;, void (*)(torch::jit::script::Module&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, pybind11::function, pybind11::tuple), pybind11::name const&amp;, pybind11::is_method const&amp;, pybind11::sibling const&amp;)::'lambda'(pybind11::detail::function_call&amp;)::__invoke(pybind11::detail::function_call&amp;) + 24 (0x10f2923a8 in _C.cpython-36m-darwin.so)\nframe #8: pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 6919 (0x10eaf3da7 in _C.cpython-36m-darwin.so)\n&lt;omitting python frames&gt;\nframe #22: start + 1 (0x7fff5ec53015 in libdyld.dylib)\n</code></pre>", "body_text": "Code example:\nimport torch\n\n@torch.jit.trace(torch.rand(3, 4))\ndef foo(x):\n    pass\n\nOutput:\nTraceback (most recent call last):\n  File \"retval.py\", line 3, in <module>\n    @torch.jit.trace(torch.rand(3, 4))\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 446, in wrapper\n    module._create_method_from_trace('forward', func, tuple(args))\nRuntimeError: Only tensors and tuples of tensors are supported as inputs to traced functions (toIValue at /Users/jamesreed/onnx-fairseq/pytorch/torch/csrc/jit/pybind_utils.h:62)\nframe #0: torch::jit::toIValue(pybind11::handle) + 725 (0x10f0ee125 in _C.cpython-36m-darwin.so)\nframe #1: torch::jit::toStack(pybind11::tuple const&) + 54 (0x10f0edd66 in _C.cpython-36m-darwin.so)\nframe #2: torch::jit::tracer::createGraphByTracing(pybind11::function, std::__1::vector<torch::jit::IValue, std::__1::allocator<torch::jit::IValue> >, at::optional<unsigned long>) + 1443 (0x10f213973 in _C.cpython-36m-darwin.so)\nframe #3: torch::jit::script::initJitScriptBindings(_object*)::$_13::operator()(torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple) const + 1660 (0x10f29368c in _C.cpython-36m-darwin.so)\nframe #4: void pybind11::detail::argument_loader<torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple>::call_impl<void, torch::jit::script::initJitScriptBindings(_object*)::$_13&, 0ul, 1ul, 2ul, 3ul, pybind11::detail::void_type>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&&, pybind11::detail::index_sequence<0ul, 1ul, 2ul, 3ul>, pybind11::detail::void_type&&) + 318 (0x10f292f9e in _C.cpython-36m-darwin.so)\nframe #5: std::__1::enable_if<std::is_void<void>::value, pybind11::detail::void_type>::type pybind11::detail::argument_loader<torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple>::call<void, pybind11::detail::void_type, torch::jit::script::initJitScriptBindings(_object*)::$_13&>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&&) + 49 (0x10f2925c1 in _C.cpython-36m-darwin.so)\nframe #6: void pybind11::cpp_function::initialize<torch::jit::script::initJitScriptBindings(_object*)::$_13, void, torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple, pybind11::name, pybind11::is_method, pybind11::sibling>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&, void (*)(torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&)::'lambda'(pybind11::detail::function_call&)::operator()(pybind11::detail::function_call&) const + 233 (0x10f2924a9 in _C.cpython-36m-darwin.so)\nframe #7: void pybind11::cpp_function::initialize<torch::jit::script::initJitScriptBindings(_object*)::$_13, void, torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple, pybind11::name, pybind11::is_method, pybind11::sibling>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&, void (*)(torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&)::'lambda'(pybind11::detail::function_call&)::__invoke(pybind11::detail::function_call&) + 24 (0x10f2923a8 in _C.cpython-36m-darwin.so)\nframe #8: pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 6919 (0x10eaf3da7 in _C.cpython-36m-darwin.so)\n<omitting python frames>\nframe #22: start + 1 (0x7fff5ec53015 in libdyld.dylib)", "body": "Code example:\r\n\r\n```\r\nimport torch\r\n\r\n@torch.jit.trace(torch.rand(3, 4))\r\ndef foo(x):\r\n    pass\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"retval.py\", line 3, in <module>\r\n    @torch.jit.trace(torch.rand(3, 4))\r\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 446, in wrapper\r\n    module._create_method_from_trace('forward', func, tuple(args))\r\nRuntimeError: Only tensors and tuples of tensors are supported as inputs to traced functions (toIValue at /Users/jamesreed/onnx-fairseq/pytorch/torch/csrc/jit/pybind_utils.h:62)\r\nframe #0: torch::jit::toIValue(pybind11::handle) + 725 (0x10f0ee125 in _C.cpython-36m-darwin.so)\r\nframe #1: torch::jit::toStack(pybind11::tuple const&) + 54 (0x10f0edd66 in _C.cpython-36m-darwin.so)\r\nframe #2: torch::jit::tracer::createGraphByTracing(pybind11::function, std::__1::vector<torch::jit::IValue, std::__1::allocator<torch::jit::IValue> >, at::optional<unsigned long>) + 1443 (0x10f213973 in _C.cpython-36m-darwin.so)\r\nframe #3: torch::jit::script::initJitScriptBindings(_object*)::$_13::operator()(torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple) const + 1660 (0x10f29368c in _C.cpython-36m-darwin.so)\r\nframe #4: void pybind11::detail::argument_loader<torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple>::call_impl<void, torch::jit::script::initJitScriptBindings(_object*)::$_13&, 0ul, 1ul, 2ul, 3ul, pybind11::detail::void_type>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&&, pybind11::detail::index_sequence<0ul, 1ul, 2ul, 3ul>, pybind11::detail::void_type&&) + 318 (0x10f292f9e in _C.cpython-36m-darwin.so)\r\nframe #5: std::__1::enable_if<std::is_void<void>::value, pybind11::detail::void_type>::type pybind11::detail::argument_loader<torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple>::call<void, pybind11::detail::void_type, torch::jit::script::initJitScriptBindings(_object*)::$_13&>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&&) + 49 (0x10f2925c1 in _C.cpython-36m-darwin.so)\r\nframe #6: void pybind11::cpp_function::initialize<torch::jit::script::initJitScriptBindings(_object*)::$_13, void, torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple, pybind11::name, pybind11::is_method, pybind11::sibling>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&, void (*)(torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&)::'lambda'(pybind11::detail::function_call&)::operator()(pybind11::detail::function_call&) const + 233 (0x10f2924a9 in _C.cpython-36m-darwin.so)\r\nframe #7: void pybind11::cpp_function::initialize<torch::jit::script::initJitScriptBindings(_object*)::$_13, void, torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple, pybind11::name, pybind11::is_method, pybind11::sibling>(torch::jit::script::initJitScriptBindings(_object*)::$_13&&, void (*)(torch::jit::script::Module&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, pybind11::function, pybind11::tuple), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&)::'lambda'(pybind11::detail::function_call&)::__invoke(pybind11::detail::function_call&) + 24 (0x10f2923a8 in _C.cpython-36m-darwin.so)\r\nframe #8: pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 6919 (0x10eaf3da7 in _C.cpython-36m-darwin.so)\r\n<omitting python frames>\r\nframe #22: start + 1 (0x7fff5ec53015 in libdyld.dylib)\r\n```"}