{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150063122", "pull_request_review_id": 75557806, "id": 150063122, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDA2MzEyMg==", "diff_hunk": "@@ -338,6 +367,244 @@ PyObject* THDPModule_recv(PyObject *_unused, PyObject *args)\n   END_HANDLE_TH_ERRORS\n }\n \n+\n+PyObject* THDPModule_allReduceMultiGPU(PyObject *_unused, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  PyObject* sequence = PyTuple_GET_ITEM(args, 0);\n+  Py_ssize_t tmp_length;\n+  std::size_t length;\n+  std::vector<at::Tensor> descriptors;\n+  std::vector<at::Tensor> raw_descriptors;\n+  THDGroup group;\n+  THDReduceOp op;\n+\n+  if (PyTuple_GET_SIZE(args) != 3 || !PySequence_Check(sequence)) {\n+    goto invalid_arguments;\n+  }\n+\n+  tmp_length = PySequence_Length(sequence);\n+  THPUtils_assert(tmp_length >= 0, \"couldn't obtain the length of %s\",\n+                  THPUtils_typename(sequence));\n+\n+  length = static_cast<std::size_t>(tmp_length);\n+  descriptors.reserve(length);\n+\n+  for (std::size_t i = 0; i < length; ++i) {\n+    if (!THPModule_isTensor(PySequence_ITEM(sequence, i))) {\n+      goto invalid_arguments;\n+    }\n+\n+    descriptors.push_back(\n+      THDPModule_makeDescriptor(PySequence_ITEM(sequence, i))\n+    );\n+    raw_descriptors.push_back(descriptors.back());\n+  }\n+\n+  group = _getGroup(PyTuple_GET_ITEM(args, 2));\n+  op = _getReduceOp(PyTuple_GET_ITEM(args, 1));\n+\n+  {\n+    AutoNoGIL guard;\n+    THDAllReduceMultiGPU(raw_descriptors.data(), length, op, group);\n+  }\n+  Py_RETURN_NONE;\n+\n+invalid_arguments:\n+  THPUtils_invalidArguments(args, NULL, \"all_reduce_multigpu\", 1,\n+                            \"(list[tensor] in_out, reduce_op op, group gr)\");\n+  Py_RETURN_NONE;\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+\n+PyObject* THDPModule_reduceMultiGPU(PyObject *_unused, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  PyObject* sequence = PyTuple_GET_ITEM(args, 0);\n+  Py_ssize_t tmp_length;\n+  std::size_t length;\n+  std::vector<at::Tensor> descriptors;\n+  std::vector<at::Tensor> raw_descriptors;", "path": "torch/csrc/distributed/Module.cpp", "position": null, "original_position": 116, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "029262b0414ad5b6bfa9af5c92e03b3160822708", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "Oh, these are the left-over after the ATEN rebase, need to be removed", "created_at": "2017-11-09T19:29:13Z", "updated_at": "2018-11-23T15:36:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r150063122", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150063122"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r150063122"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>Oh, these are the left-over after the ATEN rebase, need to be removed</p>", "body_text": "Oh, these are the left-over after the ATEN rebase, need to be removed", "in_reply_to_id": 148460976}