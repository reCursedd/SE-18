{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152950205", "pull_request_review_id": 78879805, "id": 152950205, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk1MDIwNQ==", "diff_hunk": "@@ -0,0 +1,715 @@\n+#include \"../Cuda.hpp\"\n+#include \"../../../csrc/utils/auto_gpu.h\"\n+#include \"DataChannelNccl.hpp\"\n+#include \"DataChannelUtils.hpp\"\n+\n+#include <cuda.h>\n+#include <THC/THC.h>\n+\n+#include <unistd.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <unordered_set>\n+#include <sstream>\n+\n+namespace thd {\n+\n+namespace {\n+\n+\n+std::unordered_map<THDReduceOp, ncclRedOp_t> ncclOp = {\n+  {THDReduceOp::THDReduceMIN, ncclMin},\n+  {THDReduceOp::THDReduceMAX, ncclMax},\n+  {THDReduceOp::THDReduceSUM, ncclSum},\n+  {THDReduceOp::THDReducePRODUCT, ncclProd},\n+};\n+\n+\n+std::unordered_map<at::ScalarType, ncclDataType_t> ncclDatatype = {\n+  {at::kChar, ncclInt8},\n+  {at::kByte, ncclUint8},\n+  {at::kFloat, ncclFloat},\n+  {at::kDouble, ncclDouble},\n+  {at::kInt, ncclInt32},\n+  {at::kLong, ncclInt64},\n+};\n+\n+\n+// Helper function that gets the data type and issues error if not supported\n+static ncclDataType_t _getNcclDataType(at::ScalarType type) {\n+  if (ncclDatatype.find(type) == ncclDatatype.end()) {\n+    throw std::runtime_error(\"Unsupported data type for NCCL\");\n+  }\n+  return ncclDatatype[type];\n+}\n+\n+\n+// Helper function that gets the device list to determine the CUDA devices\n+std::vector<int> getDevicesList(const std::string& deviceSeq) {\n+\n+  std::stringstream ss(deviceSeq);\n+  std::string device;\n+  std::vector<int> devices;\n+  while (std::getline(ss, device, ',')) {\n+    devices.push_back(stoi(device));\n+  }\n+  return devices;\n+}\n+\n+} // namespace\n+\n+\n+// DataChannelNccl\n+DataChannelNccl::DataChannelNccl(InitMethod::Config config, int timeout)\n+  : _rank(config.rank)\n+  , _numProcesses(config.world_size)\n+  , _timeout(timeout)\n+  , _masterListeningSocket(-1)\n+  , _slaveSocket(-1) {\n+\n+  // Establish the socket connections from rank 0 to all others\n+  if (_rank == 0) {\n+    _masterListeningSocket = config.master.listen_socket;\n+    _masterSendingSockets = std::vector<int>(_numProcesses - 1, -1);\n+\n+    try {\n+      for (rank_type i = 0; i < _numProcesses - 1; ++i) {\n+        std::tie(_masterSendingSockets[i],\n+                 std::ignore) = accept(_masterListeningSocket, _timeout);\n+      }\n+    } catch (...) {\n+      // Destroy the created sockets\n+      _destroySockets();\n+      throw std::runtime_error(\"Rank 0 cannot establish thelistening socket\");\n+    }\n+\n+  } else {\n+    _masterAddr = config.worker.master_addr;\n+    _masterPort = config.worker.master_port;\n+\n+    try {\n+      _slaveSocket = connect(_masterAddr, _masterPort, true, _timeout);\n+    } catch (...) {\n+      // Destroy the created sockets\n+      _destroySockets();\n+      std::string errStr = \"Rank: \" + std::to_string(_rank) + \" cannot \"\n+                           \"connect to the master: \" + _masterAddr + \":\" +\n+                           std::to_string(_masterPort);\n+      throw std::runtime_error(errStr);\n+    }\n+  }\n+}\n+\n+\n+// Use the socket to broadcast NCCL ID\n+void DataChannelNccl::broadcastUniqueNcclId(ncclUniqueId* ncclId) {\n+  // Send the unique NCCL id to every rank\n+  if (_rank == 0) {\n+    for (auto socket : _masterSendingSockets) {\n+      send_bytes<uint8_t>(socket,\n+                          reinterpret_cast<uint8_t*>(ncclId),\n+                          NCCL_UNIQUE_ID_BYTES);\n+    }\n+  } else {\n+    recv_bytes<uint8_t>(_slaveSocket,\n+                        reinterpret_cast<uint8_t*>(ncclId),\n+                        NCCL_UNIQUE_ID_BYTES);\n+  }\n+}\n+\n+\n+// Destructor will only close all the sockets\n+DataChannelNccl::~DataChannelNccl() {\n+   /**\n+    * Note that destructor will be called after cudaruntime being unloaded since\n+    * DataChannel is a global variable.\n+    */\n+  _destroySockets();\n+}\n+\n+\n+void DataChannelNccl::_destroySockets() {\n+  // Destroying all the socket\n+  if (_masterListeningSocket != -1) {\n+    ::close(_masterListeningSocket);\n+    _masterListeningSocket = -1;\n+  }\n+  if (_slaveSocket != -1) {\n+    ::close(_slaveSocket);\n+    _slaveSocket = -1;\n+  }\n+  for (size_t i = 0; i < _masterSendingSockets.size(); ++i) {\n+    if (_masterSendingSockets[i] != -1) {\n+      ::close(_masterSendingSockets[i]);\n+      _masterSendingSockets[i] = -1;\n+    }\n+  }\n+}\n+\n+// Destroy the data channel\n+void DataChannelNccl::destroy() {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  // Destroying all the socket\n+  _destroySockets();\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  /**\n+   * Destroy the CUDA and NCCL resources\n+   * TODO: creating C++ wrappers for CUDA and NCCL resources to do the\n+   *       cleanup automatically\n+   */\n+  for (auto& itemPair : _groupNcclResources) {\n+\n+    auto groupId = itemPair.first;\n+    auto devices = getDevicesList(_groupDevices[groupId]);\n+\n+    // Destroy the CUDA events\n+    size_t idx = 0;\n+    for (auto& event : *(itemPair.second.ncclCudaEvents())) {\n+      gpuGuard.setDevice(devices[idx++]);\n+      THCudaCheck(cudaEventSynchronize(event));\n+      THCudaCheck(cudaEventDestroy(event));\n+    }\n+    // Destroy the communicators\n+    for (auto& comm : *(itemPair.second.ncclComms())) {\n+      NCCL_CHECK(ncclCommDestroy(comm));\n+    }\n+\n+  }\n+  _groupNcclResources.clear();\n+  _groups.clear();\n+  _groupDevices.clear();\n+}\n+\n+\n+// Destroy the resource for a single thread group\n+void DataChannelNccl::destroyGroup(THDGroup groupId) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  if (_groupNcclResources.find(groupId) != _groupNcclResources.end()) {\n+    // Guard GPU device\n+    AutoGPU gpuGuard;\n+    // Destroy the CUDA events\n+    size_t idx = 0;\n+    for (auto& event : *(_groupNcclResources[groupId].ncclCudaEvents())) {\n+      auto devices = getDevicesList(_groupDevices[groupId]);\n+      gpuGuard.setDevice(devices[idx++]);\n+      THCudaCheck(cudaEventSynchronize(event));\n+      THCudaCheck(cudaEventDestroy(event));\n+    }\n+    // Destroy the communicators\n+    for (auto& comm : *(_groupNcclResources[groupId].ncclComms())) {\n+      NCCL_CHECK(ncclCommDestroy(comm));\n+    }\n+    _groupNcclResources.erase(groupId);\n+  }\n+  // Will keep the default group and only destroy its CUDA resources.\n+  if (groupId != THDGroupWORLD &&\n+      _groups.find(groupId) != _groups.end()) {\n+    _groups.erase(groupId);\n+  }\n+  if (_groupDevices.find(groupId) != _groupDevices.end()) {\n+    _groupDevices.erase(groupId);\n+  }\n+}\n+\n+\n+// Initialization function\n+bool DataChannelNccl::init() {\n+\n+  std::vector<rank_type> ranks;\n+  ranks.reserve(_numProcesses);\n+\n+  for (rank_type rank = 0; rank < _numProcesses; ++rank) {\n+    ranks.push_back(rank);\n+  }\n+\n+  // Insert the current group\n+  _groups.insert({\n+    THDGroupWORLD,\n+    DataChannel::Group(ranks, _numProcesses - 1)\n+  });\n+\n+  // Get the GPU count\n+  THCudaCheck(cudaGetDeviceCount(&_numGPUs));\n+\n+  return true;\n+}\n+\n+\n+rank_type DataChannelNccl::getRank() {\n+  return _rank;\n+}\n+\n+\n+rank_type DataChannelNccl::getNumProcesses() {\n+  return _numProcesses;\n+}\n+\n+\n+NcclResourcePair DataChannelNccl::_getNcclResourcePair(\n+    std::vector<at::Tensor>& input,\n+    THDGroup groupId) {\n+\n+  if (input.empty()) {\n+    throw std::runtime_error(\"Not able to create/get the Nccl Comm since \"\n+                             \"input tensor is empty\");\n+  }\n+  // Get the deviceList String\n+  std::string deviceList;\n+  for (auto tensor : input) {\n+    if (deviceList.empty()) {\n+      deviceList = std::to_string(tensor.get_device());\n+    } else {\n+      deviceList += \",\" + std::to_string(tensor.get_device());\n+    }\n+  }\n+\n+  if (_groupDevices.find(groupId) != _groupDevices.end() &&\n+      deviceList != _groupDevices[groupId]) {\n+    std::string errMsg;\n+    errMsg = \"The current group: \" + std::to_string(groupId) +\n+            \" has already got a GPU device list: \" + _groupDevices[groupId]\n+            + \" associated with. Each group should only be associated with a \"\n+            + \"given device list. Please create a new group for your provided \"\n+            + \"device list: \" + deviceList;\n+    throw std::runtime_error(errMsg);\n+  }\n+\n+  if (_groupNcclResources.find(groupId) != _groupNcclResources.end()) {\n+    return std::make_pair(_groupNcclResources[groupId].ncclComms(),\n+                          _groupNcclResources[groupId].ncclCudaEvents());\n+  }\n+\n+  // Add in the device list of the group\n+  _groupDevices[groupId] = deviceList;\n+\n+  // NCCL communicator\n+  auto comms =\n+    std::unique_ptr<std::vector<ncclComm_t>>(new std::vector<ncclComm_t>());\n+\n+  comms->resize(input.size());\n+\n+  // Corresponding CUDA events\n+  auto events =\n+    std::unique_ptr<std::vector<cudaEvent_t>>(new std::vector<cudaEvent_t>());\n+\n+  events->resize(input.size());\n+\n+  // Create the unique NCCL ID and broadcast it\n+  ncclUniqueId ncclId;\n+  NCCL_CHECK(ncclGetUniqueId(&ncclId));\n+\n+  // Broadcast so that each process can have a unique NCCL ID\n+  broadcastUniqueNcclId(&ncclId);\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  // Now creating the CUDA events\n+  for (size_t i = 0; i < input.size(); ++i) {\n+    gpuGuard.setDevice(input[i].get_device());\n+    THCudaCheck(cudaEventCreate(&((*events)[i])));\n+  }\n+  // Create the communicator on each device of the input\n+  NCCL_CHECK(ncclGroupStart());\n+  for (size_t i = 0; i < input.size(); ++i) {\n+    int nRanks = int(_numProcesses) * input.size();\n+    gpuGuard.setDevice(input[i].get_device());\n+    NCCL_CHECK(ncclCommInitRank(&((*comms)[i]),\n+                                nRanks,\n+                                ncclId,\n+                                _rank * input.size() + i));\n+  }\n+  NCCL_CHECK(ncclGroupEnd());\n+\n+  // Move into the hash table\n+  _groupNcclResources.emplace(\n+      std::make_pair(groupId, NcclResources(std::move(comms),\n+                                            std::move(events))));\n+\n+  return std::make_pair(_groupNcclResources[groupId].ncclComms(),\n+                        _groupNcclResources[groupId].ncclCudaEvents());\n+}\n+\n+\n+// Helper function that checks the input and output tensors for validity\n+bool DataChannelNccl::_tensorCheckHelper(\n+    const std::vector<at::Tensor>& input,\n+    const std::vector<at::Tensor>& output,\n+    size_t outputOverInput) {\n+\n+  if (input.size() != output.size()) {\n+    throw std::runtime_error(\"Input tensor sequence should have the same \"\n+                             \"number of tensors as the output tensor sequence\");\n+  }\n+\n+  if (input.size() == 0) {\n+    // Return false saying this is a no-op\n+    return false;\n+  }\n+\n+  if (input.size() > _numGPUs) {\n+    throw std::runtime_error(\"The number of input tensors is larger than \"\n+                             \"the number of available GPUs\");\n+  }\n+\n+  // To make sure each tensor is on separate devices\n+  std::unordered_set<int> usedDevices;\n+  usedDevices.reserve(input.size());\n+\n+  uint64_t inputNumElement = input[0].numel();\n+  auto elementType = input[0].type().scalarType();\n+\n+  for (size_t i = 0; i < input.size(); ++i) {\n+\n+    //  Check to make sure it's a GPU dense tensor\n+    if (!(input[i].type().is_cuda() && !input[i].type().is_sparse() &&\n+          output[i].type().is_cuda()  && !output[i].type().is_sparse())) {\n+      throw std::runtime_error(\"Only CUDA dense tensor is supported for NCCL \"\n+                               \"collective operations\");\n+    }\n+    // Check the tensor type is identical\n+    if (input[i].type().scalarType() != elementType ||\n+        output[i].type().scalarType() != elementType) {\n+      throw std::runtime_error(\"Expecting all GPU tensors to have identical \"\n+                               \"type\");\n+    }\n+    // Check the input tensor size is identical\n+    if (input[i].numel() != inputNumElement) {\n+      throw std::runtime_error(\"Expecting all input tensors to have identical \"\n+                               \"number of elements\");\n+    }\n+    // Check the output tensor size equals to input tensor size\n+    if (output[i].numel() != inputNumElement * outputOverInput) {\n+      throw std::runtime_error(\"The number of elements of output tensor does \"\n+                               \"not match the number of elements of the input \"\n+                               \"tensor\");\n+    }\n+    // Contiguous verification\n+    if (!input[i].is_contiguous() || !output[i].is_contiguous()) {\n+      throw std::runtime_error(\"Expecting all GPU tensors to be contiguous\");\n+    }\n+\n+    bool inserted;\n+    std::tie(std::ignore, inserted) = usedDevices.insert(input[i].get_device());\n+    // Device verification, if the insertion didn't take place\n+    if (!inserted) {\n+      throw std::runtime_error(\"Expecting inputs on different GPU devices\");\n+    }\n+\n+    // Now check the output device\n+    if (input[i].get_device() != output[i].get_device()) {\n+      throw std::runtime_error(\"Expecting input and output tensors to be on \"\n+                               \"the same device\");\n+    }\n+  }\n+  return true;\n+}\n+\n+\n+void DataChannelNccl::allReduce(std::vector<at::Tensor>& input,\n+                                std::vector<at::Tensor>& output,\n+                                THDReduceOp operation,\n+                                THDGroup groupId) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+  // Check the tensor vector for consistency\n+  if (!_tensorCheckHelper(input, output)) {\n+    return;\n+  }\n+  _checkGroupIdValid(groupId);\n+\n+  auto ncclResourcePair  = _getNcclResourcePair(input, groupId);\n+  auto comms = ncclResourcePair.first;\n+  auto events = ncclResourcePair.second;\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  std::unique_lock<std::mutex> cudaFreeMutexLock(\n+      *(THCCachingAllocator_getCudaFreeMutex()));\n+\n+  NCCL_CHECK(ncclGroupStart());\n+  for (size_t i = 0; i < input.size(); ++i) {\n+\n+    gpuGuard.setDevice(input[i].get_device());\n+    auto stream = THCState_getCurrentStream(THDGetCudaState());\n+\n+    NCCL_CHECK(ncclAllReduce(input[i].data_ptr(),\n+                             output[i].data_ptr(),\n+                             input[i].numel(),\n+                             _getNcclDataType(input[i].type().scalarType()),\n+                             ncclOp[operation],\n+                             (*comms)[i],\n+                             stream));\n+    THCudaCheck(cudaEventRecord((*events)[i], stream));\n+  }\n+  NCCL_CHECK(ncclGroupEnd());\n+\n+  cudaFreeMutexLock.unlock();\n+}\n+\n+\n+void DataChannelNccl::allReduce(at::Tensor& data,\n+                                THDReduceOp operation,\n+                                THDGroup groupId) {\n+\n+  std::vector<at::Tensor> dataVec = {data};\n+  allReduce(dataVec, dataVec, operation, groupId);\n+}\n+\n+\n+void DataChannelNccl::allGather(std::vector<at::Tensor>& input,\n+                                std::vector<at::Tensor>& output,\n+                                THDGroup groupId) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  if (!_tensorCheckHelper(input, output, _numProcesses * input.size())) {\n+    return;\n+  }\n+  _checkGroupIdValid(groupId);\n+\n+  auto ncclResourcePair = _getNcclResourcePair(input, groupId);\n+  auto comms = ncclResourcePair.first;\n+  auto events = ncclResourcePair.second;\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  std::unique_lock<std::mutex> cudaFreeMutexLock(\n+      *(THCCachingAllocator_getCudaFreeMutex()));\n+\n+  NCCL_CHECK(ncclGroupStart());\n+  for (size_t i = 0; i < input.size(); ++i) {\n+\n+    gpuGuard.setDevice(input[i].get_device());\n+    auto stream = THCState_getCurrentStream(THDGetCudaState());\n+\n+    NCCL_CHECK(ncclAllGather(input[i].data_ptr(),\n+                             output[i].data_ptr(),\n+                             input[i].numel(),\n+                             _getNcclDataType(input[i].type().scalarType()),\n+                             (*comms)[i],\n+                             stream));\n+    THCudaCheck(cudaEventRecord((*events)[i], stream));\n+  }\n+  NCCL_CHECK(ncclGroupEnd());\n+\n+  cudaFreeMutexLock.unlock();\n+}\n+\n+\n+void DataChannelNccl::allGather(std::vector<at::Tensor>& output,\n+                                at::Tensor& input,\n+                                THDGroup groupId) {\n+\n+  std::vector<at::Tensor> inputDataVec = {input};\n+  allGather(inputDataVec, output, groupId);\n+}\n+\n+\n+void DataChannelNccl::reduce(std::vector<at::Tensor>& data,\n+                             THDReduceOp operation,\n+                             rank_type dstRank,\n+                             THDGroup groupId) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  // Check the tensor vector for consistency\n+  if (!_tensorCheckHelper(data, data)) {\n+    return;\n+  }\n+  _checkGroupIdValid(groupId);\n+\n+  auto ncclResourcePair = _getNcclResourcePair(data, groupId);\n+  auto comms = ncclResourcePair.first;\n+  auto events = ncclResourcePair.second;\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  std::unique_lock<std::mutex> cudaFreeMutexLock(\n+      *(THCCachingAllocator_getCudaFreeMutex()));\n+\n+  NCCL_CHECK(ncclGroupStart());\n+  for (size_t i = 0; i < data.size(); ++i) {\n+\n+    gpuGuard.setDevice(data[i].get_device());\n+    auto stream = THCState_getCurrentStream(THDGetCudaState());\n+\n+    NCCL_CHECK(ncclReduce(data[i].data_ptr(),\n+                          data[i].data_ptr(),\n+                          data[i].numel(),\n+                          _getNcclDataType(data[i].type().scalarType()),\n+                          ncclOp[operation],\n+                          dstRank * data.size(),\n+                          (*comms)[i],\n+                          stream));\n+    THCudaCheck(cudaEventRecord((*events)[i], stream));\n+  }\n+  NCCL_CHECK(ncclGroupEnd());\n+\n+  cudaFreeMutexLock.unlock();\n+}\n+\n+void DataChannelNccl::reduce(at::Tensor& data,\n+                             THDReduceOp operation,\n+                             rank_type dstRank,\n+                             THDGroup groupId) {\n+\n+  std::vector<at::Tensor> dataVec = {data};\n+  reduce(dataVec, operation, dstRank, groupId);\n+}\n+\n+void DataChannelNccl::broadcast(std::vector<at::Tensor>& data,\n+                                rank_type srcRank,\n+                                THDGroup groupId) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  // Check the tensor vector for consistency\n+  if (!_tensorCheckHelper(data, data)) {\n+    return;\n+  }\n+  _checkGroupIdValid(groupId);\n+\n+  auto ncclResourcePair = _getNcclResourcePair(data, groupId);\n+  auto comms = ncclResourcePair.first;\n+  auto events = ncclResourcePair.second;\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  std::unique_lock<std::mutex> cudaFreeMutexLock(\n+      *(THCCachingAllocator_getCudaFreeMutex()));\n+\n+  NCCL_CHECK(ncclGroupStart());\n+  for (size_t i = 0; i < data.size(); ++i) {\n+\n+    gpuGuard.setDevice(data[i].get_device());\n+    auto stream = THCState_getCurrentStream(THDGetCudaState());\n+\n+    NCCL_CHECK(ncclBcast(data[i].data_ptr(),\n+                         data[i].numel(),\n+                         _getNcclDataType(data[i].type().scalarType()),\n+                         srcRank * data.size(),\n+                         (*comms)[i],\n+                         stream));\n+    THCudaCheck(cudaEventRecord((*events)[i], stream));\n+  }\n+  NCCL_CHECK(ncclGroupEnd());\n+\n+  cudaFreeMutexLock.unlock();\n+}\n+\n+\n+void DataChannelNccl::broadcast(at::Tensor& data,\n+                                rank_type srcRank,\n+                                THDGroup groupId) {\n+\n+  std::vector<at::Tensor> dataVec = {data};\n+  broadcast(dataVec, srcRank, groupId);\n+}\n+\n+\n+void DataChannelNccl::barrier(THDGroup groupId) {\n+  throw std::runtime_error(\"DataChannelNccl does not support barrier\");\n+}\n+\n+\n+THDGroup DataChannelNccl::newGroup(const std::vector<rank_type>& ranks) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  auto newGroup = DataChannel::Group(ranks, _numProcesses - 1);\n+  THDGroup newGroupId = static_cast<THDGroup>(_groups.size());\n+\n+  // Insert the current group\n+  _groups.insert({", "path": "torch/lib/THD/base/data_channels/DataChannelNccl.cpp", "position": 628, "original_position": 636, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "e2ee0c8f846ebc17f4b0cb1233c7bedbdd76d048", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It seems that you're not using `_groups` for anything useful. Why even bother with maintaining them?", "created_at": "2017-11-24T11:31:30Z", "updated_at": "2018-11-23T15:36:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r152950205", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152950205"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r152950205"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>It seems that you're not using <code>_groups</code> for anything useful. Why even bother with maintaining them?</p>", "body_text": "It seems that you're not using _groups for anything useful. Why even bother with maintaining them?"}