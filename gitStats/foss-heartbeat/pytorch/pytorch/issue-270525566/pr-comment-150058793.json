{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150058793", "pull_request_review_id": 73704858, "id": 150058793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDA1ODc5Mw==", "diff_hunk": "@@ -242,7 +274,13 @@ def _queue_reduction(self, bucket_idx):\n \n         # Queue the reduction and make sure backward waits for it\n         event = threading.Event()\n-        self._reduction_queues[bucket_idx].put((dev_buckets, dev_events, event))\n+\n+        if dist._backend == \"nccl\":\n+            # NCCL backend, all buckets will share a single reduction queue\n+            self._reduction_queues[0].put((dev_buckets, dev_events, event))", "path": "torch/nn/parallel/distributed.py", "position": null, "original_position": 76, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "18f92006e8b7b6efff22489a775eb1941e0091e9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Also, I can't see how this makes the order deterministic. Currently, we have no guarantees about the ordering of ops in backward, which means that reduction of 4th block can be queued before 3rd block on one node, while on the other 3rd block will be queued before the 4th (all are queued on this single queue).", "created_at": "2017-11-09T19:12:27Z", "updated_at": "2018-11-23T15:36:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r150058793", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150058793"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r150058793"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>Also, I can't see how this makes the order deterministic. Currently, we have no guarantees about the ordering of ops in backward, which means that reduction of 4th block can be queued before 3rd block on one node, while on the other 3rd block will be queued before the 4th (all are queued on this single queue).</p>", "body_text": "Also, I can't see how this makes the order deterministic. Currently, we have no guarantees about the ordering of ops in backward, which means that reduction of 4th block can be queued before 3rd block on one node, while on the other 3rd block will be queued before the 4th (all are queued on this single queue).", "in_reply_to_id": 149767977}