{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150058255", "pull_request_review_id": 73704858, "id": 150058255, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDA1ODI1NQ==", "diff_hunk": "@@ -253,38 +291,75 @@ def _queue_reduction(self, bucket_idx):\n             self.reduced = [False] * len(self.bucket_sizes)\n \n             def sync_reduction_streams():\n-                # We only have to sync with the first one, but it's safer to do it this way\n-                # in case we change the way in which we paralellize work\n-                r_streams = zip(*self._reduction_streams)\n-                for dev_id, default_stream, dev_r_streams in zip(self.device_ids, self._default_streams, r_streams):\n-                    with torch.cuda.device(dev_id):\n-                        for reduction_stream in dev_r_streams:\n-                            default_stream.wait_stream(reduction_stream)\n+                # We sync on the default streams for NCCL backend since all\n+                # nccl reduction kernels goes to the default streams\n+                if dist._backend == \"nccl\":\n+                    for dev_id, default_stream in zip(self.device_ids, self._default_streams):\n+                        with torch.cuda.device(dev_id):\n+                            default_stream.synchronize()\n+                else:\n+                    # We only have to sync with the first one, but it's safer to do it this way\n+                    # in case we change the way in which we paralellize work\n+                    r_streams = zip(*self._reduction_streams)\n+                    for dev_id, default_stream, dev_r_streams in zip(self.device_ids, self._default_streams, r_streams):\n+                        with torch.cuda.device(dev_id):\n+                            for reduction_stream in dev_r_streams:\n+                                default_stream.wait_stream(reduction_stream)\n+\n             Variable._execution_engine.queue_callback(sync_reduction_streams)\n \n     def _start_reduction_threads(self):\n         num_buckets = len(self.bucket_sizes)\n-        self._reduction_queues = [queue.Queue() for _ in range(num_buckets)]\n+\n+        if dist._backend == \"nccl\":\n+            # Let NCCL backend uses a single Queue for all reduction buckets\n+            # in order to maintain the NCCL kernel launch order on different\n+            # nodes to avoid the deadlock. In other words, we will only maintain\n+            # a single reduction thread for this purpose. This is OK since all\n+            # distributed NCCL calls are asynchronous\n+            self._reduction_queues = [queue.Queue()]\n+            self._reduction_streams = [[]]\n+        else:\n+            self._reduction_queues = [queue.Queue() for _ in range(num_buckets)]\n+            self._reduction_streams = [[] for _ in range(num_buckets)]\n+\n         self._reduction_threads = []\n-        self._reduction_streams = [[] for _ in range(num_buckets)]\n         self._nccl_streams = []\n         self._default_streams = []\n+\n         for dev_id in self.device_ids:\n             with torch.cuda.device(dev_id):\n                 # TODO: don't assume we're on a default stream\n                 self._default_streams.append(torch.cuda.current_stream())\n-                self._nccl_streams.append(torch.cuda.Stream())\n+                # NCCL stream is not needed for NCCL backend since current\n+                # implmentation uses the default stream\n+                if dist._backend != \"nccl\":\n+                    self._nccl_streams.append(torch.cuda.Stream())\n+\n         for reduction_queue, reduction_streams in zip(self._reduction_queues, self._reduction_streams):\n-            for dev_id in self.device_ids:\n-                with torch.cuda.device(dev_id):\n-                    reduction_streams.append(torch.cuda.Stream())\n-            # We only use the first device for distributed reductions\n-            dist._register_stream(reduction_streams[0])\n+            # Reduction stream not needed for NCCL backend\n+            if dist._backend != \"nccl\":\n+                for dev_id in self.device_ids:\n+                    with torch.cuda.device(dev_id):\n+                        reduction_streams.append(torch.cuda.Stream())\n+                # We only use the first device for distributed reductions\n+                dist._register_stream(reduction_streams[0])\n+\n             group_id = dist.new_group()\n \n-            self._reduction_threads.append(threading.Thread(\n-                target=self._reduction_thread_fn,\n-                args=(reduction_queue, group_id, self.device_ids, reduction_streams, self._nccl_streams)))\n+            if dist._backend == \"nccl\":", "path": "torch/nn/parallel/distributed.py", "position": null, "original_position": 161, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "18f92006e8b7b6efff22489a775eb1941e0091e9", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "you have three conditionals for NCCL in a row. Please concat them to form a single large conditional", "created_at": "2017-11-09T19:10:34Z", "updated_at": "2018-11-23T15:36:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r150058255", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150058255"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r150058255"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>you have three conditionals for NCCL in a row. Please concat them to form a single large conditional</p>", "body_text": "you have three conditionals for NCCL in a row. Please concat them to form a single large conditional"}