{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152947204", "pull_request_review_id": 78879805, "id": 152947204, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk0NzIwNA==", "diff_hunk": "@@ -0,0 +1,715 @@\n+#include \"../Cuda.hpp\"\n+#include \"../../../csrc/utils/auto_gpu.h\"\n+#include \"DataChannelNccl.hpp\"\n+#include \"DataChannelUtils.hpp\"\n+\n+#include <cuda.h>\n+#include <THC/THC.h>\n+\n+#include <unistd.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <unordered_set>\n+#include <sstream>\n+\n+namespace thd {\n+\n+namespace {\n+\n+\n+std::unordered_map<THDReduceOp, ncclRedOp_t> ncclOp = {\n+  {THDReduceOp::THDReduceMIN, ncclMin},\n+  {THDReduceOp::THDReduceMAX, ncclMax},\n+  {THDReduceOp::THDReduceSUM, ncclSum},\n+  {THDReduceOp::THDReducePRODUCT, ncclProd},\n+};\n+\n+\n+std::unordered_map<at::ScalarType, ncclDataType_t> ncclDatatype = {\n+  {at::kChar, ncclInt8},\n+  {at::kByte, ncclUint8},\n+  {at::kFloat, ncclFloat},\n+  {at::kDouble, ncclDouble},\n+  {at::kInt, ncclInt32},\n+  {at::kLong, ncclInt64},\n+};\n+\n+\n+// Helper function that gets the data type and issues error if not supported\n+static ncclDataType_t _getNcclDataType(at::ScalarType type) {\n+  if (ncclDatatype.find(type) == ncclDatatype.end()) {\n+    throw std::runtime_error(\"Unsupported data type for NCCL\");\n+  }\n+  return ncclDatatype[type];\n+}\n+\n+\n+// Helper function that gets the device list to determine the CUDA devices\n+std::vector<int> getDevicesList(const std::string& deviceSeq) {\n+\n+  std::stringstream ss(deviceSeq);\n+  std::string device;\n+  std::vector<int> devices;\n+  while (std::getline(ss, device, ',')) {\n+    devices.push_back(stoi(device));\n+  }\n+  return devices;\n+}\n+\n+} // namespace\n+\n+\n+// DataChannelNccl\n+DataChannelNccl::DataChannelNccl(InitMethod::Config config, int timeout)\n+  : _rank(config.rank)\n+  , _numProcesses(config.world_size)\n+  , _timeout(timeout)\n+  , _masterListeningSocket(-1)\n+  , _slaveSocket(-1) {\n+\n+  // Establish the socket connections from rank 0 to all others\n+  if (_rank == 0) {\n+    _masterListeningSocket = config.master.listen_socket;\n+    _masterSendingSockets = std::vector<int>(_numProcesses - 1, -1);\n+\n+    try {\n+      for (rank_type i = 0; i < _numProcesses - 1; ++i) {\n+        std::tie(_masterSendingSockets[i],\n+                 std::ignore) = accept(_masterListeningSocket, _timeout);\n+      }\n+    } catch (...) {\n+      // Destroy the created sockets\n+      _destroySockets();\n+      throw std::runtime_error(\"Rank 0 cannot establish thelistening socket\");\n+    }\n+\n+  } else {\n+    _masterAddr = config.worker.master_addr;\n+    _masterPort = config.worker.master_port;\n+\n+    try {\n+      _slaveSocket = connect(_masterAddr, _masterPort, true, _timeout);\n+    } catch (...) {\n+      // Destroy the created sockets\n+      _destroySockets();\n+      std::string errStr = \"Rank: \" + std::to_string(_rank) + \" cannot \"\n+                           \"connect to the master: \" + _masterAddr + \":\" +\n+                           std::to_string(_masterPort);\n+      throw std::runtime_error(errStr);\n+    }\n+  }\n+}\n+\n+\n+// Use the socket to broadcast NCCL ID\n+void DataChannelNccl::broadcastUniqueNcclId(ncclUniqueId* ncclId) {\n+  // Send the unique NCCL id to every rank\n+  if (_rank == 0) {\n+    for (auto socket : _masterSendingSockets) {\n+      send_bytes<uint8_t>(socket,\n+                          reinterpret_cast<uint8_t*>(ncclId),\n+                          NCCL_UNIQUE_ID_BYTES);\n+    }\n+  } else {\n+    recv_bytes<uint8_t>(_slaveSocket,\n+                        reinterpret_cast<uint8_t*>(ncclId),\n+                        NCCL_UNIQUE_ID_BYTES);\n+  }\n+}\n+\n+\n+// Destructor will only close all the sockets\n+DataChannelNccl::~DataChannelNccl() {\n+   /**\n+    * Note that destructor will be called after cudaruntime being unloaded since\n+    * DataChannel is a global variable.\n+    */\n+  _destroySockets();\n+}\n+\n+\n+void DataChannelNccl::_destroySockets() {\n+  // Destroying all the socket\n+  if (_masterListeningSocket != -1) {\n+    ::close(_masterListeningSocket);\n+    _masterListeningSocket = -1;\n+  }\n+  if (_slaveSocket != -1) {\n+    ::close(_slaveSocket);\n+    _slaveSocket = -1;\n+  }\n+  for (size_t i = 0; i < _masterSendingSockets.size(); ++i) {\n+    if (_masterSendingSockets[i] != -1) {\n+      ::close(_masterSendingSockets[i]);\n+      _masterSendingSockets[i] = -1;\n+    }\n+  }\n+}\n+\n+// Destroy the data channel\n+void DataChannelNccl::destroy() {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  // Destroying all the socket\n+  _destroySockets();\n+\n+  // Guard GPU device\n+  AutoGPU gpuGuard;\n+\n+  /**\n+   * Destroy the CUDA and NCCL resources\n+   * TODO: creating C++ wrappers for CUDA and NCCL resources to do the\n+   *       cleanup automatically\n+   */\n+  for (auto& itemPair : _groupNcclResources) {\n+\n+    auto groupId = itemPair.first;\n+    auto devices = getDevicesList(_groupDevices[groupId]);\n+\n+    // Destroy the CUDA events\n+    size_t idx = 0;\n+    for (auto& event : *(itemPair.second.ncclCudaEvents())) {\n+      gpuGuard.setDevice(devices[idx++]);\n+      THCudaCheck(cudaEventSynchronize(event));\n+      THCudaCheck(cudaEventDestroy(event));\n+    }\n+    // Destroy the communicators\n+    for (auto& comm : *(itemPair.second.ncclComms())) {\n+      NCCL_CHECK(ncclCommDestroy(comm));\n+    }\n+\n+  }\n+  _groupNcclResources.clear();\n+  _groups.clear();\n+  _groupDevices.clear();\n+}\n+\n+\n+// Destroy the resource for a single thread group\n+void DataChannelNccl::destroyGroup(THDGroup groupId) {\n+\n+  std::unique_lock<std::mutex> channelLock(_mutex);\n+\n+  if (_groupNcclResources.find(groupId) != _groupNcclResources.end()) {\n+    // Guard GPU device\n+    AutoGPU gpuGuard;\n+    // Destroy the CUDA events\n+    size_t idx = 0;\n+    for (auto& event : *(_groupNcclResources[groupId].ncclCudaEvents())) {\n+      auto devices = getDevicesList(_groupDevices[groupId]);\n+      gpuGuard.setDevice(devices[idx++]);\n+      THCudaCheck(cudaEventSynchronize(event));\n+      THCudaCheck(cudaEventDestroy(event));\n+    }\n+    // Destroy the communicators\n+    for (auto& comm : *(_groupNcclResources[groupId].ncclComms())) {\n+      NCCL_CHECK(ncclCommDestroy(comm));\n+    }\n+    _groupNcclResources.erase(groupId);\n+  }\n+  // Will keep the default group and only destroy its CUDA resources.\n+  if (groupId != THDGroupWORLD &&\n+      _groups.find(groupId) != _groups.end()) {\n+    _groups.erase(groupId);", "path": "torch/lib/THD/base/data_channels/DataChannelNccl.cpp", "position": null, "original_position": 215, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "e2ee0c8f846ebc17f4b0cb1233c7bedbdd76d048", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's quite a weird edge case. I'd rather have `destroyGroup` actually destroy the group *unconditionally*.", "created_at": "2017-11-24T11:14:26Z", "updated_at": "2018-11-23T15:36:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r152947204", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152947204"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r152947204"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>That's quite a weird edge case. I'd rather have <code>destroyGroup</code> actually destroy the group <em>unconditionally</em>.</p>", "body_text": "That's quite a weird edge case. I'd rather have destroyGroup actually destroy the group unconditionally."}