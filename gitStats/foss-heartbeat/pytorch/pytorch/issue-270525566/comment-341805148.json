{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/341805148", "html_url": "https://github.com/pytorch/pytorch/pull/3435#issuecomment-341805148", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3435", "id": 341805148, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTgwNTE0OA==", "user": {"login": "csarofeen", "id": 22205833, "node_id": "MDQ6VXNlcjIyMjA1ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/22205833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csarofeen", "html_url": "https://github.com/csarofeen", "followers_url": "https://api.github.com/users/csarofeen/followers", "following_url": "https://api.github.com/users/csarofeen/following{/other_user}", "gists_url": "https://api.github.com/users/csarofeen/gists{/gist_id}", "starred_url": "https://api.github.com/users/csarofeen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csarofeen/subscriptions", "organizations_url": "https://api.github.com/users/csarofeen/orgs", "repos_url": "https://api.github.com/users/csarofeen/repos", "events_url": "https://api.github.com/users/csarofeen/events{/privacy}", "received_events_url": "https://api.github.com/users/csarofeen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-03T19:34:23Z", "updated_at": "2017-11-03T19:34:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Since backward is multi-threaded the following could be possible:<br>\nprocesses one finishes params in bucket[0] then params in bucket[1]<br>\nprocesses two finishes params in bucket[1] then params in bucket[0]<br>\nThe way the code is structured means that process one will try to all_reduce bucket[0] and process two will try to all_reduce bucket[1].<br>\nThis will deadlock nccl.<br>\nDistributed should enforce that all_reduce call on bucket[i] cannot be issued before all_reduce call on  bucket[i-1]</p>", "body_text": "Since backward is multi-threaded the following could be possible:\nprocesses one finishes params in bucket[0] then params in bucket[1]\nprocesses two finishes params in bucket[1] then params in bucket[0]\nThe way the code is structured means that process one will try to all_reduce bucket[0] and process two will try to all_reduce bucket[1].\nThis will deadlock nccl.\nDistributed should enforce that all_reduce call on bucket[i] cannot be issued before all_reduce call on  bucket[i-1]", "body": "Since backward is multi-threaded the following could be possible:\r\nprocesses one finishes params in bucket[0] then params in bucket[1]\r\nprocesses two finishes params in bucket[1] then params in bucket[0]\r\nThe way the code is structured means that process one will try to all_reduce bucket[0] and process two will try to all_reduce bucket[1].\r\nThis will deadlock nccl.\r\nDistributed should enforce that all_reduce call on bucket[i] cannot be issued before all_reduce call on  bucket[i-1]"}