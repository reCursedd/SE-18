{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153338307", "pull_request_review_id": 79278128, "id": 153338307, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzMzODMwNw==", "diff_hunk": "@@ -0,0 +1,232 @@\n+#pragma once\n+\n+#include \"../DataChannel.hpp\"\n+#include \"DataChannelUtils.hpp\"\n+\n+#include <nccl.h>\n+\n+#include <utility>\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <vector>\n+\n+\n+#define NCCL_CHECK(cmd) do {                                  \\\n+  ncclResult_t error = cmd;                                   \\\n+  if (error != ncclSuccess) {                                 \\\n+    std::string err = \"NCCL error in: \" +                     \\\n+                      std::string(__FILE__) + \":\" +           \\\n+                      std::to_string(__LINE__) + \", \" +       \\\n+                      std::string(ncclGetErrorString(error)); \\\n+    throw std::runtime_error(err);                            \\\n+  }                                                           \\\n+} while (0)\n+\n+\n+namespace thd {\n+\n+// Type aliasing\n+using NcclResourcePair =\n+  std::pair<std::vector<ncclComm_t>*, std::vector<cudaEvent_t>*>;\n+\n+struct DataChannelNccl : DataChannel {\n+\n+  // Nothing to implement\n+  struct RequestNccl : DataChannel::Request {};\n+\n+  // Wrapper on the pair of NCCL resources\n+  class NcclResources {\n+\n+  public:\n+\n+    NcclResources() = default;\n+    NcclResources(std::unique_ptr<std::vector<ncclComm_t>>&& ncclComm,\n+                  std::unique_ptr<std::vector<cudaEvent_t>>&& event):\n+\n+      _commEventPair(std::pair<std::unique_ptr<std::vector<ncclComm_t>>,\n+                               std::unique_ptr<std::vector<cudaEvent_t>>>\n+                               (std::move(ncclComm), std::move(event))) {}\n+    // Delete copy and assignment ctors\n+    NcclResources(const NcclResources&) = delete;\n+    NcclResources& operator=(const NcclResources&) = delete;\n+\n+    // Move ctors by default\n+    NcclResources(NcclResources&&) = default;\n+    NcclResources& operator=(NcclResources&&) = default;\n+\n+    // Nccl Communicator Getter\n+    std::vector<ncclComm_t>* ncclComms() {\n+      return _commEventPair.first.get();\n+    }\n+\n+    // Nccl CUDA event Getter\n+    std::vector<cudaEvent_t>* ncclCudaEvents() {\n+      return _commEventPair.second.get();\n+    }\n+\n+  private:\n+\n+    std::pair<std::unique_ptr<std::vector<ncclComm_t>>,\n+              std::unique_ptr<std::vector<cudaEvent_t>>> _commEventPair;", "path": "torch/lib/THD/base/data_channels/DataChannelNccl.hpp", "position": 71, "original_position": 71, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "e2ee0c8f846ebc17f4b0cb1233c7bedbdd76d048", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "I like to pass it by unique_ptr so that I know for sure it's moved.", "created_at": "2017-11-27T22:06:51Z", "updated_at": "2018-11-23T15:36:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r153338307", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153338307"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r153338307"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>I like to pass it by unique_ptr so that I know for sure it's moved.</p>", "body_text": "I like to pass it by unique_ptr so that I know for sure it's moved.", "in_reply_to_id": 152941993}