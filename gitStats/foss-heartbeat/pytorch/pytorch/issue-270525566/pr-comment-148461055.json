{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148461055", "pull_request_review_id": 73704858, "id": 148461055, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODQ2MTA1NQ==", "diff_hunk": "@@ -338,6 +367,244 @@ PyObject* THDPModule_recv(PyObject *_unused, PyObject *args)\n   END_HANDLE_TH_ERRORS\n }\n \n+\n+PyObject* THDPModule_allReduceMultiGPU(PyObject *_unused, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  PyObject* sequence = PyTuple_GET_ITEM(args, 0);\n+  Py_ssize_t tmp_length;\n+  std::size_t length;\n+  std::vector<at::Tensor> descriptors;\n+  std::vector<at::Tensor> raw_descriptors;\n+  THDGroup group;\n+  THDReduceOp op;\n+\n+  if (PyTuple_GET_SIZE(args) != 3 || !PySequence_Check(sequence)) {\n+    goto invalid_arguments;\n+  }\n+\n+  tmp_length = PySequence_Length(sequence);\n+  THPUtils_assert(tmp_length >= 0, \"couldn't obtain the length of %s\",\n+                  THPUtils_typename(sequence));\n+\n+  length = static_cast<std::size_t>(tmp_length);\n+  descriptors.reserve(length);\n+\n+  for (std::size_t i = 0; i < length; ++i) {\n+    if (!THPModule_isTensor(PySequence_ITEM(sequence, i))) {\n+      goto invalid_arguments;\n+    }\n+\n+    descriptors.push_back(\n+      THDPModule_makeDescriptor(PySequence_ITEM(sequence, i))\n+    );\n+    raw_descriptors.push_back(descriptors.back());\n+  }\n+\n+  group = _getGroup(PyTuple_GET_ITEM(args, 2));\n+  op = _getReduceOp(PyTuple_GET_ITEM(args, 1));\n+\n+  {\n+    AutoNoGIL guard;\n+    THDAllReduceMultiGPU(raw_descriptors.data(), length, op, group);\n+  }\n+  Py_RETURN_NONE;\n+\n+invalid_arguments:\n+  THPUtils_invalidArguments(args, NULL, \"all_reduce_multigpu\", 1,\n+                            \"(list[tensor] in_out, reduce_op op, group gr)\");\n+  Py_RETURN_NONE;\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+\n+PyObject* THDPModule_reduceMultiGPU(PyObject *_unused, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  PyObject* sequence = PyTuple_GET_ITEM(args, 0);\n+  Py_ssize_t tmp_length;\n+  std::size_t length;\n+  std::vector<at::Tensor> descriptors;\n+  std::vector<at::Tensor> raw_descriptors;\n+  THDGroup group;\n+  THDReduceOp op;\n+  int dst_rank;\n+\n+  if (PyTuple_GET_SIZE(args) != 4 || !PySequence_Check(sequence) ||\n+      !THPUtils_checkLong(PyTuple_GET_ITEM(args, 1))) {\n+    goto invalid_arguments;\n+  }\n+\n+  tmp_length = PySequence_Length(sequence);\n+  THPUtils_assert(tmp_length >= 0, \"couldn't obtain the length of %s\",\n+                  THPUtils_typename(sequence));\n+\n+  length = static_cast<std::size_t>(tmp_length);\n+  descriptors.reserve(length);\n+\n+  for (std::size_t i = 0; i < length; ++i) {\n+    if (!THPModule_isTensor(PySequence_ITEM(sequence, i))) {\n+      goto invalid_arguments;\n+    }\n+\n+    descriptors.push_back(\n+      THDPModule_makeDescriptor(PySequence_ITEM(sequence, i))\n+    );\n+    raw_descriptors.push_back(descriptors.back());\n+  }\n+\n+  group = _getGroup(PyTuple_GET_ITEM(args, 3));\n+  op = _getReduceOp(PyTuple_GET_ITEM(args, 2));\n+  dst_rank = THPUtils_unpackLong(PyTuple_GET_ITEM(args, 1));\n+\n+  {\n+    AutoNoGIL guard;\n+    THDReduceMultiGPU(raw_descriptors.data(), length, op, dst_rank, group);\n+  }\n+  Py_RETURN_NONE;\n+\n+invalid_arguments:\n+  THPUtils_invalidArguments(args, NULL, \"reduce_multigpu\", 1,\n+                            \"(list[tensor] in_out, int dst_rank, \"\n+                            \"reduce_op op, group gr)\");\n+  Py_RETURN_NONE;\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+\n+PyObject* THDPModule_broadcastMultiGPU(PyObject *_unused, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  PyObject* sequence = PyTuple_GET_ITEM(args, 0);\n+  Py_ssize_t tmp_length;\n+  std::size_t length;\n+  std::vector<at::Tensor> descriptors;\n+  std::vector<at::Tensor> raw_descriptors;\n+  THDGroup group;\n+  int src_rank;\n+\n+  if (PyTuple_GET_SIZE(args) != 3 || !PySequence_Check(sequence) ||\n+      !THPUtils_checkLong(PyTuple_GET_ITEM(args, 1))) {\n+    goto invalid_arguments;\n+  }\n+\n+  tmp_length = PySequence_Length(sequence);\n+  THPUtils_assert(tmp_length >= 0, \"couldn't obtain the length of %s\",\n+                  THPUtils_typename(sequence));\n+\n+  length = static_cast<std::size_t>(tmp_length);\n+  descriptors.reserve(length);\n+\n+  for (std::size_t i = 0; i < length; ++i) {\n+    if (!THPModule_isTensor(PySequence_ITEM(sequence, i))) {\n+      goto invalid_arguments;\n+    }\n+\n+    descriptors.push_back(\n+      THDPModule_makeDescriptor(PySequence_ITEM(sequence, i))\n+    );\n+    raw_descriptors.push_back(descriptors.back());\n+  }\n+\n+  group = _getGroup(PyTuple_GET_ITEM(args, 2));\n+  src_rank = THPUtils_unpackLong(PyTuple_GET_ITEM(args, 1));\n+\n+  {\n+    AutoNoGIL guard;\n+    THDBroadcastMultiGPU(raw_descriptors.data(), length, src_rank, group);\n+  }\n+  Py_RETURN_NONE;\n+\n+invalid_arguments:\n+  THPUtils_invalidArguments(args, NULL, \"broadcast_multigpu\", 1,\n+                            \"(list[tensor] in_out, int src_rank, group gr)\");\n+  Py_RETURN_NONE;\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+\n+PyObject* THDPModule_allGatherMultiGPU(PyObject *_unused, PyObject *args)\n+{\n+  HANDLE_TH_ERRORS\n+  PyObject* sequence_one = PyTuple_GET_ITEM(args, 0);\n+  PyObject* sequence_two = PyTuple_GET_ITEM(args, 1);\n+\n+  Py_ssize_t tmp_length_one;\n+  Py_ssize_t tmp_length_two;\n+\n+  size_t length_one;\n+  size_t length_two;\n+\n+  std::vector<at::Tensor> output_descriptors;\n+  std::vector<at::Tensor> output_raw_descriptors;\n+\n+  std::vector<at::Tensor> input_descriptors;\n+  std::vector<at::Tensor> input_raw_descriptors;\n+\n+  THDGroup group;\n+\n+  if (PyTuple_GET_SIZE(args) != 3 || !PySequence_Check(sequence_one) ||\n+        !PySequence_Check(sequence_two)) {\n+    goto invalid_arguments;\n+  }\n+\n+  tmp_length_one = PySequence_Length(sequence_one);\n+  THPUtils_assert(tmp_length_one >= 0, \"couldn't obtain the length of %s\",\n+                  THPUtils_typename(sequence_one));\n+\n+  tmp_length_two = PySequence_Length(sequence_two);\n+  THPUtils_assert(tmp_length_two >= 0, \"couldn't obtain the length of %s\",\n+                  THPUtils_typename(sequence_two));\n+\n+  length_one = static_cast<size_t>(tmp_length_one);\n+  length_two = static_cast<size_t>(tmp_length_two);", "path": "torch/csrc/distributed/Module.cpp", "position": null, "original_position": 248, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "029262b0414ad5b6bfa9af5c92e03b3160822708", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "No need to be this careful with casting. You can keep it as `Py_ssize_t` and give that to THD function where it will be casted implicitly", "created_at": "2017-11-02T07:54:15Z", "updated_at": "2018-11-23T15:35:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r148461055", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148461055"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r148461055"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>No need to be this careful with casting. You can keep it as <code>Py_ssize_t</code> and give that to THD function where it will be casted implicitly</p>", "body_text": "No need to be this careful with casting. You can keep it as Py_ssize_t and give that to THD function where it will be casted implicitly"}