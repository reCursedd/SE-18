{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152945665", "pull_request_review_id": 78879805, "id": 152945665, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk0NTY2NQ==", "diff_hunk": "@@ -0,0 +1,715 @@\n+#include \"../Cuda.hpp\"\n+#include \"../../../csrc/utils/auto_gpu.h\"\n+#include \"DataChannelNccl.hpp\"\n+#include \"DataChannelUtils.hpp\"\n+\n+#include <cuda.h>\n+#include <THC/THC.h>\n+\n+#include <unistd.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <unordered_set>\n+#include <sstream>\n+\n+namespace thd {\n+\n+namespace {\n+\n+\n+std::unordered_map<THDReduceOp, ncclRedOp_t> ncclOp = {\n+  {THDReduceOp::THDReduceMIN, ncclMin},\n+  {THDReduceOp::THDReduceMAX, ncclMax},\n+  {THDReduceOp::THDReduceSUM, ncclSum},\n+  {THDReduceOp::THDReducePRODUCT, ncclProd},\n+};\n+\n+\n+std::unordered_map<at::ScalarType, ncclDataType_t> ncclDatatype = {\n+  {at::kChar, ncclInt8},\n+  {at::kByte, ncclUint8},\n+  {at::kFloat, ncclFloat},\n+  {at::kDouble, ncclDouble},\n+  {at::kInt, ncclInt32},\n+  {at::kLong, ncclInt64},\n+};\n+\n+\n+// Helper function that gets the data type and issues error if not supported\n+static ncclDataType_t _getNcclDataType(at::ScalarType type) {\n+  if (ncclDatatype.find(type) == ncclDatatype.end()) {\n+    throw std::runtime_error(\"Unsupported data type for NCCL\");\n+  }\n+  return ncclDatatype[type];", "path": "torch/lib/THD/base/data_channels/DataChannelNccl.cpp", "position": null, "original_position": 44, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "e2ee0c8f846ebc17f4b0cb1233c7bedbdd76d048", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "nit: `find` gives you an iterator that will give you the answer immediately.\r\nI think it's nicer to rewrite this as that:\r\n```cpp\r\ntry {\r\n  return ncclDatatype.at(type);\r\n} catch (std::out_of_range& e) {\r\n  throw std::runtime_error(\"Unsupported data type for NCCL backend\");\r\n}\r\n```", "created_at": "2017-11-24T11:05:38Z", "updated_at": "2018-11-23T15:36:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r152945665", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152945665"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r152945665"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>nit: <code>find</code> gives you an iterator that will give you the answer immediately.<br>\nI think it's nicer to rewrite this as that:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">try</span> {\n  <span class=\"pl-k\">return</span> ncclDatatype.<span class=\"pl-c1\">at</span>(type);\n} <span class=\"pl-k\">catch</span> (std::out_of_range&amp; e) {\n  <span class=\"pl-k\">throw</span> <span class=\"pl-smi\">std::runtime_error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unsupported data type for NCCL backend<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>", "body_text": "nit: find gives you an iterator that will give you the answer immediately.\nI think it's nicer to rewrite this as that:\ntry {\n  return ncclDatatype.at(type);\n} catch (std::out_of_range& e) {\n  throw std::runtime_error(\"Unsupported data type for NCCL backend\");\n}"}