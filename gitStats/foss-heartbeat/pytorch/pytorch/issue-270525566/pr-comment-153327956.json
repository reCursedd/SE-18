{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153327956", "pull_request_review_id": 79278128, "id": 153327956, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzMyNzk1Ng==", "diff_hunk": "@@ -75,20 +75,52 @@ struct DataChannel {\n \n   virtual bool init() = 0;\n \n+  /**\n+   * This is required for NCCL backend, since the destroy cannot be done before\n+   * CUDA is unloaded since DataChannel is a static object.\n+   */\n+  virtual void destroy() = 0;\n+\n   virtual rank_type getRank() = 0;\n   virtual rank_type getNumProcesses() = 0;\n \n-  virtual void allGather(std::vector<at::Tensor>& output, at::Tensor& input,\n+  // All gather multiple GPUs on a number of nodes\n+  virtual void allGather(std::vector<at::Tensor>& input,\n+                         std::vector<at::Tensor>& output,\n+                         THDGroup groupId = THDGroupWORLD) = 0;\n+  virtual void allGather(std::vector<at::Tensor>& output,\n+                         at::Tensor& input,\n+                         THDGroup group_id = THDGroupWORLD) = 0;\n+  virtual void gather(std::vector<at::Tensor>& output,\n+                      at::Tensor& input,\n+                      rank_type dst_rank,\n+                      THDGroup group_id = THDGroupWORLD) = 0;\n+  virtual void scatter(std::vector<at::Tensor>& input,\n+                       at::Tensor& output,\n+                       rank_type src_rank,\n+                       THDGroup group_id = THDGroupWORLD) = 0;\n+  // All reduce multiple GPUs on a number of nodes\n+  virtual void allReduce(std::vector<at::Tensor>& input,", "path": "torch/lib/THD/base/DataChannel.hpp", "position": null, "original_position": 30, "commit_id": "9400fd54da0d3b3a27b93cc4af8bb4c7a29b47d2", "original_commit_id": "e2ee0c8f846ebc17f4b0cb1233c7bedbdd76d048", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "Initially, this is meant to be flexible.  Changed to in-place anyway.", "created_at": "2017-11-27T21:26:53Z", "updated_at": "2018-11-23T15:36:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/3435#discussion_r153327956", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3435", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153327956"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3435#discussion_r153327956"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3435"}}, "body_html": "<p>Initially, this is meant to be flexible.  Changed to in-place anyway.</p>", "body_text": "Initially, this is meant to be flexible.  Changed to in-place anyway.", "in_reply_to_id": 152948843}