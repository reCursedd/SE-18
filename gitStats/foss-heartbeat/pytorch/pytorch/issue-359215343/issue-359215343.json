{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11544", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11544/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11544/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11544/events", "html_url": "https://github.com/pytorch/pytorch/pull/11544", "id": 359215343, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0NzU5ODcw", "number": 11544, "title": "[jit] Add EndToEndHybridModel CUDA tests", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-11T20:41:10Z", "updated_at": "2018-11-23T15:51:04Z", "closed_at": "2018-09-12T18:26:32Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11544", "html_url": "https://github.com/pytorch/pytorch/pull/11544", "diff_url": "https://github.com/pytorch/pytorch/pull/11544.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11544.patch"}, "body_html": "<p>Also adds two additional tests that check for memory leaks while the relevant graph executors are alive:</p>\n<ul>\n<li>(minimal test): Create a ScriptModule, keep it alive, and test that it does not leak memory while it is alive</li>\n<li>(large test) Do MNIST training with a traced MNIST module and test that no memory is leaked while the traced module (with graph executor) is alive</li>\n</ul>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "Also adds two additional tests that check for memory leaks while the relevant graph executors are alive:\n\n(minimal test): Create a ScriptModule, keep it alive, and test that it does not leak memory while it is alive\n(large test) Do MNIST training with a traced MNIST module and test that no memory is leaked while the traced module (with graph executor) is alive\n\ncc @apaszke @zdevito", "body": "Also adds two additional tests that check for memory leaks while the relevant graph executors are alive:\r\n- (minimal test): Create a ScriptModule, keep it alive, and test that it does not leak memory while it is alive\r\n- (large test) Do MNIST training with a traced MNIST module and test that no memory is leaked while the traced module (with graph executor) is alive\r\n\r\ncc @apaszke @zdevito \r\n"}