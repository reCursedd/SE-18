{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7953", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7953/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7953/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7953/events", "html_url": "https://github.com/pytorch/pytorch/issues/7953", "id": 327827718, "node_id": "MDU6SXNzdWUzMjc4Mjc3MTg=", "number": 7953, "title": "[JIT][script] Smooth over py2/3 differences for negative number literals", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-30T17:27:56Z", "updated_at": "2018-05-30T17:46:54Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Example:</p>\n<pre><code>import torch\n\n@torch.jit.script\ndef neg():\n    x = -1.0\n    return x\n\nprint(neg.graph)\n</code></pre>\n<p>python2:</p>\n<pre><code>graph() {\n  %x : Float() = prim::Constant[value={-1}]()\n  return (%x);\n}\n</code></pre>\n<p>python3:</p>\n<pre><code>graph() {\n  %0 : Float() = prim::Constant[value={1}]()\n  %x : Dynamic = aten::neg(%0)\n  return (%x);\n}\n</code></pre>\n<p>This is due to the way that negative number literals are represented in Python's AST between versions. Ideas for fixes:</p>\n<ul>\n<li>Emit the UnaryOp for both</li>\n<li>Constant propagation</li>\n</ul>", "body_text": "Example:\nimport torch\n\n@torch.jit.script\ndef neg():\n    x = -1.0\n    return x\n\nprint(neg.graph)\n\npython2:\ngraph() {\n  %x : Float() = prim::Constant[value={-1}]()\n  return (%x);\n}\n\npython3:\ngraph() {\n  %0 : Float() = prim::Constant[value={1}]()\n  %x : Dynamic = aten::neg(%0)\n  return (%x);\n}\n\nThis is due to the way that negative number literals are represented in Python's AST between versions. Ideas for fixes:\n\nEmit the UnaryOp for both\nConstant propagation", "body": "Example:\r\n\r\n```\r\nimport torch\r\n\r\n@torch.jit.script\r\ndef neg():\r\n    x = -1.0\r\n    return x\r\n\r\nprint(neg.graph)\r\n```\r\n\r\npython2:\r\n\r\n```\r\ngraph() {\r\n  %x : Float() = prim::Constant[value={-1}]()\r\n  return (%x);\r\n}\r\n```\r\n\r\npython3:\r\n\r\n```\r\ngraph() {\r\n  %0 : Float() = prim::Constant[value={1}]()\r\n  %x : Dynamic = aten::neg(%0)\r\n  return (%x);\r\n}\r\n```\r\n\r\nThis is due to the way that negative number literals are represented in Python's AST between versions. Ideas for fixes:\r\n- Emit the UnaryOp for both\r\n- Constant propagation"}