{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227209977", "pull_request_review_id": 167191477, "id": 227209977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIwOTk3Nw==", "diff_hunk": "@@ -452,6 +453,54 @@ struct TORCH_API ListType : public Type {\n   bool has_free_variables_;\n };\n \n+struct FutureType;\n+using FutureTypePtr = std::shared_ptr<FutureType>;\n+\n+struct TORCH_API FutureType : public Type {\n+  // It's not exactly a singleton, but there should be exactly once instance of\n+  // Future[T] for every T\n+  static constexpr bool is_singleton = true;\n+  friend struct Type;\n+  template<typename ... T>\n+  static FutureTypePtr create(TypePtr elem) {\n+    return FutureTypePtr(new FutureType(std::move(elem))); // NOLINT(modernize-make-shared)\n+  }\n+  bool operator==(const Type& rhs) const override {\n+    if (auto rhs_ = rhs.cast<FutureType>()) {\n+      return *getElementType() == *rhs_->getElementType();\n+    }\n+    return false;\n+  }\n+  bool requires_grad() const override {\n+    return elem->requires_grad();\n+  }\n+  std::string str() const override {\n+    std::stringstream ss;\n+    ss << \"Future[\" << getElementType()->str() << \"]\";", "path": "torch/csrc/jit/type.h", "position": null, "original_position": 35, "commit_id": "444a45cb215a9dc800f84aaff3de91b484dad6ca", "original_commit_id": "5461791afd902ed40b39e559c31a0eaf7b967e8e", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "nit: `Future(` for `str()` since `str()` needs to match schema syntax while `python_str` matches python", "created_at": "2018-10-23T03:17:03Z", "updated_at": "2018-11-23T15:53:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/12976#discussion_r227209977", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12976", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227209977"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12976#discussion_r227209977"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12976"}}, "body_html": "<p>nit: <code>Future(</code> for <code>str()</code> since <code>str()</code> needs to match schema syntax while <code>python_str</code> matches python</p>", "body_text": "nit: Future( for str() since str() needs to match schema syntax while python_str matches python"}