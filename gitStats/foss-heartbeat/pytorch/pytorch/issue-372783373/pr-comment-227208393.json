{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227208393", "pull_request_review_id": 167191477, "id": 227208393, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIwODM5Mw==", "diff_hunk": "@@ -806,6 +806,60 @@ std::shared_ptr<SugaredValue> BuiltinFunction::call(\n       loc, *m.graph(), symbol, self, inputs, attributes, true));\n }\n \n+std::shared_ptr<SugaredValue> ForkValue::call(\n+    SourceRange loc,\n+    Method& m,\n+    const std::shared_ptr<SugaredValue> &forked,\n+    NamedValue& input) {\n+  auto inputs = toValues(*m.graph(), {input});\n+  if (inputs.size() != 1 || inputs.at(0)->type()->kind() != TypeKind::TupleType) {\n+    throw ErrorReport(loc) << \"Expected a single tuple argument to fork()\";\n+  }\n+  auto n = m.graph()->insertNode(m.graph()->create(prim::Fork, inputs, 1))\n+              ->setSourceLocation(std::make_shared<SourceRange>(loc));\n+  auto body_block = n->addBlock();\n+\n+  std::vector<NamedValue> block_inputs;\n+  auto schema = forked->schema(loc, m);\n+  for (auto &arg : schema.arguments) {\n+    Value *v = body_block->addInput()->setType(arg.type);\n+    block_inputs.emplace_back(v);\n+  }\n+  Value *node_output;\n+  {\n+    WithInsertPoint guard(body_block);\n+    // TODO: this is an issue\n+    auto fn_sugared_output = forked->call(loc, m, block_inputs, {}, 1);\n+    auto fn_simple_output = fn_sugared_output->asValue(loc, m);\n+    body_block->registerOutput(fn_simple_output);\n+    node_output = n->output()->setType(FutureType::create(fn_simple_output->type()));\n+  }\n+  return std::make_shared<SimpleValue>(node_output);\n+}\n+\n+std::shared_ptr<SugaredValue> WaitValue::call(", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 35, "commit_id": "444a45cb215a9dc800f84aaff3de91b484dad6ca", "original_commit_id": "5461791afd902ed40b39e559c31a0eaf7b967e8e", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We do not need a WaitValue class, `wait` can be handled by the normal builtin operator pathway.\r\n\r\nSimply register it as a known builtin (e.g. see jit/__init__.py):\r\n```\r\n_register_builtin(len, 'aten::len')\r\n```\r\n\r\n", "created_at": "2018-10-23T03:06:56Z", "updated_at": "2018-11-23T15:53:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/12976#discussion_r227208393", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12976", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227208393"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12976#discussion_r227208393"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12976"}}, "body_html": "<p>We do not need a WaitValue class, <code>wait</code> can be handled by the normal builtin operator pathway.</p>\n<p>Simply register it as a known builtin (e.g. see jit/<strong>init</strong>.py):</p>\n<pre><code>_register_builtin(len, 'aten::len')\n</code></pre>", "body_text": "We do not need a WaitValue class, wait can be handled by the normal builtin operator pathway.\nSimply register it as a known builtin (e.g. see jit/init.py):\n_register_builtin(len, 'aten::len')"}