{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227210720", "pull_request_review_id": 167191477, "id": 227210720, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIxMDcyMA==", "diff_hunk": "@@ -1499,11 +1553,27 @@ struct to_ir {\n \n   std::shared_ptr<SugaredValue> emitApplyExpr(Apply &apply, size_t n_binders) {\n     auto sv = emitSugaredExpr(apply.callee(), 1);\n-    auto inputs = getNamedValues(apply.inputs(), true);\n     auto attributes = fmap(apply.attributes(), [&](const Attribute& attr) {\n       return NamedValue(attr.range(), attr.name().name(), emitExpr(attr.value()));\n     });\n-    return sv->call(apply.callee().range(), method, inputs, attributes, n_binders);\n+\n+    auto loc = apply.callee().range();\n+    if (sv->kind() == \"fork\") {\n+      JIT_ASSERT(attributes.size() == 0);\n+      JIT_ASSERT(n_binders == 1);\n+      auto& trees = apply.inputs().tree()->trees();\n+      if (trees.size() != 2) {\n+        throw ErrorReport(loc) << \"Expected a module and a single tuple argument to fork()\";\n+      }\n+\n+      auto sugared_expr = emitSugaredExpr(Expr(trees[0]), 1);\n+      TreeList sliced_trees(trees.begin() + 1, trees.end());\n+      auto& input = getNamedValues(sliced_trees, true)[0];", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 82, "commit_id": "444a45cb215a9dc800f84aaff3de91b484dad6ca", "original_commit_id": "5461791afd902ed40b39e559c31a0eaf7b967e8e", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "every one of these functions that works on lists has a single element equivalent that should be called when you only have one thing.", "created_at": "2018-10-23T03:22:15Z", "updated_at": "2018-11-23T15:53:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/12976#discussion_r227210720", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12976", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/227210720"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12976#discussion_r227210720"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12976"}}, "body_html": "<p>every one of these functions that works on lists has a single element equivalent that should be called when you only have one thing.</p>", "body_text": "every one of these functions that works on lists has a single element equivalent that should be called when you only have one thing."}