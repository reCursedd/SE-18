{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/432008063", "html_url": "https://github.com/pytorch/pytorch/issues/12872#issuecomment-432008063", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12872", "id": 432008063, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjAwODA2Mw==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-22T22:08:31Z", "updated_at": "2018-10-22T22:09:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>There is nothing wrong here. <code>torch::Tensor</code> is a typedef to <code>at::Tensor</code> and it is meant to be used in the C++ frontend, not C++ extensions. The problem with your code is not the tensor class, but the fact that you use <code>at::</code> functions to create tensors instead of <code>torch::</code> functions. When you write</p>\n<div class=\"highlight highlight-source-c++\"><pre>at::Tensor temp = at::zeros({n_samples, G, <span class=\"pl-c1\">2</span>});</pre></div>\n<p>then <code>temp</code> will be a tensor. You pretty much never want it to be tensor, but instead a variable, which you get with</p>\n<div class=\"highlight highlight-source-c++\"><pre>at::Tensor temp = torch::zeros({n_samples, G, <span class=\"pl-c1\">2</span>});</pre></div>\n<p>I recommend you leave your existing code as-is and don't include <code>torch/torch.h</code> in your extension, but instead replace all uses of <code>at::</code> in tensor factories (<code>zeros</code>, <code>ones</code>, <code>randn</code> etc.) with <code>torch::</code>, but leave <code>at::</code> usage for everything else (i.e. <code>at::Tensor</code> and any free functions).</p>\n<p>This should probably be clarified in the tutorial somewhere, although it doesn't actually create any tensors in C++ (all tensors in the tutorial are created in Python and passed into C++), that's why there wasn't any good situation to showcase it.</p>", "body_text": "There is nothing wrong here. torch::Tensor is a typedef to at::Tensor and it is meant to be used in the C++ frontend, not C++ extensions. The problem with your code is not the tensor class, but the fact that you use at:: functions to create tensors instead of torch:: functions. When you write\nat::Tensor temp = at::zeros({n_samples, G, 2});\nthen temp will be a tensor. You pretty much never want it to be tensor, but instead a variable, which you get with\nat::Tensor temp = torch::zeros({n_samples, G, 2});\nI recommend you leave your existing code as-is and don't include torch/torch.h in your extension, but instead replace all uses of at:: in tensor factories (zeros, ones, randn etc.) with torch::, but leave at:: usage for everything else (i.e. at::Tensor and any free functions).\nThis should probably be clarified in the tutorial somewhere, although it doesn't actually create any tensors in C++ (all tensors in the tutorial are created in Python and passed into C++), that's why there wasn't any good situation to showcase it.", "body": "There is nothing wrong here. `torch::Tensor` is a typedef to `at::Tensor` and it is meant to be used in the C++ frontend, not C++ extensions. The problem with your code is not the tensor class, but the fact that you use `at::` functions to create tensors instead of `torch::` functions. When you write\r\n```cpp\r\nat::Tensor temp = at::zeros({n_samples, G, 2});\r\n```\r\nthen `temp` will be a tensor. You pretty much never want it to be tensor, but instead a variable, which you get with\r\n```cpp\r\nat::Tensor temp = torch::zeros({n_samples, G, 2});\r\n```\r\n\r\nI recommend you leave your existing code as-is and don't include `torch/torch.h` in your extension, but instead replace all uses of `at::` in tensor factories (`zeros`, `ones`, `randn` etc.) with `torch::`, but leave `at::` usage for everything else (i.e. `at::Tensor` and any free functions).\r\n\r\nThis should probably be clarified in the tutorial somewhere, although it doesn't actually create any tensors in C++ (all tensors in the tutorial are created in Python and passed into C++), that's why there wasn't any good situation to showcase it."}