{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183880865", "pull_request_review_id": 114966348, "id": 183880865, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mzg4MDg2NQ==", "diff_hunk": "@@ -0,0 +1,215 @@\n+#include \"TH/THMath.h\"\n+#include \"ATen/Half.h\"\n+#ifdef __CUDA_ARCH__\n+#include <nvfunctional>\n+#endif\n+\n+namespace {\n+\n+#ifdef __CUDA_ARCH__\n+#define nvfunction_or_function nvstd::function\n+#define deviceforcuda __device__\n+#else\n+#define nvfunction_or_function std::function\n+#define deviceforcuda\n+// we cannot use std::isnan directly due to some incompatibility of\n+// gcc constexpr'ing and nvcc\n+#define isnan std::isnan\n+#endif\n+\n+template<typename scalar_t>\n+struct BaseSampler {\n+  nvfunction_or_function<scalar_t(void)> sampler;\n+  deviceforcuda BaseSampler(nvfunction_or_function<scalar_t(void)> sampler): sampler(sampler) {}\n+  deviceforcuda scalar_t sample() {\n+    return sampler();\n+  }\n+};\n+\n+// The function `sample_gamma` is\n+// is adapted from Numpy's distributions.c implementation.\n+// It is MIT licensed, so here is the copyright:\n+\n+/* Copyright 2005 Robert Kern (robert.kern@gmail.com)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a\n+ * copy of this software and associated documentation files (the\n+ * \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish,\n+ * distribute, sublicense, and/or sell copies of the Software, and to\n+ * permit persons to whom the Software is furnished to do so, subject to\n+ * the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+*/\n+\n+template<typename scalar_t>\n+deviceforcuda scalar_t sample_gamma(scalar_t alpha, BaseSampler<scalar_t>& standard_uniform, BaseSampler<scalar_t>& standard_normal) {\n+  scalar_t scale = 1.0;\n+\n+  // Boost alpha for higher acceptance probability.\n+  if (alpha < 1.0) {\n+    scale *= std::pow(1 - standard_uniform.sample(), static_cast<scalar_t>(1.0) / alpha);", "path": "aten/src/ATen/native/Distributions.h", "position": null, "original_position": 61, "commit_id": "c225a925ee93b8d1db2eb489b16b2d1601eb63e6", "original_commit_id": "5b32203f4e2323a506d930f7312a0440f9f1990e", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "For all cards except Fermi it's a pretty safe bet that there'll be one element per thread https://github.com/pytorch/pytorch/blob/1848cad10802db9fa0aa066d9de195958120d863/aten/src/ATen/cuda/CUDAApplyUtils.cuh#L239-L254", "created_at": "2018-04-24T21:11:17Z", "updated_at": "2018-11-23T15:43:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/6855#discussion_r183880865", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6855", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183880865"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6855#discussion_r183880865"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6855"}}, "body_html": "<p>For all cards except Fermi it's a pretty safe bet that there'll be one element per thread <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/1848cad10802db9fa0aa066d9de195958120d863/aten/src/ATen/cuda/CUDAApplyUtils.cuh#L239-L254\">pytorch/aten/src/ATen/cuda/CUDAApplyUtils.cuh</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 239 to 254\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/1848cad10802db9fa0aa066d9de195958120d863\">1848cad</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L239\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"239\"></td>\n          <td id=\"LC239\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">inline</span> <span class=\"pl-k\">bool</span> <span class=\"pl-en\">getApplyGrid</span>(<span class=\"pl-c1\">uint64_t</span> totalElements, <span class=\"pl-c1\">dim3</span>&amp; grid) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L240\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"240\"></td>\n          <td id=\"LC240\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">int</span> curDevice = -<span class=\"pl-c1\">1</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L241\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"241\"></td>\n          <td id=\"LC241\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">cudaGetDevice</span>(&amp;curDevice); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L242\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"242\"></td>\n          <td id=\"LC242\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (curDevice == -<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L243\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"243\"></td>\n          <td id=\"LC243\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L244\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"244\"></td>\n          <td id=\"LC244\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">uint64_t</span> numBlocks = <span class=\"pl-c1\">ATenCeilDiv</span>(totalElements, <span class=\"pl-k\">static_cast</span>&lt;<span class=\"pl-c1\">uint64_t</span>&gt;(AT_APPLY_THREADS_PER_BLOCK)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L245\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"245\"></td>\n          <td id=\"LC245\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">uint64_t</span> maxGridX = <span class=\"pl-c1\">at::globalContext</span>().<span class=\"pl-c1\">getCurrentDeviceProperties</span>()-&gt;<span class=\"pl-smi\">maxGridSize</span>[<span class=\"pl-c1\">0</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L246\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"246\"></td>\n          <td id=\"LC246\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (numBlocks &gt; maxGridX) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L247\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"247\"></td>\n          <td id=\"LC247\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       numBlocks = maxGridX; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L248\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"248\"></td>\n          <td id=\"LC248\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   grid = <span class=\"pl-c1\">dim3</span>(numBlocks); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L249\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"249\"></td>\n          <td id=\"LC249\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L250\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"250\"></td>\n          <td id=\"LC250\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L251\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"251\"></td>\n          <td id=\"LC251\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L252\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"252\"></td>\n          <td id=\"LC252\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">inline</span> <span class=\"pl-c1\">dim3</span> <span class=\"pl-en\">getApplyBlock</span>() { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L253\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"253\"></td>\n          <td id=\"LC253\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">dim3</span>(AT_APPLY_THREADS_PER_BLOCK); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L254\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"254\"></td>\n          <td id=\"LC254\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "For all cards except Fermi it's a pretty safe bet that there'll be one element per thread \n  \n    \n      pytorch/aten/src/ATen/cuda/CUDAApplyUtils.cuh\n    \n    \n        Lines 239 to 254\n      in\n      1848cad\n    \n    \n    \n    \n\n        \n          \n           inline bool getApplyGrid(uint64_t totalElements, dim3& grid) { \n        \n\n        \n          \n             int curDevice = -1; \n        \n\n        \n          \n             cudaGetDevice(&curDevice); \n        \n\n        \n          \n             if (curDevice == -1) return false; \n        \n\n        \n          \n            \n        \n\n        \n          \n             uint64_t numBlocks = ATenCeilDiv(totalElements, static_cast<uint64_t>(AT_APPLY_THREADS_PER_BLOCK)); \n        \n\n        \n          \n             uint64_t maxGridX = at::globalContext().getCurrentDeviceProperties()->maxGridSize[0]; \n        \n\n        \n          \n             if (numBlocks > maxGridX) \n        \n\n        \n          \n                 numBlocks = maxGridX; \n        \n\n        \n          \n             grid = dim3(numBlocks); \n        \n\n        \n          \n             return true; \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           inline dim3 getApplyBlock() { \n        \n\n        \n          \n             return dim3(AT_APPLY_THREADS_PER_BLOCK); \n        \n\n        \n          \n           }", "in_reply_to_id": 183542859}