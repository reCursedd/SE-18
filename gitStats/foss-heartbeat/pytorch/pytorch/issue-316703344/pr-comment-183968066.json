{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183968066", "pull_request_review_id": 115066830, "id": 183968066, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mzk2ODA2Ng==", "diff_hunk": "@@ -198,28 +122,49 @@ Tensor _standard_gamma_grad_cpu(const Tensor& self, const Tensor& output) {\n   AT_DISPATCH_FLOATING_TYPES(self.type(), \"_standard_gamma_grad\", [&] {\n     CPU_tensor_apply3<scalar_t, scalar_t, scalar_t>(ret, self, output,\n       [](scalar_t& ret_val, const scalar_t& self_val, const scalar_t &output_val) {\n-         ret_val = standard_gamma_grad_one(self_val, output_val);\n+        ret_val = standard_gamma_grad_one<scalar_t, scalar_t>(self_val, output_val);\n       }\n     );\n   });\n   return ret;\n }\n \n-Tensor _standard_gamma_grad_cuda(const Tensor& self, const Tensor& output) {\n-  AT_ERROR(\"_standard_gamma_grad is not implemented for CUDA types\");\n-}\n+/*\n+ * This section is a counterpart to Distributions.cu\n+ */\n \n Tensor _s_poisson_cpu(const Tensor& lambda, Generator *gen) {\n   Tensor ret = at::zeros(lambda.type(), lambda.sizes());\n-  auto lambda_ = lambda.toType(ScalarType::Double);\n   AT_DISPATCH_FLOATING_TYPES(ret.type(), \"poisson\", [&] {\n     THGenerator* generator = get_generator(gen);\n-    CPU_tensor_apply2<scalar_t, double>(ret, lambda_,\n-      [generator](scalar_t& ret_val, const double& lambda){\n-        ret_val = sample_poisson(lambda, generator);\n+    CPU_tensor_apply2<scalar_t, scalar_t>(ret, lambda,\n+      [generator](scalar_t& ret_val, const scalar_t& lambda){\n+        ret_val = static_cast<scalar_t>(sample_poisson(static_cast<double>(lambda), generator));\n       }\n     );\n-  });\n+    });\n+  return ret;\n+}\n+\n+Tensor _s_gamma_cpu(const Tensor& alpha, Generator *gen) {\n+  Tensor ret = alpha.type().zeros(alpha.sizes());\n+  AT_DISPATCH_FLOATING_TYPES(ret.type(), \"gamma\", [&] {\n+    THGenerator* generator = get_generator(gen);\n+    CPU_tensor_apply2<scalar_t, scalar_t>(ret, alpha,\n+      [generator](scalar_t& ret_val, const scalar_t& alpha){\n+        BaseSampler<scalar_t> standard_uniform([generator] () {\n+          return THRandom_standard_uniform(generator);\n+        });\n+        BaseSampler<scalar_t> standard_normal([generator] () {\n+          return THRandom_normal(generator, 0.0, 1.0);\n+        });\n+        auto sample = sample_gamma<scalar_t, scalar_t>(alpha, standard_uniform, standard_normal);", "path": "aten/src/ATen/native/Distributions.cpp", "position": null, "original_position": 145, "commit_id": "c225a925ee93b8d1db2eb489b16b2d1601eb63e6", "original_commit_id": "e1857074d59285707f728fa8b11a654f72474c02", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think we should just use `double` for `accscalar_t` on CPU. There's basically no benefit of using `float` if you're not vectorizing the function, which won't happen in here.", "created_at": "2018-04-25T07:53:07Z", "updated_at": "2018-11-23T15:43:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/6855#discussion_r183968066", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6855", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183968066"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6855#discussion_r183968066"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6855"}}, "body_html": "<p>I think we should just use <code>double</code> for <code>accscalar_t</code> on CPU. There's basically no benefit of using <code>float</code> if you're not vectorizing the function, which won't happen in here.</p>", "body_text": "I think we should just use double for accscalar_t on CPU. There's basically no benefit of using float if you're not vectorizing the function, which won't happen in here."}