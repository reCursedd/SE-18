{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2925", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2925/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2925/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2925/events", "html_url": "https://github.com/pytorch/pytorch/issues/2925", "id": 261916617, "node_id": "MDU6SXNzdWUyNjE5MTY2MTc=", "number": 2925, "title": "Bug with Advanced Indexing on GPU variables", "user": {"login": "adambielski", "id": 14027793, "node_id": "MDQ6VXNlcjE0MDI3Nzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/14027793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adambielski", "html_url": "https://github.com/adambielski", "followers_url": "https://api.github.com/users/adambielski/followers", "following_url": "https://api.github.com/users/adambielski/following{/other_user}", "gists_url": "https://api.github.com/users/adambielski/gists{/gist_id}", "starred_url": "https://api.github.com/users/adambielski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adambielski/subscriptions", "organizations_url": "https://api.github.com/users/adambielski/orgs", "repos_url": "https://api.github.com/users/adambielski/repos", "events_url": "https://api.github.com/users/adambielski/events{/privacy}", "received_events_url": "https://api.github.com/users/adambielski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-01T13:36:31Z", "updated_at": "2017-10-04T14:56:21Z", "closed_at": "2017-10-04T14:56:01Z", "author_association": "NONE", "body_html": "<p>Simple example: Let's try advanced indexing with object convertible to LongTensor on CPU</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-c1\">print</span>(torch.<span class=\"pl-c1\">__version__</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span>0.2.0_3</span>\n\nx <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">3</span>)\nindices <span class=\"pl-k\">=</span> np.array([[<span class=\"pl-c1\">0</span>],[<span class=\"pl-c1\">1</span>],[<span class=\"pl-c1\">2</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int64)\n<span class=\"pl-c1\">print</span>(x[indices]) <span class=\"pl-c\"><span class=\"pl-c\">#</span> working perfectly </span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>-0.2339</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>[torch.FloatTensor of size 1]</span></pre></div>\n<p>The same on GPU Variable:</p>\n<div class=\"highlight highlight-source-python\"><pre>xx <span class=\"pl-k\">=</span> x.cuda()\n<span class=\"pl-c1\">print</span>(xx[indices])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> IndexError: When performing advanced indexing the indexing objects must be LongTensors or convertible to LongTensors</span>\n\nxx <span class=\"pl-k\">=</span> x.cuda()\n<span class=\"pl-c1\">print</span>(xx[torch.LongTensor(indices)])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> TypeError: indexing a tensor with an object of type torch.LongTensor. The only supported types are integers, slices, numpy scalars and torch.cuda.LongTensor or torch.cuda.ByteTensor as the only argument.</span></pre></div>\n<p>OK, it should work with cuda.LongTensor, let's convert:</p>\n<div class=\"highlight highlight-source-python\"><pre>indices_tensor_cuda <span class=\"pl-k\">=</span> torch.LongTensor(indices).cuda()\n<span class=\"pl-c1\">print</span>(xx[indices_tensor_cuda])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> RuntimeError: invalid argument 3: expecting vector of indices at /pytorch/torch/lib/THC/generic/THCTensorIndex.cu:405</span></pre></div>\n<p>I found a workaround that works</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">print</span>(xx[indices.tolist()])</pre></div>\n<p>But it's inconsistent with behavior on CPU Variables and counter-intuitive to the provided messages.</p>", "body_text": "Simple example: Let's try advanced indexing with object convertible to LongTensor on CPU\nimport torch\nfrom torch.autograd import Variable\nimport numpy as np\n\nprint(torch.__version__) #0.2.0_3\n\nx = torch.randn(5, 4, 3)\nindices = np.array([[0],[1],[2]], dtype=np.int64)\nprint(x[indices]) # working perfectly \n#-0.2339\n#[torch.FloatTensor of size 1]\nThe same on GPU Variable:\nxx = x.cuda()\nprint(xx[indices])\n# IndexError: When performing advanced indexing the indexing objects must be LongTensors or convertible to LongTensors\n\nxx = x.cuda()\nprint(xx[torch.LongTensor(indices)])\n# TypeError: indexing a tensor with an object of type torch.LongTensor. The only supported types are integers, slices, numpy scalars and torch.cuda.LongTensor or torch.cuda.ByteTensor as the only argument.\nOK, it should work with cuda.LongTensor, let's convert:\nindices_tensor_cuda = torch.LongTensor(indices).cuda()\nprint(xx[indices_tensor_cuda])\n# RuntimeError: invalid argument 3: expecting vector of indices at /pytorch/torch/lib/THC/generic/THCTensorIndex.cu:405\nI found a workaround that works\nprint(xx[indices.tolist()])\nBut it's inconsistent with behavior on CPU Variables and counter-intuitive to the provided messages.", "body": "Simple example: Let's try advanced indexing with object convertible to LongTensor on CPU\r\n\r\n```python\r\nimport torch\r\nfrom torch.autograd import Variable\r\nimport numpy as np\r\n\r\nprint(torch.__version__) #0.2.0_3\r\n\r\nx = torch.randn(5, 4, 3)\r\nindices = np.array([[0],[1],[2]], dtype=np.int64)\r\nprint(x[indices]) # working perfectly \r\n#-0.2339\r\n#[torch.FloatTensor of size 1]\r\n```\r\n\r\nThe same on GPU Variable:\r\n\r\n```python\r\nxx = x.cuda()\r\nprint(xx[indices])\r\n# IndexError: When performing advanced indexing the indexing objects must be LongTensors or convertible to LongTensors\r\n\r\nxx = x.cuda()\r\nprint(xx[torch.LongTensor(indices)])\r\n# TypeError: indexing a tensor with an object of type torch.LongTensor. The only supported types are integers, slices, numpy scalars and torch.cuda.LongTensor or torch.cuda.ByteTensor as the only argument.\r\n```\r\n\r\nOK, it should work with cuda.LongTensor, let's convert:\r\n\r\n```python\r\nindices_tensor_cuda = torch.LongTensor(indices).cuda()\r\nprint(xx[indices_tensor_cuda])\r\n# RuntimeError: invalid argument 3: expecting vector of indices at /pytorch/torch/lib/THC/generic/THCTensorIndex.cu:405\r\n```\r\n\r\nI found a workaround that works\r\n```python\r\nprint(xx[indices.tolist()])\r\n```\r\n\r\nBut it's inconsistent with behavior on CPU Variables and counter-intuitive to the provided messages."}