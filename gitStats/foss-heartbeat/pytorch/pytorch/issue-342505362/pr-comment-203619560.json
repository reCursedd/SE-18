{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203619560", "pull_request_review_id": 138540116, "id": 203619560, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYxOTU2MA==", "diff_hunk": "@@ -16,67 +16,59 @@ namespace torch { namespace jit {\n // TODO: Decide what kind of fixed point strategy we will have\n void PeepholeOptimize(Block * block) {\n   for (auto it = block->nodes().begin(); it != block->nodes().end(); ++it) {\n-    auto* n = *it;\n+    auto* node = *it;\n \n-    for (Block * sub_block : n->blocks()) {\n+    for (Block * sub_block : node->blocks()) {\n         PeepholeOptimize(sub_block);\n     }\n \n     // XXX: remember that if you want to simplify an expression by combining multiple nodes\n     // into a different one, then you need to check that they all belong to the given block\n-    switch (n->kind()) {\n-      case aten::expand: {\n-        // Eliminate redundant expand\n-        if (!n->input()->isTensor()) break;\n-        // the sizes are dynamic\n-        if(n->inputs().size() != 1) break;\n-        if (n->get<std::vector<int64_t>>(attr::size) == n->input()->type()->expect<TensorType>()->sizes()) {\n-          n->output()->replaceAllUsesWith(n->input());\n-          // Let DCE clean up any unused nodes at this point\n+    if (node->matches(\"aten::expand(Tensor self, int[] size, *, int implicit) -> Tensor\") &&\n+        node->knows(attr::size)) {\n+      // x.expand(x.size()) == x\n+      if (auto input_type = node->getValue(attr::self)->type()->cast<TensorType>()) {", "path": "torch/csrc/jit/passes/peephole.cpp", "position": null, "original_position": 26, "commit_id": "ef15a232d7a091f02f20bd5632d19583286e3ba3", "original_commit_id": "ee9c00190a2d077295ccea0e1ff0c1100ec59b7d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I don't like `getValue` as a function name. It sounds too generic. Can we make it `node->input(attr::self)`? This follows the pattern of `input(0)` and makes it clear that we are looking up an input rather an output.", "created_at": "2018-07-19T07:00:46Z", "updated_at": "2018-11-23T15:47:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/9567#discussion_r203619560", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9567", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203619560"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9567#discussion_r203619560"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9567"}}, "body_html": "<p>I don't like <code>getValue</code> as a function name. It sounds too generic. Can we make it <code>node-&gt;input(attr::self)</code>? This follows the pattern of <code>input(0)</code> and makes it clear that we are looking up an input rather an output.</p>", "body_text": "I don't like getValue as a function name. It sounds too generic. Can we make it node->input(attr::self)? This follows the pattern of input(0) and makes it clear that we are looking up an input rather an output."}