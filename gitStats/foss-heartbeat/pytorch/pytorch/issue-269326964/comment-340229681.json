{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340229681", "html_url": "https://github.com/pytorch/pytorch/issues/3340#issuecomment-340229681", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3340", "id": 340229681, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIyOTY4MQ==", "user": {"login": "akolishchak", "id": 14082831, "node_id": "MDQ6VXNlcjE0MDgyODMx", "avatar_url": "https://avatars1.githubusercontent.com/u/14082831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akolishchak", "html_url": "https://github.com/akolishchak", "followers_url": "https://api.github.com/users/akolishchak/followers", "following_url": "https://api.github.com/users/akolishchak/following{/other_user}", "gists_url": "https://api.github.com/users/akolishchak/gists{/gist_id}", "starred_url": "https://api.github.com/users/akolishchak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akolishchak/subscriptions", "organizations_url": "https://api.github.com/users/akolishchak/orgs", "repos_url": "https://api.github.com/users/akolishchak/repos", "events_url": "https://api.github.com/users/akolishchak/events{/privacy}", "received_events_url": "https://api.github.com/users/akolishchak/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-29T00:49:03Z", "updated_at": "2017-10-29T00:50:13Z", "author_association": "NONE", "body_html": "<p>If I understand correctly it was easier with reinforce(), required just saving actual samples for backward pass. Now we need to save samples + Distribution object, e.g.:<br>\n<code>probs = network(input) m = Multinomial(probs) action = m.sample()</code><br>\nBoth <code>m</code> and <code>action</code> should be saved for backward pass. The saving is typically required for backup of reward from the last action in an RL episode.</p>", "body_text": "If I understand correctly it was easier with reinforce(), required just saving actual samples for backward pass. Now we need to save samples + Distribution object, e.g.:\nprobs = network(input) m = Multinomial(probs) action = m.sample()\nBoth m and action should be saved for backward pass. The saving is typically required for backup of reward from the last action in an RL episode.", "body": "If I understand correctly it was easier with reinforce(), required just saving actual samples for backward pass. Now we need to save samples + Distribution object, e.g.:\r\n`\r\nprobs = network(input)\r\nm = Multinomial(probs)\r\naction = m.sample()\r\n`\r\nBoth `m` and `action` should be saved for backward pass. The saving is typically required for backup of reward from the last action in an RL episode.\r\n"}