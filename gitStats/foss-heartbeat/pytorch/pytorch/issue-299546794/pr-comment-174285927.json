{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174285927", "pull_request_review_id": 103614680, "id": 174285927, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI4NTkyNw==", "diff_hunk": "@@ -32,11 +32,9 @@ def __init__(self, base_distribution, transforms):\n         event_dim = max([len(self.base_dist.event_shape)] + [t.event_dim for t in self.transforms])\n         batch_shape = shape[:len(shape) - event_dim]\n         event_shape = shape[len(shape) - event_dim:]\n-        super(TransformedDistribution, self).__init__(batch_shape, event_shape)\n+        super(TransformedDistribution, self).__init__(batch_shape, event_shape, validate_args=validate_args)\n \n-    @constraints.dependent_property\n-    def params(self):\n-        return self.base_dist.params  # TODO add params of transforms?\n+    params = {}", "path": "torch/distributions/transformed_distribution.py", "position": null, "original_position": 19, "commit_id": "6c5581b0ae17d07bdf6c24710d7e91e238f9a23c", "original_commit_id": "aa0f7a6b67e8bc621d9727f7f48557460c13ef68", "user": {"login": "lazypanda1", "id": 35884075, "node_id": "MDQ6VXNlcjM1ODg0MDc1", "avatar_url": "https://avatars0.githubusercontent.com/u/35884075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazypanda1", "html_url": "https://github.com/lazypanda1", "followers_url": "https://api.github.com/users/lazypanda1/followers", "following_url": "https://api.github.com/users/lazypanda1/following{/other_user}", "gists_url": "https://api.github.com/users/lazypanda1/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazypanda1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazypanda1/subscriptions", "organizations_url": "https://api.github.com/users/lazypanda1/orgs", "repos_url": "https://api.github.com/users/lazypanda1/repos", "events_url": "https://api.github.com/users/lazypanda1/events{/privacy}", "received_events_url": "https://api.github.com/users/lazypanda1/received_events", "type": "User", "site_admin": false}, "body": "`TestValidation.test_valid` test fails with the following error:\r\n\r\n\r\n```\r\nself = <test_distributions.TestValidation testMethod=test_valid>\r\n\r\n    def test_valid(self):\r\n        for Dist, params in EXAMPLES:\r\n            for i, param in enumerate(params):\r\n>               Dist(validate_args=True, **param)\r\n\r\ntest/test_distributions.py:3065: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntorch/distributions/transformed_distribution.py:35: in __init__\r\n    super(TransformedDistribution, self).__init__(batch_shape, event_shape, validate_args=validate_args)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = TransformedDistribution(), batch_shape = torch.Size([2, 3]), event_shape = torch.Size([]), validate_args = True\r\n\r\n    def __init__(self, batch_shape=torch.Size(), event_shape=torch.Size(), validate_args=None):\r\n        self._batch_shape = batch_shape\r\n        self._event_shape = event_shape\r\n        if validate_args is not None:\r\n            self._validate_args = validate_args\r\n        if self._validate_args:\r\n            if not constraints.is_dependent(self.params):\r\n                for param, constraint in self.params.items():\r\n                    if not constraints.is_dependent(constraint):\r\n>                       if not constraint.check(self.__getattribute__(param)).all():\r\nE                       AttributeError: 'TransformedDistribution' object has no attribute 'loc'\r\n\r\ntorch/distributions/distribution.py:33: AttributeError\r\n\r\n```\r\n\r\nThis is what i would have in the code:\r\n```\r\nclass TransformedDistribution(Distribution):\r\n  ....\r\n\r\n    @constraints.dependent_property\r\n    def params(self):\r\n        return self.base_dist.params\r\n```\r\n\r\nWhat do u suggest?", "created_at": "2018-03-13T21:12:00Z", "updated_at": "2018-11-23T15:40:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/5358#discussion_r174285927", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5358", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174285927"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5358#discussion_r174285927"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5358"}}, "body_html": "<p><code>TestValidation.test_valid</code> test fails with the following error:</p>\n<pre><code>self = &lt;test_distributions.TestValidation testMethod=test_valid&gt;\n\n    def test_valid(self):\n        for Dist, params in EXAMPLES:\n            for i, param in enumerate(params):\n&gt;               Dist(validate_args=True, **param)\n\ntest/test_distributions.py:3065: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntorch/distributions/transformed_distribution.py:35: in __init__\n    super(TransformedDistribution, self).__init__(batch_shape, event_shape, validate_args=validate_args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TransformedDistribution(), batch_shape = torch.Size([2, 3]), event_shape = torch.Size([]), validate_args = True\n\n    def __init__(self, batch_shape=torch.Size(), event_shape=torch.Size(), validate_args=None):\n        self._batch_shape = batch_shape\n        self._event_shape = event_shape\n        if validate_args is not None:\n            self._validate_args = validate_args\n        if self._validate_args:\n            if not constraints.is_dependent(self.params):\n                for param, constraint in self.params.items():\n                    if not constraints.is_dependent(constraint):\n&gt;                       if not constraint.check(self.__getattribute__(param)).all():\nE                       AttributeError: 'TransformedDistribution' object has no attribute 'loc'\n\ntorch/distributions/distribution.py:33: AttributeError\n\n</code></pre>\n<p>This is what i would have in the code:</p>\n<pre><code>class TransformedDistribution(Distribution):\n  ....\n\n    @constraints.dependent_property\n    def params(self):\n        return self.base_dist.params\n</code></pre>\n<p>What do u suggest?</p>", "body_text": "TestValidation.test_valid test fails with the following error:\nself = <test_distributions.TestValidation testMethod=test_valid>\n\n    def test_valid(self):\n        for Dist, params in EXAMPLES:\n            for i, param in enumerate(params):\n>               Dist(validate_args=True, **param)\n\ntest/test_distributions.py:3065: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntorch/distributions/transformed_distribution.py:35: in __init__\n    super(TransformedDistribution, self).__init__(batch_shape, event_shape, validate_args=validate_args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TransformedDistribution(), batch_shape = torch.Size([2, 3]), event_shape = torch.Size([]), validate_args = True\n\n    def __init__(self, batch_shape=torch.Size(), event_shape=torch.Size(), validate_args=None):\n        self._batch_shape = batch_shape\n        self._event_shape = event_shape\n        if validate_args is not None:\n            self._validate_args = validate_args\n        if self._validate_args:\n            if not constraints.is_dependent(self.params):\n                for param, constraint in self.params.items():\n                    if not constraints.is_dependent(constraint):\n>                       if not constraint.check(self.__getattribute__(param)).all():\nE                       AttributeError: 'TransformedDistribution' object has no attribute 'loc'\n\ntorch/distributions/distribution.py:33: AttributeError\n\n\nThis is what i would have in the code:\nclass TransformedDistribution(Distribution):\n  ....\n\n    @constraints.dependent_property\n    def params(self):\n        return self.base_dist.params\n\nWhat do u suggest?", "in_reply_to_id": 174145151}