{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2916", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2916/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2916/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2916/events", "html_url": "https://github.com/pytorch/pytorch/issues/2916", "id": 261861747, "node_id": "MDU6SXNzdWUyNjE4NjE3NDc=", "number": 2916, "title": "Evaluate Torch Model Error", "user": {"login": "engahmed1190", "id": 25582838, "node_id": "MDQ6VXNlcjI1NTgyODM4", "avatar_url": "https://avatars0.githubusercontent.com/u/25582838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/engahmed1190", "html_url": "https://github.com/engahmed1190", "followers_url": "https://api.github.com/users/engahmed1190/followers", "following_url": "https://api.github.com/users/engahmed1190/following{/other_user}", "gists_url": "https://api.github.com/users/engahmed1190/gists{/gist_id}", "starred_url": "https://api.github.com/users/engahmed1190/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/engahmed1190/subscriptions", "organizations_url": "https://api.github.com/users/engahmed1190/orgs", "repos_url": "https://api.github.com/users/engahmed1190/repos", "events_url": "https://api.github.com/users/engahmed1190/events{/privacy}", "received_events_url": "https://api.github.com/users/engahmed1190/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-30T18:09:52Z", "updated_at": "2017-09-30T18:13:34Z", "closed_at": "2017-09-30T18:13:28Z", "author_association": "NONE", "body_html": "<p>I am trying to work with torch 7 model which is consist of the following layers:</p>\n<pre><code>nn.Sequential {\n  [input -&gt; (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; (7) -&gt; (8) -&gt; (9) -&gt; (10) -&gt; (11) -&gt; (12) -&gt; (13) -&gt; (14) -&gt; (15) -&gt; (16) -&gt; (17) -&gt; (18) -&gt; (19) -&gt; (20) -&gt; (21) -&gt; (22) -&gt; (23) -&gt; output]\n  (0): TorchObject(nn.TVLoss, {'_type': 'torch.FloatTensor', 'strength': 0, 'x_diff': \n  ( 0 ,.,.) = \n    0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078 -0.0157  0.0000\n             ...             \u22f1             ...          \n   -0.0196  0.0157 -0.0196  ...   0.0078  0.0588  0.0392\n   -0.0196  0.0196 -0.0235  ...   0.0235  0.0745  0.1451\n   -0.0078  0.0000  0.0118  ...   0.0431  0.1882  0.1569\n  \n  ( 1 ,.,.) = \n    0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078 -0.0078  0.0000\n             ...             \u22f1             ...          \n   -0.0196  0.0157 -0.0196  ...   0.0078  0.0431  0.0235\n   -0.0196  0.0196 -0.0235  ...   0.0196  0.0588  0.1373\n   -0.0078  0.0000  0.0118  ...   0.0353  0.1765  0.1451\n  \n  ( 2 ,.,.) = \n    0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078 -0.0078  0.0000\n             ...             \u22f1             ...          \n   -0.0196  0.0157 -0.0196  ...   0.0078  0.0471  0.0235\n   -0.0196  0.0196 -0.0235  ...   0.0118  0.0510  0.1216\n   -0.0078  0.0039  0.0118  ...   0.0157  0.1647  0.1176\n  [torch.FloatTensor of size 3x511x511]\n  , 'gradInput': [torch.FloatTensor with no dimension]\n  , 'y_diff': \n  ( 0 ,.,.) = \n    0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078  0.0118 -0.0039\n    0.0000  0.0000  0.0000  ...  -0.0118 -0.0078  0.0000\n             ...             \u22f1             ...          \n    0.0039  0.0039  0.0078  ...   0.0157  0.0314  0.0471\n   -0.0157 -0.0039 -0.0235  ...   0.0863  0.1059  0.2196\n    0.0039  0.0039  0.0039  ...   0.1020  0.1961  0.1451\n  \n  ( 1 ,.,.) = \n    0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0000  0.0039 -0.0039\n    0.0000  0.0000  0.0000  ...  -0.0118 -0.0078  0.0000\n             ...             \u22f1             ...          \n    0.0039  0.0039  0.0078  ...   0.0196  0.0314  0.0471\n   -0.0157 -0.0039 -0.0235  ...   0.0706  0.0863  0.2039\n    0.0039  0.0039  0.0039  ...   0.0941  0.1922  0.1451\n  \n  ( 2 ,.,.) = \n    0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0000  0.0039 -0.0039\n    0.0000  0.0000  0.0000  ...  -0.0196 -0.0078  0.0000\n             ...             \u22f1             ...          \n    0.0039  0.0039  0.0078  ...   0.0039  0.0078  0.0118\n   -0.0196 -0.0078 -0.0235  ...   0.0275  0.0314  0.1451\n    0.0039  0.0039  0.0039  ...   0.0745  0.1725  0.0980\n  [torch.FloatTensor of size 3x511x511]\n  , 'train': True, 'output': [torch.FloatTensor with no dimension]\n  })\n  (1): nn.SpatialReplicationPadding(4, 4, 4, 4)\n  (2): nn.SpatialConvolution(3 -&gt; 32, 9x9)\n  (3): nn.InstanceNormalization\n  (4): nn.ReLU\n  (5): nn.SpatialConvolution(32 -&gt; 64, 3x3, 2, 2, 1, 1)\n  (6): nn.InstanceNormalization\n  (7): nn.ReLU\n  (8): nn.SpatialConvolution(64 -&gt; 128, 3x3, 2, 2, 1, 1)\n  (9): nn.InstanceNormalization\n  (10): nn.ReLU\n  (11): nn.Sequential {\n    [input -&gt; (0) -&gt; (1) -&gt; output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-&gt; (0): nn.Identity\n        |`-&gt; (1): nn.Sequential {\n               [input -&gt; (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -&gt; output\n    }\n    (1): nn.CAddTable\n  }\n  (12): nn.Sequential {\n    [input -&gt; (0) -&gt; (1) -&gt; output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-&gt; (0): nn.Identity\n        |`-&gt; (1): nn.Sequential {\n               [input -&gt; (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -&gt; output\n    }\n    (1): nn.CAddTable\n  }\n  (13): nn.Sequential {\n    [input -&gt; (0) -&gt; (1) -&gt; output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-&gt; (0): nn.Identity\n        |`-&gt; (1): nn.Sequential {\n               [input -&gt; (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -&gt; output\n    }\n    (1): nn.CAddTable\n  }\n  (14): nn.Sequential {\n    [input -&gt; (0) -&gt; (1) -&gt; output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-&gt; (0): nn.Identity\n        |`-&gt; (1): nn.Sequential {\n               [input -&gt; (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -&gt; output\n    }\n    (1): nn.CAddTable\n  }\n  (15): nn.Sequential {\n    [input -&gt; (0) -&gt; (1) -&gt; output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-&gt; (0): nn.Identity\n        |`-&gt; (1): nn.Sequential {\n               [input -&gt; (0) -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -&gt; 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -&gt; output\n    }\n    (1): nn.CAddTable\n  }\n  (16): nn.SpatialFullConvolution(128 -&gt; 64, 3x3, 2, 2, 1, 1, 1, 1)\n  (17): nn.InstanceNormalization\n  (18): nn.ReLU\n  (19): nn.SpatialFullConvolution(64 -&gt; 32, 3x3, 2, 2, 1, 1, 1, 1)\n  (20): nn.InstanceNormalization\n  (21): nn.ReLU\n  (22): nn.SpatialReplicationPadding(1, 1, 1, 1)\n  (23): nn.SpatialConvolution(32 -&gt; 3, 3x3)\n}\n</code></pre>\n<p>the model is loaded perfectly fine but when i am trying to evaluate model , i get this error</p>\n<pre><code> Traceback (most recent call last):\n  File \"convert-fast-neural-style.py\", line 176, in &lt;module&gt;\n    main()\n  File \"convert-fast-neural-style.py\", line 162, in main\n    unknown_layer_converter_fn=convert_instance_norm\n  File \"/usr/local/lib/python2.7/dist-packages/torch2coreml/_torch_converter.py\", line 194, in convert\n    print (model.evaluate())\n  File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 39, in evaluate\n    self.applyToModules(lambda m: m.evaluate())\n  File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 26, in applyToModules\n    func(module)\n  File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 39, in &lt;lambda&gt;\n    self.applyToModules(lambda m: m.evaluate())\nTypeError: 'NoneType' object is not callable\n</code></pre>\n<p>what is the main reason behind the evaluation to bring this NoneType error.<br>\nis their any other may that is equivalent to <strong>m.evaluate()</strong></p>\n<p>for reference also this is the <a href=\"https://yadi.sk/d/GwL9jNJovBwQg\" rel=\"nofollow\">Model</a>  i am trying to evaluate</p>", "body_text": "I am trying to work with torch 7 model which is consist of the following layers:\nnn.Sequential {\n  [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> output]\n  (0): TorchObject(nn.TVLoss, {'_type': 'torch.FloatTensor', 'strength': 0, 'x_diff': \n  ( 0 ,.,.) = \n    0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078 -0.0157  0.0000\n             ...             \u22f1             ...          \n   -0.0196  0.0157 -0.0196  ...   0.0078  0.0588  0.0392\n   -0.0196  0.0196 -0.0235  ...   0.0235  0.0745  0.1451\n   -0.0078  0.0000  0.0118  ...   0.0431  0.1882  0.1569\n  \n  ( 1 ,.,.) = \n    0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078 -0.0078  0.0000\n             ...             \u22f1             ...          \n   -0.0196  0.0157 -0.0196  ...   0.0078  0.0431  0.0235\n   -0.0196  0.0196 -0.0235  ...   0.0196  0.0588  0.1373\n   -0.0078  0.0000  0.0118  ...   0.0353  0.1765  0.1451\n  \n  ( 2 ,.,.) = \n    0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078 -0.0078  0.0000\n             ...             \u22f1             ...          \n   -0.0196  0.0157 -0.0196  ...   0.0078  0.0471  0.0235\n   -0.0196  0.0196 -0.0235  ...   0.0118  0.0510  0.1216\n   -0.0078  0.0039  0.0118  ...   0.0157  0.1647  0.1176\n  [torch.FloatTensor of size 3x511x511]\n  , 'gradInput': [torch.FloatTensor with no dimension]\n  , 'y_diff': \n  ( 0 ,.,.) = \n    0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0078  0.0118 -0.0039\n    0.0000  0.0000  0.0000  ...  -0.0118 -0.0078  0.0000\n             ...             \u22f1             ...          \n    0.0039  0.0039  0.0078  ...   0.0157  0.0314  0.0471\n   -0.0157 -0.0039 -0.0235  ...   0.0863  0.1059  0.2196\n    0.0039  0.0039  0.0039  ...   0.1020  0.1961  0.1451\n  \n  ( 1 ,.,.) = \n    0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0000  0.0039 -0.0039\n    0.0000  0.0000  0.0000  ...  -0.0118 -0.0078  0.0000\n             ...             \u22f1             ...          \n    0.0039  0.0039  0.0078  ...   0.0196  0.0314  0.0471\n   -0.0157 -0.0039 -0.0235  ...   0.0706  0.0863  0.2039\n    0.0039  0.0039  0.0039  ...   0.0941  0.1922  0.1451\n  \n  ( 2 ,.,.) = \n    0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\n    0.0000  0.0000  0.0000  ...   0.0000  0.0039 -0.0039\n    0.0000  0.0000  0.0000  ...  -0.0196 -0.0078  0.0000\n             ...             \u22f1             ...          \n    0.0039  0.0039  0.0078  ...   0.0039  0.0078  0.0118\n   -0.0196 -0.0078 -0.0235  ...   0.0275  0.0314  0.1451\n    0.0039  0.0039  0.0039  ...   0.0745  0.1725  0.0980\n  [torch.FloatTensor of size 3x511x511]\n  , 'train': True, 'output': [torch.FloatTensor with no dimension]\n  })\n  (1): nn.SpatialReplicationPadding(4, 4, 4, 4)\n  (2): nn.SpatialConvolution(3 -> 32, 9x9)\n  (3): nn.InstanceNormalization\n  (4): nn.ReLU\n  (5): nn.SpatialConvolution(32 -> 64, 3x3, 2, 2, 1, 1)\n  (6): nn.InstanceNormalization\n  (7): nn.ReLU\n  (8): nn.SpatialConvolution(64 -> 128, 3x3, 2, 2, 1, 1)\n  (9): nn.InstanceNormalization\n  (10): nn.ReLU\n  (11): nn.Sequential {\n    [input -> (0) -> (1) -> output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-> (0): nn.Identity\n        |`-> (1): nn.Sequential {\n               [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -> 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -> 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -> output\n    }\n    (1): nn.CAddTable\n  }\n  (12): nn.Sequential {\n    [input -> (0) -> (1) -> output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-> (0): nn.Identity\n        |`-> (1): nn.Sequential {\n               [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -> 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -> 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -> output\n    }\n    (1): nn.CAddTable\n  }\n  (13): nn.Sequential {\n    [input -> (0) -> (1) -> output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-> (0): nn.Identity\n        |`-> (1): nn.Sequential {\n               [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -> 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -> 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -> output\n    }\n    (1): nn.CAddTable\n  }\n  (14): nn.Sequential {\n    [input -> (0) -> (1) -> output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-> (0): nn.Identity\n        |`-> (1): nn.Sequential {\n               [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -> 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -> 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -> output\n    }\n    (1): nn.CAddTable\n  }\n  (15): nn.Sequential {\n    [input -> (0) -> (1) -> output]\n    (0): torch.legacy.nn.ConcatTable.ConcatTable {\n      input\n        |`-> (0): nn.Identity\n        |`-> (1): nn.Sequential {\n               [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\n               (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (1): nn.SpatialConvolution(128 -> 128, 3x3)\n               (2): nn.InstanceNormalization\n               (3): nn.ReLU\n               (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\n               (5): nn.SpatialConvolution(128 -> 128, 3x3)\n               (6): nn.InstanceNormalization\n             }\n         +. -> output\n    }\n    (1): nn.CAddTable\n  }\n  (16): nn.SpatialFullConvolution(128 -> 64, 3x3, 2, 2, 1, 1, 1, 1)\n  (17): nn.InstanceNormalization\n  (18): nn.ReLU\n  (19): nn.SpatialFullConvolution(64 -> 32, 3x3, 2, 2, 1, 1, 1, 1)\n  (20): nn.InstanceNormalization\n  (21): nn.ReLU\n  (22): nn.SpatialReplicationPadding(1, 1, 1, 1)\n  (23): nn.SpatialConvolution(32 -> 3, 3x3)\n}\n\nthe model is loaded perfectly fine but when i am trying to evaluate model , i get this error\n Traceback (most recent call last):\n  File \"convert-fast-neural-style.py\", line 176, in <module>\n    main()\n  File \"convert-fast-neural-style.py\", line 162, in main\n    unknown_layer_converter_fn=convert_instance_norm\n  File \"/usr/local/lib/python2.7/dist-packages/torch2coreml/_torch_converter.py\", line 194, in convert\n    print (model.evaluate())\n  File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 39, in evaluate\n    self.applyToModules(lambda m: m.evaluate())\n  File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 26, in applyToModules\n    func(module)\n  File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 39, in <lambda>\n    self.applyToModules(lambda m: m.evaluate())\nTypeError: 'NoneType' object is not callable\n\nwhat is the main reason behind the evaluation to bring this NoneType error.\nis their any other may that is equivalent to m.evaluate()\nfor reference also this is the Model  i am trying to evaluate", "body": "I am trying to work with torch 7 model which is consist of the following layers:\r\n\r\n    nn.Sequential {\r\n      [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> output]\r\n      (0): TorchObject(nn.TVLoss, {'_type': 'torch.FloatTensor', 'strength': 0, 'x_diff': \r\n      ( 0 ,.,.) = \r\n        0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0078 -0.0157  0.0000\r\n                 ...             \u22f1             ...          \r\n       -0.0196  0.0157 -0.0196  ...   0.0078  0.0588  0.0392\r\n       -0.0196  0.0196 -0.0235  ...   0.0235  0.0745  0.1451\r\n       -0.0078  0.0000  0.0118  ...   0.0431  0.1882  0.1569\r\n      \r\n      ( 1 ,.,.) = \r\n        0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0078 -0.0078  0.0000\r\n                 ...             \u22f1             ...          \r\n       -0.0196  0.0157 -0.0196  ...   0.0078  0.0431  0.0235\r\n       -0.0196  0.0196 -0.0235  ...   0.0196  0.0588  0.1373\r\n       -0.0078  0.0000  0.0118  ...   0.0353  0.1765  0.1451\r\n      \r\n      ( 2 ,.,.) = \r\n        0.0000  0.0000  0.0000  ...  -0.0039  0.0078  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0039  0.0000  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0078 -0.0078  0.0000\r\n                 ...             \u22f1             ...          \r\n       -0.0196  0.0157 -0.0196  ...   0.0078  0.0471  0.0235\r\n       -0.0196  0.0196 -0.0235  ...   0.0118  0.0510  0.1216\r\n       -0.0078  0.0039  0.0118  ...   0.0157  0.1647  0.1176\r\n      [torch.FloatTensor of size 3x511x511]\r\n      , 'gradInput': [torch.FloatTensor with no dimension]\r\n      , 'y_diff': \r\n      ( 0 ,.,.) = \r\n        0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0078  0.0118 -0.0039\r\n        0.0000  0.0000  0.0000  ...  -0.0118 -0.0078  0.0000\r\n                 ...             \u22f1             ...          \r\n        0.0039  0.0039  0.0078  ...   0.0157  0.0314  0.0471\r\n       -0.0157 -0.0039 -0.0235  ...   0.0863  0.1059  0.2196\r\n        0.0039  0.0039  0.0039  ...   0.1020  0.1961  0.1451\r\n      \r\n      ( 1 ,.,.) = \r\n        0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0000  0.0039 -0.0039\r\n        0.0000  0.0000  0.0000  ...  -0.0118 -0.0078  0.0000\r\n                 ...             \u22f1             ...          \r\n        0.0039  0.0039  0.0078  ...   0.0196  0.0314  0.0471\r\n       -0.0157 -0.0039 -0.0235  ...   0.0706  0.0863  0.2039\r\n        0.0039  0.0039  0.0039  ...   0.0941  0.1922  0.1451\r\n      \r\n      ( 2 ,.,.) = \r\n        0.0000  0.0000  0.0000  ...   0.0000  0.0078  0.0000\r\n        0.0000  0.0000  0.0000  ...   0.0000  0.0039 -0.0039\r\n        0.0000  0.0000  0.0000  ...  -0.0196 -0.0078  0.0000\r\n                 ...             \u22f1             ...          \r\n        0.0039  0.0039  0.0078  ...   0.0039  0.0078  0.0118\r\n       -0.0196 -0.0078 -0.0235  ...   0.0275  0.0314  0.1451\r\n        0.0039  0.0039  0.0039  ...   0.0745  0.1725  0.0980\r\n      [torch.FloatTensor of size 3x511x511]\r\n      , 'train': True, 'output': [torch.FloatTensor with no dimension]\r\n      })\r\n      (1): nn.SpatialReplicationPadding(4, 4, 4, 4)\r\n      (2): nn.SpatialConvolution(3 -> 32, 9x9)\r\n      (3): nn.InstanceNormalization\r\n      (4): nn.ReLU\r\n      (5): nn.SpatialConvolution(32 -> 64, 3x3, 2, 2, 1, 1)\r\n      (6): nn.InstanceNormalization\r\n      (7): nn.ReLU\r\n      (8): nn.SpatialConvolution(64 -> 128, 3x3, 2, 2, 1, 1)\r\n      (9): nn.InstanceNormalization\r\n      (10): nn.ReLU\r\n      (11): nn.Sequential {\r\n        [input -> (0) -> (1) -> output]\r\n        (0): torch.legacy.nn.ConcatTable.ConcatTable {\r\n          input\r\n            |`-> (0): nn.Identity\r\n            |`-> (1): nn.Sequential {\r\n                   [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\r\n                   (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (1): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (2): nn.InstanceNormalization\r\n                   (3): nn.ReLU\r\n                   (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (5): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (6): nn.InstanceNormalization\r\n                 }\r\n             +. -> output\r\n        }\r\n        (1): nn.CAddTable\r\n      }\r\n      (12): nn.Sequential {\r\n        [input -> (0) -> (1) -> output]\r\n        (0): torch.legacy.nn.ConcatTable.ConcatTable {\r\n          input\r\n            |`-> (0): nn.Identity\r\n            |`-> (1): nn.Sequential {\r\n                   [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\r\n                   (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (1): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (2): nn.InstanceNormalization\r\n                   (3): nn.ReLU\r\n                   (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (5): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (6): nn.InstanceNormalization\r\n                 }\r\n             +. -> output\r\n        }\r\n        (1): nn.CAddTable\r\n      }\r\n      (13): nn.Sequential {\r\n        [input -> (0) -> (1) -> output]\r\n        (0): torch.legacy.nn.ConcatTable.ConcatTable {\r\n          input\r\n            |`-> (0): nn.Identity\r\n            |`-> (1): nn.Sequential {\r\n                   [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\r\n                   (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (1): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (2): nn.InstanceNormalization\r\n                   (3): nn.ReLU\r\n                   (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (5): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (6): nn.InstanceNormalization\r\n                 }\r\n             +. -> output\r\n        }\r\n        (1): nn.CAddTable\r\n      }\r\n      (14): nn.Sequential {\r\n        [input -> (0) -> (1) -> output]\r\n        (0): torch.legacy.nn.ConcatTable.ConcatTable {\r\n          input\r\n            |`-> (0): nn.Identity\r\n            |`-> (1): nn.Sequential {\r\n                   [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\r\n                   (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (1): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (2): nn.InstanceNormalization\r\n                   (3): nn.ReLU\r\n                   (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (5): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (6): nn.InstanceNormalization\r\n                 }\r\n             +. -> output\r\n        }\r\n        (1): nn.CAddTable\r\n      }\r\n      (15): nn.Sequential {\r\n        [input -> (0) -> (1) -> output]\r\n        (0): torch.legacy.nn.ConcatTable.ConcatTable {\r\n          input\r\n            |`-> (0): nn.Identity\r\n            |`-> (1): nn.Sequential {\r\n                   [input -> (0) -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]\r\n                   (0): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (1): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (2): nn.InstanceNormalization\r\n                   (3): nn.ReLU\r\n                   (4): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n                   (5): nn.SpatialConvolution(128 -> 128, 3x3)\r\n                   (6): nn.InstanceNormalization\r\n                 }\r\n             +. -> output\r\n        }\r\n        (1): nn.CAddTable\r\n      }\r\n      (16): nn.SpatialFullConvolution(128 -> 64, 3x3, 2, 2, 1, 1, 1, 1)\r\n      (17): nn.InstanceNormalization\r\n      (18): nn.ReLU\r\n      (19): nn.SpatialFullConvolution(64 -> 32, 3x3, 2, 2, 1, 1, 1, 1)\r\n      (20): nn.InstanceNormalization\r\n      (21): nn.ReLU\r\n      (22): nn.SpatialReplicationPadding(1, 1, 1, 1)\r\n      (23): nn.SpatialConvolution(32 -> 3, 3x3)\r\n    }\r\nthe model is loaded perfectly fine but when i am trying to evaluate model , i get this error \r\n\r\n     Traceback (most recent call last):\r\n      File \"convert-fast-neural-style.py\", line 176, in <module>\r\n        main()\r\n      File \"convert-fast-neural-style.py\", line 162, in main\r\n        unknown_layer_converter_fn=convert_instance_norm\r\n      File \"/usr/local/lib/python2.7/dist-packages/torch2coreml/_torch_converter.py\", line 194, in convert\r\n        print (model.evaluate())\r\n      File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 39, in evaluate\r\n        self.applyToModules(lambda m: m.evaluate())\r\n      File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 26, in applyToModules\r\n        func(module)\r\n      File \"/usr/local/lib/python2.7/dist-packages/torch/legacy/nn/Container.py\", line 39, in <lambda>\r\n        self.applyToModules(lambda m: m.evaluate())\r\n    TypeError: 'NoneType' object is not callable\r\n\r\n\r\nwhat is the main reason behind the evaluation to bring this NoneType error.\r\nis their any other may that is equivalent to **m.evaluate()** \r\n\r\nfor reference also this is the [Model][1]  i am trying to evaluate\r\n\r\n\r\n\r\n  [1]: https://yadi.sk/d/GwL9jNJovBwQg"}