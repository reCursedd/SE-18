{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11561", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11561/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11561/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11561/events", "html_url": "https://github.com/pytorch/pytorch/issues/11561", "id": 359287794, "node_id": "MDU6SXNzdWUzNTkyODc3OTQ=", "number": 11561, "title": "DeviceGuard is weirdly CUDA-specific", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-12T02:05:28Z", "updated_at": "2018-11-20T18:44:00Z", "closed_at": "2018-11-20T18:44:00Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>  /// Sets the device to the given one.\n  void set_index(int32_t index) {\n    if (index == -1) {\n      return;\n    }\n    AT_ASSERT(index &gt;= 0);\n    if (original_index_ == -1) {\n      int32_t previous_index = -123;\n      detail::DynamicCUDAInterface::get_device(&amp;previous_index);\n      original_index_ = previous_index;\n      if (index != original_index_) {\n        detail::DynamicCUDAInterface::set_device(index);\n      }\n    } else {\n      detail::DynamicCUDAInterface::set_device(index);\n    }\n    last_index_ = index;\n  }\n</code></pre>\n<p>Like, don't claim to be device independent, and then call a CUDA thing under the hood.</p>", "body_text": "/// Sets the device to the given one.\n  void set_index(int32_t index) {\n    if (index == -1) {\n      return;\n    }\n    AT_ASSERT(index >= 0);\n    if (original_index_ == -1) {\n      int32_t previous_index = -123;\n      detail::DynamicCUDAInterface::get_device(&previous_index);\n      original_index_ = previous_index;\n      if (index != original_index_) {\n        detail::DynamicCUDAInterface::set_device(index);\n      }\n    } else {\n      detail::DynamicCUDAInterface::set_device(index);\n    }\n    last_index_ = index;\n  }\n\nLike, don't claim to be device independent, and then call a CUDA thing under the hood.", "body": "```\r\n  /// Sets the device to the given one.\r\n  void set_index(int32_t index) {\r\n    if (index == -1) {\r\n      return;\r\n    }\r\n    AT_ASSERT(index >= 0);\r\n    if (original_index_ == -1) {\r\n      int32_t previous_index = -123;\r\n      detail::DynamicCUDAInterface::get_device(&previous_index);\r\n      original_index_ = previous_index;\r\n      if (index != original_index_) {\r\n        detail::DynamicCUDAInterface::set_device(index);\r\n      }\r\n    } else {\r\n      detail::DynamicCUDAInterface::set_device(index);\r\n    }\r\n    last_index_ = index;\r\n  }\r\n```\r\n\r\nLike, don't claim to be device independent, and then call a CUDA thing under the hood."}