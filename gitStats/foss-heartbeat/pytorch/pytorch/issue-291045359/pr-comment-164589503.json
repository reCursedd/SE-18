{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164589503", "pull_request_review_id": 92286969, "id": 164589503, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4OTUwMw==", "diff_hunk": "@@ -219,62 +251,119 @@ static void THNN_(unfolded_copy_vol)(\n           long outputWidth,\n           long outputHeight)\n {\n-  int64_t k;\n   real *input_data = THTensor_(data)(input);\n   real *finput_data = THTensor_(data)(finput);\n-// #pragma omp parallel for private(k)\n-  for (k = 0; k < nInputPlane*kT*kH*kW; k++)\n+\n+#ifdef _OPENMP\n+  int inOmp = omp_in_parallel();\n+  #pragma omp parallel if (!inOmp)\n   {\n-    long nip = k / (kT*kH*kW);\n-    long rest = k % (kT*kH*kW);\n-    long kt = rest / (kH*kW);\n-    rest = rest % (kH*kW);\n-    long kh = rest / kW;\n-    long kw = rest % kW;\n-    long t,x,y,it,ix,iy;\n+    size_t num_threads = omp_get_num_threads();\n+    size_t tid = omp_get_thread_num();\n+    int64_t n = nInputPlane*kT*kH*kW;\n+    int64_t seg_len_tmp = n / num_threads;\n+    int64_t line_index_offset = tid * seg_len_tmp;\n+    int64_t line_seg_len = (tid == num_threads - 1)? (n-line_index_offset) : seg_len_tmp;\n+\n+    long kw = line_index_offset % kW;\n+    long remained = line_index_offset / kW;\n+    long kh = remained % kH;\n+    remained = remained / kH;\n+    long kt = remained % kT;\n+    long nip = remained / kT;\n+#else\n+    int64_t line_seg_len = nInputPlane*kT*kH*kW;\n+    long kw = 0;\n+    long kh = 0;\n+    long kt = 0;\n+    long nip = 0;\n+#endif\n+    long dstkwStride = outputDepth*outputHeight*outputWidth;\n+    long dstkhStride = kW*dstkwStride;\n+    long dstktStride = kH*dstkhStride;\n+    long dstnipStride = kT*dstktStride;\n+\n+    long srcnipStride = inputDepth*inputHeight*inputWidth;\n+\n     real *dst = finput_data\n-      + nip * (kT*kH*kW*outputDepth*outputHeight*outputWidth)\n-      + kt  * (kH*kW*outputDepth*outputHeight*outputWidth)\n-      + kh  * (kW*outputDepth*outputHeight*outputWidth)\n-      + kw  * (outputDepth*outputHeight*outputWidth);\n-    real *src = input_data + nip*(inputDepth*inputHeight*inputWidth);\n+      + nip * dstnipStride\n+      + kt  * dstktStride\n+      + kh  * dstkhStride\n+      + kw  * dstkwStride;\n+    real *src = input_data + nip*srcnipStride;\n \n-    if (pT > 0 || pH > 0 || pW > 0)\n-    {\n-      for (t = 0; t < outputDepth; t++)\n+    int64_t count = 0;\n+    long t,x,y,it,ix,iy;\n+    while (count < line_seg_len) {\n+      if (pT > 0 || pH > 0 || pW > 0)\n       {\n-        it = t*dT - pT + kt;\n-        for (y = 0; y < outputHeight; y++)\n+        for (t = 0; t < outputDepth; t++)\n         {\n-          iy = y*dH - pH + kh;\n-          for (x = 0; x < outputWidth; x++)\n+          it = t*dT - pT + kt;\n+          for (y = 0; y < outputHeight; y++)\n           {\n-            ix = x*dW - pW + kw;\n-            if (it < 0 || it >= inputDepth || iy < 0 || iy >= inputHeight || ix < 0 || ix >= inputWidth)\n-              memset(dst+t*outputHeight*outputWidth+y*outputWidth+x, 0, sizeof(real)*(1));\n-            else\n-              memcpy(dst+t*outputHeight*outputWidth+y*outputWidth+x, src+it*inputHeight*inputWidth+iy*inputWidth+ix, sizeof(real)*(1));\n+            iy = y*dH - pH + kh;\n+            for (x = 0; x < outputWidth; x++)\n+            {\n+              ix = x*dW - pW + kw;\n+              if (it < 0 || it >= inputDepth || iy < 0 || iy >= inputHeight || ix < 0 || ix >= inputWidth)\n+                memset(dst+t*outputHeight*outputWidth+y*outputWidth+x, 0, sizeof(real)*(1));", "path": "aten/src/THNN/generic/VolumetricConvolutionMM.c", "position": null, "original_position": 253, "commit_id": "4560bf28064c53fedaa1602aad691bde6a59b0d2", "original_commit_id": "b9aaf7329e4bcedb882b79c4dc6b1cec3fdc0a88", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "not for this PR, but at some point I think we should remove those `memset` with a single element being set and instead use normal assignment.", "created_at": "2018-01-29T22:47:00Z", "updated_at": "2018-11-23T15:38:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/4824#discussion_r164589503", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4824", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164589503"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4824#discussion_r164589503"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4824"}}, "body_html": "<p>not for this PR, but at some point I think we should remove those <code>memset</code> with a single element being set and instead use normal assignment.</p>", "body_text": "not for this PR, but at some point I think we should remove those memset with a single element being set and instead use normal assignment."}