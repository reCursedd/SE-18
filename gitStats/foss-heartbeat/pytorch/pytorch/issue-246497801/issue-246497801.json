{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2241", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2241/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2241/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2241/events", "html_url": "https://github.com/pytorch/pytorch/issues/2241", "id": 246497801, "node_id": "MDU6SXNzdWUyNDY0OTc4MDE=", "number": 2241, "title": "Implementing hashing (2016 paper) to improve computational performance by 95%", "user": {"login": "devinbostIL", "id": 19719649, "node_id": "MDQ6VXNlcjE5NzE5NjQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/19719649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devinbostIL", "html_url": "https://github.com/devinbostIL", "followers_url": "https://api.github.com/users/devinbostIL/followers", "following_url": "https://api.github.com/users/devinbostIL/following{/other_user}", "gists_url": "https://api.github.com/users/devinbostIL/gists{/gist_id}", "starred_url": "https://api.github.com/users/devinbostIL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devinbostIL/subscriptions", "organizations_url": "https://api.github.com/users/devinbostIL/orgs", "repos_url": "https://api.github.com/users/devinbostIL/repos", "events_url": "https://api.github.com/users/devinbostIL/events{/privacy}", "received_events_url": "https://api.github.com/users/devinbostIL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-29T04:14:45Z", "updated_at": "2017-07-29T04:40:55Z", "closed_at": "2017-07-29T04:40:55Z", "author_association": "NONE", "body_html": "<p>I've been looking into this technique: <a href=\"https://arxiv.org/pdf/1602.08194.pdf\" rel=\"nofollow\">Scalable and Sustainable Deep Learning via Randomized Hashing</a> that allegedly \"uses only 5% of the total multiplications, while<br>\nkeeping on average within 1% of the accuracy of the original model.\" It looks pretty straightforward and appears to be suitable for PyTorch, so I'd like some guidance on how we might go about implementing this functionality unless it would have undesirable consequences that are not immediately apparent to me.</p>", "body_text": "I've been looking into this technique: Scalable and Sustainable Deep Learning via Randomized Hashing that allegedly \"uses only 5% of the total multiplications, while\nkeeping on average within 1% of the accuracy of the original model.\" It looks pretty straightforward and appears to be suitable for PyTorch, so I'd like some guidance on how we might go about implementing this functionality unless it would have undesirable consequences that are not immediately apparent to me.", "body": "I've been looking into this technique: [Scalable and Sustainable Deep Learning via Randomized Hashing](https://arxiv.org/pdf/1602.08194.pdf) that allegedly \"uses only 5% of the total multiplications, while\r\nkeeping on average within 1% of the accuracy of the original model.\" It looks pretty straightforward and appears to be suitable for PyTorch, so I'd like some guidance on how we might go about implementing this functionality unless it would have undesirable consequences that are not immediately apparent to me. \r\n"}