{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146101079", "pull_request_review_id": 71003152, "id": 146101079, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjEwMTA3OQ==", "diff_hunk": "@@ -28,24 +36,26 @@ void THNN_(LogSoftMax_updateOutput)(\n   uint64_t dim_stride = inner_size;\n   uint64_t outer_stride = dim_size * dim_stride;\n \n+  LOG_SOFTMAX_DEFINITIONS\n+\n #pragma omp parallel for\n-  for (uint64_t i = 0; i < outer_size * inner_size; i++)\n+  LOG_SOFTMAX_FOR(i, 0, outer_size * inner_size)", "path": "torch/lib/THNN/generic/LogSoftMax.c", "position": null, "original_position": 23, "commit_id": "a4626edb10203658e1ad916e10f046ad04d13d9f", "original_commit_id": "a33b3c9f7647c52b331a5b5949345c4734ddb960", "user": {"login": "peterjc123", "id": 9998726, "node_id": "MDQ6VXNlcjk5OTg3MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9998726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc123", "html_url": "https://github.com/peterjc123", "followers_url": "https://api.github.com/users/peterjc123/followers", "following_url": "https://api.github.com/users/peterjc123/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc123/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc123/subscriptions", "organizations_url": "https://api.github.com/users/peterjc123/orgs", "repos_url": "https://api.github.com/users/peterjc123/repos", "events_url": "https://api.github.com/users/peterjc123/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc123/received_events", "type": "User", "site_admin": false}, "body": "It used to be done like that in [FeatureLPPooling.c](https://github.com/pytorch/pytorch/blob/master/torch/lib/THNN/generic/FeatureLPPooling.c) like this:\r\n```Cpp\r\n#ifdef _MSC_VER\r\n  #define size_type int64_t\r\n  #define cast_type (int64_t)\r\n#else\r\n  #define size_type size_t\r\n  #define cast_type\r\n#endif\r\n\r\n// define index variables\r\nsize_type i; \r\n\r\n#pragma omp parallel for\r\nfor (i = 0; i < cast_type n; i++) {\r\n// do sth.\r\n}\r\n```\r\nBut changing like this will cause the test of nn to fail.", "created_at": "2017-10-21T09:10:20Z", "updated_at": "2018-11-23T15:35:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/3217#discussion_r146101079", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3217", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146101079"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3217#discussion_r146101079"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3217"}}, "body_html": "<p>It used to be done like that in <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THNN/generic/FeatureLPPooling.c\">FeatureLPPooling.c</a> like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">ifdef</span> _MSC_VER\n  #<span class=\"pl-k\">define</span> <span class=\"pl-en\">size_type</span> <span class=\"pl-c1\">int64_t</span>\n  #<span class=\"pl-k\">define</span> <span class=\"pl-en\">cast_type</span> (<span class=\"pl-c1\">int64_t</span>)\n#<span class=\"pl-k\">else</span>\n  #<span class=\"pl-k\">define</span> <span class=\"pl-en\">size_type</span> <span class=\"pl-c1\">size_t</span>\n  #<span class=\"pl-k\">define</span> <span class=\"pl-en\">cast_type</span>\n#<span class=\"pl-k\">endif</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> define index variables</span>\nsize_type i; \n\n#<span class=\"pl-k\">pragma</span> omp parallel for\n<span class=\"pl-k\">for</span> (i = <span class=\"pl-c1\">0</span>; i &lt; cast_type n; i++) {\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> do sth.</span>\n}</pre></div>\n<p>But changing like this will cause the test of nn to fail.</p>", "body_text": "It used to be done like that in FeatureLPPooling.c like this:\n#ifdef _MSC_VER\n  #define size_type int64_t\n  #define cast_type (int64_t)\n#else\n  #define size_type size_t\n  #define cast_type\n#endif\n\n// define index variables\nsize_type i; \n\n#pragma omp parallel for\nfor (i = 0; i < cast_type n; i++) {\n// do sth.\n}\nBut changing like this will cause the test of nn to fail.", "in_reply_to_id": 146100763}