{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/124132485", "pull_request_review_id": 46396191, "id": 124132485, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDEzMjQ4NQ==", "diff_hunk": "@@ -1055,3 +1069,67 @@ std::shared_ptr<PyFunction> THPFunction_asFunction(THPFunction* self)\n   Py_INCREF((PyObject*)self);\n   return std::shared_ptr<PyFunction>(&self->cdata, Decref());\n }\n+\n+namespace torch { namespace autograd {\n+\n+using memo_map = std::unordered_map<Node*, variable_list>;\n+\n+variable_list interpret_node(std::shared_ptr<Node>, input_map&, memo_map&);\n+\n+std::shared_ptr<Variable> interpret_output(Output output, input_map& inputs, memo_map& memo) {\n+    auto vs = interpret_node(output.node, inputs, memo);\n+    return vs.at(output.output_nr);\n+}\n+\n+variable_list interpret_node(std::shared_ptr<Node> node, input_map& inputs, memo_map& memo) {\n+    variable_list input_vars;\n+    auto num_args = node->inputs.size();\n+    input_vars.reserve(num_args);\n+    for (auto input : node->inputs) {\n+        input_vars.emplace_back(interpret_output(input, inputs, memo));\n+    }\n+    if (auto n = dynamic_cast<InputNode*>(node.get())) {\n+        return {inputs.at(n)};\n+    } else if (auto n = dynamic_cast<PyNode*>(node.get())) {\n+        auto& cls = n->pyobj;\n+        // Massage variables into form where we can THPFunction_apply it.\n+        // While in principle we can avoid putting things into Python\n+        // and then taking them out again, doing so seems to require an excess\n+        // of faffing about to optimize a codepath that is already going to\n+        // fundamentally be slow (since it calls into Python.) NOT. WORTH. IT.\n+\n+        PyObject* input_objs = PyTuple_New(num_args);\n+        for (size_t i = 0; i < num_args; i++) {\n+          PyTuple_SET_ITEM(input_objs, i, THPVariable_Wrap(input_vars.at(i)));\n+        }", "path": "torch/csrc/autograd/python_function.cpp", "position": null, "original_position": 140, "commit_id": "44aacf730f0dd790657257a7a5ea23fe7cf648ee", "original_commit_id": "0a1c901e80e7ad7f4cb340047d4a2cc271a08efc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Yes. The rewrite handles this correctly, but @zdevito convinced me that I should store the arguments out of band, and reconstruct the correct Python argument positions on the fly.", "created_at": "2017-06-26T21:57:03Z", "updated_at": "2018-11-23T15:33:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/1815#discussion_r124132485", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1815", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/124132485"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1815#discussion_r124132485"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1815"}}, "body_html": "<p>Yes. The rewrite handles this correctly, but <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> convinced me that I should store the arguments out of band, and reconstruct the correct Python argument positions on the fly.</p>", "body_text": "Yes. The rewrite handles this correctly, but @zdevito convinced me that I should store the arguments out of band, and reconstruct the correct Python argument positions on the fly.", "in_reply_to_id": 122602202}