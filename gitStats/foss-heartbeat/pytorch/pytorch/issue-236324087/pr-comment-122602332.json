{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/122602332", "pull_request_review_id": 44431314, "id": 122602332, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjYwMjMzMg==", "diff_hunk": "@@ -0,0 +1,126 @@\n+#include \"torch/csrc/autograd/python_ir.h\"\n+#include \"torch/csrc/utils/python_strings.h\"\n+\n+using namespace torch::autograd;\n+\n+PyObject* THPNodeClass = nullptr;\n+\n+PyObject* THPNode_Wrap(const std::shared_ptr<Node>& node)\n+{\n+  if (!node) {\n+    Py_RETURN_NONE;\n+  } else {\n+    auto type = (PyTypeObject*) THPNodeClass;\n+    THPNode* obj = (THPNode*)type->tp_alloc(type, 0);\n+    if (obj) {\n+      obj->cdata = node;\n+    }\n+    return (PyObject*) obj;\n+  }\n+}\n+\n+static int THPNode_traverse(THPNode *self, visitproc visit, void *arg)\n+{\n+  if (self->cdata) {\n+    if (auto fn = dynamic_cast<PyNode*>(self->cdata.get())) {\n+      Py_VISIT(fn->pyobj);\n+    }\n+  }\n+  return 0;\n+}\n+\n+static int THPNode_clear(THPNode *self)\n+{\n+  if (self->cdata) {\n+    if (auto fn = dynamic_cast<PyNode*>(self->cdata.get())) {\n+      fn->pyobj = nullptr;\n+    }\n+  }\n+  self->cdata.reset();\n+  return 0;\n+}\n+\n+static void THPNode_dealloc(THPNode* self)\n+{\n+  PyObject_GC_UnTrack(self);\n+  THPNode_clear(self);", "path": "torch/csrc/autograd/python_ir.cpp", "position": null, "original_position": 46, "commit_id": "44aacf730f0dd790657257a7a5ea23fe7cf648ee", "original_commit_id": "0a1c901e80e7ad7f4cb340047d4a2cc271a08efc", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It seems a bit weird to me that you're calling `clear` in here. It means that you can create a trace (purely in C), but if you then traverse it in Python for some reason, once the objects will start getting freed, it will also delete all the state in the trace (`fn->pyobj = nullptr`), even though the C objects will still be alive? Generally, you shouldn't manage other objects internal fields. It's cleaner to just release ownership, and let that (maybe) destruct them.\r\n\r\nIn general even if there's a ref cycle, resetting `self->cdata` will break it.", "created_at": "2017-06-18T22:28:18Z", "updated_at": "2018-11-23T15:33:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/1815#discussion_r122602332", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1815", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/122602332"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1815#discussion_r122602332"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1815"}}, "body_html": "<p>It seems a bit weird to me that you're calling <code>clear</code> in here. It means that you can create a trace (purely in C), but if you then traverse it in Python for some reason, once the objects will start getting freed, it will also delete all the state in the trace (<code>fn-&gt;pyobj = nullptr</code>), even though the C objects will still be alive? Generally, you shouldn't manage other objects internal fields. It's cleaner to just release ownership, and let that (maybe) destruct them.</p>\n<p>In general even if there's a ref cycle, resetting <code>self-&gt;cdata</code> will break it.</p>", "body_text": "It seems a bit weird to me that you're calling clear in here. It means that you can create a trace (purely in C), but if you then traverse it in Python for some reason, once the objects will start getting freed, it will also delete all the state in the trace (fn->pyobj = nullptr), even though the C objects will still be alive? Generally, you shouldn't manage other objects internal fields. It's cleaner to just release ownership, and let that (maybe) destruct them.\nIn general even if there's a ref cycle, resetting self->cdata will break it."}