{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/124132081", "pull_request_review_id": 46395754, "id": 124132081, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDEzMjA4MQ==", "diff_hunk": "@@ -0,0 +1,59 @@\n+#pragma once\n+\n+#include <Python.h>\n+#include <memory>\n+#include <vector>\n+\n+#include \"torch/csrc/utils/object_ptr.h\"\n+\n+namespace torch { namespace autograd {\n+\n+struct Output;\n+struct Node;\n+using output_list = std::vector<Output>;\n+\n+struct Output {\n+  std::shared_ptr<Node> node;\n+  int output_nr;\n+\n+  Output(std::shared_ptr<Node> node, int output_nr)\n+    : node(node)\n+    , output_nr(output_nr)\n+    {}\n+};\n+\n+struct Node {\n+  output_list inputs;\n+\n+  Node(std::vector<Output> inputs)\n+    : inputs(inputs)\n+    {}\n+\n+  // Object identity is important because it witnesses sharing: thus,\n+  // we should delete the copy constructor and move constructor.\n+  Node(const Node& other) = delete;\n+  Node(Node&& other) = delete;\n+\n+  virtual std::string name() const = 0;\n+};\n+\n+struct InputNode : public Node {\n+  InputNode()\n+    : Node({})\n+    {}\n+  virtual std::string name() const override;\n+};\n+\n+struct PyNode : public Node {\n+  PyNode(PyObject* pyobj, std::vector<Output> inputs)\n+    : Node(inputs)\n+    , pyobj(pyobj)\n+    {}\n+\n+  virtual std::string name() const override;\n+  THPObjectPtr pyobj;\n+};", "path": "torch/csrc/autograd/ir.h", "position": null, "original_position": 55, "commit_id": "44aacf730f0dd790657257a7a5ea23fe7cf648ee", "original_commit_id": "0a1c901e80e7ad7f4cb340047d4a2cc271a08efc", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I think this is just to reduce the amount of refactoring we need to do. To execute PyApply nodes, I call THPFunction_do_forward or THPFunction_apply; in both cases they take PyObject of some sort (THPFunction in the former case, but hardly a Function.)", "created_at": "2017-06-26T21:55:04Z", "updated_at": "2018-11-23T15:33:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/1815#discussion_r124132081", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1815", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/124132081"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1815#discussion_r124132081"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1815"}}, "body_html": "<p>I think this is just to reduce the amount of refactoring we need to do. To execute PyApply nodes, I call THPFunction_do_forward or THPFunction_apply; in both cases they take PyObject of some sort (THPFunction in the former case, but hardly a Function.)</p>", "body_text": "I think this is just to reduce the amount of refactoring we need to do. To execute PyApply nodes, I call THPFunction_do_forward or THPFunction_apply; in both cases they take PyObject of some sort (THPFunction in the former case, but hardly a Function.)", "in_reply_to_id": 122601992}