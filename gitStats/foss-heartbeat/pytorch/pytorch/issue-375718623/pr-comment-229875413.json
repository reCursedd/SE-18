{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229875413", "pull_request_review_id": 170446756, "id": 229875413, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTg3NTQxMw==", "diff_hunk": "@@ -9,51 +10,66 @@\n namespace at {\n namespace native {\n \n-Tensor flip_cpu(const Tensor& self, IntList dims) {\n-  const int64_t total_dims = self.dim(), flip_dims_size = dims.size();\n-  flip_check_errors(total_dims, flip_dims_size, dims);\n-\n-  auto flip_dims_v = dims.vec();\n-  wrap_all_dims(flip_dims_v, total_dims);\n-  std::sort(flip_dims_v.begin(), flip_dims_v.end());\n-  auto final_indices = std::vector<at::Tensor>(total_dims);\n-\n-  auto indices = std::vector<at::Tensor>(flip_dims_size);\n-  for (int64_t i = 0; i < flip_dims_size; i++) {\n-    indices[i] = at::arange(self.size(flip_dims_v[i]) - 1, -1, -1, self.type().toScalarType(at::kLong));\n-    // creates a meshgrid\n-    auto temp = std::vector<int64_t>(flip_dims_size, 1);\n-    temp[i] = indices[i].size(0);\n-    indices[i] = indices[i].view(IntList(temp));\n-    final_indices[flip_dims_v[i]] = indices[i];\n-  }\n-\n-  // check if distance between two flip dims >= 2, where permute of output tensor is needed,\n-  // because the advanced indexing puts all non-consecutive indices in the beginning of the tensor\n-  bool to_permute = false;\n-  int64_t first = flip_dims_v[0], second = flip_dims_v[0];\n-  for (int64_t i = 1; i < flip_dims_size; i++) {\n-    second = flip_dims_v[i];\n-    if (second - first >= 2) {\n-      to_permute = true;\n-      break;\n+constexpr size_t dim_bitset_size = 64;\n+\n+template <typename scalar_t>\n+void inline flip_cpu_kernel(\n+  const int64_t total_dims,\n+  const int64_t* stride_contiguous_d,\n+  const std::bitset<dim_bitset_size>& flip_dims_b,\n+  const Tensor& in_tensor,\n+  Tensor& out_tensor\n+){\n+  int64_t i;\n+  const int64_t numel = in_tensor.numel();\n+  const scalar_t* in_tensor_d = in_tensor.data<scalar_t>();\n+  scalar_t* out_tensor_d = out_tensor.data<scalar_t>();\n+\n+  #pragma omp parallel for private(i) if (numel > 1000)\n+  for (i = 0; i < numel; i++) {\n+    int64_t cur_indices = i;\n+    int64_t rem = 0;\n+    int64_t dst_offset = 0;\n+\n+    for (int64_t d = 0; d < total_dims; d++) {\n+      int64_t temp = cur_indices;\n+      cur_indices = cur_indices / stride_contiguous_d[d];\n+      rem = temp - cur_indices * stride_contiguous_d[d];\n+      if (flip_dims_b[d]) cur_indices = in_tensor.size(d) - 1 - cur_indices;", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 63, "commit_id": "5cfe431761b6bdd471754e8b8952f2e3e6797802", "original_commit_id": "176ce23d99fda91d01aa9666ac79cf97621c9e3a", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I would suggest rewrite this look content a bit:\r\n1. don't change `cur_indices` basing on the flag, instead, do `dst_offset += flag ? sizes[d] - 1 - cur_indices : cur_indices`\r\n2. get a vector of `in_tensor.sizes()` outside and use that.\r\n\r\nAfter that, if would be good to do another benchmark.", "created_at": "2018-10-31T21:32:37Z", "updated_at": "2018-11-23T15:53:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/13344#discussion_r229875413", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13344", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229875413"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13344#discussion_r229875413"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13344"}}, "body_html": "<p>I would suggest rewrite this look content a bit:</p>\n<ol>\n<li>don't change <code>cur_indices</code> basing on the flag, instead, do <code>dst_offset += flag ? sizes[d] - 1 - cur_indices : cur_indices</code></li>\n<li>get a vector of <code>in_tensor.sizes()</code> outside and use that.</li>\n</ol>\n<p>After that, if would be good to do another benchmark.</p>", "body_text": "I would suggest rewrite this look content a bit:\n\ndon't change cur_indices basing on the flag, instead, do dst_offset += flag ? sizes[d] - 1 - cur_indices : cur_indices\nget a vector of in_tensor.sizes() outside and use that.\n\nAfter that, if would be good to do another benchmark."}