{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229842908", "pull_request_review_id": 170440988, "id": 229842908, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTg0MjkwOA==", "diff_hunk": "@@ -9,51 +10,73 @@\n namespace at {\n namespace native {\n \n+template <typename scalar_t>\n+void inline flip_cpu_kernel(\n+  const int64_t total_dims,\n+  const int64_t* stride_contiguous_d,\n+  const Tensor& flip_dims_t,\n+  const Tensor& in_tensor,\n+  Tensor& out_tensor\n+){\n+  int64_t i;\n+  const int64_t numel = in_tensor.numel();\n+  const scalar_t* in_tensor_d = in_tensor.data<scalar_t>();\n+  scalar_t* out_tensor_d = out_tensor.data<scalar_t>();\n+  const int64_t* flip_dims_d = flip_dims_t.data<int64_t>();\n+\n+  #pragma omp parallel for private(i) if (numel > 1000)\n+  for (i = 0; i < numel; i++) {\n+    int64_t cur_indices = i;\n+    int64_t rem = 0;\n+    int64_t dst_offset = 0;\n+\n+    for (int64_t d = 0; d < total_dims; d++) {\n+      int64_t temp = cur_indices;\n+      cur_indices = cur_indices / stride_contiguous_d[d];\n+      rem = temp - cur_indices * stride_contiguous_d[d];\n+      for (int64_t j = 0; j < flip_dims_t.numel(); j++) {\n+        if (d == flip_dims_d[j]) cur_indices = in_tensor.size(d) - 1 - cur_indices;\n+      }\n+      dst_offset += cur_indices * in_tensor.stride(d);\n+      cur_indices = rem;\n+    }\n+    out_tensor_d[i] = in_tensor_d[dst_offset];\n+  }\n+}\n+\n Tensor flip_cpu(const Tensor& self, IntList dims) {\n-  const int64_t total_dims = self.dim(), flip_dims_size = dims.size();\n-  flip_check_errors(total_dims, flip_dims_size, dims);\n+  auto in_tensor = self;\n+  const int64_t total_dims = in_tensor.dim();\n \n+  dim_list_to_bitset(dims, total_dims); // returned bitset is not used, here only check correctness of dims\n   auto flip_dims_v = dims.vec();\n-  wrap_all_dims(flip_dims_v, total_dims);\n-  std::sort(flip_dims_v.begin(), flip_dims_v.end());\n-  auto final_indices = std::vector<at::Tensor>(total_dims);\n-\n-  auto indices = std::vector<at::Tensor>(flip_dims_size);\n-  for (int64_t i = 0; i < flip_dims_size; i++) {\n-    indices[i] = at::arange(self.size(flip_dims_v[i]) - 1, -1, -1, self.type().toScalarType(at::kLong));\n-    // creates a meshgrid\n-    auto temp = std::vector<int64_t>(flip_dims_size, 1);\n-    temp[i] = indices[i].size(0);\n-    indices[i] = indices[i].view(IntList(temp));\n-    final_indices[flip_dims_v[i]] = indices[i];\n-  }\n-\n-  // check if distance between two flip dims >= 2, where permute of output tensor is needed,\n-  // because the advanced indexing puts all non-consecutive indices in the beginning of the tensor\n-  bool to_permute = false;\n-  int64_t first = flip_dims_v[0], second = flip_dims_v[0];\n-  for (int64_t i = 1; i < flip_dims_size; i++) {\n-    second = flip_dims_v[i];\n-    if (second - first >= 2) {\n-      to_permute = true;\n-      break;\n+  maybe_wrap_dims(flip_dims_v, total_dims);\n+\n+  auto sizes = in_tensor.sizes();\n+  auto flip_dims_t = at::CPU(kLong).tensorFromBlob(flip_dims_v.data(), {static_cast<int64_t>(flip_dims_v.size())});", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 78, "commit_id": "5cfe431761b6bdd471754e8b8952f2e3e6797802", "original_commit_id": "141b8f4347c4f8fdb189efc6476786468000875a", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "yeah, I just removed it. Now I am using bitset and removed inner loop at kernel. It is faster now but still slower than before:\r\n```\r\n>>> a = torch.randn(1000, 1000)\r\n>>> %timeit -r 100 a.flip(0, 1)\r\n9.68 ms \u00b1 1.15 ms per loop (mean \u00b1 std. dev. of 100 runs, 100 loops each)\r\n```", "created_at": "2018-10-31T19:48:58Z", "updated_at": "2018-11-23T15:53:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/13344#discussion_r229842908", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13344", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229842908"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13344#discussion_r229842908"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13344"}}, "body_html": "<p>yeah, I just removed it. Now I am using bitset and removed inner loop at kernel. It is faster now but still slower than before:</p>\n<pre><code>&gt;&gt;&gt; a = torch.randn(1000, 1000)\n&gt;&gt;&gt; %timeit -r 100 a.flip(0, 1)\n9.68 ms \u00b1 1.15 ms per loop (mean \u00b1 std. dev. of 100 runs, 100 loops each)\n</code></pre>", "body_text": "yeah, I just removed it. Now I am using bitset and removed inner loop at kernel. It is faster now but still slower than before:\n>>> a = torch.randn(1000, 1000)\n>>> %timeit -r 100 a.flip(0, 1)\n9.68 ms \u00b1 1.15 ms per loop (mean \u00b1 std. dev. of 100 runs, 100 loops each)", "in_reply_to_id": 229828863}