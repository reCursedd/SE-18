{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180472314", "pull_request_review_id": 110898107, "id": 180472314, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDQ3MjMxNA==", "diff_hunk": "@@ -112,6 +114,142 @@ def __len__(self):\n         return 10\n \n \n+class TestCheckpoint(TestCase):\n+\n+    # Test whether checkpoint is being triggered or not. For this, we check\n+    # the number of times forward pass happens\n+    def test_checkpoint_trigger(self):\n+\n+        class Net(nn.Module):\n+\n+            def __init__(self):\n+                super(Net, self).__init__()\n+                self.counter = 0\n+\n+            def forward(self, input_var):\n+                self.counter += 1\n+                return input_var\n+\n+        # checkpointed\n+        modules = [Net() for _ in range(10)]\n+        for m in modules:\n+            self.assertEqual(m.counter, 0)\n+        input_var = torch.randn(3, 4, requires_grad=True)\n+        out = checkpoint_sequential(modules, 2, input_var)\n+        for m in modules:\n+            self.assertEqual(m.counter, 1)\n+        out.sum().backward()\n+        for m in modules[:(len(modules) // 2)]:\n+            self.assertEqual(m.counter, 2)\n+        for m in modules[(len(modules) // 2):]:\n+            self.assertEqual(m.counter, 1)\n+\n+    def test_checkpoint_valid(self):\n+        model = nn.Sequential(\n+            nn.Linear(100, 50),\n+            nn.ReLU(),\n+            nn.Linear(50, 20),\n+            nn.ReLU(),\n+            nn.Linear(20, 5),\n+            nn.ReLU()\n+        )\n+\n+        input_var = torch.randn(1, 100, requires_grad=True)\n+\n+        # checkpointed\n+        chunks = 2\n+        modules = list(model.children())\n+        out = checkpoint_sequential(modules, chunks, input_var)\n+        with self.assertRaisesRegex(RuntimeError, \"Checkpointing is not compatible\"):\n+            torch.autograd.grad(\n+                outputs=[out], grad_outputs=[torch.ones(1, 5)], inputs=[input_var], create_graph=True\n+            )\n+\n+    def test_checkpoint_sequential(self):\n+        model = nn.Sequential(\n+            nn.Linear(100, 50),\n+            nn.ReLU(),\n+            nn.Linear(50, 20),\n+            nn.ReLU(),\n+            nn.Linear(20, 5),\n+            nn.ReLU()\n+        )\n+\n+        x = torch.randn(1, 100, requires_grad=True)\n+\n+        # not checkpointed\n+        out = model(x)\n+        out_not_checkpointed = out.data.clone()\n+        model.zero_grad()\n+        out.sum().backward()\n+        grad_not_checkpointed = {}\n+        for name, param in model.named_parameters():\n+            grad_not_checkpointed[name] = param.grad.data.clone()\n+        input_grad = x.grad.data.clone()\n+\n+        # checkpointed\n+        input_var = x.detach()\n+        input_var.requires_grad = True\n+        # pass the sequential itself\n+        out = checkpoint_sequential(model, 2, input_var)\n+        out_checkpointed = out.data.clone()\n+        model.zero_grad()\n+        out.sum().backward()\n+        grad_checkpointed = {}\n+        for name, param in model.named_parameters():\n+            grad_checkpointed[name] = param.grad.data.clone()\n+        checkpoint_input_grad = input_var.grad.data.clone()\n+\n+        # compare the output, input and parameters gradients\n+        self.assertEqual(out_checkpointed, out_not_checkpointed)\n+        self.assertEqual(input_grad, checkpoint_input_grad)\n+        for name in grad_checkpointed:\n+            self.assertEqual(grad_checkpointed[name], grad_not_checkpointed[name])\n+\n+    def test_checkpoint_functions_list(self):\n+        model = nn.Sequential(\n+            nn.Linear(100, 50),\n+            nn.ReLU(),\n+            nn.Linear(50, 20),\n+            nn.ReLU(),\n+            nn.Linear(20, 5),\n+            nn.ReLU()\n+        )\n+\n+        x = torch.randn(1, 100, requires_grad=True)\n+\n+        # not checkpointed\n+        out = model(x)\n+        out_not_checkpointed = out.data.clone()\n+        model.zero_grad()\n+        out.sum().backward()\n+        grad_not_checkpointed = {}\n+        for name, param in model.named_parameters():\n+            grad_not_checkpointed[name] = param.grad.data.clone()\n+        input_grad = x.grad.data.clone()\n+\n+        # checkpointed\n+        chunks = 2\n+        modules = list(model.children())\n+        input_var = x.detach()\n+        input_var.requires_grad = True\n+        # pass list of modules to checkpoint\n+        out = checkpoint_sequential(modules, chunks, input_var)\n+        out_checkpointed = out.data.clone()\n+        model.zero_grad()\n+        out.sum().backward()\n+        grad_checkpointed = {}\n+        for name, param in model.named_parameters():\n+            grad_checkpointed[name] = param.grad.data.clone()\n+        checkpoint_input_grad = input_var.grad.data.clone()\n+\n+        # compare the output, input and parameters gradients\n+        self.assertEqual(out_checkpointed, out_not_checkpointed)\n+        self.assertEqual(input_grad, checkpoint_input_grad)\n+        for name in grad_checkpointed:\n+            self.assertEqual(grad_checkpointed[name], grad_not_checkpointed[name])", "path": "test/test_utils.py", "position": 108, "original_position": 150, "commit_id": "a4a5f33fe60ea0402635820355474bbbfb746de1", "original_commit_id": "37ee79fe45bdcfd2fb70eccc146369d6c765137e", "user": {"login": "prigoyal", "id": 13488275, "node_id": "MDQ6VXNlcjEzNDg4Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/13488275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prigoyal", "html_url": "https://github.com/prigoyal", "followers_url": "https://api.github.com/users/prigoyal/followers", "following_url": "https://api.github.com/users/prigoyal/following{/other_user}", "gists_url": "https://api.github.com/users/prigoyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/prigoyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prigoyal/subscriptions", "organizations_url": "https://api.github.com/users/prigoyal/orgs", "repos_url": "https://api.github.com/users/prigoyal/repos", "events_url": "https://api.github.com/users/prigoyal/events{/privacy}", "received_events_url": "https://api.github.com/users/prigoyal/received_events", "type": "User", "site_admin": false}, "body": "done, combined them together in one test. ", "created_at": "2018-04-10T15:48:22Z", "updated_at": "2018-11-23T15:42:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/6467#discussion_r180472314", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6467", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180472314"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6467#discussion_r180472314"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6467"}}, "body_html": "<p>done, combined them together in one test.</p>", "body_text": "done, combined them together in one test.", "in_reply_to_id": 180464152}