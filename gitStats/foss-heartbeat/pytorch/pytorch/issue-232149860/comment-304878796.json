{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/304878796", "html_url": "https://github.com/pytorch/pytorch/pull/1679#issuecomment-304878796", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1679", "id": 304878796, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDg3ODc5Ng==", "user": {"login": "aron-bordin", "id": 4960137, "node_id": "MDQ6VXNlcjQ5NjAxMzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4960137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aron-bordin", "html_url": "https://github.com/aron-bordin", "followers_url": "https://api.github.com/users/aron-bordin/followers", "following_url": "https://api.github.com/users/aron-bordin/following{/other_user}", "gists_url": "https://api.github.com/users/aron-bordin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aron-bordin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aron-bordin/subscriptions", "organizations_url": "https://api.github.com/users/aron-bordin/orgs", "repos_url": "https://api.github.com/users/aron-bordin/repos", "events_url": "https://api.github.com/users/aron-bordin/events{/privacy}", "received_events_url": "https://api.github.com/users/aron-bordin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-30T13:31:24Z", "updated_at": "2017-05-30T13:31:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The difference is that <code>EuclideanDistance</code> computes a vector-wise distance, where you can select the dimension to perform it.</p>\n<pre><code>&gt;&gt;&gt; a = torch.rand([3,5])\n&gt;&gt;&gt; b = torch.rand([3,5])\n\n&gt;&gt;&gt; torch.dist(a, b)\n1.5644694566726685\n</code></pre>\n<p>while</p>\n<pre><code>&gt;&gt;&gt; F.euclidean_distance(a, b, dim=0)\n0.6358\n 0.8686\n 0.4163\n 0.7261\n 0.7671\n[torch.FloatTensor of size 5]\n</code></pre>\n<pre><code>&gt;&gt;&gt; F.euclidean_distance(a, b, dim=1)\n\n 0.7050\n 1.2043\n 0.7073\n[torch.FloatTensor of size 3]\n\n</code></pre>\n<p>I think that this should be useful for semi-supervised/unsupervised learning. But for sure, this can be easily implemented in the user space and not in torch. I implemented because I found these TODOS here: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/distance.py#L34\">https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/distance.py#L34</a></p>\n<p>Now asking, should I implement the WeightedEuclidean, or it will not be necessary ?</p>", "body_text": "The difference is that EuclideanDistance computes a vector-wise distance, where you can select the dimension to perform it.\n>>> a = torch.rand([3,5])\n>>> b = torch.rand([3,5])\n\n>>> torch.dist(a, b)\n1.5644694566726685\n\nwhile\n>>> F.euclidean_distance(a, b, dim=0)\n0.6358\n 0.8686\n 0.4163\n 0.7261\n 0.7671\n[torch.FloatTensor of size 5]\n\n>>> F.euclidean_distance(a, b, dim=1)\n\n 0.7050\n 1.2043\n 0.7073\n[torch.FloatTensor of size 3]\n\n\nI think that this should be useful for semi-supervised/unsupervised learning. But for sure, this can be easily implemented in the user space and not in torch. I implemented because I found these TODOS here: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/distance.py#L34\nNow asking, should I implement the WeightedEuclidean, or it will not be necessary ?", "body": "The difference is that `EuclideanDistance` computes a vector-wise distance, where you can select the dimension to perform it.\r\n\r\n```\r\n>>> a = torch.rand([3,5])\r\n>>> b = torch.rand([3,5])\r\n\r\n>>> torch.dist(a, b)\r\n1.5644694566726685\r\n```\r\n\r\nwhile\r\n\r\n```\r\n>>> F.euclidean_distance(a, b, dim=0)\r\n0.6358\r\n 0.8686\r\n 0.4163\r\n 0.7261\r\n 0.7671\r\n[torch.FloatTensor of size 5]\r\n```\r\n\r\n\r\n```\r\n>>> F.euclidean_distance(a, b, dim=1)\r\n\r\n 0.7050\r\n 1.2043\r\n 0.7073\r\n[torch.FloatTensor of size 3]\r\n\r\n```\r\nI think that this should be useful for semi-supervised/unsupervised learning. But for sure, this can be easily implemented in the user space and not in torch. I implemented because I found these TODOS here: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/distance.py#L34\r\n\r\nNow asking, should I implement the WeightedEuclidean, or it will not be necessary ?"}