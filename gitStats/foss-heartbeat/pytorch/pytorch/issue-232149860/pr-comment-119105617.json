{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119105617", "pull_request_review_id": 40955627, "id": 119105617, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTEwNTYxNw==", "diff_hunk": "@@ -713,6 +713,32 @@ def cosine_similarity(x1, x2, dim=1, eps=1e-8):\n     return (w12 / (w1 * w2).clamp(min=eps)).squeeze()\n \n \n+def euclidean_distance(x1, x2, dim=1, eps=1e-8):\n+    r\"\"\"Computes the euclidean distance between x1, x2, computed along dim.\n+\n+    .. math ::\n+        \\text{distance}(x_1, x_2) = \\sqrt{(x_{1,1} - x_{2,1})^2 + (x_{1,2} - x_{2,2})^2 + ... + (x_{1,N} - x_{2,N})^2}\n+\n+    Args:\n+        x1 (Variable): first input tensor\n+        x2 (Variable): second input tensor\n+        dim (int, optional): Dimension of vectors. Default: 1\n+        eps (float, optional): Small value to avoid sqrt of zero. Default: 1e-8\n+\n+    Shape:\n+        - Input: :math:`(\\ast_1, D, \\ast_2)` where D is at position `dim`.\n+        - Output: :math:`(\\ast_1, \\ast_2)` where 1 is at position `dim`.\n+\n+    >>> input1 = autograd.Variable(torch.randn(100, 128))\n+    >>> input2 = autograd.Variable(torch.randn(100, 128))\n+    >>> output = F.euclidean_distance(input1, input2)\n+    >>> output.backward()\n+    \"\"\"\n+    assert x1.size() == x2.size(), \"Input sizes must be equal.\"", "path": "torch/nn/functional.py", "position": 25, "original_position": 25, "commit_id": "d3cb42d229dc158e78e97f63b6a3f9a23e67f5d6", "original_commit_id": "d3cb42d229dc158e78e97f63b6a3f9a23e67f5d6", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "Should we be using `assert` here, or raise something like `ValueError`?", "created_at": "2017-05-30T13:56:31Z", "updated_at": "2018-11-23T15:33:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/1679#discussion_r119105617", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1679", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119105617"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1679#discussion_r119105617"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1679"}}, "body_html": "<p>Should we be using <code>assert</code> here, or raise something like <code>ValueError</code>?</p>", "body_text": "Should we be using assert here, or raise something like ValueError?"}