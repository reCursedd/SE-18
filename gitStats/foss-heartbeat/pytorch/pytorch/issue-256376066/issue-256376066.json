{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2677", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2677/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2677/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2677/events", "html_url": "https://github.com/pytorch/pytorch/issues/2677", "id": 256376066, "node_id": "MDU6SXNzdWUyNTYzNzYwNjY=", "number": 2677, "title": "Require_grad = True, but printed as \"None\"", "user": {"login": "jianwolf", "id": 24360583, "node_id": "MDQ6VXNlcjI0MzYwNTgz", "avatar_url": "https://avatars2.githubusercontent.com/u/24360583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianwolf", "html_url": "https://github.com/jianwolf", "followers_url": "https://api.github.com/users/jianwolf/followers", "following_url": "https://api.github.com/users/jianwolf/following{/other_user}", "gists_url": "https://api.github.com/users/jianwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianwolf/subscriptions", "organizations_url": "https://api.github.com/users/jianwolf/orgs", "repos_url": "https://api.github.com/users/jianwolf/repos", "events_url": "https://api.github.com/users/jianwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/jianwolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-08T21:28:15Z", "updated_at": "2017-09-09T00:18:01Z", "closed_at": "2017-09-09T00:18:01Z", "author_association": "NONE", "body_html": "<p>My code is</p>\n<p>x = Variable(torch.rand(8, 1, 5, 5), requires_grad=True)<br>\nconv = nn.Conv2d(1, 1, 3)<br>\ny = conv(x)<br>\nfinal = torch.sum(y)<br>\nprint('y.grad', y.grad)<br>\nfinal.backward()<br>\nprint('y.grad', y.grad)<br>\nprint('y.grad', y.requires_grad)</p>\n<p>However, the output is<br>\ny.grad None<br>\ny.grad None<br>\ny.grad True</p>\n<p>If y.requires_grad==True, shouldn't the second y.grad output some gradients instead of None? For x, the gradient showed normally after the backward()</p>", "body_text": "My code is\nx = Variable(torch.rand(8, 1, 5, 5), requires_grad=True)\nconv = nn.Conv2d(1, 1, 3)\ny = conv(x)\nfinal = torch.sum(y)\nprint('y.grad', y.grad)\nfinal.backward()\nprint('y.grad', y.grad)\nprint('y.grad', y.requires_grad)\nHowever, the output is\ny.grad None\ny.grad None\ny.grad True\nIf y.requires_grad==True, shouldn't the second y.grad output some gradients instead of None? For x, the gradient showed normally after the backward()", "body": "My code is\r\n\r\nx = Variable(torch.rand(8, 1, 5, 5), requires_grad=True)\r\nconv = nn.Conv2d(1, 1, 3)\r\ny = conv(x)\r\nfinal = torch.sum(y)\r\nprint('y.grad', y.grad)\r\nfinal.backward()\r\nprint('y.grad', y.grad)\r\nprint('y.grad', y.requires_grad)\r\n\r\nHowever, the output is \r\ny.grad None\r\ny.grad None\r\ny.grad True\r\n\r\nIf y.requires_grad==True, shouldn't the second y.grad output some gradients instead of None? For x, the gradient showed normally after the backward()"}