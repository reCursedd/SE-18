{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9148", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9148/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9148/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9148/events", "html_url": "https://github.com/pytorch/pytorch/pull/9148", "id": 338065480, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk5MDkxNTgx", "number": 9148, "title": "Add weak pointer and finalizer support directly to THStorage.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-03T21:49:07Z", "updated_at": "2018-11-23T15:46:57Z", "closed_at": "2018-07-10T13:26:32Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9148", "html_url": "https://github.com/pytorch/pytorch/pull/9148", "diff_url": "https://github.com/pytorch/pytorch/pull/9148.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9148.patch"}, "body_html": "<p>The underlying use-case is the file descriptor to storage cache in<br>\ntorch.multiprocessing.reductions.  Previously, this was implemented by wrapping<br>\nan existing allocator with a \"weak ref\" allocator which also knew to null out<br>\nthe weak reference when the storage died.  This is terribly oblique, and<br>\nprevents us from refactoring the allocators to get rid of per-storage allocator<br>\nstate.</p>\n<p>So instead of going through this fiasco, we instead directly implement weak<br>\npointers and finalizers in THStorage.  Weak pointers to THStorage retain the<br>\nTHStorage struct, but not the data_ptr.  When all strong references die,<br>\ndata_ptr dies and the finalizers get invoked.</p>\n<p>There is one major hazard in this patch, which is what happens if you<br>\nrepeatedly call _weak_ref on a storage.  For cleanliness, we no longer<br>\nshove our grubby fingers into the finalizer struct to see if there is already<br>\na Python object for the weak reference and return it; we just create a new one<br>\n(no one is checking these Python objects for identity).  This means if you<br>\nkeep calling it, we'll keep piling on finalizers.  That's bad! But I am<br>\nnot going to fix it until it is actually a problem for someone, because<br>\nthen we need to add another caching layer.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "The underlying use-case is the file descriptor to storage cache in\ntorch.multiprocessing.reductions.  Previously, this was implemented by wrapping\nan existing allocator with a \"weak ref\" allocator which also knew to null out\nthe weak reference when the storage died.  This is terribly oblique, and\nprevents us from refactoring the allocators to get rid of per-storage allocator\nstate.\nSo instead of going through this fiasco, we instead directly implement weak\npointers and finalizers in THStorage.  Weak pointers to THStorage retain the\nTHStorage struct, but not the data_ptr.  When all strong references die,\ndata_ptr dies and the finalizers get invoked.\nThere is one major hazard in this patch, which is what happens if you\nrepeatedly call _weak_ref on a storage.  For cleanliness, we no longer\nshove our grubby fingers into the finalizer struct to see if there is already\na Python object for the weak reference and return it; we just create a new one\n(no one is checking these Python objects for identity).  This means if you\nkeep calling it, we'll keep piling on finalizers.  That's bad! But I am\nnot going to fix it until it is actually a problem for someone, because\nthen we need to add another caching layer.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "The underlying use-case is the file descriptor to storage cache in\r\ntorch.multiprocessing.reductions.  Previously, this was implemented by wrapping\r\nan existing allocator with a \"weak ref\" allocator which also knew to null out\r\nthe weak reference when the storage died.  This is terribly oblique, and\r\nprevents us from refactoring the allocators to get rid of per-storage allocator\r\nstate.\r\n\r\nSo instead of going through this fiasco, we instead directly implement weak\r\npointers and finalizers in THStorage.  Weak pointers to THStorage retain the\r\nTHStorage struct, but not the data_ptr.  When all strong references die,\r\ndata_ptr dies and the finalizers get invoked.\r\n\r\nThere is one major hazard in this patch, which is what happens if you\r\nrepeatedly call _weak_ref on a storage.  For cleanliness, we no longer\r\nshove our grubby fingers into the finalizer struct to see if there is already\r\na Python object for the weak reference and return it; we just create a new one\r\n(no one is checking these Python objects for identity).  This means if you\r\nkeep calling it, we'll keep piling on finalizers.  That's bad! But I am\r\nnot going to fix it until it is actually a problem for someone, because\r\nthen we need to add another caching layer.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>\r\n\r\n"}