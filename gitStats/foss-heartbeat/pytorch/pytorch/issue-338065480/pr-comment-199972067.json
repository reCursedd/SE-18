{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199972067", "pull_request_review_id": 134195427, "id": 199972067, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk3MjA2Nw==", "diff_hunk": "@@ -22,6 +22,9 @@ class StorageRef(object):\n     def __init__(self, ptr):\n         self.cdata = ptr\n \n+    def __del__(self):", "path": "torch/multiprocessing/reductions.py", "position": 4, "original_position": 4, "commit_id": "b43bcef012b65b753803d38b09410402a42b6a18", "original_commit_id": "97cde7c18f84d8b3d0f630fdaa034dd598495874", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Your understanding is right.\r\n\r\n> You could make it so by making THStorage own it's wrapper\r\n\r\nRight, and it would be very similar to what we do for Tensor today (to preserve `id()` across FFI crossings). I didn't do this, mostly because I saw a way to do it with the finalizer instead. Note that you are always going to need a finalizer, because the destructor for THStorage isn't going to know how to decref a Python object, so someone else has to give it a hand. If you want me to do it this way, I can; it's not too much more work.", "created_at": "2018-07-03T23:02:52Z", "updated_at": "2018-11-23T15:46:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/9148#discussion_r199972067", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9148", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199972067"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9148#discussion_r199972067"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9148"}}, "body_html": "<p>Your understanding is right.</p>\n<blockquote>\n<p>You could make it so by making THStorage own it's wrapper</p>\n</blockquote>\n<p>Right, and it would be very similar to what we do for Tensor today (to preserve <code>id()</code> across FFI crossings). I didn't do this, mostly because I saw a way to do it with the finalizer instead. Note that you are always going to need a finalizer, because the destructor for THStorage isn't going to know how to decref a Python object, so someone else has to give it a hand. If you want me to do it this way, I can; it's not too much more work.</p>", "body_text": "Your understanding is right.\n\nYou could make it so by making THStorage own it's wrapper\n\nRight, and it would be very similar to what we do for Tensor today (to preserve id() across FFI crossings). I didn't do this, mostly because I saw a way to do it with the finalizer instead. Note that you are always going to need a finalizer, because the destructor for THStorage isn't going to know how to decref a Python object, so someone else has to give it a hand. If you want me to do it this way, I can; it's not too much more work.", "in_reply_to_id": 199967300}