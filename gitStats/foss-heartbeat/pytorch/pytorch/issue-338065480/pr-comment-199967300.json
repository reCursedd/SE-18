{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199967300", "pull_request_review_id": 134188392, "id": 199967300, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk2NzMwMA==", "diff_hunk": "@@ -22,6 +22,9 @@ class StorageRef(object):\n     def __init__(self, ptr):\n         self.cdata = ptr\n \n+    def __del__(self):", "path": "torch/multiprocessing/reductions.py", "position": 4, "original_position": 4, "commit_id": "b43bcef012b65b753803d38b09410402a42b6a18", "original_commit_id": "97cde7c18f84d8b3d0f630fdaa034dd598495874", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "In the above comment, I don't think anything sets \"cdata\" to None anymore.\r\n\r\nIf I understand correctly:\r\n\r\n- `shared_cache` has a weak reference to a `StorageRef`\r\n- `StorageRef` morally holds a weak reference to a THStorage pointer\r\n- `THStorage` holds a strong reference to `StorageRef` via finalizer\r\n\r\nSo when all the THStorage strong refs go away:\r\n\r\n- The finalizer runs (does nothing)\r\n- The finalizer gets destructed (decrements StorageRef's ref count)\r\n- StorageRef drops a weak reference of the THStorage\r\n- This may lead to 0 weak refs on THStorage which frees the THStorage struct\r\n\r\nIt would be nice to simplify this, but I don't see an easy way to do it. It would be nice if a weak ref to a `torch.Storage` but a weakref to a `torch.Storage` Python object is not the same as a weak ref to a `THStorage`. (You could make it so by making `THStorage` own it's wrapper).", "created_at": "2018-07-03T22:30:31Z", "updated_at": "2018-11-23T15:46:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/9148#discussion_r199967300", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9148", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199967300"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9148#discussion_r199967300"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9148"}}, "body_html": "<p>In the above comment, I don't think anything sets \"cdata\" to None anymore.</p>\n<p>If I understand correctly:</p>\n<ul>\n<li><code>shared_cache</code> has a weak reference to a <code>StorageRef</code></li>\n<li><code>StorageRef</code> morally holds a weak reference to a THStorage pointer</li>\n<li><code>THStorage</code> holds a strong reference to <code>StorageRef</code> via finalizer</li>\n</ul>\n<p>So when all the THStorage strong refs go away:</p>\n<ul>\n<li>The finalizer runs (does nothing)</li>\n<li>The finalizer gets destructed (decrements StorageRef's ref count)</li>\n<li>StorageRef drops a weak reference of the THStorage</li>\n<li>This may lead to 0 weak refs on THStorage which frees the THStorage struct</li>\n</ul>\n<p>It would be nice to simplify this, but I don't see an easy way to do it. It would be nice if a weak ref to a <code>torch.Storage</code> but a weakref to a <code>torch.Storage</code> Python object is not the same as a weak ref to a <code>THStorage</code>. (You could make it so by making <code>THStorage</code> own it's wrapper).</p>", "body_text": "In the above comment, I don't think anything sets \"cdata\" to None anymore.\nIf I understand correctly:\n\nshared_cache has a weak reference to a StorageRef\nStorageRef morally holds a weak reference to a THStorage pointer\nTHStorage holds a strong reference to StorageRef via finalizer\n\nSo when all the THStorage strong refs go away:\n\nThe finalizer runs (does nothing)\nThe finalizer gets destructed (decrements StorageRef's ref count)\nStorageRef drops a weak reference of the THStorage\nThis may lead to 0 weak refs on THStorage which frees the THStorage struct\n\nIt would be nice to simplify this, but I don't see an easy way to do it. It would be nice if a weak ref to a torch.Storage but a weakref to a torch.Storage Python object is not the same as a weak ref to a THStorage. (You could make it so by making THStorage own it's wrapper)."}