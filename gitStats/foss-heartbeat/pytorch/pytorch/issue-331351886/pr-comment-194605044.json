{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194605044", "pull_request_review_id": 127807769, "id": 194605044, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDYwNTA0NA==", "diff_hunk": "@@ -0,0 +1,117 @@\n+#pragma once\n+\n+#include <torch/csrc/utils/variadic.h>\n+\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+\n+namespace torch {\n+namespace detail {\n+/// This class exists  only to do SFINAE on abstract types `T` that are really\n+/// `ModuleHolder<ModuleType>`, because there's no good way to say that `T` is a\n+/// `ModuleHolder` over some unknown type `ModuleType`. With this, you can do\n+/// enable_if_t<is_base_of<ModuleHolderIndicator, T>::value>::type.\n+struct ModuleHolderIndicator {};\n+\n+template <typename T>\n+using disable_if_module_holder_t =\n+    disable_if_t<std::is_base_of<ModuleHolderIndicator, decay_t<T>>::value>;\n+} // namespace detail\n+\n+namespace nn {\n+\n+/// A `ModuleHolder` is essentially a wrapper around `std::shared_ptr<M>` where\n+/// `M` is an `nn::Module` subclass, with convenient constructors defined for\n+/// the kind of constructions we want to allow for our modules.\n+template <typename Contained>\n+class ModuleHolder : torch::detail::ModuleHolderIndicator {\n+ public:\n+  using ContainedType = Contained;\n+\n+  /// Constructs the `ModuleHolder` with an empty contained value.\n+  ModuleHolder() = default;\n+\n+  /// Single argument constructor of the underlying type.\n+  template <typename T>\n+  explicit ModuleHolder(T&& t)\n+      : impl_(std::make_shared<Contained>(std::forward<T>(t))) {}\n+\n+  /// Multi-argument constructor. This constructor is special in that the\n+  /// expectation is that the constructor of the contained type takes an object\n+  /// that can be constructed with the given arguments. For our modules, this is\n+  /// always the `Options` struct. For this reason, the arguments are forwarded\n+  /// inside braces, as to construct the constructor argument.\n+  template <typename T, typename... Ts>\n+  explicit ModuleHolder(T&& t, Ts&&... ts)\n+      : impl_(new Contained({std::forward<T>(t), std::forward<Ts>(ts)...})) {}", "path": "torch/csrc/api/include/torch/nn/pimpl.h", "position": null, "original_position": 47, "commit_id": "d55210febd986eecac517c957e3cb15e16ed4578", "original_commit_id": "13dc2d5f78ca2dd631c017850579ef98c3b5afc2", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "So.... why can't you use `make_shared` here? (I'm sure there is a good reason for splitting the constructors this way, but I am not getting it from the comment.)", "created_at": "2018-06-12T03:17:25Z", "updated_at": "2018-11-23T15:45:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/8347#discussion_r194605044", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8347", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194605044"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8347#discussion_r194605044"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8347"}}, "body_html": "<p>So.... why can't you use <code>make_shared</code> here? (I'm sure there is a good reason for splitting the constructors this way, but I am not getting it from the comment.)</p>", "body_text": "So.... why can't you use make_shared here? (I'm sure there is a good reason for splitting the constructors this way, but I am not getting it from the comment.)"}