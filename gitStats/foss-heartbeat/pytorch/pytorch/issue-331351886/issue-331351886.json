{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8347", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8347/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8347/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8347/events", "html_url": "https://github.com/pytorch/pytorch/pull/8347", "id": 331351886, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk0MTA0Njg3", "number": 8347, "title": "[C++ API] Make pImpl easy to use in modules to enable happy reference semantics", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-06-11T21:11:31Z", "updated_at": "2018-11-23T15:45:22Z", "closed_at": "2018-06-19T02:45:54Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8347", "html_url": "https://github.com/pytorch/pytorch/pull/8347", "diff_url": "https://github.com/pytorch/pytorch/pull/8347.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8347.patch"}, "body_html": "<p>This PR implements hopefully the last iteration of how modules should be defined and constructed in the C++ API, which was discussed a few weeks ago with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a>. The most minimal definition of a module is now:</p>\n<pre><code>struct LinearImpl : public torch::nn::Module {\n  struct Options {\n    Options(int64_t in, int64_t out);\n    TORCH_ARG(int64_t, in);\n    TORCH_ARG(int64_t, out);\n  } options;\n\n  explicit LinearImpl(Options options);\n  Variable forward(Variable input);\n\n  Variable weight_;\n  Variable bias_;\n};\nTORCH_MODULE(Linear);\n</code></pre>\n<p>and usage is</p>\n<pre><code>Linear model(3, 4);\nmodel-&gt;forward(...);\nauto clone = model-&gt;clone();\n</code></pre>\n<p><code>TORCH_MODULE</code> defines a class <code>Linear</code> which wraps a <code>std::shared_ptr&lt;LinearImpl&gt;</code>, as well as providing convenient mechanisms to forward constructor arguments to the <code>Options</code> struct. Notice that I wrote <code>Linear(3, 4)</code> and not <code>Linear(LinearOptions(3, 4))</code>. This makes usage very convenient in the most common case. When default options need be changed, it becomes <code>Linear(LinearOptions(4, 5).default(1).default(2))</code>.</p>\n<p>The most important file is <code>torch/csrc/api/include/torch/nn/pimpl.h</code>. The rest is mostly codemods.</p>\n<p>Thoughts, wishes, improvements? <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "This PR implements hopefully the last iteration of how modules should be defined and constructed in the C++ API, which was discussed a few weeks ago with @ezyang and @ebetica. The most minimal definition of a module is now:\nstruct LinearImpl : public torch::nn::Module {\n  struct Options {\n    Options(int64_t in, int64_t out);\n    TORCH_ARG(int64_t, in);\n    TORCH_ARG(int64_t, out);\n  } options;\n\n  explicit LinearImpl(Options options);\n  Variable forward(Variable input);\n\n  Variable weight_;\n  Variable bias_;\n};\nTORCH_MODULE(Linear);\n\nand usage is\nLinear model(3, 4);\nmodel->forward(...);\nauto clone = model->clone();\n\nTORCH_MODULE defines a class Linear which wraps a std::shared_ptr<LinearImpl>, as well as providing convenient mechanisms to forward constructor arguments to the Options struct. Notice that I wrote Linear(3, 4) and not Linear(LinearOptions(3, 4)). This makes usage very convenient in the most common case. When default options need be changed, it becomes Linear(LinearOptions(4, 5).default(1).default(2)).\nThe most important file is torch/csrc/api/include/torch/nn/pimpl.h. The rest is mostly codemods.\nThoughts, wishes, improvements? @ebetica @ezyang", "body": "This PR implements hopefully the last iteration of how modules should be defined and constructed in the C++ API, which was discussed a few weeks ago with @ezyang and @ebetica. The most minimal definition of a module is now:\r\n\r\n```\r\nstruct LinearImpl : public torch::nn::Module {\r\n  struct Options {\r\n    Options(int64_t in, int64_t out);\r\n    TORCH_ARG(int64_t, in);\r\n    TORCH_ARG(int64_t, out);\r\n  } options;\r\n\r\n  explicit LinearImpl(Options options);\r\n  Variable forward(Variable input);\r\n\r\n  Variable weight_;\r\n  Variable bias_;\r\n};\r\nTORCH_MODULE(Linear);\r\n```\r\n\r\nand usage is\r\n\r\n```\r\nLinear model(3, 4);\r\nmodel->forward(...);\r\nauto clone = model->clone();\r\n```\r\n\r\n`TORCH_MODULE` defines a class `Linear` which wraps a `std::shared_ptr<LinearImpl>`, as well as providing convenient mechanisms to forward constructor arguments to the `Options` struct. Notice that I wrote `Linear(3, 4)` and not `Linear(LinearOptions(3, 4))`. This makes usage very convenient in the most common case. When default options need be changed, it becomes `Linear(LinearOptions(4, 5).default(1).default(2))`.\r\n\r\nThe most important file is `torch/csrc/api/include/torch/nn/pimpl.h`. The rest is mostly codemods.\r\n\r\nThoughts, wishes, improvements? @ebetica @ezyang  "}