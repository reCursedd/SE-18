{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/396889013", "html_url": "https://github.com/pytorch/pytorch/pull/8347#issuecomment-396889013", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8347", "id": 396889013, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njg4OTAxMw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-13T10:20:01Z", "updated_at": "2018-06-13T10:20:01Z", "author_association": "MEMBER", "body_html": "<p>Having played with some C++ APIs like QT in the past, I always felt pretty bad when I used some semi-magical macros like <code>TORCH_MODULE</code> and <code>TORCH_ARG</code>. There are different standard ways of handling things that those macros do, that are more native to the language, and hiding those behind the macros makes it pretty hard to reason about the code. Not mentioning that when something actually goes wrong, then debugging is impossible without knowing how the macro expands. Are we sure this is a good idea? I feel that allowing pretty arbitrary ways of construct and deal with modules is generally a sign of a good API. PyTorch should be a library, not a framework that enforces a particular code structure.</p>", "body_text": "Having played with some C++ APIs like QT in the past, I always felt pretty bad when I used some semi-magical macros like TORCH_MODULE and TORCH_ARG. There are different standard ways of handling things that those macros do, that are more native to the language, and hiding those behind the macros makes it pretty hard to reason about the code. Not mentioning that when something actually goes wrong, then debugging is impossible without knowing how the macro expands. Are we sure this is a good idea? I feel that allowing pretty arbitrary ways of construct and deal with modules is generally a sign of a good API. PyTorch should be a library, not a framework that enforces a particular code structure.", "body": "Having played with some C++ APIs like QT in the past, I always felt pretty bad when I used some semi-magical macros like `TORCH_MODULE` and `TORCH_ARG`. There are different standard ways of handling things that those macros do, that are more native to the language, and hiding those behind the macros makes it pretty hard to reason about the code. Not mentioning that when something actually goes wrong, then debugging is impossible without knowing how the macro expands. Are we sure this is a good idea? I feel that allowing pretty arbitrary ways of construct and deal with modules is generally a sign of a good API. PyTorch should be a library, not a framework that enforces a particular code structure."}