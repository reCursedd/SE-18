{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397035568", "html_url": "https://github.com/pytorch/pytorch/pull/8347#issuecomment-397035568", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8347", "id": 397035568, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzAzNTU2OA==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-13T18:16:28Z", "updated_at": "2018-06-13T18:16:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> thanks for sharing your concerns. I very much agree. I did also structure the <code>Module</code> class in such a way that one can write Module's without this pImpl mechanism. For example, it is just as valid to have a module like:</p>\n<pre><code>struct MyModule : torch::nn::Module {\n  MyModule(int in, int out) { ... }\n  Variable forward(Variable) { ... }\n};\nauto module = std::make_shared&lt;MyModule&gt;(4, 5);\nSequential sequential(module); // Works\nAnyModule any = module; // Works\n</code></pre>\n<p>As long as your module is in a <code>shared_ptr</code> and inherits from <code>torch::nn::Module</code>, there are pretty much no other constraints. I think this will allow users who don't want to partake in this pImpl scheme to write their own style of modules, which will interact perfectly with the rest of the library.</p>", "body_text": "@apaszke thanks for sharing your concerns. I very much agree. I did also structure the Module class in such a way that one can write Module's without this pImpl mechanism. For example, it is just as valid to have a module like:\nstruct MyModule : torch::nn::Module {\n  MyModule(int in, int out) { ... }\n  Variable forward(Variable) { ... }\n};\nauto module = std::make_shared<MyModule>(4, 5);\nSequential sequential(module); // Works\nAnyModule any = module; // Works\n\nAs long as your module is in a shared_ptr and inherits from torch::nn::Module, there are pretty much no other constraints. I think this will allow users who don't want to partake in this pImpl scheme to write their own style of modules, which will interact perfectly with the rest of the library.", "body": "@apaszke thanks for sharing your concerns. I very much agree. I did also structure the `Module` class in such a way that one can write Module's without this pImpl mechanism. For example, it is just as valid to have a module like:\r\n```\r\nstruct MyModule : torch::nn::Module {\r\n  MyModule(int in, int out) { ... }\r\n  Variable forward(Variable) { ... }\r\n};\r\nauto module = std::make_shared<MyModule>(4, 5);\r\nSequential sequential(module); // Works\r\nAnyModule any = module; // Works\r\n```\r\nAs long as your module is in a `shared_ptr` and inherits from `torch::nn::Module`, there are pretty much no other constraints. I think this will allow users who don't want to partake in this pImpl scheme to write their own style of modules, which will interact perfectly with the rest of the library."}