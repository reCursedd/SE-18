{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/306240822", "html_url": "https://github.com/pytorch/pytorch/issues/1724#issuecomment-306240822", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1724", "id": 306240822, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjI0MDgyMg==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-05T16:50:35Z", "updated_at": "2017-06-05T16:50:35Z", "author_association": "MEMBER", "body_html": "<p>One workaround for the moment would be to write <code>matrix_solve</code> as <code>x = A.inverse() * b</code>, which should support backprop since <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"231860310\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1670\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/1670/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/1670\">#1670</a> .<br>\nAdding support for <code>matrix_solve</code> should be trivial, the gradient for it can be found in <a href=\"https://github.com/tensorflow/tensorflow/blob/359d6f9716c0bb9bd8201ce600da98b0481a8049/tensorflow/python/ops/linalg_grad.py#L81-L91\">https://github.com/tensorflow/tensorflow/blob/359d6f9716c0bb9bd8201ce600da98b0481a8049/tensorflow/python/ops/linalg_grad.py#L81-L91</a></p>", "body_text": "One workaround for the moment would be to write matrix_solve as x = A.inverse() * b, which should support backprop since #1670 .\nAdding support for matrix_solve should be trivial, the gradient for it can be found in https://github.com/tensorflow/tensorflow/blob/359d6f9716c0bb9bd8201ce600da98b0481a8049/tensorflow/python/ops/linalg_grad.py#L81-L91", "body": "One workaround for the moment would be to write `matrix_solve` as `x = A.inverse() * b`, which should support backprop since https://github.com/pytorch/pytorch/pull/1670 .\r\nAdding support for `matrix_solve` should be trivial, the gradient for it can be found in https://github.com/tensorflow/tensorflow/blob/359d6f9716c0bb9bd8201ce600da98b0481a8049/tensorflow/python/ops/linalg_grad.py#L81-L91"}