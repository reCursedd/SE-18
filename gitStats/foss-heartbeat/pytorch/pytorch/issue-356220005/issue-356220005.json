{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11175", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11175/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11175/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11175/events", "html_url": "https://github.com/pytorch/pytorch/issues/11175", "id": 356220005, "node_id": "MDU6SXNzdWUzNTYyMjAwMDU=", "number": 11175, "title": "torch.nn.functional inconsistent loss behaviour", "user": {"login": "dizcza", "id": 7688337, "node_id": "MDQ6VXNlcjc2ODgzMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7688337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dizcza", "html_url": "https://github.com/dizcza", "followers_url": "https://api.github.com/users/dizcza/followers", "following_url": "https://api.github.com/users/dizcza/following{/other_user}", "gists_url": "https://api.github.com/users/dizcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/dizcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dizcza/subscriptions", "organizations_url": "https://api.github.com/users/dizcza/orgs", "repos_url": "https://api.github.com/users/dizcza/repos", "events_url": "https://api.github.com/users/dizcza/events{/privacy}", "received_events_url": "https://api.github.com/users/dizcza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-09-01T17:35:34Z", "updated_at": "2018-10-23T17:36:42Z", "closed_at": "2018-10-23T17:36:42Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I noticed that some loss functions in <code>torch.nn.functional</code> do tensor broadcasting while other does not.<br>\nI started using <code>cosine_embedding_loss</code> and was happy because it handles input tensors with (N, F) and (1, F) shapes, where N - number of examples, F - number of features in one example (vector). Then I moved to <code>mse_loss</code> and <code>l1_loss</code> to check for better results. And I was disappointed to see that the latter both require (N, F) and (N, F) tensors - they do not support tensor broadcasting as <code>cosine_embedding_loss</code> does. Now I need to either stack the second tensor N times (and I do not know whether the gradient history is stored if a tensor is copied; in any case it is memory and computationaly inefficient) or implement l1 and l2 losses on my own.</p>\n<p>Please, make loss behavior consistent - either all functions require exactly the same shape or handle broadcasting for each of them. Thank you.</p>\n<h2>Code example</h2>\n<pre><code>t1 = torch.randn(5,7)\nt2 = torch.randn(1,7)\nloss_cosine = F.cosine_embedding_loss(t1, t2, target=torch.ones(5))  # works fine\nloss_l2 = F.mse_loss(t1, t2)\n# RuntimeError: input and target shapes do not match: input [5 x 7], target [1 x 7]\n</code></pre>\n<ul>\n<li>How you installed PyTorch: <code>conda install pytorch-cpu torchvision-cpu -c pytorch</code></li>\n<li>PyTorch version: 0.4.1</li>\n<li>Python version: 3.6.6</li>\n</ul>", "body_text": "Issue description\nI noticed that some loss functions in torch.nn.functional do tensor broadcasting while other does not.\nI started using cosine_embedding_loss and was happy because it handles input tensors with (N, F) and (1, F) shapes, where N - number of examples, F - number of features in one example (vector). Then I moved to mse_loss and l1_loss to check for better results. And I was disappointed to see that the latter both require (N, F) and (N, F) tensors - they do not support tensor broadcasting as cosine_embedding_loss does. Now I need to either stack the second tensor N times (and I do not know whether the gradient history is stored if a tensor is copied; in any case it is memory and computationaly inefficient) or implement l1 and l2 losses on my own.\nPlease, make loss behavior consistent - either all functions require exactly the same shape or handle broadcasting for each of them. Thank you.\nCode example\nt1 = torch.randn(5,7)\nt2 = torch.randn(1,7)\nloss_cosine = F.cosine_embedding_loss(t1, t2, target=torch.ones(5))  # works fine\nloss_l2 = F.mse_loss(t1, t2)\n# RuntimeError: input and target shapes do not match: input [5 x 7], target [1 x 7]\n\n\nHow you installed PyTorch: conda install pytorch-cpu torchvision-cpu -c pytorch\nPyTorch version: 0.4.1\nPython version: 3.6.6", "body": "## Issue description\r\nI noticed that some loss functions in `torch.nn.functional` do tensor broadcasting while other does not.\r\nI started using `cosine_embedding_loss` and was happy because it handles input tensors with (N, F) and (1, F) shapes, where N - number of examples, F - number of features in one example (vector). Then I moved to `mse_loss` and `l1_loss` to check for better results. And I was disappointed to see that the latter both require (N, F) and (N, F) tensors - they do not support tensor broadcasting as `cosine_embedding_loss` does. Now I need to either stack the second tensor N times (and I do not know whether the gradient history is stored if a tensor is copied; in any case it is memory and computationaly inefficient) or implement l1 and l2 losses on my own.\r\n\r\nPlease, make loss behavior consistent - either all functions require exactly the same shape or handle broadcasting for each of them. Thank you.\r\n\r\n## Code example\r\n```\r\nt1 = torch.randn(5,7)\r\nt2 = torch.randn(1,7)\r\nloss_cosine = F.cosine_embedding_loss(t1, t2, target=torch.ones(5))  # works fine\r\nloss_l2 = F.mse_loss(t1, t2)\r\n# RuntimeError: input and target shapes do not match: input [5 x 7], target [1 x 7]\r\n```\r\n\r\n- How you installed PyTorch: `conda install pytorch-cpu torchvision-cpu -c pytorch`\r\n- PyTorch version: 0.4.1\r\n- Python version: 3.6.6\r\n"}