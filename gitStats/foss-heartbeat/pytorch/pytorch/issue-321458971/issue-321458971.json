{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7412", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7412/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7412/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7412/events", "html_url": "https://github.com/pytorch/pytorch/pull/7412", "id": 321458971, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg2ODM4MDA0", "number": 7412, "title": "PyTorch makes friends with clang-tidy", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-09T07:23:42Z", "updated_at": "2018-05-09T17:22:43Z", "closed_at": "2018-05-09T17:08:53Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/7412", "html_url": "https://github.com/pytorch/pytorch/pull/7412", "diff_url": "https://github.com/pytorch/pytorch/pull/7412.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/7412.patch"}, "body_html": "<p>This PR introduces PyTorch to the wonderful world of <a href=\"http://clang.llvm.org/extra/clang-tidy/\" rel=\"nofollow\">clang-tidy</a>. More precisely it:</p>\n<ol>\n<li>Adds a <code>.clang-tidy</code> configuration file with some warnings manually weeded out,</li>\n<li>Adds a script called <code>tools/clang_tidy.py</code></li>\n</ol>\n<p>At a basic level, this script:</p>\n<ol>\n<li>Allows you to run clang tidy on code within PyTorch,</li>\n<li>Allows you to run clang tidy only on source changes from your most recent Git revision, so that you (almost) only see warnings from the source lines you touched, whose lint errors you are the direct perpetrator of.</li>\n</ol>\n<h1>FAQ</h1>\n<h3>Q: I enjoy having bugs in my code, and would like to continue writing bugs in my code without disturbance. Will this PR prevent me from doing so?</h3>\n<p>A: No, this script is currently provided only for people interested in <em>removing</em> bugs from their code on a voluntary basis, at their own effort (of running the script). Everyone else can ignore it.</p>\n<h3>Q: What is the basic way I can try this out right now, on a Mac?</h3>\n<p>A:</p>\n<ol>\n<li><code>brew install llvm</code></li>\n<li><code>python tools/clang_tidy.py -c &lt;clang-tidy-executable&gt; -p &lt;path-you-want-to-lint&gt;</code></li>\n</ol>\n<p>Where:</p>\n<ol>\n<li><code>&lt;clang-tidy-executable&gt;</code> is <code>/usr/local/Cellar/llvm/&lt;version&gt;/bin/clang-tidy</code></li>\n<li><code>&lt;path-you-want-to-lint&gt;</code> is e.g. <code>torch/csrc/api</code></li>\n<li>See what a mess our codebase is: <a href=\"https://gist.github.com/goldsborough/354b2f93c4e0b819fdc68c4633c9b221\">https://gist.github.com/goldsborough/354b2f93c4e0b819fdc68c4633c9b221</a></li>\n</ol>\n<h3>Q: How can I lint only the <em>lines of code</em> I am currently changing, or changed in my latest commit?</h3>\n<p>A: <code>python tools/clang_tidy.py -c &lt;clang-tidy-executable&gt; -p &lt;path-you-want-to-lint&gt; -r HEAD</code></p>\n<p>This will:</p>\n<ol>\n<li>Perform a <code>git diff HEAD</code></li>\n<li>Find out <em>what lines you changed exactly</em></li>\n<li>Run clang tidy only on those lines.</li>\n</ol>\n<p>Say I have this function:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">template </span>&lt;<span class=\"pl-k\">typename</span> Derived&gt;\n<span class=\"pl-k\">void</span> RNNBase&lt;Derived&gt;::reset_parameters() {\n  <span class=\"pl-k\">auto</span> stdv = <span class=\"pl-c1\">1.0</span> / <span class=\"pl-c1\">std::sqrt</span>(hidden_size_);\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">auto</span>&amp; p : <span class=\"pl-c1\">this</span>-&gt;<span class=\"pl-c1\">parameters</span>()) {\n    p.<span class=\"pl-smi\">second</span>.<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">uniform_</span>(-stdv, stdv);\n  }\n}</pre></div>\n<p>and all I change in my commit is to add a pointer that I assign <code>NULL</code> to (evil):</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">template </span>&lt;<span class=\"pl-k\">typename</span> Derived&gt;\n<span class=\"pl-k\">void</span> RNNBase&lt;Derived&gt;::reset_parameters() {\n  <span class=\"pl-k\">int</span>* p = <span class=\"pl-c1\">NULL</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> added!</span>\n  <span class=\"pl-k\">auto</span> stdv = <span class=\"pl-c1\">1.0</span> / <span class=\"pl-c1\">std::sqrt</span>(hidden_size_);\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">auto</span>&amp; p : <span class=\"pl-c1\">this</span>-&gt;<span class=\"pl-c1\">parameters</span>()) {\n    p.<span class=\"pl-smi\">second</span>.<span class=\"pl-c1\">data</span>().<span class=\"pl-c1\">uniform_</span>(-stdv, stdv);\n  }\n}</pre></div>\n<p>I only want lints for that line, not all lines in the file or project. So I run</p>\n<p><code>python tools/clang_tidy.py -c $CLANG_TIDY -p torch/csrc/api -d tools/cpp_build/build/libtorch -r HEAD</code></p>\n<p>and (only!) get</p>\n<pre><code>/home/psag/pytorch/pytorch/torch/csrc/api/src/nn/modules/rnn.cpp:69:12: warning: use nullptr [modernize-use-nullptr]\n  int* p = NULL;\n           ^~~~~\n           nullptr\n</code></pre>\n<h3>Q: What are all the things I can do?</h3>\n<p>A:</p>\n<pre><code>usage: clang_tidy.py [-h] [-c CLANG_TIDY_EXE] [-e EXTRA_ARGS [EXTRA_ARGS ...]]\n                     [-g GLOB [GLOB ...]] [-x REGEX [REGEX ...]]\n                     [-d COMPILE_COMMANDS_DIR] [-r REVISION]\n                     [-p PATHS [PATHS ...]] [-s] [-v]\n                     [--config-file CONFIG_FILE] [--checks CHECKS]\n\nRun Clang-Tidy (on your Git changes)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CLANG_TIDY_EXE, --clang-tidy-exe CLANG_TIDY_EXE\n                        {ath to clang-tidy executable\n  -e EXTRA_ARGS [EXTRA_ARGS ...], --extra-args EXTRA_ARGS [EXTRA_ARGS ...]\n                        Extra arguments to forward to clang-tidy\n  -g GLOB [GLOB ...], --glob GLOB [GLOB ...]\n                        File patterns as UNIX globs (no **)\n  -x REGEX [REGEX ...], --regex REGEX [REGEX ...]\n                        File patterns as regexes\n  -d COMPILE_COMMANDS_DIR, --compile-commands-dir COMPILE_COMMANDS_DIR\n                        Path to the folder containing compile_commands.json\n  -r REVISION, --revision REVISION\n                        Git revision to get changes from\n  -p PATHS [PATHS ...], --paths PATHS [PATHS ...]\n                        Lint only the given paths\n  -s, --show-command-only\n                        Only show the command to be executed, without running\n                        it\n  -v, --verbose         Verbose output\n  --config-file CONFIG_FILE\n                        Path to a clang-tidy config file. Defaults to '.clang-\n                        tidy'.\n  --checks CHECKS       Appends checks to those from the config file (if any)\n</code></pre>", "body_text": "This PR introduces PyTorch to the wonderful world of clang-tidy. More precisely it:\n\nAdds a .clang-tidy configuration file with some warnings manually weeded out,\nAdds a script called tools/clang_tidy.py\n\nAt a basic level, this script:\n\nAllows you to run clang tidy on code within PyTorch,\nAllows you to run clang tidy only on source changes from your most recent Git revision, so that you (almost) only see warnings from the source lines you touched, whose lint errors you are the direct perpetrator of.\n\nFAQ\nQ: I enjoy having bugs in my code, and would like to continue writing bugs in my code without disturbance. Will this PR prevent me from doing so?\nA: No, this script is currently provided only for people interested in removing bugs from their code on a voluntary basis, at their own effort (of running the script). Everyone else can ignore it.\nQ: What is the basic way I can try this out right now, on a Mac?\nA:\n\nbrew install llvm\npython tools/clang_tidy.py -c <clang-tidy-executable> -p <path-you-want-to-lint>\n\nWhere:\n\n<clang-tidy-executable> is /usr/local/Cellar/llvm/<version>/bin/clang-tidy\n<path-you-want-to-lint> is e.g. torch/csrc/api\nSee what a mess our codebase is: https://gist.github.com/goldsborough/354b2f93c4e0b819fdc68c4633c9b221\n\nQ: How can I lint only the lines of code I am currently changing, or changed in my latest commit?\nA: python tools/clang_tidy.py -c <clang-tidy-executable> -p <path-you-want-to-lint> -r HEAD\nThis will:\n\nPerform a git diff HEAD\nFind out what lines you changed exactly\nRun clang tidy only on those lines.\n\nSay I have this function:\ntemplate <typename Derived>\nvoid RNNBase<Derived>::reset_parameters() {\n  auto stdv = 1.0 / std::sqrt(hidden_size_);\n  for (auto& p : this->parameters()) {\n    p.second.data().uniform_(-stdv, stdv);\n  }\n}\nand all I change in my commit is to add a pointer that I assign NULL to (evil):\ntemplate <typename Derived>\nvoid RNNBase<Derived>::reset_parameters() {\n  int* p = NULL; // added!\n  auto stdv = 1.0 / std::sqrt(hidden_size_);\n  for (auto& p : this->parameters()) {\n    p.second.data().uniform_(-stdv, stdv);\n  }\n}\nI only want lints for that line, not all lines in the file or project. So I run\npython tools/clang_tidy.py -c $CLANG_TIDY -p torch/csrc/api -d tools/cpp_build/build/libtorch -r HEAD\nand (only!) get\n/home/psag/pytorch/pytorch/torch/csrc/api/src/nn/modules/rnn.cpp:69:12: warning: use nullptr [modernize-use-nullptr]\n  int* p = NULL;\n           ^~~~~\n           nullptr\n\nQ: What are all the things I can do?\nA:\nusage: clang_tidy.py [-h] [-c CLANG_TIDY_EXE] [-e EXTRA_ARGS [EXTRA_ARGS ...]]\n                     [-g GLOB [GLOB ...]] [-x REGEX [REGEX ...]]\n                     [-d COMPILE_COMMANDS_DIR] [-r REVISION]\n                     [-p PATHS [PATHS ...]] [-s] [-v]\n                     [--config-file CONFIG_FILE] [--checks CHECKS]\n\nRun Clang-Tidy (on your Git changes)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CLANG_TIDY_EXE, --clang-tidy-exe CLANG_TIDY_EXE\n                        {ath to clang-tidy executable\n  -e EXTRA_ARGS [EXTRA_ARGS ...], --extra-args EXTRA_ARGS [EXTRA_ARGS ...]\n                        Extra arguments to forward to clang-tidy\n  -g GLOB [GLOB ...], --glob GLOB [GLOB ...]\n                        File patterns as UNIX globs (no **)\n  -x REGEX [REGEX ...], --regex REGEX [REGEX ...]\n                        File patterns as regexes\n  -d COMPILE_COMMANDS_DIR, --compile-commands-dir COMPILE_COMMANDS_DIR\n                        Path to the folder containing compile_commands.json\n  -r REVISION, --revision REVISION\n                        Git revision to get changes from\n  -p PATHS [PATHS ...], --paths PATHS [PATHS ...]\n                        Lint only the given paths\n  -s, --show-command-only\n                        Only show the command to be executed, without running\n                        it\n  -v, --verbose         Verbose output\n  --config-file CONFIG_FILE\n                        Path to a clang-tidy config file. Defaults to '.clang-\n                        tidy'.\n  --checks CHECKS       Appends checks to those from the config file (if any)", "body": "This PR introduces PyTorch to the wonderful world of [clang-tidy](http://clang.llvm.org/extra/clang-tidy/). More precisely it:\r\n\r\n1. Adds a `.clang-tidy` configuration file with some warnings manually weeded out,\r\n2. Adds a script called `tools/clang_tidy.py`\r\n\r\nAt a basic level, this script:\r\n\r\n1. Allows you to run clang tidy on code within PyTorch,\r\n2. Allows you to run clang tidy only on source changes from your most recent Git revision, so that you (almost) only see warnings from the source lines you touched, whose lint errors you are the direct perpetrator of.\r\n\r\n# FAQ\r\n\r\n### Q: I enjoy having bugs in my code, and would like to continue writing bugs in my code without disturbance. Will this PR prevent me from doing so?\r\n\r\nA: No, this script is currently provided only for people interested in *removing* bugs from their code on a voluntary basis, at their own effort (of running the script). Everyone else can ignore it. \r\n\r\n### Q: What is the basic way I can try this out right now, on a Mac?\r\n\r\nA: \r\n1. `brew install llvm`\r\n2. `python tools/clang_tidy.py -c <clang-tidy-executable> -p <path-you-want-to-lint>`\r\n\r\nWhere:\r\n\r\n1. `<clang-tidy-executable>` is `/usr/local/Cellar/llvm/<version>/bin/clang-tidy`\r\n2. `<path-you-want-to-lint>` is e.g. `torch/csrc/api`\r\n3. See what a mess our codebase is: https://gist.github.com/goldsborough/354b2f93c4e0b819fdc68c4633c9b221\r\n\r\n### Q: How can I lint only the *lines of code* I am currently changing, or changed in my latest commit?\r\n\r\nA: `python tools/clang_tidy.py -c <clang-tidy-executable> -p <path-you-want-to-lint> -r HEAD`\r\n\r\nThis will:\r\n\r\n1. Perform a `git diff HEAD`\r\n2. Find out *what lines you changed exactly*\r\n3. Run clang tidy only on those lines.\r\n\r\nSay I have this function:\r\n\r\n```cpp\r\ntemplate <typename Derived>\r\nvoid RNNBase<Derived>::reset_parameters() {\r\n  auto stdv = 1.0 / std::sqrt(hidden_size_);\r\n  for (auto& p : this->parameters()) {\r\n    p.second.data().uniform_(-stdv, stdv);\r\n  }\r\n}\r\n```\r\n\r\nand all I change in my commit is to add a pointer that I assign `NULL` to (evil):\r\n\r\n```cpp\r\ntemplate <typename Derived>\r\nvoid RNNBase<Derived>::reset_parameters() {\r\n  int* p = NULL; // added!\r\n  auto stdv = 1.0 / std::sqrt(hidden_size_);\r\n  for (auto& p : this->parameters()) {\r\n    p.second.data().uniform_(-stdv, stdv);\r\n  }\r\n}\r\n```\r\n\r\nI only want lints for that line, not all lines in the file or project. So I run\r\n\r\n`python tools/clang_tidy.py -c $CLANG_TIDY -p torch/csrc/api -d tools/cpp_build/build/libtorch -r HEAD`\r\n\r\nand (only!) get\r\n\r\n```\r\n/home/psag/pytorch/pytorch/torch/csrc/api/src/nn/modules/rnn.cpp:69:12: warning: use nullptr [modernize-use-nullptr]\r\n  int* p = NULL;\r\n           ^~~~~\r\n           nullptr\r\n```\r\n\r\n### Q: What are all the things I can do?\r\n\r\nA:\r\n\r\n```\r\nusage: clang_tidy.py [-h] [-c CLANG_TIDY_EXE] [-e EXTRA_ARGS [EXTRA_ARGS ...]]\r\n                     [-g GLOB [GLOB ...]] [-x REGEX [REGEX ...]]\r\n                     [-d COMPILE_COMMANDS_DIR] [-r REVISION]\r\n                     [-p PATHS [PATHS ...]] [-s] [-v]\r\n                     [--config-file CONFIG_FILE] [--checks CHECKS]\r\n\r\nRun Clang-Tidy (on your Git changes)\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c CLANG_TIDY_EXE, --clang-tidy-exe CLANG_TIDY_EXE\r\n                        {ath to clang-tidy executable\r\n  -e EXTRA_ARGS [EXTRA_ARGS ...], --extra-args EXTRA_ARGS [EXTRA_ARGS ...]\r\n                        Extra arguments to forward to clang-tidy\r\n  -g GLOB [GLOB ...], --glob GLOB [GLOB ...]\r\n                        File patterns as UNIX globs (no **)\r\n  -x REGEX [REGEX ...], --regex REGEX [REGEX ...]\r\n                        File patterns as regexes\r\n  -d COMPILE_COMMANDS_DIR, --compile-commands-dir COMPILE_COMMANDS_DIR\r\n                        Path to the folder containing compile_commands.json\r\n  -r REVISION, --revision REVISION\r\n                        Git revision to get changes from\r\n  -p PATHS [PATHS ...], --paths PATHS [PATHS ...]\r\n                        Lint only the given paths\r\n  -s, --show-command-only\r\n                        Only show the command to be executed, without running\r\n                        it\r\n  -v, --verbose         Verbose output\r\n  --config-file CONFIG_FILE\r\n                        Path to a clang-tidy config file. Defaults to '.clang-\r\n                        tidy'.\r\n  --checks CHECKS       Appends checks to those from the config file (if any)\r\n```"}