{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6674", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6674/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6674/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6674/events", "html_url": "https://github.com/pytorch/pytorch/pull/6674", "id": 315198311, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgyMjY5ODMy", "number": 6674, "title": "Use Index rather than Long for IntList parsing", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-17T19:27:08Z", "updated_at": "2018-11-23T15:43:11Z", "closed_at": "2018-04-26T23:13:24Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6674", "html_url": "https://github.com/pytorch/pytorch/pull/6674", "diff_url": "https://github.com/pytorch/pytorch/pull/6674.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6674.patch"}, "body_html": "<p>so floating-point types convertible to ints fail the parsing.</p>\n<p>Basically, our unpackLong code works with floating-point types that are convertible to ints, but this isn't often what you want (because of truncation).<br>\nWhat you actually want is to convert to an index, which will usually flag such issues.</p>\n<p>I made this the minimal change I could because:</p>\n<ol>\n<li>I didn't want to change unpackLong because the existing code call checkLong before unpackLong, so this should be a non-issue most of the time.  And fixing unpackLong requires calling checkLong again, which will slow everything down.</li>\n<li>An exception above is with IntList, which only checks that 1) it is a tuple or 2) it is a varargs tuple (i.e. torch.ones(1, 2, 3)).</li>\n</ol>", "body_text": "so floating-point types convertible to ints fail the parsing.\nBasically, our unpackLong code works with floating-point types that are convertible to ints, but this isn't often what you want (because of truncation).\nWhat you actually want is to convert to an index, which will usually flag such issues.\nI made this the minimal change I could because:\n\nI didn't want to change unpackLong because the existing code call checkLong before unpackLong, so this should be a non-issue most of the time.  And fixing unpackLong requires calling checkLong again, which will slow everything down.\nAn exception above is with IntList, which only checks that 1) it is a tuple or 2) it is a varargs tuple (i.e. torch.ones(1, 2, 3)).", "body": "so floating-point types convertible to ints fail the parsing.\r\n\r\nBasically, our unpackLong code works with floating-point types that are convertible to ints, but this isn't often what you want (because of truncation).\r\nWhat you actually want is to convert to an index, which will usually flag such issues.\r\n\r\nI made this the minimal change I could because:\r\n1) I didn't want to change unpackLong because the existing code call checkLong before unpackLong, so this should be a non-issue most of the time.  And fixing unpackLong requires calling checkLong again, which will slow everything down.\r\n2) An exception above is with IntList, which only checks that 1) it is a tuple or 2) it is a varargs tuple (i.e. torch.ones(1, 2, 3)). "}