{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233179411", "pull_request_review_id": 174524167, "id": 233179411, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzE3OTQxMQ==", "diff_hunk": "@@ -324,37 +316,23 @@ std::pair<std::shared_ptr<script::Module>, std::string> ModuleDecoder::parseFull\n   return std::make_pair(module_lookup(vec), std::move(last));\n }\n \n-ModuleDecoder::ModuleDecoder(\n-    ModuleLookup module_lookup,\n-    std::istream& in) :\n-    stream_reader_(&in) {\n-  auto model_proto = onnx::ModelProto();\n-  auto record = stream_reader_.getLastRecord();\n-  model_proto.ParsePartialFromArray(std::get<0>(record).get(), std::get<1>(record));\n-  auto graph_proto = model_proto.graph();\n-\n-  std::unordered_map<std::string, at::Tensor*> param_map;\n-\n-  for (auto &tensor_proto : graph_proto.initializer()) {\n-    std::shared_ptr<script::Module> parent_module;\n-    std::string name;\n-    std::tie(parent_module, name) = parseFullName(module_lookup, tensor_proto.name());\n-\n-    auto param = buildParameter(tensor_proto);\n-    parent_module->register_parameter(name, param, /* is_buffer = */ tensor_proto.int64_data(0));\n-    param_map[tensor_proto.name()] = parent_module->parameter_slot(name);\n-  }\n-\n-  for (auto &node_proto : graph_proto.node()) {\n-    std::shared_ptr<script::Module> parent_module;\n-    std::string name;\n-    std::tie(parent_module, name) = parseFullName(module_lookup, node_proto.name());\n-\n+MethodDecoder::MethodDecoder(\n+    const onnx::ModelProto& model_proto,\n+    const std::unordered_map<std::string, at::Tensor*>& param_map,\n+    script::Module* parent_module,\n+    std::unordered_map<uint64_t, std::shared_ptr<at::Storage>>* storage_map,\n+    PyTorchStreamReader* stream_reader) {\n+  storage_map_ = storage_map;\n+  stream_reader_ = stream_reader;\n+  const auto& graph_proto = model_proto.graph();\n+  for (const auto &node_proto : graph_proto.node()) {\n     std::vector<at::Tensor*> member_inputs;\n-    for (auto &param_name : node_proto.input()) {\n-      member_inputs.push_back(param_map[param_name]);\n+    const std::string& name = node_proto.name();\n+    for (const auto &param_name : node_proto.input()) {\n+      auto it = param_map.find(param_name);\n+      JIT_ASSERT(it != param_map.end());\n+      member_inputs.push_back(it->second);\n     }\n-\n     auto graph = buildGraph(node_proto.attribute(0).g());\n     // has_domain field has a string iff the method was optimized\n     parent_module->set_optimized(node_proto.has_domain());", "path": "torch/csrc/jit/import.cpp", "position": 221, "original_position": 213, "commit_id": "e186c1feb925618f88a7471a9b0d6b51ed454a08", "original_commit_id": "ed6ab9b76f080f9c8643a5e84bd4de1a820d77f6", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "No plans to. It is a property of the Module not of the methods on the module, so it makes more sense to store it with the module.", "created_at": "2018-11-13T18:59:34Z", "updated_at": "2018-11-23T15:54:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/13736#discussion_r233179411", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13736", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233179411"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13736#discussion_r233179411"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13736"}}, "body_html": "<p>No plans to. It is a property of the Module not of the methods on the module, so it makes more sense to store it with the module.</p>", "body_text": "No plans to. It is a property of the Module not of the methods on the module, so it makes more sense to store it with the module.", "in_reply_to_id": 232412868}