{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232413155", "pull_request_review_id": 173602893, "id": 232413155, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQxMzE1NQ==", "diff_hunk": "@@ -366,22 +344,151 @@ ModuleDecoder::ModuleDecoder(\n   }\n }\n \n+at::ScalarType tensorProtoTypeToATenType(caffe2::TensorProto_DataType data_type) {\n+  switch(data_type) {\n+    // NB: handle BOOL\n+    case caffe2::TensorProto_DataType_UINT8:\n+      return at::kByte;\n+    case caffe2::TensorProto_DataType_INT8:\n+      return at::kChar;\n+    case caffe2::TensorProto_DataType_INT16:\n+      return at::kShort;\n+    case caffe2::TensorProto_DataType_INT32:\n+      return at::kInt;\n+    case caffe2::TensorProto_DataType_INT64:\n+      return at::kLong;\n+    case caffe2::TensorProto_DataType_FLOAT16:\n+      return at::kHalf;\n+    case caffe2::TensorProto_DataType_FLOAT:\n+      return at::kFloat;\n+    case caffe2::TensorProto_DataType_DOUBLE:\n+      return at::kDouble;\n+    default:\n+      AT_ERROR(\"Unsupported TensorProto data type\");\n+  }\n+}\n+\n+class ScriptModuleDeserializer final {\n+ public:\n+  ScriptModuleDeserializer(const std::string& filename) :\n+    ifs_(filename, std::ifstream::in), reader_(&ifs_) {\n+      // TODO appropriate support for mmap, right now still use stream reader\n+      //std::cout << \"filename: \" << filename << std::endl;\n+  }\n+  ScriptModuleDeserializer(std::istream* is) : ifs_(), reader_(is) {}\n+  void deserialize(ModuleLookup module_lookup) {\n+    torch::ModelDef model_def;\n+    at::DataPtr data_ptr;\n+    size_t data_size;\n+    std::tie(data_ptr, data_size) = reader_.getLastRecord();\n+    AT_ASSERTM(model_def.ParseFromArray(data_ptr.get(), data_size),\n+        \"parse metadata (i.e., ModelDef) failed.\");;\n+    //std::cout << \"loaded model_def: \" << model_def.DebugString() << std::endl;\n+    moduleLookup_ = module_lookup;\n+    const auto& module_def = model_def.main_module();\n+    collectParamsInfo(module_def, module_def.name());\n+    std::shared_ptr<script::Module> module = moduleLookup_(moduleStack_);", "path": "torch/csrc/jit/import.cpp", "position": 268, "original_position": 261, "commit_id": "e186c1feb925618f88a7471a9b0d6b51ed454a08", "original_commit_id": "ed6ab9b76f080f9c8643a5e84bd4de1a820d77f6", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "add a TODO that it can be simplified after better C++/Python interop lands and the list of submodules would be the same", "created_at": "2018-11-09T22:31:55Z", "updated_at": "2018-11-23T15:54:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/13736#discussion_r232413155", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13736", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/232413155"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13736#discussion_r232413155"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13736"}}, "body_html": "<p>add a TODO that it can be simplified after better C++/Python interop lands and the list of submodules would be the same</p>", "body_text": "add a TODO that it can be simplified after better C++/Python interop lands and the list of submodules would be the same"}