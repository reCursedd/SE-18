{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1944", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1944/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1944/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1944/events", "html_url": "https://github.com/pytorch/pytorch/pull/1944", "id": 239549101, "node_id": "MDExOlB1bGxSZXF1ZXN0MTI4MjAyMDEz", "number": 1944, "title": "Fix broadcasting issues in binary_cross_entropy_with_logits", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-06-29T17:06:24Z", "updated_at": "2018-11-23T15:34:01Z", "closed_at": "2017-07-02T03:06:36Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1944", "html_url": "https://github.com/pytorch/pytorch/pull/1944", "diff_url": "https://github.com/pytorch/pytorch/pull/1944.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1944.patch"}, "body_html": "<p>In response to issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"239443715\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1939\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1939/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1939\">#1939</a> where this failed, due to broadcasting because <code>o</code> and <code>t</code> have different shapes</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nsigmoid <span class=\"pl-k\">=</span> nn.Sigmoid()\n\nt <span class=\"pl-k\">=</span> np.round(np.random.rand(<span class=\"pl-c1\">64</span>))\no <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">64</span>,<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">0.5</span>\n\nt <span class=\"pl-k\">=</span> Variable(torch.Tensor(t))\no <span class=\"pl-k\">=</span> Variable(torch.Tensor(o))\n\n<span class=\"pl-c1\">print</span>(nn.BCEWithLogitsLoss()(o, t))\n<span class=\"pl-c1\">print</span>(nn.BCELoss()(sigmoid(o), t)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Different numbers</span></pre></div>", "body_text": "In response to issue #1939 where this failed, due to broadcasting because o and t have different shapes\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nimport numpy as np\n\nsigmoid = nn.Sigmoid()\n\nt = np.round(np.random.rand(64))\no = np.random.rand(64,1) - 0.5\n\nt = Variable(torch.Tensor(t))\no = Variable(torch.Tensor(o))\n\nprint(nn.BCEWithLogitsLoss()(o, t))\nprint(nn.BCELoss()(sigmoid(o), t)) # Different numbers", "body": "In response to issue #1939 where this failed, due to broadcasting because `o` and `t` have different shapes\r\n\r\n```Python\r\nimport torch\r\nimport torch.nn as nn\r\nfrom torch.autograd import Variable\r\nimport numpy as np\r\n\r\nsigmoid = nn.Sigmoid()\r\n\r\nt = np.round(np.random.rand(64))\r\no = np.random.rand(64,1) - 0.5\r\n\r\nt = Variable(torch.Tensor(t))\r\no = Variable(torch.Tensor(o))\r\n\r\nprint(nn.BCEWithLogitsLoss()(o, t))\r\nprint(nn.BCELoss()(sigmoid(o), t)) # Different numbers\r\n```"}