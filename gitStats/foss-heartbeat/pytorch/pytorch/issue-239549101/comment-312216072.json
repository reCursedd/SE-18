{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/312216072", "html_url": "https://github.com/pytorch/pytorch/pull/1944#issuecomment-312216072", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1944", "id": 312216072, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjIxNjA3Mg==", "user": {"login": "alykhantejani", "id": 687194, "node_id": "MDQ6VXNlcjY4NzE5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/687194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alykhantejani", "html_url": "https://github.com/alykhantejani", "followers_url": "https://api.github.com/users/alykhantejani/followers", "following_url": "https://api.github.com/users/alykhantejani/following{/other_user}", "gists_url": "https://api.github.com/users/alykhantejani/gists{/gist_id}", "starred_url": "https://api.github.com/users/alykhantejani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alykhantejani/subscriptions", "organizations_url": "https://api.github.com/users/alykhantejani/orgs", "repos_url": "https://api.github.com/users/alykhantejani/repos", "events_url": "https://api.github.com/users/alykhantejani/events{/privacy}", "received_events_url": "https://api.github.com/users/alykhantejani/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-30T09:04:36Z", "updated_at": "2017-06-30T09:04:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> if we add a check in <code>binary_cross_entropy_with_logits</code> to raise if <code>target.size() != input.size()</code>, then we should also add this to <code>binary_cross_entropy</code> as their interfaces should match.</p>\n<p>However, this will break backwards compatibility as I think many people use it in the following way:</p>\n<div class=\"highlight highlight-source-python\"><pre>target <span class=\"pl-k\">=</span> Variable(torch.rand(<span class=\"pl-c1\">64</span>))\noutput <span class=\"pl-k\">=</span> Variable(torch.rand(<span class=\"pl-c1\">64</span>,<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">0.5</span>)\nnn.BCELoss()(sigmoid(output), target)</pre></div>", "body_text": "@apaszke if we add a check in binary_cross_entropy_with_logits to raise if target.size() != input.size(), then we should also add this to binary_cross_entropy as their interfaces should match.\nHowever, this will break backwards compatibility as I think many people use it in the following way:\ntarget = Variable(torch.rand(64))\noutput = Variable(torch.rand(64,1) - 0.5)\nnn.BCELoss()(sigmoid(output), target)", "body": "@apaszke if we add a check in `binary_cross_entropy_with_logits` to raise if `target.size() != input.size()`, then we should also add this to `binary_cross_entropy` as their interfaces should match. \r\n\r\nHowever, this will break backwards compatibility as I think many people use it in the following way:\r\n```Python\r\ntarget = Variable(torch.rand(64))\r\noutput = Variable(torch.rand(64,1) - 0.5)\r\nnn.BCELoss()(sigmoid(output), target)\r\n```"}