{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8672", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8672/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8672/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8672/events", "html_url": "https://github.com/pytorch/pytorch/issues/8672", "id": 333867271, "node_id": "MDU6SXNzdWUzMzM4NjcyNzE=", "number": 8672, "title": "[c10d] Automatic discovery of IP addresses to use", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953883, "node_id": "MDU6TGFiZWw2Nzk5NTM4ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/distributed", "name": "distributed", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-19T22:54:41Z", "updated_at": "2018-10-13T02:27:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>This is what THD does today by retrieving all non-loopback addresses of a machine and sharing them via the TCP init method or file init method. Then each node tries using them and picks the first one that works out.</p>\n<p>This is nice because it works out of the box, including when a machine's hostname resolves to localhost.</p>\n<p>We can leverage the store for this. Every machine writes its list of addresses to the store; look for the ones from its peers; and either a) looks for a common subnet where everybody has a different address (subnet), or b) do the THD thing and try to connect a peers to find the addresses that are routeable.</p>\n<p>Also see the comments in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"333816467\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8664\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8664/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8664\">#8664</a>.</p>", "body_text": "This is what THD does today by retrieving all non-loopback addresses of a machine and sharing them via the TCP init method or file init method. Then each node tries using them and picks the first one that works out.\nThis is nice because it works out of the box, including when a machine's hostname resolves to localhost.\nWe can leverage the store for this. Every machine writes its list of addresses to the store; look for the ones from its peers; and either a) looks for a common subnet where everybody has a different address (subnet), or b) do the THD thing and try to connect a peers to find the addresses that are routeable.\nAlso see the comments in #8664.", "body": "This is what THD does today by retrieving all non-loopback addresses of a machine and sharing them via the TCP init method or file init method. Then each node tries using them and picks the first one that works out.\r\n\r\nThis is nice because it works out of the box, including when a machine's hostname resolves to localhost.\r\n\r\nWe can leverage the store for this. Every machine writes its list of addresses to the store; look for the ones from its peers; and either a) looks for a common subnet where everybody has a different address (subnet), or b) do the THD thing and try to connect a peers to find the addresses that are routeable.\r\n\r\nAlso see the comments in #8664."}