{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/399499049", "html_url": "https://github.com/pytorch/pytorch/issues/8672#issuecomment-399499049", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8672", "id": 399499049, "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTQ5OTA0OQ==", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-22T16:21:03Z", "updated_at": "2018-06-22T16:21:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=873905\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dashesy\">@dashesy</a> Thanks for the comment!</p>\n<p>If you end up using gloo with THD today, you're right there is no way to select the interface you want to use. For c10d this is opposite; you have to select the interface or address. This is also why I added this issue, because it is not a great out of the box experience to have to specify an interface.</p>\n<p>In the case where you would opt out of automatic detection, you can create and initialize a process group (the equivalent of the global process group for THD) like so:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/3da27312bbda7ca10eec12092e6ca5e67f3f9d9c/test/test_c10d.py#L187-L191\">pytorch/test/test_c10d.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 187 to 191\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/3da27312bbda7ca10eec12092e6ca5e67f3f9d9c\">3da2731</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L187\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"187\"></td>\n          <td id=\"LC187\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">opts</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L188\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"188\"></td>\n          <td id=\"LC188\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     opts <span class=\"pl-k\">=</span> c10d.ProcessGroupGloo.Options() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L189\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"189\"></td>\n          <td id=\"LC189\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     opts.timeout <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.0</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L190\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"190\"></td>\n          <td id=\"LC190\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     opts.devices <span class=\"pl-k\">=</span> [c10d.ProcessGroupGloo.create_tcp_device(<span class=\"pl-v\">interface</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lo<span class=\"pl-pds\">\"</span></span>)] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L191\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"191\"></td>\n          <td id=\"LC191\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> opts </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The <code>create_tcp_device</code> function takes either a hostname or an interface name as keyword argument. In your case where you have a ton of interfaces where some don't resolve -- and automatic discovery fails -- you can use this to lock it down to whatever device you want to use.</p>\n<p>For the NCCL case you would still use <code>NCCL_SOCKET_IFNAME</code> to steer it to use the right one.</p>", "body_text": "@dashesy Thanks for the comment!\nIf you end up using gloo with THD today, you're right there is no way to select the interface you want to use. For c10d this is opposite; you have to select the interface or address. This is also why I added this issue, because it is not a great out of the box experience to have to specify an interface.\nIn the case where you would opt out of automatic detection, you can create and initialize a process group (the equivalent of the global process group for THD) like so:\n\n  \n    \n      pytorch/test/test_c10d.py\n    \n    \n        Lines 187 to 191\n      in\n      3da2731\n    \n    \n    \n    \n\n        \n          \n           def opts(self): \n        \n\n        \n          \n               opts = c10d.ProcessGroupGloo.Options() \n        \n\n        \n          \n               opts.timeout = 1.0 \n        \n\n        \n          \n               opts.devices = [c10d.ProcessGroupGloo.create_tcp_device(interface=\"lo\")] \n        \n\n        \n          \n               return opts \n        \n    \n  \n\n\nThe create_tcp_device function takes either a hostname or an interface name as keyword argument. In your case where you have a ton of interfaces where some don't resolve -- and automatic discovery fails -- you can use this to lock it down to whatever device you want to use.\nFor the NCCL case you would still use NCCL_SOCKET_IFNAME to steer it to use the right one.", "body": "@dashesy Thanks for the comment!\r\n\r\nIf you end up using gloo with THD today, you're right there is no way to select the interface you want to use. For c10d this is opposite; you have to select the interface or address. This is also why I added this issue, because it is not a great out of the box experience to have to specify an interface.\r\n\r\nIn the case where you would opt out of automatic detection, you can create and initialize a process group (the equivalent of the global process group for THD) like so:\r\n\r\nhttps://github.com/pytorch/pytorch/blob/3da27312bbda7ca10eec12092e6ca5e67f3f9d9c/test/test_c10d.py#L187-L191\r\n\r\nThe `create_tcp_device` function takes either a hostname or an interface name as keyword argument. In your case where you have a ton of interfaces where some don't resolve -- and automatic discovery fails -- you can use this to lock it down to whatever device you want to use.\r\n\r\nFor the NCCL case you would still use `NCCL_SOCKET_IFNAME` to steer it to use the right one."}