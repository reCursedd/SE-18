{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225735021", "pull_request_review_id": 165401448, "id": 225735021, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTczNTAyMQ==", "diff_hunk": "@@ -102,6 +102,98 @@ def ref(dY, X):\n         self.assertDeviceChecks(dc, op, [dY, X], [0])\n         self.assertReferenceChecks(gc, op, [dY, X], ref)\n \n+    @given(height_scale=st.floats(0.25, 4.0) | st.just(2.0),\n+           width_scale=st.floats(0.25, 4.0) | st.just(2.0),\n+           height=st.integers(4, 8),\n+           width=st.integers(4, 8),\n+           num_channels=st.integers(1, 4),\n+           batch_size=st.integers(1, 4),\n+           seed=st.integers(0, 65535),\n+           **hu.gcs)\n+    def test_nearest_onnx(self, height_scale, width_scale, height, width,\n+                     num_channels, batch_size, seed,\n+                     gc, dc):\n+\n+        np.random.seed(seed)\n+        op = core.CreateOperator(\n+            \"ResizeNearest\",\n+            [\"X\", \"scales\"],\n+            [\"Y\"],\n+        )\n+\n+        X = np.random.rand(\n+            batch_size, num_channels, height, width).astype(np.float32)\n+        scales = np.array([height_scale, width_scale]).astype(np.float32)\n+\n+        def ref(X, scales):\n+            output_height = np.int32(height * scales[0])\n+            output_width = np.int32(width * scales[1])\n+\n+            output_h_idxs, output_w_idxs = np.meshgrid(np.arange(output_height),\n+                                                       np.arange(output_width),\n+                                                       indexing='ij')\n+\n+            input_h_idxs = np.minimum(\n+                output_h_idxs / scales[0], height - 1).astype(np.int32)\n+            input_w_idxs = np.minimum(\n+                output_w_idxs / scales[1], width - 1).astype(np.int32)\n+\n+            Y = X[:, :, input_h_idxs, input_w_idxs]\n+\n+            return Y,\n+\n+        self.assertReferenceChecks(gc, op, [X, scales], ref)\n+        self.assertDeviceChecks(dc, op, [X, scales], [0])\n+        self.assertGradientChecks(gc, op, [X, scales], 0, [0], stepsize=0.1, threshold=1e-2)\n+\n+    @given(height_scale=st.floats(0.25, 4.0) | st.just(2.0),\n+           width_scale=st.floats(0.25, 4.0) | st.just(2.0),\n+           height=st.integers(4, 8),\n+           width=st.integers(4, 8),\n+           num_channels=st.integers(1, 4),\n+           batch_size=st.integers(1, 4),\n+           seed=st.integers(0, 65535),\n+           **hu.gcs)\n+    def test_nearest_onnx_grad(self, height_scale, width_scale, height, width,\n+                          num_channels, batch_size, seed, gc, dc):\n+\n+        np.random.seed(seed)\n+\n+        output_height = np.int32(height * height_scale)\n+        output_width = np.int32(width * width_scale)\n+        X = np.random.rand(batch_size,\n+                           num_channels,\n+                           height,\n+                           width).astype(np.float32)\n+        dY = np.random.rand(batch_size,\n+                            num_channels,\n+                            output_height,\n+                            output_width).astype(np.float32)\n+        scales = np.array([height_scale, width_scale]).astype(np.float32)\n+\n+        op = core.CreateOperator(\n+            \"ResizeNearestGradient\",\n+            [\"dY\", \"X\", \"scales\"],\n+            [\"dX\"],\n+            width_scale=width_scale,\n+            height_scale=height_scale,", "path": "caffe2/python/operator_test/resize_op_test.py", "position": null, "original_position": 78, "commit_id": "6f4b1ca82545538339f6add60f40ede0649381a3", "original_commit_id": "0005ddd3815621beb6d1544f39d745a9b85acbb3", "user": {"login": "d4l3k", "id": 909104, "node_id": "MDQ6VXNlcjkwOTEwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/909104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d4l3k", "html_url": "https://github.com/d4l3k", "followers_url": "https://api.github.com/users/d4l3k/followers", "following_url": "https://api.github.com/users/d4l3k/following{/other_user}", "gists_url": "https://api.github.com/users/d4l3k/gists{/gist_id}", "starred_url": "https://api.github.com/users/d4l3k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d4l3k/subscriptions", "organizations_url": "https://api.github.com/users/d4l3k/orgs", "repos_url": "https://api.github.com/users/d4l3k/repos", "events_url": "https://api.github.com/users/d4l3k/events{/privacy}", "received_events_url": "https://api.github.com/users/d4l3k/received_events", "type": "User", "site_admin": false}, "body": "These scales should be omitted right?", "created_at": "2018-10-16T22:59:20Z", "updated_at": "2018-11-23T15:53:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/12720#discussion_r225735021", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12720", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/225735021"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12720#discussion_r225735021"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12720"}}, "body_html": "<p>These scales should be omitted right?</p>", "body_text": "These scales should be omitted right?"}