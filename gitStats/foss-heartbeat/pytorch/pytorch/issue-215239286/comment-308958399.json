{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/308958399", "html_url": "https://github.com/pytorch/pytorch/issues/1033#issuecomment-308958399", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1033", "id": 308958399, "node_id": "MDEyOklzc3VlQ29tbWVudDMwODk1ODM5OQ==", "user": {"login": "Roger-luo", "id": 8445510, "node_id": "MDQ6VXNlcjg0NDU1MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8445510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Roger-luo", "html_url": "https://github.com/Roger-luo", "followers_url": "https://api.github.com/users/Roger-luo/followers", "following_url": "https://api.github.com/users/Roger-luo/following{/other_user}", "gists_url": "https://api.github.com/users/Roger-luo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Roger-luo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Roger-luo/subscriptions", "organizations_url": "https://api.github.com/users/Roger-luo/orgs", "repos_url": "https://api.github.com/users/Roger-luo/repos", "events_url": "https://api.github.com/users/Roger-luo/events{/privacy}", "received_events_url": "https://api.github.com/users/Roger-luo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-16T07:48:32Z", "updated_at": "2017-06-16T08:11:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I was trying to add complex number for TH, because I need a network with complex parameters for research and I found that the macro name <code>real</code> a little bit inconvenient, like in ztorch, it could be a little bit confusing in the source code. Maybe use <code>num</code> for <code>real</code>, <code>Num</code> for <code>Real</code> and <code>NUM</code> for <code>REAL</code> in the source would be more convenient, if complex number will be implemented in the future? (or some other words?)</p>\n<p>And files like <code>THGenerateDoubleComplexTypes.h</code> could look like</p>\n<pre><code>#ifndef TH_GENERIC_FILE\n#error \"You must define TH_GENERIC_FILE before including THGenerateDoubleType.h\"\n#endif\n\n#define TH_NUM_IS_COMPLEX\n\n#define num double\n#define accnum double\n#define TH_CONVERT_NUM_TO_ACCNUM(_val) (accnum)(_val)\n#define TH_CONVERT_ACCNUM_TO_NUM(_val) (num)(_val)\n#define Num DoubleComplex\n#define TH_NUM_IS_DOUBLE_COMPLEX\n#line 1 TH_GENERIC_FILE\n#include TH_GENERIC_FILE\n#undef accnum\n#undef num\n#undef Num\n#undef TH_NUM_IS_DOUBLE_COMPLEX\n#undef TH_CONVERT_NUM_TO_ACCNUM\n#undef TH_CONVERT_ACCNUM_TO_NUM\n\n#define TH_NUM_IS_COMPLEX\n\n#ifndef THGenerateManyTypes\n#undef TH_GENERIC_FILE\n\n#endif\n\n</code></pre>\n<p>The reason to use <code>num</code> rather than <code>real</code> is that in some math functions there could be both real values and complex values, like <code>abs</code> and <code>real</code> could be confusing and limits type conversions to only complex types. eg. copying a real tensor to complex tensor will need to check if the destination tensor is twice larger than the source tensor.</p>\n<p>So in previous generator files like <code>THGenerateDoubleTypes.h</code> a macro will also need to be defined</p>\n<pre><code>#define TH_NUM_IS_REAL\n#undef TH_NUM_IS_REAL\n</code></pre>\n<p>And like ztorch, I guess most functions in torch do not need to be changed. Only some functions like <code>THTensor_(copyAs)</code> may need to be tweaked.</p>\n<p>I'm not sure if there is anyone interested in extending this to complex, but since I need a complex tensor and I do not want to write real tensors again...</p>\n<p>Bests,<br>\nRoger</p>", "body_text": "I was trying to add complex number for TH, because I need a network with complex parameters for research and I found that the macro name real a little bit inconvenient, like in ztorch, it could be a little bit confusing in the source code. Maybe use num for real, Num for Real and NUM for REAL in the source would be more convenient, if complex number will be implemented in the future? (or some other words?)\nAnd files like THGenerateDoubleComplexTypes.h could look like\n#ifndef TH_GENERIC_FILE\n#error \"You must define TH_GENERIC_FILE before including THGenerateDoubleType.h\"\n#endif\n\n#define TH_NUM_IS_COMPLEX\n\n#define num double\n#define accnum double\n#define TH_CONVERT_NUM_TO_ACCNUM(_val) (accnum)(_val)\n#define TH_CONVERT_ACCNUM_TO_NUM(_val) (num)(_val)\n#define Num DoubleComplex\n#define TH_NUM_IS_DOUBLE_COMPLEX\n#line 1 TH_GENERIC_FILE\n#include TH_GENERIC_FILE\n#undef accnum\n#undef num\n#undef Num\n#undef TH_NUM_IS_DOUBLE_COMPLEX\n#undef TH_CONVERT_NUM_TO_ACCNUM\n#undef TH_CONVERT_ACCNUM_TO_NUM\n\n#define TH_NUM_IS_COMPLEX\n\n#ifndef THGenerateManyTypes\n#undef TH_GENERIC_FILE\n\n#endif\n\n\nThe reason to use num rather than real is that in some math functions there could be both real values and complex values, like abs and real could be confusing and limits type conversions to only complex types. eg. copying a real tensor to complex tensor will need to check if the destination tensor is twice larger than the source tensor.\nSo in previous generator files like THGenerateDoubleTypes.h a macro will also need to be defined\n#define TH_NUM_IS_REAL\n#undef TH_NUM_IS_REAL\n\nAnd like ztorch, I guess most functions in torch do not need to be changed. Only some functions like THTensor_(copyAs) may need to be tweaked.\nI'm not sure if there is anyone interested in extending this to complex, but since I need a complex tensor and I do not want to write real tensors again...\nBests,\nRoger", "body": "I was trying to add complex number for TH, because I need a network with complex parameters for research and I found that the macro name `real` a little bit inconvenient, like in ztorch, it could be a little bit confusing in the source code. Maybe use `num` for `real`, `Num` for `Real` and `NUM` for `REAL` in the source would be more convenient, if complex number will be implemented in the future? (or some other words?)\r\n\r\nAnd files like `THGenerateDoubleComplexTypes.h` could look like\r\n\r\n```\r\n#ifndef TH_GENERIC_FILE\r\n#error \"You must define TH_GENERIC_FILE before including THGenerateDoubleType.h\"\r\n#endif\r\n\r\n#define TH_NUM_IS_COMPLEX\r\n\r\n#define num double\r\n#define accnum double\r\n#define TH_CONVERT_NUM_TO_ACCNUM(_val) (accnum)(_val)\r\n#define TH_CONVERT_ACCNUM_TO_NUM(_val) (num)(_val)\r\n#define Num DoubleComplex\r\n#define TH_NUM_IS_DOUBLE_COMPLEX\r\n#line 1 TH_GENERIC_FILE\r\n#include TH_GENERIC_FILE\r\n#undef accnum\r\n#undef num\r\n#undef Num\r\n#undef TH_NUM_IS_DOUBLE_COMPLEX\r\n#undef TH_CONVERT_NUM_TO_ACCNUM\r\n#undef TH_CONVERT_ACCNUM_TO_NUM\r\n\r\n#define TH_NUM_IS_COMPLEX\r\n\r\n#ifndef THGenerateManyTypes\r\n#undef TH_GENERIC_FILE\r\n\r\n#endif\r\n\r\n```\r\n\r\nThe reason to use `num` rather than `real` is that in some math functions there could be both real values and complex values, like `abs` and `real` could be confusing and limits type conversions to only complex types. eg. copying a real tensor to complex tensor will need to check if the destination tensor is twice larger than the source tensor.\r\n\r\nSo in previous generator files like `THGenerateDoubleTypes.h` a macro will also need to be defined\r\n\r\n```\r\n#define TH_NUM_IS_REAL\r\n#undef TH_NUM_IS_REAL\r\n```\r\n\r\nAnd like ztorch, I guess most functions in torch do not need to be changed. Only some functions like `THTensor_(copyAs)` may need to be tweaked.\r\n\r\nI'm not sure if there is anyone interested in extending this to complex, but since I need a complex tensor and I do not want to write real tensors again...\r\n\r\nBests,\r\nRoger"}