{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228245386", "pull_request_review_id": 168474146, "id": 228245386, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODI0NTM4Ng==", "diff_hunk": "@@ -20,7 +20,7 @@ struct ExecutionPlanState {\n };\n \n struct GraphExecutorState {\n-  const Graph* graph;\n+  const Graph* graph = nullptr;", "path": "torch/csrc/jit/graph_executor.h", "position": 5, "original_position": 5, "commit_id": "dd57b53145750ca9e386f5df4c501eccbb934b14", "original_commit_id": "e98ffeefcc52879e175329b2157081476f209e21", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "But this is the same thing as adding such a constructor, just that it always applies (and doesn't apply if you construct it with another value in the constructor)? I really don't understand why you're so against this check. If I add another constructor and forget to initialize it to a non-garbage pointer and my program crashes sometime later because the pointer points to garbage, that's what you prefer over having it always be null? I really don't understand that at all. We're talking about \"always safe, maybe sometimes unnecessarily so\" vs. \"sometimes unsafe\". I don't understand how the former is not strictly preferred in a large codebase", "created_at": "2018-10-25T16:28:09Z", "updated_at": "2018-11-23T15:53:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/12959#discussion_r228245386", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12959", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/228245386"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12959#discussion_r228245386"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12959"}}, "body_html": "<p>But this is the same thing as adding such a constructor, just that it always applies (and doesn't apply if you construct it with another value in the constructor)? I really don't understand why you're so against this check. If I add another constructor and forget to initialize it to a non-garbage pointer and my program crashes sometime later because the pointer points to garbage, that's what you prefer over having it always be null? I really don't understand that at all. We're talking about \"always safe, maybe sometimes unnecessarily so\" vs. \"sometimes unsafe\". I don't understand how the former is not strictly preferred in a large codebase</p>", "body_text": "But this is the same thing as adding such a constructor, just that it always applies (and doesn't apply if you construct it with another value in the constructor)? I really don't understand why you're so against this check. If I add another constructor and forget to initialize it to a non-garbage pointer and my program crashes sometime later because the pointer points to garbage, that's what you prefer over having it always be null? I really don't understand that at all. We're talking about \"always safe, maybe sometimes unnecessarily so\" vs. \"sometimes unsafe\". I don't understand how the former is not strictly preferred in a large codebase", "in_reply_to_id": 228238716}