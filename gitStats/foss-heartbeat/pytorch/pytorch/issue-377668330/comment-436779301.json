{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436779301", "html_url": "https://github.com/pytorch/pytorch/issues/13605#issuecomment-436779301", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13605", "id": 436779301, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc3OTMwMQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-07T21:13:30Z", "updated_at": "2018-11-07T21:13:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It's not UB, although for a subtle reason.</p>\n<p><code>std::move</code> doesn't actually move anything; it simply makes a variable eligible to be moved from (e.g., so we can call <code>TensorImpl</code> with a <code>Storage&amp;&amp;</code> argument. Storage doesn't actually get moved out from until we start running the constructors for the field in Tensor, at which point <code>storage.dtype()</code> has already been evaluated.</p>", "body_text": "It's not UB, although for a subtle reason.\nstd::move doesn't actually move anything; it simply makes a variable eligible to be moved from (e.g., so we can call TensorImpl with a Storage&& argument. Storage doesn't actually get moved out from until we start running the constructors for the field in Tensor, at which point storage.dtype() has already been evaluated.", "body": "It's not UB, although for a subtle reason.\r\n\r\n`std::move` doesn't actually move anything; it simply makes a variable eligible to be moved from (e.g., so we can call `TensorImpl` with a `Storage&&` argument. Storage doesn't actually get moved out from until we start running the constructors for the field in Tensor, at which point `storage.dtype()` has already been evaluated."}