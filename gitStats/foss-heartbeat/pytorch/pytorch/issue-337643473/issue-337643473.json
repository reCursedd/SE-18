{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9110", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9110/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9110/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9110/events", "html_url": "https://github.com/pytorch/pytorch/issues/9110", "id": 337643473, "node_id": "MDU6SXNzdWUzMzc2NDM0NzM=", "number": 9110, "title": "[sparse] regressions after moving into ATen", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-07-02T19:58:22Z", "updated_at": "2018-07-03T20:12:11Z", "closed_at": "2018-07-03T20:12:11Z", "author_association": "CONTRIBUTOR", "body_html": "<ol>\n<li>\n<p>create cuda sparse tensor with cpu indices tensor<br>\nmaster:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.sparse.FloatTensor(torch.zeros(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>).long().cuda(), torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>), [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>])\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c1\">RuntimeError</span></pre></div>\n<p>0.4:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.sparse.FloatTensor(torch.zeros(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>).long().cuda(), torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>), [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>])\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c1\">RuntimeError</span>: Expected <span class=\"pl-c1\">object</span> of <span class=\"pl-c1\">type</span> torch.LongTensor but found <span class=\"pl-c1\">type</span> torch.cuda.LongTensor <span class=\"pl-k\">for</span> argument <span class=\"pl-c\"><span class=\"pl-c\">#</span>1 'indices'</span></pre></div>\n</li>\n<li>\n<p>add cuda sparse tensor to cpu dense tensor<br>\nmaster:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">=</span> torch.zeros(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sparse_y <span class=\"pl-k\">=</span> torch.cuda.sparse.FloatTensor(torch.zeros(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>).long().cuda(), torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>).cuda(), [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">+</span> sparse_y\n[<span class=\"pl-c1\">1</span>]    <span class=\"pl-c1\">2065657</span> segmentation fault (core dumped)  python <span class=\"pl-k\">-</span>i <span class=\"pl-k\">~</span><span class=\"pl-k\">/</span>env.py</pre></div>\n<p>0.4:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">+</span> sparse_y\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c1\">RuntimeError</span>: The size of tensor a (<span class=\"pl-c1\">3</span>) must match the size of tensor b (<span class=\"pl-c1\">4</span>) at non<span class=\"pl-k\">-</span>singleton dimension <span class=\"pl-c1\">1</span></pre></div>\n</li>\n<li>\n<p>dense + sparse with wrong number of dimdensions<br>\nmaster:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">=</span> torch.zeros(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sparse_y <span class=\"pl-k\">=</span> torch.cuda.sparse.FloatTensor(torch.zeros(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>).long().cuda(), torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>).cuda(), [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x.cuda()<span class=\"pl-k\">+</span>sparse_y\ntensor([[ <span class=\"pl-c1\">2.1478</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.7767</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.8796</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.2104</span>],\n        [ <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>],\n        [ <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>,  <span class=\"pl-c1\">0.0000</span>]], <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>0.4:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">=</span> torch.zeros(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sparse_y <span class=\"pl-k\">=</span> torch.cuda.sparse.FloatTensor(torch.zeros(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>).long().cuda(), torch.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>).cuda(), [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x.cuda() <span class=\"pl-k\">+</span> sparse_y\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c1\">RuntimeError</span>: The size of tensor a (<span class=\"pl-c1\">3</span>) must match the size of tensor b (<span class=\"pl-c1\">4</span>) at non<span class=\"pl-k\">-</span>singleton dimension <span class=\"pl-c1\">1</span></pre></div>\n</li>\n</ol>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></p>", "body_text": "create cuda sparse tensor with cpu indices tensor\nmaster:\n>>> torch.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4), [3,4,4])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError\n0.4:\n>>> torch.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4), [3,4,4])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: Expected object of type torch.LongTensor but found type torch.cuda.LongTensor for argument #1 'indices'\n\n\nadd cuda sparse tensor to cpu dense tensor\nmaster:\n>>> x = torch.zeros(3,4)\n>>> sparse_y = torch.cuda.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4).cuda(), [3,4,4])\n>>> x + sparse_y\n[1]    2065657 segmentation fault (core dumped)  python -i ~/env.py\n0.4:\n>>> x + sparse_y\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 1\n\n\ndense + sparse with wrong number of dimdensions\nmaster:\n>>> x = torch.zeros(3,4)\n>>> sparse_y = torch.cuda.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4).cuda(), [3,4,4])\n>>> x.cuda()+sparse_y\ntensor([[ 2.1478, -0.7767, -0.8796, -2.2104],\n        [ 0.0000,  0.0000,  0.0000,  0.0000],\n        [ 0.0000,  0.0000,  0.0000,  0.0000]], device='cuda:0')\n0.4:\n>>> x = torch.zeros(3,4)\n>>> sparse_y = torch.cuda.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4).cuda(), [3,4,4])\n>>> x.cuda() + sparse_y\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 1\n\n\ncc @ezyang", "body": "1. create cuda sparse tensor with cpu indices tensor\r\n\tmaster:\r\n\t```py\r\n\t>>> torch.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4), [3,4,4])\r\n\tTraceback (most recent call last):\r\n\t  File \"<stdin>\", line 1, in <module>\r\n\tRuntimeError\r\n\t```\r\n\t0.4:\r\n\t```py\r\n\t>>> torch.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4), [3,4,4])\r\n\tTraceback (most recent call last):\r\n\t  File \"<stdin>\", line 1, in <module>\r\n\tRuntimeError: Expected object of type torch.LongTensor but found type torch.cuda.LongTensor for argument #1 'indices'\r\n\t```\r\n\r\n2. add cuda sparse tensor to cpu dense tensor\r\n\tmaster:\r\n\t```py\r\n\t>>> x = torch.zeros(3,4)\r\n\t>>> sparse_y = torch.cuda.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4).cuda(), [3,4,4])\r\n\t>>> x + sparse_y\r\n\t[1]    2065657 segmentation fault (core dumped)  python -i ~/env.py\r\n\t```\r\n\t0.4:\r\n\t```py\r\n\t>>> x + sparse_y\r\n\tTraceback (most recent call last):\r\n\t  File \"<stdin>\", line 1, in <module>\r\n\tRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 1\r\n\t```\r\n\r\n3. dense + sparse with wrong number of dimdensions\r\n    master:\r\n    ```py\r\n    >>> x = torch.zeros(3,4)\r\n\t>>> sparse_y = torch.cuda.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4).cuda(), [3,4,4])\r\n\t>>> x.cuda()+sparse_y\r\n\ttensor([[ 2.1478, -0.7767, -0.8796, -2.2104],\r\n\t        [ 0.0000,  0.0000,  0.0000,  0.0000],\r\n\t        [ 0.0000,  0.0000,  0.0000,  0.0000]], device='cuda:0')\r\n    ```\r\n    0.4:\r\n    ```py\r\n\t>>> x = torch.zeros(3,4)\r\n\t>>> sparse_y = torch.cuda.sparse.FloatTensor(torch.zeros(1,4).long().cuda(), torch.randn(4,4,4).cuda(), [3,4,4])\r\n\t>>> x.cuda() + sparse_y\r\n\tTraceback (most recent call last):\r\n\t  File \"<stdin>\", line 1, in <module>\r\n\tRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 1\r\n    ```\r\n\r\ncc @ezyang "}