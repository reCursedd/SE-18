{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221434826", "pull_request_review_id": 160088072, "id": 221434826, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQzNDgyNg==", "diff_hunk": "@@ -1961,6 +1961,38 @@ Tensor log1p_backward(const Tensor& grad, const Tensor& self) {\n   return grad / (self + 1);\n }\n \n+Tensor constant_pad_nd_backward(const Tensor& grad, const Tensor& self, IntList pad) {\n+    auto l_inp = self.dim();\n+    auto l_pad = pad.size() / 2;\n+    auto l_diff = l_inp - l_pad;\n+\n+    auto grad_input = Variable(at::zeros(self.sizes(), grad.options()));\n+\n+    auto cg_input = grad_input;\n+    for (int i = l_diff; i < l_inp; i++) {\n+        auto pad_idx = pad.size() - (i - l_diff + 1) * 2;\n+        if (pad[pad_idx] < 0) {\n+            cg_input = cg_input.narrow(i, -pad[pad_idx], cg_input.size(i) + pad[pad_idx]);\n+        }\n+        if (pad[pad_idx + 1] < 0) {\n+            cg_input = cg_input.narrow(i, 0, cg_input.size(i) + pad[pad_idx + 1]);\n+        }\n+    }\n+\n+    auto cg_output = grad;\n+    for (int i = l_diff; i < l_inp; i++) {\n+        auto pad_idx = pad.size() - (i - l_diff + 1) * 2;\n+        if (pad[pad_idx] > 0) {\n+            cg_output = cg_output.narrow(i, pad[pad_idx], cg_output.size(i) - pad[pad_idx]);\n+        }\n+        if (pad[pad_idx + 1] > 0) {\n+            cg_output = cg_output.narrow(i, 0, cg_output.size(i) - pad[pad_idx + 1]);\n+        }\n+    }\n+    cg_input.copy_(cg_output);", "path": "tools/autograd/templates/Functions.cpp", "position": null, "original_position": 32, "commit_id": "f2109c4136c379834d616724b6373791fabc8cee", "original_commit_id": "23d2ab92816a7804c81fc001ea586312aea11b92", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Ah I see. Thanks for the explanation. Yes, it would be great if we can have some logic to detect if only positive padding amounts exist. It would save creating a new tensor and copying.\r\n\r\nActually, here is a proposal:\r\nthe backward of `pad(input, pads)` is just `pad(grad_output, [-p for p in pads])`. So we can also specialize all negative paddings in **forward** mode and just write the backward entry as a three-liner:\r\n```cpp\r\n#include <algorithm>\r\n#include <functional>\r\n.....\r\n{\r\n  auto negated_pad = pad.vec();\r\n  std::transform(negated_pad.cbegin(), negated_pad.cend(), Mynegated_padec.begin(), std::negate<int64_t>());\r\n  return constant_pad_nd_backward(grad, negated_pad);\r\n}\r\n```\r\nYou can avoid saving `self` too :) \r\n\r\n", "created_at": "2018-09-29T17:34:11Z", "updated_at": "2018-11-23T15:52:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/10885#discussion_r221434826", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221434826"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10885#discussion_r221434826"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10885"}}, "body_html": "<p>Ah I see. Thanks for the explanation. Yes, it would be great if we can have some logic to detect if only positive padding amounts exist. It would save creating a new tensor and copying.</p>\n<p>Actually, here is a proposal:<br>\nthe backward of <code>pad(input, pads)</code> is just <code>pad(grad_output, [-p for p in pads])</code>. So we can also specialize all negative paddings in <strong>forward</strong> mode and just write the backward entry as a three-liner:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>algorithm<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>functional<span class=\"pl-pds\">&gt;</span></span>\n.....\n{\n  <span class=\"pl-k\">auto</span> negated_pad = pad.<span class=\"pl-c1\">vec</span>();\n  <span class=\"pl-c1\">std::transform</span>(negated_pad.<span class=\"pl-c1\">cbegin</span>(), negated_pad.<span class=\"pl-c1\">cend</span>(), Mynegated_padec.<span class=\"pl-c1\">begin</span>(), std::negate&lt;<span class=\"pl-c1\">int64_t</span>&gt;());\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">constant_pad_nd_backward</span>(grad, negated_pad);\n}</pre></div>\n<p>You can avoid saving <code>self</code> too :)</p>", "body_text": "Ah I see. Thanks for the explanation. Yes, it would be great if we can have some logic to detect if only positive padding amounts exist. It would save creating a new tensor and copying.\nActually, here is a proposal:\nthe backward of pad(input, pads) is just pad(grad_output, [-p for p in pads]). So we can also specialize all negative paddings in forward mode and just write the backward entry as a three-liner:\n#include <algorithm>\n#include <functional>\n.....\n{\n  auto negated_pad = pad.vec();\n  std::transform(negated_pad.cbegin(), negated_pad.cend(), Mynegated_padec.begin(), std::negate<int64_t>());\n  return constant_pad_nd_backward(grad, negated_pad);\n}\nYou can avoid saving self too :)", "in_reply_to_id": 215023684}