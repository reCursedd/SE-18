{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221284713", "pull_request_review_id": 159900680, "id": 221284713, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTI4NDcxMw==", "diff_hunk": "@@ -0,0 +1,61 @@\n+#include \"ATen/ATen.h\"\n+\n+namespace at { namespace native {\n+\n+Tensor constant_pad_nd(const Tensor& self, IntList pad, Scalar value) {\n+    AT_CHECK(pad.size() % 2 == 0, \"Length of pad must be even but instead it equals \",\n+             pad.size());\n+\n+    auto input_sizes = self.sizes();\n+    auto l_inp = self.dim();\n+\n+    auto l_pad = pad.size() / 2;\n+    auto l_diff = l_inp - l_pad;\n+    AT_CHECK(l_inp >= l_pad, \"Length of pad should be no more than twice the number of \"\n+             \"dimensions of the input. Pad length is \", pad.size(), \"while the input has \",\n+             l_inp, \"dimensions.\");\n+\n+    std::vector<int64_t> new_shape;\n+\n+    for (int i = 0; i < l_diff; i ++) {\n+        new_shape.emplace_back(input_sizes[i]);\n+    }\n+\n+    for (int i = 0; i < l_pad; i++) {\n+        auto pad_idx = pad.size() - ((i + 1) * 2);\n+        auto new_dim = input_sizes[l_diff + i] + pad[pad_idx] + pad[pad_idx + 1];\n+        AT_CHECK(new_dim > 0, \"The input size \", input_sizes[l_diff + i], \", plus negative padding \",\n+                 pad[pad_idx], \" and \", pad[pad_idx + 1], \"resulted in a negative output size, \"\n+                 \"which is invalid. Check dimension \", l_diff + i, \"of your input.\");\n+        new_shape.emplace_back(new_dim);\n+    }\n+\n+    auto output = at::empty(new_shape, self.options());\n+    output.fill_(value);\n+\n+    auto c_input = self;\n+    for (int i = l_diff; i < l_inp; i++) {\n+        auto pad_idx = pad.size() - (i - l_diff + 1) * 2;\n+        if (pad[pad_idx] < 0) {\n+            c_input = c_input.narrow(i, -pad[pad_idx], c_input.size(i) + pad[pad_idx]);\n+        }\n+        if (pad[pad_idx + 1] < 0) {\n+            c_input = c_input.narrow(i, 0, c_input.size(i) + pad[pad_idx + 1]);\n+        }\n+    }\n+\n+    auto c_output = output;\n+    for (int i = l_diff; i < l_inp; i++) {\n+        auto pad_idx = pad.size() - (i - l_diff + 1) * 2;\n+        if (pad[pad_idx] > 0) {\n+            c_output = c_output.narrow(i, pad[pad_idx], c_output.size(i) - pad[pad_idx]);\n+        }\n+        if (pad[pad_idx + 1] > 0) {\n+            c_output = c_output.narrow(i, 0, c_output.size(i) - pad[pad_idx + 1]);\n+        }\n+    }\n+    c_output.copy_(c_input);\n+    return output;\n+}\n+\n+}}  // namespace at::native", "path": "aten/src/ATen/native/ConstantPadNd.cpp", "position": null, "original_position": 61, "commit_id": "f2109c4136c379834d616724b6373791fabc8cee", "original_commit_id": "e82a9b3138a7ebea3d9edd2710096f642908670d", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "Newline missing at EOF", "created_at": "2018-09-28T15:04:18Z", "updated_at": "2018-11-23T15:52:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/10885#discussion_r221284713", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221284713"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10885#discussion_r221284713"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10885"}}, "body_html": "<p>Newline missing at EOF</p>", "body_text": "Newline missing at EOF"}