{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218656662", "pull_request_review_id": 156643471, "id": 218656662, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODY1NjY2Mg==", "diff_hunk": "@@ -1961,6 +1961,38 @@ Tensor log1p_backward(const Tensor& grad, const Tensor& self) {\n   return grad / (self + 1);\n }\n \n+Tensor constant_pad_nd_backward(const Tensor& grad, const Tensor& self, IntList pad) {\n+    auto l_inp = self.dim();\n+    auto l_pad = pad.size() / 2;\n+    auto l_diff = l_inp - l_pad;\n+\n+    auto grad_input = Variable(at::zeros(self.sizes(), grad.options()));\n+\n+    auto cg_input = grad_input;\n+    for (int i = l_diff; i < l_inp; i++) {\n+        auto pad_idx = pad.size() - (i - l_diff + 1) * 2;\n+        if (pad[pad_idx] < 0) {\n+            cg_input = cg_input.narrow(i, -pad[pad_idx], cg_input.size(i) + pad[pad_idx]);\n+        }\n+        if (pad[pad_idx + 1] < 0) {\n+            cg_input = cg_input.narrow(i, 0, cg_input.size(i) + pad[pad_idx + 1]);\n+        }\n+    }\n+\n+    auto cg_output = grad;\n+    for (int i = l_diff; i < l_inp; i++) {\n+        auto pad_idx = pad.size() - (i - l_diff + 1) * 2;\n+        if (pad[pad_idx] > 0) {\n+            cg_output = cg_output.narrow(i, pad[pad_idx], cg_output.size(i) - pad[pad_idx]);\n+        }\n+        if (pad[pad_idx + 1] > 0) {\n+            cg_output = cg_output.narrow(i, 0, cg_output.size(i) - pad[pad_idx + 1]);\n+        }\n+    }\n+    cg_input.copy_(cg_output);", "path": "tools/autograd/templates/Functions.cpp", "position": null, "original_position": 32, "commit_id": "f2109c4136c379834d616724b6373791fabc8cee", "original_commit_id": "23d2ab92816a7804c81fc001ea586312aea11b92", "user": {"login": "wdhorton", "id": 13503072, "node_id": "MDQ6VXNlcjEzNTAzMDcy", "avatar_url": "https://avatars1.githubusercontent.com/u/13503072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdhorton", "html_url": "https://github.com/wdhorton", "followers_url": "https://api.github.com/users/wdhorton/followers", "following_url": "https://api.github.com/users/wdhorton/following{/other_user}", "gists_url": "https://api.github.com/users/wdhorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdhorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdhorton/subscriptions", "organizations_url": "https://api.github.com/users/wdhorton/orgs", "repos_url": "https://api.github.com/users/wdhorton/repos", "events_url": "https://api.github.com/users/wdhorton/events{/privacy}", "received_events_url": "https://api.github.com/users/wdhorton/received_events", "type": "User", "site_admin": false}, "body": "Thinking about it more, we could have some logic conditional on whether there are only positive pads to avoid the `copy_`, and that would be an improvement for that case (which is probably more common anyway)", "created_at": "2018-09-19T03:15:52Z", "updated_at": "2018-11-23T15:51:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/10885#discussion_r218656662", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218656662"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10885#discussion_r218656662"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10885"}}, "body_html": "<p>Thinking about it more, we could have some logic conditional on whether there are only positive pads to avoid the <code>copy_</code>, and that would be an improvement for that case (which is probably more common anyway)</p>", "body_text": "Thinking about it more, we could have some logic conditional on whether there are only positive pads to avoid the copy_, and that would be an improvement for that case (which is probably more common anyway)", "in_reply_to_id": 215023684}