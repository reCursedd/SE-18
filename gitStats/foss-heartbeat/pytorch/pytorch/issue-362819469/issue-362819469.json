{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11964", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11964/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11964/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11964/events", "html_url": "https://github.com/pytorch/pytorch/issues/11964", "id": 362819469, "node_id": "MDU6SXNzdWUzNjI4MTk0Njk=", "number": 11964, "title": "`RuntimeError: undefined Tensor` when calling loss.backward() with cuda on OSX 10.13.6", "user": {"login": "zkaden", "id": 14689160, "node_id": "MDQ6VXNlcjE0Njg5MTYw", "avatar_url": "https://avatars0.githubusercontent.com/u/14689160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkaden", "html_url": "https://github.com/zkaden", "followers_url": "https://api.github.com/users/zkaden/followers", "following_url": "https://api.github.com/users/zkaden/following{/other_user}", "gists_url": "https://api.github.com/users/zkaden/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkaden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkaden/subscriptions", "organizations_url": "https://api.github.com/users/zkaden/orgs", "repos_url": "https://api.github.com/users/zkaden/repos", "events_url": "https://api.github.com/users/zkaden/events{/privacy}", "received_events_url": "https://api.github.com/users/zkaden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-22T02:33:57Z", "updated_at": "2018-09-22T04:46:43Z", "closed_at": "2018-09-22T04:46:43Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p><code>RuntimeError: undefined Tensor</code> when calling <code>loss.backward()</code> with CUDA on OSX 10.13.6. The code runs successfully on cpu on OSX and also runs successfully on linux with CUDA. CUDA version is 9.2 and cuDNN version is 7.2</p>\n<p>The traceback is:</p>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile \"main.py\", line 129, in <br>\naction_mode=args.action_mode)<br>\nFile \"main.py\", line 17, in main<br>\naction_mode=action_mode)<br>\nFile \"/path/to/file/learner_lstm.py\", line 32, in train<br>\nloss.backward()<br>\nFile \"/Users/Zack/Envs/gpu/lib/python3.6/site-packages/torch/tensor.py\", line 96, in backward<br>\ntorch.autograd.backward(self, gradient, retain_graph, create_graph)<br>\nFile \"/Users/Zack/Envs/gpu/lib/python3.6/site-packages/torch/autograd/<strong>init</strong>.py\", line 90, in backward<br>\nallow_unreachable=True)  # allow_unreachable flag<br>\nRuntimeError: undefined Tensor</p>\n</blockquote>\n<h2>Code example</h2>\n<p><code>import torch</code><br>\n<code>import torch.nn as nn</code><br>\n<code>from torch import optim</code></p>\n<p><code>class LSTM(nn.Module):</code><br>\n\u00a0\u00a0\u00a0\u00a0<code>def __init__(self, embed_dim=10):</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>super(LSTM, self).__init__()</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.embed_dim = embed_dim</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.lstm = nn.LSTMCell(1, self.embed_dim)</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>if torch.cuda.is_available():</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.cuda()</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.dtype = torch.cuda.FloatTensor</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>else:</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.dtype = torch.FloatTensor</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.init_memory()</code></p>\n<p>\u00a0\u00a0\u00a0\u00a0<code>def init_memory(self):</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.init_hidden()</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.init_cell()</code></p>\n<p>\u00a0\u00a0\u00a0\u00a0<code>def init_hidden(self):</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.hidden = torch.zeros(1, self.embed_dim).type(self.dtype)</code></p>\n<p>\u00a0\u00a0\u00a0\u00a0<code>def init_cell(self):</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.cell = torch.zeros(1, self.embed_dim).type(self.dtype)</code></p>\n<p>\u00a0\u00a0\u00a0\u00a0<code>def forward(self, movie_rating):</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>self.hidden, self.cell = self.lstm(</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>movie_rating, (self.hidden, self.cell)</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>)</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>return self.hidden, self.cell</code></p>\n<p><code>model = LSTM()</code><br>\n<code>loss_function = nn.MSELoss()</code><br>\n<code>optimizer = optim.Adam(model.parameters())</code></p>\n<p><code>for i in range(1000000):</code><br>\n\u00a0\u00a0\u00a0\u00a0<code>for j in range(6):</code><br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>hidden, cell = model.forward(torch.Tensor([[3]]).type(model.dtype))</code><br>\n\u00a0\u00a0\u00a0\u00a0<code>loss = loss_function(cell, torch.Tensor([[0,1,2,3,4,5,6,7,8,9]]).type(model.dtype))</code><br>\n\u00a0\u00a0\u00a0\u00a0<code>loss.backward()</code><br>\n\u00a0\u00a0\u00a0\u00a0<code>self.optimizer.step()</code></p>\n<h2>System Info</h2>\n<p>PyTorch version: 0.5.0a0+802380a<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.2</p>\n<p>OS: Mac OSX 10.13.6<br>\nGCC version: Could not collect<br>\nCMake version: version 3.12.0</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.2.148<br>\nGPU models and configuration: Could not collect<br>\nNvidia driver version: Could not collect<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/cuda/lib/libcudnn.7.dylib<br>\n/usr/local/cuda/lib/libcudnn.dylib<br>\n/usr/local/cuda/lib/libcudnn_static.a<br>\n-- cuDNN</p>\n<p>Versions of relevant libraries:<br>\n[pip] Could not collect<br>\n[conda] Could not collect</p>", "body_text": "Issue description\nRuntimeError: undefined Tensor when calling loss.backward() with CUDA on OSX 10.13.6. The code runs successfully on cpu on OSX and also runs successfully on linux with CUDA. CUDA version is 9.2 and cuDNN version is 7.2\nThe traceback is:\n\nTraceback (most recent call last):\nFile \"main.py\", line 129, in \naction_mode=args.action_mode)\nFile \"main.py\", line 17, in main\naction_mode=action_mode)\nFile \"/path/to/file/learner_lstm.py\", line 32, in train\nloss.backward()\nFile \"/Users/Zack/Envs/gpu/lib/python3.6/site-packages/torch/tensor.py\", line 96, in backward\ntorch.autograd.backward(self, gradient, retain_graph, create_graph)\nFile \"/Users/Zack/Envs/gpu/lib/python3.6/site-packages/torch/autograd/init.py\", line 90, in backward\nallow_unreachable=True)  # allow_unreachable flag\nRuntimeError: undefined Tensor\n\nCode example\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nclass LSTM(nn.Module):\n\u00a0\u00a0\u00a0\u00a0def __init__(self, embed_dim=10):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(LSTM, self).__init__()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.embed_dim = embed_dim\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.lstm = nn.LSTMCell(1, self.embed_dim)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if torch.cuda.is_available():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cuda()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.dtype = torch.cuda.FloatTensor\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.dtype = torch.FloatTensor\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.init_memory()\n\u00a0\u00a0\u00a0\u00a0def init_memory(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.init_hidden()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.init_cell()\n\u00a0\u00a0\u00a0\u00a0def init_hidden(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.hidden = torch.zeros(1, self.embed_dim).type(self.dtype)\n\u00a0\u00a0\u00a0\u00a0def init_cell(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cell = torch.zeros(1, self.embed_dim).type(self.dtype)\n\u00a0\u00a0\u00a0\u00a0def forward(self, movie_rating):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.hidden, self.cell = self.lstm(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0movie_rating, (self.hidden, self.cell)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.hidden, self.cell\nmodel = LSTM()\nloss_function = nn.MSELoss()\noptimizer = optim.Adam(model.parameters())\nfor i in range(1000000):\n\u00a0\u00a0\u00a0\u00a0for j in range(6):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hidden, cell = model.forward(torch.Tensor([[3]]).type(model.dtype))\n\u00a0\u00a0\u00a0\u00a0loss = loss_function(cell, torch.Tensor([[0,1,2,3,4,5,6,7,8,9]]).type(model.dtype))\n\u00a0\u00a0\u00a0\u00a0loss.backward()\n\u00a0\u00a0\u00a0\u00a0self.optimizer.step()\nSystem Info\nPyTorch version: 0.5.0a0+802380a\nIs debug build: No\nCUDA used to build PyTorch: 9.2\nOS: Mac OSX 10.13.6\nGCC version: Could not collect\nCMake version: version 3.12.0\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.2.148\nGPU models and configuration: Could not collect\nNvidia driver version: Could not collect\ncuDNN version: Probably one of the following:\n/usr/local/cuda/lib/libcudnn.7.dylib\n/usr/local/cuda/lib/libcudnn.dylib\n/usr/local/cuda/lib/libcudnn_static.a\n-- cuDNN\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] Could not collect", "body": "## Issue description\r\n\r\n`RuntimeError: undefined Tensor` when calling `loss.backward()` with CUDA on OSX 10.13.6. The code runs successfully on cpu on OSX and also runs successfully on linux with CUDA. CUDA version is 9.2 and cuDNN version is 7.2\r\n\r\nThe traceback is:\r\n\r\n> Traceback (most recent call last):\r\n>   File \"main.py\", line 129, in <module>\r\n>     action_mode=args.action_mode)\r\n>   File \"main.py\", line 17, in main\r\n>     action_mode=action_mode)\r\n>   File \"/path/to/file/learner_lstm.py\", line 32, in train\r\n>     loss.backward()\r\n>   File \"/Users/Zack/Envs/gpu/lib/python3.6/site-packages/torch/tensor.py\", line 96, in backward\r\n>     torch.autograd.backward(self, gradient, retain_graph, create_graph)\r\n>   File \"/Users/Zack/Envs/gpu/lib/python3.6/site-packages/torch/autograd/__init__.py\", line 90, in backward\r\n>     allow_unreachable=True)  # allow_unreachable flag\r\n> RuntimeError: undefined Tensor\r\n> \r\n\r\n## Code example\r\n\r\n`import torch`\r\n`import torch.nn as nn`\r\n`from torch import optim`\r\n\r\n\r\n\r\n`class LSTM(nn.Module):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;`def __init__(self, embed_dim=10):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`super(LSTM, self).__init__()`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.embed_dim = embed_dim`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.lstm = nn.LSTMCell(1, self.embed_dim)`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`if torch.cuda.is_available():`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.cuda()`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.dtype = torch.cuda.FloatTensor`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`else:`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.dtype = torch.FloatTensor`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.init_memory()`\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;`def init_memory(self):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.init_hidden()`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.init_cell()`\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;`def init_hidden(self):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.hidden = torch.zeros(1, self.embed_dim).type(self.dtype)`\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;`def init_cell(self):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.cell = torch.zeros(1, self.embed_dim).type(self.dtype)`\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;`def forward(self, movie_rating):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`self.hidden, self.cell = self.lstm(`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`movie_rating, (self.hidden, self.cell)`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`)`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`return self.hidden, self.cell`\r\n\r\n\r\n\r\n`model = LSTM()`\r\n`loss_function = nn.MSELoss()`\r\n`optimizer = optim.Adam(model.parameters())`\r\n\r\n`for i in range(1000000):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;`for j in range(6):`\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`hidden, cell = model.forward(torch.Tensor([[3]]).type(model.dtype))`\r\n&nbsp;&nbsp;&nbsp;&nbsp;`loss = loss_function(cell, torch.Tensor([[0,1,2,3,4,5,6,7,8,9]]).type(model.dtype))`\r\n&nbsp;&nbsp;&nbsp;&nbsp;`loss.backward()`\r\n&nbsp;&nbsp;&nbsp;&nbsp;`self.optimizer.step()`\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.5.0a0+802380a\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.2\r\n\r\nOS: Mac OSX 10.13.6\r\nGCC version: Could not collect\r\nCMake version: version 3.12.0\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.2.148\r\nGPU models and configuration: Could not collect\r\nNvidia driver version: Could not collect\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda/lib/libcudnn.7.dylib\r\n/usr/local/cuda/lib/libcudnn.dylib\r\n/usr/local/cuda/lib/libcudnn_static.a\r\n -- cuDNN\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] Could not collect\r\n"}