{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/397475728", "html_url": "https://github.com/pytorch/pytorch/issues/8499#issuecomment-397475728", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8499", "id": 397475728, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQ3NTcyOA==", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-15T00:15:19Z", "updated_at": "2018-06-15T18:06:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A few options for mitigations here:</p>\n<ol>\n<li>Implement autodiff formulae for these ops (painful). Need to implement the broadcasting semantics explicitly.</li>\n<li>Extend the addmm fission/fusion scheme for these ops as well. This will make use of the existing broadcasting machinery for <code>add</code> etc. The drawback here is that we will still not support differentiating these ops with coefficients, which represents a good chunk of these test failures. Also fusion might be harder for something like addbmm, where there's three ops (bmm + reduce + add)</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a>  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>  any other options you can think of?</p>", "body_text": "A few options for mitigations here:\n\nImplement autodiff formulae for these ops (painful). Need to implement the broadcasting semantics explicitly.\nExtend the addmm fission/fusion scheme for these ops as well. This will make use of the existing broadcasting machinery for add etc. The drawback here is that we will still not support differentiating these ops with coefficients, which represents a good chunk of these test failures. Also fusion might be harder for something like addbmm, where there's three ops (bmm + reduce + add)\n\n@zdevito  @apaszke  any other options you can think of?", "body": "A few options for mitigations here:\r\n\r\n1. Implement autodiff formulae for these ops (painful). Need to implement the broadcasting semantics explicitly.\r\n2. Extend the addmm fission/fusion scheme for these ops as well. This will make use of the existing broadcasting machinery for `add` etc. The drawback here is that we will still not support differentiating these ops with coefficients, which represents a good chunk of these test failures. Also fusion might be harder for something like addbmm, where there's three ops (bmm + reduce + add)\r\n\r\n@zdevito  @apaszke  any other options you can think of?"}