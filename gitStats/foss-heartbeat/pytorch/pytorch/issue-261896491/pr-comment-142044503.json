{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/142044503", "pull_request_review_id": 66350742, "id": 142044503, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjA0NDUwMw==", "diff_hunk": "@@ -284,4 +277,28 @@ class GraphProto : public MicroProto<onnx_GraphProto> {\n   }\n };\n \n+class ModelProto : public MicroProto<onnx_ModelProto> {\n+private:\n+  std::string producer_name;\n+  std::string producer_version;\n+  std::string domain;\n+  std::string doc_string;\n+  // graph is a static field in nanopb struct.\n+  GraphProto graph;\n+public:\n+  ModelProto() : MicroProto(onnx_ModelProto_init_default) {\n+    proto.has_ir_version = true;\n+    proto.ir_version = onnx_Version_IR_VERSION;\n+    proto.producer_name = string(&producer_name, \"pytorch\");\n+    // TODO: stop hard-coding this\n+    proto.producer_version = string(&producer_version, \"0.2\");\n+    proto.domain = string(&domain, \"com.facebook\");\n+  }\n+  void set_model_version(int64_t i) { proto.has_model_version = true; proto.model_version = i; }\n+  void set_doc_string(const std::string& s) { proto.doc_string = string(&doc_string, s); }\n+  GraphProto* mutable_graph() { return &graph; }\n+  // set_graph should be called after encoding graph.\n+  void set_graph() { proto.has_graph = true; proto.graph = graph.proto; }", "path": "torch/csrc/onnx/onnx.h", "position": null, "original_position": 54, "commit_id": "2d06d820be6425a7d34fd5522aa0132abd5ebf8a", "original_commit_id": "e9d2b22ca6f2f934ca74363a6eb87b47c0e2a770", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "And then this goes away, and we get an exact API compatibility with the Google Protobuf C++ interface :)", "created_at": "2017-10-01T23:46:23Z", "updated_at": "2018-11-23T15:34:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/2922#discussion_r142044503", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2922", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/142044503"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2922#discussion_r142044503"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2922"}}, "body_html": "<p>And then this goes away, and we get an exact API compatibility with the Google Protobuf C++ interface :)</p>", "body_text": "And then this goes away, and we get an exact API compatibility with the Google Protobuf C++ interface :)"}