{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14326", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14326/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14326/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14326/events", "html_url": "https://github.com/pytorch/pytorch/issues/14326", "id": 383659369, "node_id": "MDU6SXNzdWUzODM2NTkzNjk=", "number": 14326, "title": "[Caffe2] Caffe2 strips protobuf symbols", "user": {"login": "h6197627", "id": 44726212, "node_id": "MDQ6VXNlcjQ0NzI2MjEy", "avatar_url": "https://avatars1.githubusercontent.com/u/44726212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h6197627", "html_url": "https://github.com/h6197627", "followers_url": "https://api.github.com/users/h6197627/followers", "following_url": "https://api.github.com/users/h6197627/following{/other_user}", "gists_url": "https://api.github.com/users/h6197627/gists{/gist_id}", "starred_url": "https://api.github.com/users/h6197627/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h6197627/subscriptions", "organizations_url": "https://api.github.com/users/h6197627/orgs", "repos_url": "https://api.github.com/users/h6197627/repos", "events_url": "https://api.github.com/users/h6197627/events{/privacy}", "received_events_url": "https://api.github.com/users/h6197627/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-22T21:35:31Z", "updated_at": "2018-11-22T21:36:23Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p>Built Caffe2 shared library hides protobuf symbols and simple method invocation of the generated caffe2::NetDef object in user code requires additional protobuf linking.</p>\n<h2>To Reproduce</h2>\n<p>Steps to reproduce the behavior:</p>\n<p>Try to compile simple c++ code that tries to add external input to NetDef:</p>\n<pre><code>#include &lt;caffe2/core/workspace.h&gt;\n\nint main(int argc, char** argv)\n{\n\tcaffe2::NetDef nd;\n\tnd.add_external_input(\"input\");\n\treturn 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>make all \nBuilding target: caffe2_protobuf_test\nInvoking: GCC C++ Linker\ng++ -L\"/home/user/PyTorch/caffe2_builds/release/install/lib\" -o \"caffe2_protobuf_test\"  ./src/caffe2_protobuf_test.o -lcaffe2\n./src/caffe2_protobuf_test.o: In function `main':\ncaffe2_protobuf_test.cpp:(.text.startup+0xa4): undefined reference to `google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(unsigned long, void (*)(void*))'\ncaffe2_protobuf_test.cpp:(.text.startup+0x126): undefined reference to `google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int)'\nmakefile:48: recipe for target 'caffe2_protobuf_test' failed\ncaffe2_protobuf_test.cpp:(.text.startup+0x154): undefined reference to `google::protobuf::Arena::OnArenaAllocation(std::type_info const*, unsigned long) const'\ncollect2: error: ld returned 1 exit status\nmake: *** [caffe2_protobuf_test] Error 1\n</code></pre>\n<p>Adding additional -lprotobuf flag to linker solves the problem.<br>\nBy commenting out <strong>//nd.add_external_input(\"input\");</strong> line compilation succeeds without adding additional protobuf library.</p>\n<h2>Expected behavior</h2>\n<p>I think method invocation of Caffe2 generated protobuf object should not require additional linking, as protobuf already linked into caffe2 shared library during compilation process.</p>\n<h2>Environment</h2>\n<ul>\n<li>PyTorch Version (e.g., 1.0): master</li>\n<li>OS (e.g., Linux): Ubuntu</li>\n<li>How you installed PyTorch (<code>conda</code>, <code>pip</code>, source): source</li>\n<li>Build command you used (if compiling from source): default cmake configuration without changing any flags.</li>\n</ul>", "body_text": "\ud83d\udc1b Bug\nBuilt Caffe2 shared library hides protobuf symbols and simple method invocation of the generated caffe2::NetDef object in user code requires additional protobuf linking.\nTo Reproduce\nSteps to reproduce the behavior:\nTry to compile simple c++ code that tries to add external input to NetDef:\n#include <caffe2/core/workspace.h>\n\nint main(int argc, char** argv)\n{\n\tcaffe2::NetDef nd;\n\tnd.add_external_input(\"input\");\n\treturn 0;\n}\n\nOutput:\nmake all \nBuilding target: caffe2_protobuf_test\nInvoking: GCC C++ Linker\ng++ -L\"/home/user/PyTorch/caffe2_builds/release/install/lib\" -o \"caffe2_protobuf_test\"  ./src/caffe2_protobuf_test.o -lcaffe2\n./src/caffe2_protobuf_test.o: In function `main':\ncaffe2_protobuf_test.cpp:(.text.startup+0xa4): undefined reference to `google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(unsigned long, void (*)(void*))'\ncaffe2_protobuf_test.cpp:(.text.startup+0x126): undefined reference to `google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int)'\nmakefile:48: recipe for target 'caffe2_protobuf_test' failed\ncaffe2_protobuf_test.cpp:(.text.startup+0x154): undefined reference to `google::protobuf::Arena::OnArenaAllocation(std::type_info const*, unsigned long) const'\ncollect2: error: ld returned 1 exit status\nmake: *** [caffe2_protobuf_test] Error 1\n\nAdding additional -lprotobuf flag to linker solves the problem.\nBy commenting out //nd.add_external_input(\"input\"); line compilation succeeds without adding additional protobuf library.\nExpected behavior\nI think method invocation of Caffe2 generated protobuf object should not require additional linking, as protobuf already linked into caffe2 shared library during compilation process.\nEnvironment\n\nPyTorch Version (e.g., 1.0): master\nOS (e.g., Linux): Ubuntu\nHow you installed PyTorch (conda, pip, source): source\nBuild command you used (if compiling from source): default cmake configuration without changing any flags.", "body": "## \ud83d\udc1b Bug\r\n\r\nBuilt Caffe2 shared library hides protobuf symbols and simple method invocation of the generated caffe2::NetDef object in user code requires additional protobuf linking.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\nTry to compile simple c++ code that tries to add external input to NetDef:\r\n```\r\n#include <caffe2/core/workspace.h>\r\n\r\nint main(int argc, char** argv)\r\n{\r\n\tcaffe2::NetDef nd;\r\n\tnd.add_external_input(\"input\");\r\n\treturn 0;\r\n}\r\n```\r\nOutput:\r\n```\r\nmake all \r\nBuilding target: caffe2_protobuf_test\r\nInvoking: GCC C++ Linker\r\ng++ -L\"/home/user/PyTorch/caffe2_builds/release/install/lib\" -o \"caffe2_protobuf_test\"  ./src/caffe2_protobuf_test.o -lcaffe2\r\n./src/caffe2_protobuf_test.o: In function `main':\r\ncaffe2_protobuf_test.cpp:(.text.startup+0xa4): undefined reference to `google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(unsigned long, void (*)(void*))'\r\ncaffe2_protobuf_test.cpp:(.text.startup+0x126): undefined reference to `google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int)'\r\nmakefile:48: recipe for target 'caffe2_protobuf_test' failed\r\ncaffe2_protobuf_test.cpp:(.text.startup+0x154): undefined reference to `google::protobuf::Arena::OnArenaAllocation(std::type_info const*, unsigned long) const'\r\ncollect2: error: ld returned 1 exit status\r\nmake: *** [caffe2_protobuf_test] Error 1\r\n```\r\n\r\nAdding additional -lprotobuf flag to linker solves the problem.\r\nBy commenting out **//nd.add_external_input(\"input\");** line compilation succeeds without adding additional protobuf library.\r\n\r\n## Expected behavior\r\n\r\nI think method invocation of Caffe2 generated protobuf object should not require additional linking, as protobuf already linked into caffe2 shared library during compilation process. \r\n\r\n## Environment\r\n\r\n - PyTorch Version (e.g., 1.0): master\r\n - OS (e.g., Linux): Ubuntu\r\n - How you installed PyTorch (`conda`, `pip`, source): source\r\n - Build command you used (if compiling from source): default cmake configuration without changing any flags.\r\n"}