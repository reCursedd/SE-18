{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162830561", "pull_request_review_id": 90349920, "id": 162830561, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgzMDU2MQ==", "diff_hunk": "@@ -0,0 +1,84 @@\n+import torch\r\n+from torch.distributions import constraints\r\n+from torch.distributions.transforms import Transform\r\n+from torch.distributions.distribution import Distribution\r\n+\r\n+\r\n+class TransformedDistribution(Distribution):\r\n+    r\"\"\"\r\n+    Extension of the Distribution class, which applies a sequence of Transforms to a base distribution.\r\n+    Let f be the composition of transforms applied,\r\n+    X ~ BaseDistribution\r\n+    Y = f(X) ~ TransformedDistribution(BaseDistribution, f)\r\n+    log p(Y) = log p(X) + log det (dX/dY)\r\n+    \"\"\"\r\n+    def __init__(self, base_distribution, transforms=[], *args, **kwargs):\r\n+        super(TransformedDistribution, self).__init__(*args, **kwargs)\r\n+        self.base_dist = base_distribution\r\n+        if isinstance(transforms, Transform):\r\n+            self.transforms = [transforms, ]\r\n+        elif isinstance(transforms, list):\r\n+            for transform in transforms:\r\n+                if not isinstance(transform, Transform):\r\n+                    raise ValueError(\"transforms must be a Transform or a list of Transforms\")\r\n+            self.transforms = transforms\r\n+\r\n+    @constraints.dependent_property\r\n+    def params(self):\r\n+        return self.base_dist.params  # TODO add params of transforms?\r\n+\r\n+    @constraints.dependent_property\r\n+    def support(self):\r\n+        try:\r\n+            return self.transforms[-1].codomain\r\n+        except IndexError:\r\n+            return self.base_dist.support\r", "path": "torch/distributions/transformed_distribution.py", "position": null, "original_position": 35, "commit_id": "244932097058605559f6baa57da01c50b32a4131", "original_commit_id": "f24d3a3e5bae1838f56a7a2b389ec795d7b1de6b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I wouldn't use `except` for this purpose. Here's a simpler and faster way:\r\n```python\r\nreturn self.transforms[-1].codomain if self.transforms else self.base_dist.support\r\n```", "created_at": "2018-01-21T23:56:19Z", "updated_at": "2018-11-23T15:38:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/4771#discussion_r162830561", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162830561"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4771#discussion_r162830561"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4771"}}, "body_html": "<p>I wouldn't use <code>except</code> for this purpose. Here's a simpler and faster way:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.transforms[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].codomain <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.transforms <span class=\"pl-k\">else</span> <span class=\"pl-c1\">self</span>.base_dist.support</pre></div>", "body_text": "I wouldn't use except for this purpose. Here's a simpler and faster way:\nreturn self.transforms[-1].codomain if self.transforms else self.base_dist.support"}