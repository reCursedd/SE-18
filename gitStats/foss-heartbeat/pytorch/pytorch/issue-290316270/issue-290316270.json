{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4771", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4771/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4771/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4771/events", "html_url": "https://github.com/pytorch/pytorch/pull/4771", "id": 290316270, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0MjAxMjcx", "number": 4771, "title": "Implement Transforms", "user": {"login": "alicanb", "id": 1093846, "node_id": "MDQ6VXNlcjEwOTM4NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1093846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alicanb", "html_url": "https://github.com/alicanb", "followers_url": "https://api.github.com/users/alicanb/followers", "following_url": "https://api.github.com/users/alicanb/following{/other_user}", "gists_url": "https://api.github.com/users/alicanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alicanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alicanb/subscriptions", "organizations_url": "https://api.github.com/users/alicanb/orgs", "repos_url": "https://api.github.com/users/alicanb/repos", "events_url": "https://api.github.com/users/alicanb/events{/privacy}", "received_events_url": "https://api.github.com/users/alicanb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-01-21T23:25:52Z", "updated_at": "2018-11-23T15:38:41Z", "closed_at": "2018-01-28T20:17:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "html_url": "https://github.com/pytorch/pytorch/pull/4771", "diff_url": "https://github.com/pytorch/pytorch/pull/4771.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4771.patch"}, "body_html": "<p>This implements a class hierarchy of <code>Transform</code>s, a <code>TransformedDistribution</code> class, and <code>LogNormal</code> and <code>HalfNormal</code> classes as examples of <code>TransformedDistribution</code>s. <code>Transform</code> objects have <code>.forward()</code> and <code>.inverse()</code> methods. Most transforms are invertible and also have <code>.log_abs_det_jacobian()</code> methods. The forward and inverse methods are bidirectionally memoized so that e.g. when <code>.forward()</code> is called, subsequent calls to both <code>.forward()</code> and <code>.inverse()</code> are free.</p>\n<p>Not all transforms are invertible, e.g. <code>AbsTransform</code> is a 2-to-1 mapping, and <code>LogprobTransform</code> is projects an entire dimension away. However both of these have <code>.inverse()</code> implemented as pseudoinverses. cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "This implements a class hierarchy of Transforms, a TransformedDistribution class, and LogNormal and HalfNormal classes as examples of TransformedDistributions. Transform objects have .forward() and .inverse() methods. Most transforms are invertible and also have .log_abs_det_jacobian() methods. The forward and inverse methods are bidirectionally memoized so that e.g. when .forward() is called, subsequent calls to both .forward() and .inverse() are free.\nNot all transforms are invertible, e.g. AbsTransform is a 2-to-1 mapping, and LogprobTransform is projects an entire dimension away. However both of these have .inverse() implemented as pseudoinverses. cc @apaszke", "body": "This implements a class hierarchy of `Transform`s, a `TransformedDistribution` class, and `LogNormal` and `HalfNormal` classes as examples of `TransformedDistribution`s. `Transform` objects have `.forward()` and `.inverse()` methods. Most transforms are invertible and also have `.log_abs_det_jacobian()` methods. The forward and inverse methods are bidirectionally memoized so that e.g. when `.forward()` is called, subsequent calls to both `.forward()` and `.inverse()` are free.\r\n\r\nNot all transforms are invertible, e.g. `AbsTransform` is a 2-to-1 mapping, and `LogprobTransform` is projects an entire dimension away. However both of these have `.inverse()` implemented as pseudoinverses. cc @apaszke  "}