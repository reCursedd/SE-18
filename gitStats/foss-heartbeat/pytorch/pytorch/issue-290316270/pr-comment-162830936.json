{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162830936", "pull_request_review_id": 90349920, "id": 162830936, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgzMDkzNg==", "diff_hunk": "@@ -0,0 +1,231 @@\n+import torch\r\n+from torch.distributions import constraints\r\n+from torch.distributions.utils import broadcast_all\r\n+from torch.nn.functional import sigmoid\r\n+\r\n+__all__ = [\r\n+    'AbsTransform',\r\n+    'AffineTransform',\r\n+    'ExpTransform',\r\n+    'InverseTransform',\r\n+    'LogprobTransform',\r\n+    'SigmoidTransform',\r\n+    'StickBreakingTransform',\r\n+    'Transform',\r\n+]\r\n+\r\n+\r\n+class Transform(object):\r\n+    \"\"\"\r\n+    Abstract class for transformations with computable inverse log\r\n+    det jacobians. They are primarily used in\r\n+    :class:`torch.distributions.TransformedDistribution`.\r\n+\r\n+    Transforms are intended to be short-lived objects. They memoize the forward\r\n+    and inverse computations to avoid work; therefore :meth:`inverse` is\r\n+    nearly free after calling :meth:`forward`. To clear the memoization cache,\r\n+    delete the object and create a new object.\r\n+\r\n+    Derived classes should implement one or both of :meth:`_forward` or\r\n+    :meth:`_inverse` and should implement :meth:`log_abs_det_jacobian`.\r\n+    Derived classes may store intermediate results in the `._cache` dict.\r\n+    \"\"\"\r\n+\r\n+    def __init__(self):\r\n+        self._cache = {}\r\n+\r\n+    def forward(self, x):\r", "path": "torch/distributions/transforms.py", "position": null, "original_position": 37, "commit_id": "244932097058605559f6baa57da01c50b32a4131", "original_commit_id": "f24d3a3e5bae1838f56a7a2b389ec795d7b1de6b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "forward/backward terms appearing in PyTorch are mostly from backpropagation/reverse-mode AD, and I don't think that this word is often used in context of transforms/bijections/diffeomorphisms. I think using `__call__` would be a nicer API overall. Then, you'd have:\r\n```python\r\nf = SomeTransform()\r\nf_inv = f.inverse\r\n\r\nf_inv(f(x)) == x\r\n```\r\n---\r\nAnother possibility would be to make `.inverse` a property and  instantiate an `InverseTransform(self)` inside it. Then `f.inverse` would be a first-class transform too, and you could do things like `f.inverse.log_abs_det_jacobian(a, b)` (if this pattern ends up being used often it might be good to shorten `inverse` to `inv`). Also `f.inv.inv is f`", "created_at": "2018-01-22T00:06:15Z", "updated_at": "2018-11-23T15:38:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/4771#discussion_r162830936", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162830936"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4771#discussion_r162830936"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4771"}}, "body_html": "<p>forward/backward terms appearing in PyTorch are mostly from backpropagation/reverse-mode AD, and I don't think that this word is often used in context of transforms/bijections/diffeomorphisms. I think using <code>__call__</code> would be a nicer API overall. Then, you'd have:</p>\n<div class=\"highlight highlight-source-python\"><pre>f <span class=\"pl-k\">=</span> SomeTransform()\nf_inv <span class=\"pl-k\">=</span> f.inverse\n\nf_inv(f(x)) <span class=\"pl-k\">==</span> x</pre></div>\n<hr>\n<p>Another possibility would be to make <code>.inverse</code> a property and  instantiate an <code>InverseTransform(self)</code> inside it. Then <code>f.inverse</code> would be a first-class transform too, and you could do things like <code>f.inverse.log_abs_det_jacobian(a, b)</code> (if this pattern ends up being used often it might be good to shorten <code>inverse</code> to <code>inv</code>). Also <code>f.inv.inv is f</code></p>", "body_text": "forward/backward terms appearing in PyTorch are mostly from backpropagation/reverse-mode AD, and I don't think that this word is often used in context of transforms/bijections/diffeomorphisms. I think using __call__ would be a nicer API overall. Then, you'd have:\nf = SomeTransform()\nf_inv = f.inverse\n\nf_inv(f(x)) == x\n\nAnother possibility would be to make .inverse a property and  instantiate an InverseTransform(self) inside it. Then f.inverse would be a first-class transform too, and you could do things like f.inverse.log_abs_det_jacobian(a, b) (if this pattern ends up being used often it might be good to shorten inverse to inv). Also f.inv.inv is f"}