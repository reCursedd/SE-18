{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162832247", "pull_request_review_id": 90349920, "id": 162832247, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjgzMjI0Nw==", "diff_hunk": "@@ -0,0 +1,231 @@\n+import torch\r\n+from torch.distributions import constraints\r\n+from torch.distributions.utils import broadcast_all\r\n+from torch.nn.functional import sigmoid\r\n+\r\n+__all__ = [\r\n+    'AbsTransform',\r\n+    'AffineTransform',\r\n+    'ExpTransform',\r\n+    'InverseTransform',\r\n+    'LogprobTransform',\r\n+    'SigmoidTransform',\r\n+    'StickBreakingTransform',\r\n+    'Transform',\r\n+]\r\n+\r\n+\r\n+class Transform(object):\r\n+    \"\"\"\r\n+    Abstract class for transformations with computable inverse log\r\n+    det jacobians. They are primarily used in\r\n+    :class:`torch.distributions.TransformedDistribution`.\r\n+\r\n+    Transforms are intended to be short-lived objects. They memoize the forward\r\n+    and inverse computations to avoid work; therefore :meth:`inverse` is\r\n+    nearly free after calling :meth:`forward`. To clear the memoization cache,\r\n+    delete the object and create a new object.\r\n+\r\n+    Derived classes should implement one or both of :meth:`_forward` or\r\n+    :meth:`_inverse` and should implement :meth:`log_abs_det_jacobian`.\r\n+    Derived classes may store intermediate results in the `._cache` dict.\r\n+    \"\"\"\r\n+\r\n+    def __init__(self):\r\n+        self._cache = {}\r\n+\r\n+    def forward(self, x):\r\n+        \"\"\"\r\n+        Invokes the bijection `x => y`.\r\n+        \"\"\"\r\n+        try:\r\n+            return self._cache['forward', x]\r\n+        except KeyError:\r\n+            y = self._forward(x)\r\n+            self._cache['forward', x] = y\r\n+            self._cache['inverse', y] = x\r\n+            return y\r\n+\r\n+    def inverse(self, y):\r\n+        \"\"\"\r\n+        Inverts the bijection `y => x`.\r\n+        \"\"\"\r\n+        try:\r\n+            return self._cache['inverse', y]\r\n+        except KeyError:\r\n+            x = self._inverse(y)\r\n+            self._cache['forward', x] = y\r\n+            self._cache['inverse', y] = x\r\n+            return x\r\n+\r\n+    def _forward(self, x):\r\n+        \"\"\"\r\n+        Abstract method to compute forward transformation.\r\n+        \"\"\"\r\n+        raise NotImplementedError\r\n+\r\n+    def _inverse(self, y):\r\n+        \"\"\"\r\n+        Abstract method to compute inverse transformation.\r\n+        \"\"\"\r\n+        raise NotImplementedError\r\n+\r\n+    def log_abs_det_jacobian(self, x, y):\r\n+        \"\"\"\r\n+        Computes the log det jacobian `log |dy/dx|` given input and output.\r\n+        \"\"\"\r\n+        raise NotImplementedError\r\n+\r\n+\r\n+class InverseTransform(Transform):\r\n+    \"\"\"\r\n+    Inverts a single :class:`Transform`.\r\n+    \"\"\"\r\n+    def __init__(self, bijector):\r\n+        self.bijector = bijector\r\n+\r\n+    @constraints.dependent_property\r\n+    def domain(self):\r\n+        return self.bijector.codomain\r\n+\r\n+    @constraints.dependent_property\r\n+    def codomain(self):\r\n+        return self.bijector.domain\r\n+\r\n+    def forward(self, x):\r\n+        return self.bijector.inverse(x)\r\n+\r\n+    def inverse(self, y):\r\n+        return self.bijector.forward(y)\r\n+\r\n+    def log_abs_det_jacobian(self, x, y):\r\n+        return -self.bijector.log_abs_det_jacobian(y, x)\r\n+\r\n+\r\n+class ExpTransform(Transform):\r\n+    \"\"\"\r\n+    Transform via the mapping `y = exp(x)`.\r\n+    \"\"\"\r\n+    domain = constraints.real\r\n+    codomain = constraints.positive\r\n+\r\n+    def _forward(self, x):\r\n+        return x.exp()\r\n+\r\n+    def _inverse(self, y):\r\n+        return y.log()\r\n+\r\n+    def log_abs_det_jacobian(self, x, y):\r\n+        return x\r\n+\r\n+\r\n+class SigmoidTransform(Transform):\r\n+    \"\"\"\r\n+    Transform via the mapping `y = sigmoid(x)` and `x = logit(y)`.\r\n+    \"\"\"\r\n+    domain = constraints.real\r\n+    codomain = constraints.unit_interval\r\n+\r\n+    def _forward(self, x):\r\n+        return sigmoid(x)\r\n+\r\n+    def _inverse(self, y):\r\n+        return y.log() - (-y).log1p()\r\n+\r\n+    def log_abs_det_jacobian(self, x, y):\r\n+        return -(y.reciprocal() + (1 - y).reciprocal()).log()\r\n+\r\n+\r\n+class AbsTransform(Transform):\r\n+    \"\"\"\r\n+    Transform via the mapping `y = abs(x)`\r\n+    \"\"\"\r\n+    domain = constraints.real\r\n+    codomain = constraints.positive\r\n+\r\n+    def _forward(self, x):\r\n+        return x.abs()\r\n+\r\n+\r\n+class AffineTransform(Transform):\r\n+    \"\"\"\r\n+    Transform via the pointwise affine mapping `y = loc + scale * x`.\r\n+\r\n+    Args:\r\n+        loc (Tensor or Variable): Location parameter.\r\n+        scale (Tensor or Variable): Scale parameter.\r\n+        event_dim (int): Optional size of `event_shape`. This should be zero\r\n+            for univariate random variables, 1 for distributions over vectors,\r\n+            2 for distributions over matrices, etc.\r\n+    \"\"\"\r\n+    domain = constraints.real\r\n+    codomain = constraints.real\r\n+\r\n+    def __init__(self, loc, scale, event_dim=0):\r\n+        super(AffineTransform, self).__init__()\r\n+        self.loc = loc\r\n+        self.scale = scale\r\n+        self.event_dim = event_dim\r\n+\r\n+    def _forward(self, x):\r\n+        return self.loc + self.scale * x\r\n+\r\n+    def _inverse(self, y):\r\n+        return (y - self.loc) / self.scale\r\n+\r\n+    def log_abs_det_jacobian(self, x, y):\r\n+        result = torch.abs(self.scale).log()\r\n+        shape = x.shape\r\n+        for _ in range(self.event_dim):\r\n+            result = result.sum(-1)\r\n+            shape = shape[:-1]\r", "path": "torch/distributions/transforms.py", "position": null, "original_position": 181, "commit_id": "244932097058605559f6baa57da01c50b32a4131", "original_commit_id": "f24d3a3e5bae1838f56a7a2b389ec795d7b1de6b", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This would be faster:\r\n```python\r\nresult = torch.abs(self.scale).log()\r\nshape = x.shape\r\nif self.event_dim:\r\n    # NOTE: no need for contiguous here\r\n    result = result.view(*result.size()[:-self.event_dim], -1).sum(-1)\r\n    shape = shape[:-self.event_dim]\r\nreturn results.expand(shape)\r\n```", "created_at": "2018-01-22T00:37:56Z", "updated_at": "2018-11-23T15:38:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/4771#discussion_r162832247", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162832247"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4771#discussion_r162832247"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4771"}}, "body_html": "<p>This would be faster:</p>\n<div class=\"highlight highlight-source-python\"><pre>result <span class=\"pl-k\">=</span> torch.abs(<span class=\"pl-c1\">self</span>.scale).log()\nshape <span class=\"pl-k\">=</span> x.shape\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.event_dim:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> <span class=\"pl-k\">NOTE</span>: no need for contiguous here</span>\n    result <span class=\"pl-k\">=</span> result.view(<span class=\"pl-k\">*</span>result.size()[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">self</span>.event_dim], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    shape <span class=\"pl-k\">=</span> shape[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">self</span>.event_dim]\n<span class=\"pl-k\">return</span> results.expand(shape)</pre></div>", "body_text": "This would be faster:\nresult = torch.abs(self.scale).log()\nshape = x.shape\nif self.event_dim:\n    # NOTE: no need for contiguous here\n    result = result.view(*result.size()[:-self.event_dim], -1).sum(-1)\n    shape = shape[:-self.event_dim]\nreturn results.expand(shape)"}