{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163622135", "pull_request_review_id": 91264791, "id": 163622135, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzYyMjEzNQ==", "diff_hunk": "@@ -0,0 +1,290 @@\n+import torch\r\n+from torch.distributions import constraints\r\n+from torch.distributions.utils import broadcast_all\r\n+from torch.nn.functional import sigmoid\r\n+\r\n+__all__ = [\r\n+    'AbsTransform',\r\n+    'AffineTransform',\r\n+    'BoltzmannTransform',\r\n+    'CachedTransform',\r\n+    'ExpTransform',\r\n+    'InverseTransform',\r\n+    'SigmoidTransform',\r\n+    'StickBreakingTransform',\r\n+    'Transform',\r\n+]\r\n+\r\n+\r\n+class Transform(object):\r\n+    \"\"\"\r\n+    Abstract class for transformations with computable inverse log\r\n+    det jacobians. They are primarily used in\r\n+    :class:`torch.distributions.TransformedDistribution`.\r\n+\r\n+    Derived classes should implement one or both of :meth:`_forward` or\r\n+    :meth:`_inverse` and should implement :meth:`log_abs_det_jacobian`.\r\n+    Derived classes may store intermediate results in the `._cache` dict.\r\n+    \"\"\"\r\n+    bijective = False\r\n+\r\n+    def __eq__(self, other):\r\n+        return type(other) is type(self)\r\n+\r\n+    def __ne__(self, other):\r\n+        # Necessary for Python2\r\n+        return not self.__eq__(other)\r\n+\r\n+    def forward(self, x):\r\n+        \"\"\"\r\n+        Abstract method to compute forward transformation.\r\n+        \"\"\"\r\n+        raise NotImplementedError\r\n+\r\n+    def inverse(self, y):\r\n+        \"\"\"\r\n+        Abstract method to compute inverse transformation.\r\n+        \"\"\"\r\n+        raise NotImplementedError\r\n+\r\n+    def log_abs_det_jacobian(self, x, y):\r\n+        \"\"\"\r\n+        Computes the log det jacobian `log |dy/dx|` given input and output.\r\n+        \"\"\"\r\n+        raise NotImplementedError\r\n+\r\n+\r\n+class CachedTransform(Transform):\r\n+    \"\"\"\r\n+    Abstract base class for transforms that implement one of :meth:`forward`\r\n+    or :meth:`backward` via by caching the latest value (i.e. an LRU(1) cache).\r\n+\r\n+    This class is useful for tranforms whose inverses are either expensive or\r\n+    numerically unstable. Note that care must be taken with memoized values\r\n+    since the autograd graph may be reversed. For example while the following\r\n+    works::\r\n+\r\n+        y = t.forward(x)\r\n+        t.log_abs_det_jacobian(x, y).backward()  # x will receive gradients.\r\n+\r\n+    However the following will error due to dependency reversal::\r\n+\r\n+        y = t.forward(x)\r\n+        z = t.inverse(y)\r\n+        grad(z.sum(), [y])  # error because z is x\r\n+\r\n+    Derived classes should implement one or both of :meth:`_forward` and\r\n+    :meth:`_backward`.\r\n+    \"\"\"\r\n+    def __init__(self):\r\n+        self._cached_x_y = None, None\r\n+\r\n+    def forward(self, x):\r\n+        \"\"\"\r\n+        Invokes the memoized transform `x => y`.\r\n+        \"\"\"\r\n+        x_old, y_old = self._cached_x_y\r\n+        if x is x_old:\r", "path": "torch/distributions/transforms.py", "position": null, "original_position": 87, "commit_id": "244932097058605559f6baa57da01c50b32a4131", "original_commit_id": "b63c6449b292f0281135c1759feaf0402ac9dbe2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think we should verify the version. Otherwise the code can silently give incorrect results, which we're trying to avoid (especially that we now can).", "created_at": "2018-01-24T17:37:33Z", "updated_at": "2018-11-23T15:38:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/4771#discussion_r163622135", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163622135"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4771#discussion_r163622135"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4771"}}, "body_html": "<p>I think we should verify the version. Otherwise the code can silently give incorrect results, which we're trying to avoid (especially that we now can).</p>", "body_text": "I think we should verify the version. Otherwise the code can silently give incorrect results, which we're trying to avoid (especially that we now can).", "in_reply_to_id": 163335541}