{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163319698", "pull_request_review_id": 90913975, "id": 163319698, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzMxOTY5OA==", "diff_hunk": "@@ -0,0 +1,242 @@\n+import torch\r\n+from torch.distributions import constraints\r\n+from torch.distributions.utils import broadcast_all\r\n+from torch.nn.functional import sigmoid\r\n+\r\n+__all__ = [\r\n+    'AbsTransform',\r\n+    'AffineTransform',\r\n+    'ExpTransform',\r\n+    'InverseTransform',\r\n+    'LogprobTransform',\r\n+    'SigmoidTransform',\r\n+    'StickBreakingTransform',\r\n+    'Transform',\r\n+]\r\n+\r\n+\r\n+class Transform(object):\r\n+    \"\"\"\r\n+    Abstract class for transformations with computable inverse log\r\n+    det jacobians. They are primarily used in\r\n+    :class:`torch.distributions.TransformedDistribution`.\r\n+\r\n+    Transforms are intended to be short-lived objects. They memoize the forward\r\n+    and inverse computations to avoid work; therefore :meth:`inverse` is\r\n+    nearly free after calling :meth:`forward`. To clear the memoization cache,\r\n+    delete the object and create a new object.\r\n+\r\n+    Derived classes should implement one or both of :meth:`_forward` or\r\n+    :meth:`_inverse` and should implement :meth:`log_abs_det_jacobian`.\r\n+    Derived classes may store intermediate results in the `._cache` dict.\r\n+    \"\"\"\r\n+\r\n+    def __init__(self):\r\n+        self._cache = {}\r\n+\r\n+    def __eq__(self, other):\r\n+        return type(other) is type(self)\r", "path": "torch/distributions/transforms.py", "position": null, "original_position": 38, "commit_id": "244932097058605559f6baa57da01c50b32a4131", "original_commit_id": "788b9f610cbab512479b99766a9e32e1aac177b0", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "We don't need to handle batches; that sounds a bit over-engineered. In fact I think it's safe to define `Transform.__eq__` by `self is other` by default and define `type(self) == type(other)` for the each of few parameter-free transforms. WDYT?", "created_at": "2018-01-23T17:34:36Z", "updated_at": "2018-11-23T15:38:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/4771#discussion_r163319698", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163319698"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4771#discussion_r163319698"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4771"}}, "body_html": "<p>We don't need to handle batches; that sounds a bit over-engineered. In fact I think it's safe to define <code>Transform.__eq__</code> by <code>self is other</code> by default and define <code>type(self) == type(other)</code> for the each of few parameter-free transforms. WDYT?</p>", "body_text": "We don't need to handle batches; that sounds a bit over-engineered. In fact I think it's safe to define Transform.__eq__ by self is other by default and define type(self) == type(other) for the each of few parameter-free transforms. WDYT?", "in_reply_to_id": 162907302}