{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164307010", "pull_request_review_id": 92060864, "id": 164307010, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDMwNzAxMA==", "diff_hunk": "@@ -0,0 +1,422 @@\n+import torch\n+from torch.autograd import Variable\n+from torch.distributions import constraints\n+from torch.distributions.utils import broadcast_all, lazy_property\n+from torch.nn.functional import sigmoid\n+\n+__all__ = [\n+    'AbsTransform',\n+    'AffineTransform',\n+    'BoltzmannTransform',\n+    'ComposeTransform',\n+    'ExpTransform',\n+    'LowerCholeskyTransform',\n+    'SigmoidTransform',\n+    'StickBreakingTransform',\n+    'Transform',\n+    'identity_transform',\n+]\n+\n+\n+class Transform(object):\n+    \"\"\"\n+    Abstract class for invertable transformations with computable log\n+    det jacobians. They are primarily used in\n+    :class:`torch.distributions.TransformedDistribution`.\n+\n+    Caching is useful for tranforms whose inverses are either expensive or\n+    numerically unstable. Note that care must be taken with memoized values\n+    since the autograd graph may be reversed. For example while the following\n+    works with or without caching::\n+\n+        y = t(x)\n+        t.log_abs_det_jacobian(x, y).backward()  # x will receive gradients.\n+\n+    However the following will error when caching due to dependency reversal::\n+\n+        y = t(x)\n+        z = t.inv(y)\n+        grad(z.sum(), [y])  # error because z is x\n+\n+    Derived classes should implement one or both of :meth:`_call` or\n+    :meth:`_inverse`. Derived classes that set `bijective=True` should also\n+    implement :meth:`log_abs_det_jacobian`.\n+\n+    Args:\n+        cache_size (int): Size of cache. If zero, no caching is done. If one,\n+            the latest single value is cached. Only 0 and 1 are supported.\n+\n+    Attributes:\n+        domain (:class:`~torch.distributions.constraints.Constraint`):\n+            The constraint representing valid inputs to this transform.\n+        codomain (:class:`~torch.distributions.constraints.Constraint`):\n+            The constraint representing valid outputs to this transform\n+            which are inputs to the inverse transform.\n+        bijective (bool): Whether this transform is bijective. A transform\n+            ``t`` is bijective iff ``t.inv(t(x)) == x`` and\n+            ``t(t.inv(y)) == y`` for every ``x`` in the domain and ``y`` in\n+            the codomain. Transforms that are not bijective should at least\n+            maintain the weaker pseudoinverse properties\n+            ``t(t.inv(t(x)) == t(x)`` and ``t.inv(t(t.inv(y))) == t.inv(y)``.\n+    \"\"\"\n+    bijective = False\n+\n+    def __init__(self, cache_size=0):\n+        if cache_size == 0:\n+            pass  # default behavior\n+        elif cache_size == 1:\n+            self._cached_x_y = None, None\n+            self.__call__ = self._cached_call\n+            self._inv_call = self._cached_inverse\n+        else:\n+            raise NotImplementedError('cache_size must be 0 or 1')\n+\n+    @lazy_property", "path": "torch/distributions/transforms.py", "position": null, "original_position": 74, "commit_id": "244932097058605559f6baa57da01c50b32a4131", "original_commit_id": "6360a3ee8a3f1755e48abb2bdef01dd269f1e90c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "BTW we could keep `t.inv.inv is t` if only we kept a weakref to the inverse. Should be quite simple:\r\n```python\r\n@property\r\ndef inv(self):\r\n  maybe_inv = self._inv()\r\n  if maybe_inv is not None:\r\n    return maybe_inv\r\n  inv = InverseTransform(self)\r\n  self._inv = weakref.ref(inv)\r\n  return inv\r\n```", "created_at": "2018-01-28T18:10:20Z", "updated_at": "2018-11-23T15:38:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/4771#discussion_r164307010", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4771", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164307010"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4771#discussion_r164307010"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4771"}}, "body_html": "<p>BTW we could keep <code>t.inv.inv is t</code> if only we kept a weakref to the inverse. Should be quite simple:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">inv</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n  maybe_inv <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._inv()\n  <span class=\"pl-k\">if</span> maybe_inv <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n    <span class=\"pl-k\">return</span> maybe_inv\n  inv <span class=\"pl-k\">=</span> InverseTransform(<span class=\"pl-c1\">self</span>)\n  <span class=\"pl-c1\">self</span>._inv <span class=\"pl-k\">=</span> weakref.ref(inv)\n  <span class=\"pl-k\">return</span> inv</pre></div>", "body_text": "BTW we could keep t.inv.inv is t if only we kept a weakref to the inverse. Should be quite simple:\n@property\ndef inv(self):\n  maybe_inv = self._inv()\n  if maybe_inv is not None:\n    return maybe_inv\n  inv = InverseTransform(self)\n  self._inv = weakref.ref(inv)\n  return inv", "in_reply_to_id": 164296814}