{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/378687483", "html_url": "https://github.com/pytorch/pytorch/issues/6273#issuecomment-378687483", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6273", "id": 378687483, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY4NzQ4Mw==", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-04T17:49:55Z", "updated_at": "2018-04-04T18:10:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ah sorry <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=19393570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ateymour\">@ateymour</a> if i'm being confusing, let me try to be clearer. You could use the following command to set python to only use a single (the first in this case) cpu.</p>\n<pre><code>taskset -c 0 python convnet_benchmarks.py [...]\n</code></pre>\n<p>You can prefix it with 'perf stat' to see how many cores were actually used during the execution of the program. See this <a href=\"https://paste.fedoraproject.org/paste/C~pdayMtCvZ6D9M~6ggvKw\" rel=\"nofollow\">example</a>.</p>\n<p>So in your case, you could run</p>\n<pre><code>perf stat taskset -c 0 python convnet_benchmarks.py --batch_size 20 --model AlexNet --iterations 10 --warmup_iterations 1 --cpu --num_workers 8\n</code></pre>\n<p>to run only on the first cpu.</p>\n<p>This is entirely independent of any internal pytorch mechanisms, so we can sure the correct number of cores is used just in case there's a bug (and compare it to the numbers when running with OMP_NUM_THREADS etc.). This is a first step towards debugging this.</p>\n<p>On another note, when you're using OMP_NUM_THREADS=16 I'm assuming you have 16 cpu cores available?</p>", "body_text": "Ah sorry @ateymour if i'm being confusing, let me try to be clearer. You could use the following command to set python to only use a single (the first in this case) cpu.\ntaskset -c 0 python convnet_benchmarks.py [...]\n\nYou can prefix it with 'perf stat' to see how many cores were actually used during the execution of the program. See this example.\nSo in your case, you could run\nperf stat taskset -c 0 python convnet_benchmarks.py --batch_size 20 --model AlexNet --iterations 10 --warmup_iterations 1 --cpu --num_workers 8\n\nto run only on the first cpu.\nThis is entirely independent of any internal pytorch mechanisms, so we can sure the correct number of cores is used just in case there's a bug (and compare it to the numbers when running with OMP_NUM_THREADS etc.). This is a first step towards debugging this.\nOn another note, when you're using OMP_NUM_THREADS=16 I'm assuming you have 16 cpu cores available?", "body": "Ah sorry @ateymour if i'm being confusing, let me try to be clearer. You could use the following command to set python to only use a single (the first in this case) cpu.\r\n\r\n```\r\ntaskset -c 0 python convnet_benchmarks.py [...]\r\n```\r\n\r\nYou can prefix it with 'perf stat' to see how many cores were actually used during the execution of the program. See this [example](https://paste.fedoraproject.org/paste/C~pdayMtCvZ6D9M~6ggvKw).\r\n\r\nSo in your case, you could run \r\n\r\n```\r\nperf stat taskset -c 0 python convnet_benchmarks.py --batch_size 20 --model AlexNet --iterations 10 --warmup_iterations 1 --cpu --num_workers 8\r\n```\r\n\r\nto run only on the first cpu.\r\n\r\nThis is entirely independent of any internal pytorch mechanisms, so we can sure the correct number of cores is used just in case there's a bug (and compare it to the numbers when running with OMP_NUM_THREADS etc.). This is a first step towards debugging this.\r\n\r\nOn another note, when you're using OMP_NUM_THREADS=16 I'm assuming you have 16 cpu cores available?"}