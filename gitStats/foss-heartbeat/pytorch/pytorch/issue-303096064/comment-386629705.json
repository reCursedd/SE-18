{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/386629705", "html_url": "https://github.com/pytorch/pytorch/issues/5609#issuecomment-386629705", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5609", "id": 386629705, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjYyOTcwNQ==", "user": {"login": "nikishin-evg", "id": 14283069, "node_id": "MDQ6VXNlcjE0MjgzMDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/14283069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikishin-evg", "html_url": "https://github.com/nikishin-evg", "followers_url": "https://api.github.com/users/nikishin-evg/followers", "following_url": "https://api.github.com/users/nikishin-evg/following{/other_user}", "gists_url": "https://api.github.com/users/nikishin-evg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikishin-evg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikishin-evg/subscriptions", "organizations_url": "https://api.github.com/users/nikishin-evg/orgs", "repos_url": "https://api.github.com/users/nikishin-evg/repos", "events_url": "https://api.github.com/users/nikishin-evg/events{/privacy}", "received_events_url": "https://api.github.com/users/nikishin-evg/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-04T15:03:25Z", "updated_at": "2018-05-04T15:13:56Z", "author_association": "NONE", "body_html": "<p>I am facing similar issue. Following code</p>\n<pre><code>x = torch.tensor([1, 2, 3.5])\nx@x\n</code></pre>\n<p>returns <code>tensor(0.)</code>. But I have noticed, that</p>\n<pre><code>y = torch.tensor([1, 2, 3.5], dtype=torch.float64)\ny@y\n</code></pre>\n<p>returns <code>tensor(17.2500, dtype=torch.float64)</code>.</p>\n<p>A while ago I've observed similar issue with numpy, i.e. code</p>\n<pre><code>a = np.arange(4)\nb = np.arange(4) + 5\nprint(np.dot(a.astype(np.float32), b.astype(np.float32)))\nprint(np.dot(a.astype(np.float64), b.astype(np.float64)))\n</code></pre>\n<p>returned <code>0.0</code> and <code>44.0</code> respectively, but recently it have started working correctly, i.e. producing <code>44.0</code> and <code>44.0</code> (I don't know the reason why it have started working correctly).</p>\n<p><code>conda list | grep \"mkl\\|intel-openmp\\|libgfortran\\|numpy\"</code> produces following:</p>\n<pre><code>intel-numpy               1.13.3.10                 &lt;pip&gt;\nintel-openmp              2018.0.0                  &lt;pip&gt;\nintel-openmp              2018.0.0                      8  \nlibgfortran               3.0.1                h93005f0_2  \nmkl                       2018.0.2                      1  \nmkl                       2018.0.0                  &lt;pip&gt;\nmkl-fft                   1.0.0.17                  &lt;pip&gt;\nmkl-service               1.1.2            py36h7ea6df4_4  \nmkl_fft                   1.0.1            py36h917ab60_0  \nmkl_random                1.0.1            py36h78cc56f_0  \nnumpy                     1.14.3                    &lt;pip&gt;\nnumpy                     1.13.3                    &lt;pip&gt;\nnumpy                     1.14.2           py36ha9ae307_1  \nnumpydoc                  0.8.0                    py36_0  \n</code></pre>\n<p>P.S.<br>\nmacOS High Sierra 10.13.4<br>\npython 3.6.5<br>\ntorch 0.4.0<br>\nIssue arises both in python, ipython and jupyter notebook.</p>", "body_text": "I am facing similar issue. Following code\nx = torch.tensor([1, 2, 3.5])\nx@x\n\nreturns tensor(0.). But I have noticed, that\ny = torch.tensor([1, 2, 3.5], dtype=torch.float64)\ny@y\n\nreturns tensor(17.2500, dtype=torch.float64).\nA while ago I've observed similar issue with numpy, i.e. code\na = np.arange(4)\nb = np.arange(4) + 5\nprint(np.dot(a.astype(np.float32), b.astype(np.float32)))\nprint(np.dot(a.astype(np.float64), b.astype(np.float64)))\n\nreturned 0.0 and 44.0 respectively, but recently it have started working correctly, i.e. producing 44.0 and 44.0 (I don't know the reason why it have started working correctly).\nconda list | grep \"mkl\\|intel-openmp\\|libgfortran\\|numpy\" produces following:\nintel-numpy               1.13.3.10                 <pip>\nintel-openmp              2018.0.0                  <pip>\nintel-openmp              2018.0.0                      8  \nlibgfortran               3.0.1                h93005f0_2  \nmkl                       2018.0.2                      1  \nmkl                       2018.0.0                  <pip>\nmkl-fft                   1.0.0.17                  <pip>\nmkl-service               1.1.2            py36h7ea6df4_4  \nmkl_fft                   1.0.1            py36h917ab60_0  \nmkl_random                1.0.1            py36h78cc56f_0  \nnumpy                     1.14.3                    <pip>\nnumpy                     1.13.3                    <pip>\nnumpy                     1.14.2           py36ha9ae307_1  \nnumpydoc                  0.8.0                    py36_0  \n\nP.S.\nmacOS High Sierra 10.13.4\npython 3.6.5\ntorch 0.4.0\nIssue arises both in python, ipython and jupyter notebook.", "body": "I am facing similar issue. Following code\r\n\r\n```\r\nx = torch.tensor([1, 2, 3.5])\r\nx@x\r\n```\r\nreturns `tensor(0.)`. But I have noticed, that\r\n\r\n```\r\ny = torch.tensor([1, 2, 3.5], dtype=torch.float64)\r\ny@y\r\n```\r\n\r\nreturns `tensor(17.2500, dtype=torch.float64)`.\r\n\r\nA while ago I've observed similar issue with numpy, i.e. code\r\n\r\n```\r\na = np.arange(4)\r\nb = np.arange(4) + 5\r\nprint(np.dot(a.astype(np.float32), b.astype(np.float32)))\r\nprint(np.dot(a.astype(np.float64), b.astype(np.float64)))\r\n```\r\n\r\nreturned `0.0` and `44.0` respectively, but recently it have started working correctly, i.e. producing `44.0` and `44.0` (I don't know the reason why it have started working correctly). \r\n\r\n`conda list | grep \"mkl\\|intel-openmp\\|libgfortran\\|numpy\"` produces following:\r\n\r\n```\r\nintel-numpy               1.13.3.10                 <pip>\r\nintel-openmp              2018.0.0                  <pip>\r\nintel-openmp              2018.0.0                      8  \r\nlibgfortran               3.0.1                h93005f0_2  \r\nmkl                       2018.0.2                      1  \r\nmkl                       2018.0.0                  <pip>\r\nmkl-fft                   1.0.0.17                  <pip>\r\nmkl-service               1.1.2            py36h7ea6df4_4  \r\nmkl_fft                   1.0.1            py36h917ab60_0  \r\nmkl_random                1.0.1            py36h78cc56f_0  \r\nnumpy                     1.14.3                    <pip>\r\nnumpy                     1.13.3                    <pip>\r\nnumpy                     1.14.2           py36ha9ae307_1  \r\nnumpydoc                  0.8.0                    py36_0  \r\n```\r\n\r\nP.S. \r\nmacOS High Sierra 10.13.4\r\npython 3.6.5\r\ntorch 0.4.0\r\nIssue arises both in python, ipython and jupyter notebook."}