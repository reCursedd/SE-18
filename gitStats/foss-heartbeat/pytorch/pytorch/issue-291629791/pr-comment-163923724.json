{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163923724", "pull_request_review_id": 91618630, "id": 163923724, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzkyMzcyNA==", "diff_hunk": "@@ -41,20 +41,47 @@ static inline void fixSizeOneDimStride(int dim, const int *size, int *stride) {\n   }\n }\n \n-// TODO: Use unique_ptr on this?\n-struct TensorDescriptor\n-{\n-  cudnnTensorDescriptor_t desc;\n+template <typename T, cudnnStatus_t (*dtor)(T*)>\n+struct DescriptorDeleter {\n+  void operator()(T* x) {\n+    CUDNN_CHECK(dtor(x));\n+  }\n+};\n \n-  explicit TensorDescriptor() : desc(nullptr) {\n-    CUDNN_CHECK(cudnnCreateTensorDescriptor(&desc));\n-  };\n+// A generic class for wrapping cuDNN descriptor types.  All you need\n+// is to give the underlying type the Descriptor_t points to (usually,\n+// if it's cudnnTensorDescriptor_t it points to cudnnTensorStruct),\n+// the constructor and the destructor.  Subclasses are responsible\n+// for forwarding constructors and defining a set() function to actually\n+// set the descriptor.\n+template <typename T, cudnnStatus_t (*ctor)(T**), cudnnStatus_t (*dtor)(T*)>\n+class Descriptor\n+{\n+public:\n+  explicit Descriptor() {\n+    T* raw_desc;\n+    CUDNN_CHECK(ctor(&raw_desc));\n+    desc_.reset(raw_desc);\n+  }\n \n-  TensorDescriptor(const TensorDescriptor& ref) = delete;\n-  TensorDescriptor(TensorDescriptor&& ref) = delete;\n+  // TODO: Figure out why const-correctness doesn't work here\n+  T* desc() const { return desc_.get(); }\n+  T* desc() { return desc_.get(); }\n+private:\n+  std::unique_ptr<T, DescriptorDeleter<T, dtor>> desc_;\n+};\n \n-  ~TensorDescriptor() {\n-    cudnnDestroyTensorDescriptor(desc);\n+class TensorDescriptor\n+  : public Descriptor<cudnnTensorStruct,", "path": "aten/src/ATen/cudnn/Descriptors.h", "position": 46, "original_position": 46, "commit_id": "bd3a07bc05d0c6971fc90dc36a164208cf8bead8", "original_commit_id": "bd3a07bc05d0c6971fc90dc36a164208cf8bead8", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "It is indeed in the header file (and they should not have made it opaque in the first place, if you ask me). ", "created_at": "2018-01-25T18:12:22Z", "updated_at": "2018-11-23T15:38:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/4850#discussion_r163923724", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4850", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163923724"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4850#discussion_r163923724"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4850"}}, "body_html": "<p>It is indeed in the header file (and they should not have made it opaque in the first place, if you ask me).</p>", "body_text": "It is indeed in the header file (and they should not have made it opaque in the first place, if you ask me).", "in_reply_to_id": 163909405}