{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/333818216", "html_url": "https://github.com/pytorch/pytorch/pull/2884#issuecomment-333818216", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2884", "id": 333818216, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzgxODIxNg==", "user": {"login": "mys007", "id": 5921083, "node_id": "MDQ6VXNlcjU5MjEwODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5921083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mys007", "html_url": "https://github.com/mys007", "followers_url": "https://api.github.com/users/mys007/followers", "following_url": "https://api.github.com/users/mys007/following{/other_user}", "gists_url": "https://api.github.com/users/mys007/gists{/gist_id}", "starred_url": "https://api.github.com/users/mys007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mys007/subscriptions", "organizations_url": "https://api.github.com/users/mys007/orgs", "repos_url": "https://api.github.com/users/mys007/repos", "events_url": "https://api.github.com/users/mys007/events{/privacy}", "received_events_url": "https://api.github.com/users/mys007/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-03T11:49:01Z", "updated_at": "2017-10-03T11:52:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sorry for the convolved code.<br>\n<code>state_dict</code> has exactly the same meaning as in the original code (keys have hierarchy encoded in dot-notation, e.g. <code>{'1.1.weight': A, '1.1.bias': B, '2.weight': C}</code>).<br>\n<code>state_tree</code> is a tree built from <code>state_dict</code> using <code>_fill_tree()</code>, where each tree node is a dictionary (inner node) or a tensor (leaf node), e.g.</p>\n<pre><code>{\n  '1': {\n         '1': {'weight': A, 'bias': B}\n       },\n  '2': {'weight': C}\n}\n</code></pre>\n<p>The proposed implementation in <code>nn.Module</code> calls child's <code>load_state_dict()</code> with the the respective branch. In the motivational code snippet above, a module (e.g. '1.1') uses <code>state_tree</code> (e.g. <code>{'weight': A, 'bias': B}</code>) to modify the default loading behavior (e.g. load <code>weight</code> into <code>weights</code>) without the need to know about its global position in the model. <code>state_dict, prefix</code> is passed around just to be able to produce the same error messages as in the original code.</p>", "body_text": "Sorry for the convolved code.\nstate_dict has exactly the same meaning as in the original code (keys have hierarchy encoded in dot-notation, e.g. {'1.1.weight': A, '1.1.bias': B, '2.weight': C}).\nstate_tree is a tree built from state_dict using _fill_tree(), where each tree node is a dictionary (inner node) or a tensor (leaf node), e.g.\n{\n  '1': {\n         '1': {'weight': A, 'bias': B}\n       },\n  '2': {'weight': C}\n}\n\nThe proposed implementation in nn.Module calls child's load_state_dict() with the the respective branch. In the motivational code snippet above, a module (e.g. '1.1') uses state_tree (e.g. {'weight': A, 'bias': B}) to modify the default loading behavior (e.g. load weight into weights) without the need to know about its global position in the model. state_dict, prefix is passed around just to be able to produce the same error messages as in the original code.", "body": "Sorry for the convolved code. \r\n`state_dict` has exactly the same meaning as in the original code (keys have hierarchy encoded in dot-notation, e.g. `{'1.1.weight': A, '1.1.bias': B, '2.weight': C}`). \r\n`state_tree` is a tree built from `state_dict` using `_fill_tree()`, where each tree node is a dictionary (inner node) or a tensor (leaf node), e.g.\r\n```\r\n{\r\n  '1': {\r\n         '1': {'weight': A, 'bias': B}\r\n       },\r\n  '2': {'weight': C}\r\n}\r\n```\r\nThe proposed implementation in `nn.Module` calls child's `load_state_dict()` with the the respective branch. In the motivational code snippet above, a module (e.g. '1.1') uses `state_tree` (e.g. `{'weight': A, 'bias': B}`) to modify the default loading behavior (e.g. load `weight` into `weights`) without the need to know about its global position in the model. `state_dict, prefix` is passed around just to be able to produce the same error messages as in the original code."}