{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2884", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2884/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2884/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2884/events", "html_url": "https://github.com/pytorch/pytorch/pull/2884", "id": 261333712, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQzNjU5NTQz", "number": 2884, "title": "Recursive load_state_dict()", "user": {"login": "mys007", "id": 5921083, "node_id": "MDQ6VXNlcjU5MjEwODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5921083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mys007", "html_url": "https://github.com/mys007", "followers_url": "https://api.github.com/users/mys007/followers", "following_url": "https://api.github.com/users/mys007/following{/other_user}", "gists_url": "https://api.github.com/users/mys007/gists{/gist_id}", "starred_url": "https://api.github.com/users/mys007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mys007/subscriptions", "organizations_url": "https://api.github.com/users/mys007/orgs", "repos_url": "https://api.github.com/users/mys007/repos", "events_url": "https://api.github.com/users/mys007/events{/privacy}", "received_events_url": "https://api.github.com/users/mys007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-28T14:12:58Z", "updated_at": "2017-10-03T14:08:52Z", "closed_at": "2017-10-03T13:00:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2884", "html_url": "https://github.com/pytorch/pytorch/pull/2884", "diff_url": "https://github.com/pytorch/pytorch/pull/2884.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2884.patch"}, "body_html": "<p>I propose to make tensor assignments in <code>load_state_dict()</code> recursive over the tree of modules. The advantage of this somewhat more complicated code is that one is able to handle versioning of <code>state_dict</code> easily in an encapsulated way inside each specific <code>Module</code>. For example:</p>\n<pre><code>def load_state_dict(self, state_dict, prefix, state_tree):\n    if 'member1' in state_tree: # renaming\n        state_tree['renamed_member'] = state_tree['member1']\n        del state_tree['member1']\n    if `member2` in state_tree: # removing\n        del state_tree['member2']\n    if `member3` not in state_tree: #adding\n        state_tree['member3'] = torch.zeros(5,5)\n    super(Foo, self).load_state_dict(state_dict, prefix, state_tree)            \n</code></pre>", "body_text": "I propose to make tensor assignments in load_state_dict() recursive over the tree of modules. The advantage of this somewhat more complicated code is that one is able to handle versioning of state_dict easily in an encapsulated way inside each specific Module. For example:\ndef load_state_dict(self, state_dict, prefix, state_tree):\n    if 'member1' in state_tree: # renaming\n        state_tree['renamed_member'] = state_tree['member1']\n        del state_tree['member1']\n    if `member2` in state_tree: # removing\n        del state_tree['member2']\n    if `member3` not in state_tree: #adding\n        state_tree['member3'] = torch.zeros(5,5)\n    super(Foo, self).load_state_dict(state_dict, prefix, state_tree)", "body": "I propose to make tensor assignments in `load_state_dict()` recursive over the tree of modules. The advantage of this somewhat more complicated code is that one is able to handle versioning of `state_dict` easily in an encapsulated way inside each specific `Module`. For example:\r\n\r\n```\r\ndef load_state_dict(self, state_dict, prefix, state_tree):\r\n    if 'member1' in state_tree: # renaming\r\n        state_tree['renamed_member'] = state_tree['member1']\r\n        del state_tree['member1']\r\n    if `member2` in state_tree: # removing\r\n        del state_tree['member2']\r\n    if `member3` not in state_tree: #adding\r\n        state_tree['member3'] = torch.zeros(5,5)\r\n    super(Foo, self).load_state_dict(state_dict, prefix, state_tree)            \r\n```"}