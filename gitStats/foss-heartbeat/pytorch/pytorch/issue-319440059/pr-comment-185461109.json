{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185461109", "pull_request_review_id": 116851178, "id": 185461109, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTQ2MTEwOQ==", "diff_hunk": "@@ -51,10 +55,73 @@ void THTensor_(geometric)(THTensor *self, THGenerator *_generator, double p)\n   TH_TENSOR_APPLY(real, self, *self_data = (real)THRandom_geometric(_generator, p););\n }\n \n+#ifdef TH_BLAS_MKL\n+#define BERNOULLI_OMP 10000\n+void Bernoulli_generate(const int64_t n, const double p, real *r, THGenerator *_generator)\n+{\n+  int64_t seed = 17 + THRandom_random(_generator) % 4096;\n+\n+#ifdef TH_REAL_IS_INT\n+  int *tmp = r;\n+#else\n+  int *tmp = (int*)malloc(n*sizeof(int));\n+#endif\n+\n+#ifdef _OPENMP\n+  size_t nthr = omp_get_num_threads();\n+  int run_parallel = 0;\n+  if ((omp_in_parallel() == 0) && (n >= BERNOULLI_OMP)) {\n+    run_parallel = 1;\n+  }\n+  if (0 == run_parallel) nthr = 1;\n+\n+#pragma omp parallel num_threads(nthr) firstprivate(nthr)\n+  {\n+    size_t tid = omp_get_thread_num();\n+    int64_t seg_len_tmp = n / nthr;\n+    int64_t line_index_offset = tid * seg_len_tmp;\n+    int64_t line_seg_len = (tid == nthr - 1)? (n-line_index_offset) : seg_len_tmp;\n+#else\n+  {\n+    int64_t line_index_offset = n;\n+    int64_t line_seg_len = 0;\n+#endif\n+\n+    if (line_seg_len > 0) {\n+      VSLStreamStatePtr stream;\n+      vslNewStream(&stream, VSL_BRNG_MCG31, seed);\n+      vslSkipAheadStream(stream, line_index_offset);\n+      viRngBernoulli(VSL_RNG_METHOD_BERNOULLI_ICDF, stream, line_seg_len,\n+        tmp + line_index_offset, p);\n+      vslDeleteStream(&stream);\n+#ifndef TH_REAL_IS_INT\n+      int64_t i = 0;\n+      int64_t line_index_last = line_index_offset + line_seg_len;\n+      for(i = line_index_offset; i < line_index_last; i++) {\n+        r[i] = (real)tmp[i];\n+      }\n+#endif", "path": "aten/src/TH/generic/THTensorRandom.cpp", "position": null, "original_position": 60, "commit_id": "747e8775670233b943305a0f5bbed0a910052908", "original_commit_id": "bd17432e797f3766b33415d9851b1a652f3d77c6", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think it would be simpler to make this function always fill a `THIntTensor`. Then, in the `bernoulli` function, you'd allocate the tensor if `real` is not an `int`, and use a regular vectorized `copy` from TH to move the data over.", "created_at": "2018-05-02T11:05:48Z", "updated_at": "2018-11-23T15:43:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/7171#discussion_r185461109", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7171", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185461109"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7171#discussion_r185461109"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7171"}}, "body_html": "<p>I think it would be simpler to make this function always fill a <code>THIntTensor</code>. Then, in the <code>bernoulli</code> function, you'd allocate the tensor if <code>real</code> is not an <code>int</code>, and use a regular vectorized <code>copy</code> from TH to move the data over.</p>", "body_text": "I think it would be simpler to make this function always fill a THIntTensor. Then, in the bernoulli function, you'd allocate the tensor if real is not an int, and use a regular vectorized copy from TH to move the data over."}