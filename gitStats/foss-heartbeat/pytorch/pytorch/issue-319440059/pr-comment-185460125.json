{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185460125", "pull_request_review_id": 116851178, "id": 185460125, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTQ2MDEyNQ==", "diff_hunk": "@@ -51,10 +55,73 @@ void THTensor_(geometric)(THTensor *self, THGenerator *_generator, double p)\n   TH_TENSOR_APPLY(real, self, *self_data = (real)THRandom_geometric(_generator, p););\n }\n \n+#ifdef TH_BLAS_MKL\n+#define BERNOULLI_OMP 10000\n+void Bernoulli_generate(const int64_t n, const double p, real *r, THGenerator *_generator)\n+{\n+  int64_t seed = 17 + THRandom_random(_generator) % 4096;\n+\n+#ifdef TH_REAL_IS_INT\n+  int *tmp = r;\n+#else\n+  int *tmp = (int*)malloc(n*sizeof(int));\n+#endif\n+\n+#ifdef _OPENMP\n+  size_t nthr = omp_get_num_threads();\n+  int run_parallel = 0;\n+  if ((omp_in_parallel() == 0) && (n >= BERNOULLI_OMP)) {\n+    run_parallel = 1;\n+  }\n+  if (0 == run_parallel) nthr = 1;", "path": "aten/src/TH/generic/THTensorRandom.cpp", "position": null, "original_position": 33, "commit_id": "747e8775670233b943305a0f5bbed0a910052908", "original_commit_id": "bd17432e797f3766b33415d9851b1a652f3d77c6", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Aren't all those lines equivalent to just this?\r\n```cpp\r\nint nthr = !omp_in_parallel() && n >= BERNOULLI_OMP ? omp_get_num_threads() : 1;\r\n```", "created_at": "2018-05-02T11:01:03Z", "updated_at": "2018-11-23T15:43:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/7171#discussion_r185460125", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7171", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/185460125"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7171#discussion_r185460125"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7171"}}, "body_html": "<p>Aren't all those lines equivalent to just this?</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">int</span> nthr = !omp_in_parallel() &amp;&amp; n &gt;= BERNOULLI_OMP ? omp_get_num_threads() : <span class=\"pl-c1\">1</span>;</pre></div>", "body_text": "Aren't all those lines equivalent to just this?\nint nthr = !omp_in_parallel() && n >= BERNOULLI_OMP ? omp_get_num_threads() : 1;"}