{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/392226067", "html_url": "https://github.com/pytorch/pytorch/issues/711#issuecomment-392226067", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/711", "id": 392226067, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjIyNjA2Nw==", "user": {"login": "danmackinlay", "id": 21740, "node_id": "MDQ6VXNlcjIxNzQw", "avatar_url": "https://avatars2.githubusercontent.com/u/21740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danmackinlay", "html_url": "https://github.com/danmackinlay", "followers_url": "https://api.github.com/users/danmackinlay/followers", "following_url": "https://api.github.com/users/danmackinlay/following{/other_user}", "gists_url": "https://api.github.com/users/danmackinlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/danmackinlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danmackinlay/subscriptions", "organizations_url": "https://api.github.com/users/danmackinlay/orgs", "repos_url": "https://api.github.com/users/danmackinlay/repos", "events_url": "https://api.github.com/users/danmackinlay/events{/privacy}", "received_events_url": "https://api.github.com/users/danmackinlay/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-26T01:36:30Z", "updated_at": "2018-05-26T01:36:30Z", "author_association": "NONE", "body_html": "<p>Yes. I think that's more or less standard. AFAICT the messy structure in current Pytorch is, looking at code, about conveniently using the inconvenient and highly opinionated cuDNN optimisations, and it's hard to see how that would work with the nice clean inheritance structure above, which is much more general than cuDNN implements (I think it is at least - my eyes glaze when i read the cuDNN docs). Support ing both general user-defined RNNs and highly optimised pre-fab cuDNN optimisations and doing it all with nice clean inheritance and clear simple design is non-trivial. Which is, i presume, why we are where we are.</p>\n<p>That said, if we give up the cudnn optimisations, it's precisely as simple as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11862328\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/guillaume-chevalier\">@guillaume-chevalier</a> suggests, and I suspect that many of us have already implemented approximately that for our own code. I know I have, and it all fits in 2 short python modules. (Exception: I just use tuples rather than custom State classes, because I'm not enthusiastic about inheritance, but apart from that...)  Probably someone could cough up a decent implementation right now....</p>", "body_text": "Yes. I think that's more or less standard. AFAICT the messy structure in current Pytorch is, looking at code, about conveniently using the inconvenient and highly opinionated cuDNN optimisations, and it's hard to see how that would work with the nice clean inheritance structure above, which is much more general than cuDNN implements (I think it is at least - my eyes glaze when i read the cuDNN docs). Support ing both general user-defined RNNs and highly optimised pre-fab cuDNN optimisations and doing it all with nice clean inheritance and clear simple design is non-trivial. Which is, i presume, why we are where we are.\nThat said, if we give up the cudnn optimisations, it's precisely as simple as @guillaume-chevalier suggests, and I suspect that many of us have already implemented approximately that for our own code. I know I have, and it all fits in 2 short python modules. (Exception: I just use tuples rather than custom State classes, because I'm not enthusiastic about inheritance, but apart from that...)  Probably someone could cough up a decent implementation right now....", "body": "Yes. I think that's more or less standard. AFAICT the messy structure in current Pytorch is, looking at code, about conveniently using the inconvenient and highly opinionated cuDNN optimisations, and it's hard to see how that would work with the nice clean inheritance structure above, which is much more general than cuDNN implements (I think it is at least - my eyes glaze when i read the cuDNN docs). Support ing both general user-defined RNNs and highly optimised pre-fab cuDNN optimisations and doing it all with nice clean inheritance and clear simple design is non-trivial. Which is, i presume, why we are where we are.\r\n\r\nThat said, if we give up the cudnn optimisations, it's precisely as simple as @guillaume-chevalier suggests, and I suspect that many of us have already implemented approximately that for our own code. I know I have, and it all fits in 2 short python modules. (Exception: I just use tuples rather than custom State classes, because I'm not enthusiastic about inheritance, but apart from that...)  Probably someone could cough up a decent implementation right now...."}