{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430125124", "html_url": "https://github.com/pytorch/pytorch/issues/711#issuecomment-430125124", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/711", "id": 430125124, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDEyNTEyNA==", "user": {"login": "tangyuq", "id": 6866166, "node_id": "MDQ6VXNlcjY4NjYxNjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6866166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tangyuq", "html_url": "https://github.com/tangyuq", "followers_url": "https://api.github.com/users/tangyuq/followers", "following_url": "https://api.github.com/users/tangyuq/following{/other_user}", "gists_url": "https://api.github.com/users/tangyuq/gists{/gist_id}", "starred_url": "https://api.github.com/users/tangyuq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tangyuq/subscriptions", "organizations_url": "https://api.github.com/users/tangyuq/orgs", "repos_url": "https://api.github.com/users/tangyuq/repos", "events_url": "https://api.github.com/users/tangyuq/events{/privacy}", "received_events_url": "https://api.github.com/users/tangyuq/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T07:06:31Z", "updated_at": "2018-10-16T07:48:08Z", "author_association": "NONE", "body_html": "<p>I am trying to work out a minimal example of using customized RNNCell with pack_padded_sequence. Just want to make sure that the following pseudo code is correct. If not, can you please point to or create a jit example which works with packed APIs?</p>\n<pre><code>@torch.jit.script\ndef rnn_relu_cell(input, hidden, w_ih, w_hh, b_ih, b_hh):\n    igates = torch.mm(input, w_ih.t()) + b_ih\n    hgates = torch.mm(hidden, w_hh.t()) + b_hh\n    return torch.relu(igates + hgates)\n\nbatch_cells = {}\n@torch.jit.script\ndef rnn_relu(input, hidden, w_ih, w_hh, b_ih, b_hh):\n     packed, batch_sizes = input\n     batch_start = 0\n     outputs = []\n     output_batch_sizes = batch_sizes\n     for batch_size in batch_sizes:\n          cell = torch.jit.batch(cell, batch_size=batch_size) if batch_size not in batch_cells else batch_cells[batch_size]\n          batch_end = batch_start + batch_size \n          hidden[0:batch_size] = cell(packed[seq_start:seq_end], hidden[0:batch_size], w_ih, w_hh, b_ih, b_hh)   \n          batch_start = batch_end  \n          outputs.append(hidden[0:batch_size])\n     return torch.stack(outputs), output_batch_sizes\n\nrnn_relu = lambda input, hidden: rnn_relu(input, hidden, ....initiated parameters...)\nbatch_in = torch.zeros((batch_size, 1, max_length)) \nhidden = torch.zeros((batch_size, 1, 1)) \npack = torch.nn.utils.rnn.pack_padded_sequence(batch_in, seq_lengths, batch_first=True)\nout = rnn_relu(pack, hidden)\nunpacked, unpacked_batch_sizes = torch.nn.utils.rnn.pad_packed_sequence(out)\n\n</code></pre>", "body_text": "I am trying to work out a minimal example of using customized RNNCell with pack_padded_sequence. Just want to make sure that the following pseudo code is correct. If not, can you please point to or create a jit example which works with packed APIs?\n@torch.jit.script\ndef rnn_relu_cell(input, hidden, w_ih, w_hh, b_ih, b_hh):\n    igates = torch.mm(input, w_ih.t()) + b_ih\n    hgates = torch.mm(hidden, w_hh.t()) + b_hh\n    return torch.relu(igates + hgates)\n\nbatch_cells = {}\n@torch.jit.script\ndef rnn_relu(input, hidden, w_ih, w_hh, b_ih, b_hh):\n     packed, batch_sizes = input\n     batch_start = 0\n     outputs = []\n     output_batch_sizes = batch_sizes\n     for batch_size in batch_sizes:\n          cell = torch.jit.batch(cell, batch_size=batch_size) if batch_size not in batch_cells else batch_cells[batch_size]\n          batch_end = batch_start + batch_size \n          hidden[0:batch_size] = cell(packed[seq_start:seq_end], hidden[0:batch_size], w_ih, w_hh, b_ih, b_hh)   \n          batch_start = batch_end  \n          outputs.append(hidden[0:batch_size])\n     return torch.stack(outputs), output_batch_sizes\n\nrnn_relu = lambda input, hidden: rnn_relu(input, hidden, ....initiated parameters...)\nbatch_in = torch.zeros((batch_size, 1, max_length)) \nhidden = torch.zeros((batch_size, 1, 1)) \npack = torch.nn.utils.rnn.pack_padded_sequence(batch_in, seq_lengths, batch_first=True)\nout = rnn_relu(pack, hidden)\nunpacked, unpacked_batch_sizes = torch.nn.utils.rnn.pad_packed_sequence(out)", "body": "I am trying to work out a minimal example of using customized RNNCell with pack_padded_sequence. Just want to make sure that the following pseudo code is correct. If not, can you please point to or create a jit example which works with packed APIs?\r\n\r\n```\r\n@torch.jit.script\r\ndef rnn_relu_cell(input, hidden, w_ih, w_hh, b_ih, b_hh):\r\n    igates = torch.mm(input, w_ih.t()) + b_ih\r\n    hgates = torch.mm(hidden, w_hh.t()) + b_hh\r\n    return torch.relu(igates + hgates)\r\n\r\nbatch_cells = {}\r\n@torch.jit.script\r\ndef rnn_relu(input, hidden, w_ih, w_hh, b_ih, b_hh):\r\n     packed, batch_sizes = input\r\n     batch_start = 0\r\n     outputs = []\r\n     output_batch_sizes = batch_sizes\r\n     for batch_size in batch_sizes:\r\n          cell = torch.jit.batch(cell, batch_size=batch_size) if batch_size not in batch_cells else batch_cells[batch_size]\r\n          batch_end = batch_start + batch_size \r\n          hidden[0:batch_size] = cell(packed[seq_start:seq_end], hidden[0:batch_size], w_ih, w_hh, b_ih, b_hh)   \r\n          batch_start = batch_end  \r\n          outputs.append(hidden[0:batch_size])\r\n     return torch.stack(outputs), output_batch_sizes\r\n\r\nrnn_relu = lambda input, hidden: rnn_relu(input, hidden, ....initiated parameters...)\r\nbatch_in = torch.zeros((batch_size, 1, max_length)) \r\nhidden = torch.zeros((batch_size, 1, 1)) \r\npack = torch.nn.utils.rnn.pack_padded_sequence(batch_in, seq_lengths, batch_first=True)\r\nout = rnn_relu(pack, hidden)\r\nunpacked, unpacked_batch_sizes = torch.nn.utils.rnn.pad_packed_sequence(out)\r\n\r\n```\r\n"}