{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216052688", "pull_request_review_id": 153459429, "id": 216052688, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjA1MjY4OA==", "diff_hunk": "@@ -212,6 +212,60 @@ class ProcessGroupGloo : public ProcessGroup {\n     friend class ProcessGroupGloo;\n   };\n \n+  // For send and recv operations there is no need to pass them to the\n+  // thread pool as they are entirely completed by the device thread.\n+  // This work object is used to synchronize completion of the send or\n+  // recv operation. It keeps a reference to the tensor it is\n+  // operating on to prevent it from being deallocated while the\n+  // operation is still in flight.\n+  class SendWork : public ProcessGroup::Work {\n+   public:\n+    explicit SendWork(\n+        at::Tensor& tensor,\n+        std::unique_ptr<::gloo::transport::UnboundBuffer> buffer);\n+\n+    virtual ~SendWork() = default;\n+\n+    bool isCompleted() const override;\n+\n+    bool isSuccess() const override;\n+\n+    void synchronize() override;\n+\n+    bool wait() override;\n+\n+    const std::exception& exception() const override;\n+\n+   protected:\n+    at::Tensor tensor_;\n+    std::unique_ptr<::gloo::transport::UnboundBuffer> buffer_;\n+  };\n+\n+  class RecvWork : public ProcessGroup::Work {\n+   public:\n+    explicit RecvWork(\n+        at::Tensor& tensor,\n+        std::unique_ptr<::gloo::transport::UnboundBuffer> buffer,\n+        int* srcRank);\n+\n+    virtual ~RecvWork() = default;\n+\n+    bool isCompleted() const override;\n+\n+    bool isSuccess() const override;\n+\n+    void synchronize() override;\n+\n+    bool wait() override;\n+\n+    const std::exception& exception() const override;\n+\n+   protected:\n+    at::Tensor tensor_;\n+    std::unique_ptr<::gloo::transport::UnboundBuffer> buffer_;\n+    int* srcRank_;", "path": "torch/lib/c10d/ProcessGroupGloo.hpp", "position": 55, "original_position": 55, "commit_id": "1c1b782ef25fc4bd446f7cea3033c88e1c4c8ba7", "original_commit_id": "203a237d6f237ab7ef7cd457ec5f7da83ba0ac27", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "Ah, I see", "created_at": "2018-09-07T18:41:03Z", "updated_at": "2018-11-23T15:50:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/11387#discussion_r216052688", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11387", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216052688"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11387#discussion_r216052688"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11387"}}, "body_html": "<p>Ah, I see</p>", "body_text": "Ah, I see", "in_reply_to_id": 216044087}