{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14302", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14302/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14302/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14302/events", "html_url": "https://github.com/pytorch/pytorch/pull/14302", "id": 383336814, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMyODI5Mjgx", "number": 14302, "title": "Cuda version comparison with CUDA_VERSION_STRING", "user": {"login": "achalshah20", "id": 9772589, "node_id": "MDQ6VXNlcjk3NzI1ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9772589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achalshah20", "html_url": "https://github.com/achalshah20", "followers_url": "https://api.github.com/users/achalshah20/followers", "following_url": "https://api.github.com/users/achalshah20/following{/other_user}", "gists_url": "https://api.github.com/users/achalshah20/gists{/gist_id}", "starred_url": "https://api.github.com/users/achalshah20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achalshah20/subscriptions", "organizations_url": "https://api.github.com/users/achalshah20/orgs", "repos_url": "https://api.github.com/users/achalshah20/repos", "events_url": "https://api.github.com/users/achalshah20/events{/privacy}", "received_events_url": "https://api.github.com/users/achalshah20/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-22T00:22:57Z", "updated_at": "2018-11-23T15:55:22Z", "closed_at": "2018-11-22T05:04:02Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/14302", "html_url": "https://github.com/pytorch/pytorch/pull/14302", "diff_url": "https://github.com/pytorch/pytorch/pull/14302.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/14302.patch"}, "body_html": "<p>Cuda headers include cuda version in form of major.minor. But when we do find_package(cuda). CUDA_VERSION variable includes patch number as well which fails following condition.</p>\n<p><code>if(NOT ${cuda_version_from_header} STREQUAL ${CUDA_VERSION})</code></p>\n<p><strong>For example:</strong><br>\nI have cuda 10.0 installed. My nvcc output looks like this<br>\n<code>Cuda compilation tools, release 10.0, **V10.0.130** </code></p>\n<p>If I compile my application with caffe2. It gives me following error:</p>\n<pre><code>CMake Error at /usr/share/cmake/Caffe2/public/cuda.cmake:59 (message):\n  FindCUDA says CUDA version is (usually determined by nvcc), but the CUDA\n  headers say the version is 10.0.  This often occurs when you set both\n  CUDA_HOME and CUDA_NVCC_EXECUTABLE to non-standard locations, without also\n  setting PATH to point to the correct nvcc.  Perhaps, try re-running this\n  command again with PATH=/usr/local/cuda/bin:$PATH.  See above log messages\n  for more diagnostics, and see\n  https://github.com/pytorch/pytorch/issues/8092 for more details.\n</code></pre>\n<p><strong>In this case, it got failed because</strong><br>\ncuda_version_from_header = 10.0<br>\nCUDA_VERSION = 10.0.130 (Came from NVCC)</p>\n<p><code>if(NOT ${cuda_version_from_header} STREQUAL ${CUDA_VERSION}) </code></p>\n<p><strong>Fix:</strong><br>\nWe should compare header version with <strong>major.minor format</strong> which is given by CUDA_VERSION_STRING</p>", "body_text": "Cuda headers include cuda version in form of major.minor. But when we do find_package(cuda). CUDA_VERSION variable includes patch number as well which fails following condition.\nif(NOT ${cuda_version_from_header} STREQUAL ${CUDA_VERSION})\nFor example:\nI have cuda 10.0 installed. My nvcc output looks like this\nCuda compilation tools, release 10.0, **V10.0.130** \nIf I compile my application with caffe2. It gives me following error:\nCMake Error at /usr/share/cmake/Caffe2/public/cuda.cmake:59 (message):\n  FindCUDA says CUDA version is (usually determined by nvcc), but the CUDA\n  headers say the version is 10.0.  This often occurs when you set both\n  CUDA_HOME and CUDA_NVCC_EXECUTABLE to non-standard locations, without also\n  setting PATH to point to the correct nvcc.  Perhaps, try re-running this\n  command again with PATH=/usr/local/cuda/bin:$PATH.  See above log messages\n  for more diagnostics, and see\n  https://github.com/pytorch/pytorch/issues/8092 for more details.\n\nIn this case, it got failed because\ncuda_version_from_header = 10.0\nCUDA_VERSION = 10.0.130 (Came from NVCC)\nif(NOT ${cuda_version_from_header} STREQUAL ${CUDA_VERSION}) \nFix:\nWe should compare header version with major.minor format which is given by CUDA_VERSION_STRING", "body": "Cuda headers include cuda version in form of major.minor. But when we do find_package(cuda). CUDA_VERSION variable includes patch number as well which fails following condition.\r\n\r\n`\r\nif(NOT ${cuda_version_from_header} STREQUAL ${CUDA_VERSION})\r\n`\r\n\r\n**For example:**\r\nI have cuda 10.0 installed. My nvcc output looks like this\r\n`Cuda compilation tools, release 10.0, **V10.0.130**\r\n`\r\n\r\nIf I compile my application with caffe2. It gives me following error: \r\n\r\n```\r\nCMake Error at /usr/share/cmake/Caffe2/public/cuda.cmake:59 (message):\r\n  FindCUDA says CUDA version is (usually determined by nvcc), but the CUDA\r\n  headers say the version is 10.0.  This often occurs when you set both\r\n  CUDA_HOME and CUDA_NVCC_EXECUTABLE to non-standard locations, without also\r\n  setting PATH to point to the correct nvcc.  Perhaps, try re-running this\r\n  command again with PATH=/usr/local/cuda/bin:$PATH.  See above log messages\r\n  for more diagnostics, and see\r\n  https://github.com/pytorch/pytorch/issues/8092 for more details.\r\n```\r\n\r\n**In this case, it got failed because** \r\ncuda_version_from_header = 10.0\r\nCUDA_VERSION = 10.0.130 (Came from NVCC)\r\n\r\n\r\n`if(NOT ${cuda_version_from_header} STREQUAL ${CUDA_VERSION})\r\n`\r\n\r\n**Fix:**\r\nWe should compare header version with **major.minor format** which is given by CUDA_VERSION_STRING"}