{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/349458894", "html_url": "https://github.com/pytorch/pytorch/pull/4041#issuecomment-349458894", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4041", "id": 349458894, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTQ1ODg5NA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-05T22:11:54Z", "updated_at": "2017-12-05T22:11:54Z", "author_association": "MEMBER", "body_html": "<p>To clarify on the exception issue: a lot of functions in <code>TH</code> can call <code>THError</code>, including the TH_TENSOR_APPLY macros. In PyTorch, THError throws a C++ exception. If that happens while the pthread lock is held, it would not be released. That would lead to deadlocks if the random function were called again.</p>\n<p>I suspect that moving all of TH to C++ would be a pain. You can avoid the C++ types in the <code>THRandom.h</code> header by using an <a href=\"https://en.wikipedia.org/wiki/Opaque_pointer#C\" rel=\"nofollow\">opaque struct</a> in the header file.</p>", "body_text": "To clarify on the exception issue: a lot of functions in TH can call THError, including the TH_TENSOR_APPLY macros. In PyTorch, THError throws a C++ exception. If that happens while the pthread lock is held, it would not be released. That would lead to deadlocks if the random function were called again.\nI suspect that moving all of TH to C++ would be a pain. You can avoid the C++ types in the THRandom.h header by using an opaque struct in the header file.", "body": "To clarify on the exception issue: a lot of functions in `TH` can call `THError`, including the TH_TENSOR_APPLY macros. In PyTorch, THError throws a C++ exception. If that happens while the pthread lock is held, it would not be released. That would lead to deadlocks if the random function were called again.\r\n\r\nI suspect that moving all of TH to C++ would be a pain. You can avoid the C++ types in the `THRandom.h` header by using an [opaque struct](https://en.wikipedia.org/wiki/Opaque_pointer#C) in the header file. "}