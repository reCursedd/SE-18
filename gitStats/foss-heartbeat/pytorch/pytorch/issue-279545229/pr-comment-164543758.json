{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164543758", "pull_request_review_id": 92332782, "id": 164543758, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU0Mzc1OA==", "diff_hunk": "@@ -434,6 +447,7 @@ void THTensor_(getRNGState)(THGenerator *_generator, THTensor *self)\n   THArgCheck(THTensor_(isContiguous)(self), 1, \"RNG state needs to be contiguous\");\n   rng_state = (THGenerator *)THTensor_(data)(self);\n   THGenerator_copy(rng_state, _generator);\n+  rng_state->mutex = NULL;  // mutex should not be part of the generator state", "path": "aten/src/TH/generic/THTensorRandom.cpp", "position": null, "original_position": 116, "commit_id": "4028540d217200a9ded3ea020ae8fc8cf40dde2f", "original_commit_id": "2b648a6cbd09f92f3002e0bf413955bdb250157e", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "This looks like it leaks the mutex. THGenerator_copy creates a new mutex, but then it's set to NULL here.\r\n\r\nI think to do this properly, we should separate the RNG state from the rest of the THGenerator. For example, you can add a struct `THGeneratorState` which contains all the current fields of `THGenerator` except the `std::mutex*`. `THGenerator` can either extend `THGeneratorState` or contain it as a field. `THTensor_(getRNGState)` and `THTensor_(setRNGState)` should only access and overwrite the `THGeneratorState`.", "created_at": "2018-01-29T19:48:23Z", "updated_at": "2018-11-23T15:38:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/4041#discussion_r164543758", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4041", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164543758"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4041#discussion_r164543758"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4041"}}, "body_html": "<p>This looks like it leaks the mutex. THGenerator_copy creates a new mutex, but then it's set to NULL here.</p>\n<p>I think to do this properly, we should separate the RNG state from the rest of the THGenerator. For example, you can add a struct <code>THGeneratorState</code> which contains all the current fields of <code>THGenerator</code> except the <code>std::mutex*</code>. <code>THGenerator</code> can either extend <code>THGeneratorState</code> or contain it as a field. <code>THTensor_(getRNGState)</code> and <code>THTensor_(setRNGState)</code> should only access and overwrite the <code>THGeneratorState</code>.</p>", "body_text": "This looks like it leaks the mutex. THGenerator_copy creates a new mutex, but then it's set to NULL here.\nI think to do this properly, we should separate the RNG state from the rest of the THGenerator. For example, you can add a struct THGeneratorState which contains all the current fields of THGenerator except the std::mutex*. THGenerator can either extend THGeneratorState or contain it as a field. THTensor_(getRNGState) and THTensor_(setRNGState) should only access and overwrite the THGeneratorState."}