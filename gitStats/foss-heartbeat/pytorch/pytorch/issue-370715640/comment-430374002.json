{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430374002", "html_url": "https://github.com/pytorch/pytorch/issues/12716#issuecomment-430374002", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12716", "id": 430374002, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDM3NDAwMg==", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T19:44:53Z", "updated_at": "2018-10-16T19:45:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Using autograd, you can get log_prob via cdf. This would involve unnecessary use of a graph when the analytic expression exists and is simple to implement. You could look at <code>test_cdf_log_prob</code> In <code>test_distributions.py</code> if you are interested about how this can be done.</p>\n<p>If I understand correctly, the cdf takes two values: the probability at X = 0 or the sum of probabilities at X = 0 and X = 1 (which is 1)</p>", "body_text": "Using autograd, you can get log_prob via cdf. This would involve unnecessary use of a graph when the analytic expression exists and is simple to implement. You could look at test_cdf_log_prob In test_distributions.py if you are interested about how this can be done.\nIf I understand correctly, the cdf takes two values: the probability at X = 0 or the sum of probabilities at X = 0 and X = 1 (which is 1)", "body": "Using autograd, you can get log_prob via cdf. This would involve unnecessary use of a graph when the analytic expression exists and is simple to implement. You could look at `test_cdf_log_prob` In `test_distributions.py` if you are interested about how this can be done.\r\n\r\nIf I understand correctly, the cdf takes two values: the probability at X = 0 or the sum of probabilities at X = 0 and X = 1 (which is 1)"}