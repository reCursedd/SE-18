{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/328926510", "html_url": "https://github.com/pytorch/pytorch/pull/2697#issuecomment-328926510", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2697", "id": 328926510, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODkyNjUxMA==", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-12T17:33:45Z", "updated_at": "2017-09-12T17:33:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think we should abandon this patch.</p>\n<p>Like LLVM, ONNX inputs and outputs are only meaningfully defined based on position. The input and output names are just used inside the function to specify the implementation.  ONNX takes advantage of this, doing renaming for inplace in Caffe2, etc.</p>\n<p>Any attempt to force stable names on ONNX in an ad hoc way is going to just create more problems down the road,  especially if people begin to expect stable naming.</p>\n<p>What can we do instead? I think we should just supplement onnx_caffe2 with a helper functions that let you stably extract the Caffe2 name for a parameter based on its position. Something like <code>backend.caffe2NameForInput(0)</code>, <code>backend.caffe2NameForOutput(0)</code>. These functions are actually trivial one-liners but we should provide them anyway so people know how to do it.</p>\n<p>We should then flip the input/parameter order so that true inputs come first so people don't have to use <code>-1</code> to get the inputs. If we ever add named inputs/outputs proper to ONNX we can then think about adding more functionality here.</p>", "body_text": "I think we should abandon this patch.\nLike LLVM, ONNX inputs and outputs are only meaningfully defined based on position. The input and output names are just used inside the function to specify the implementation.  ONNX takes advantage of this, doing renaming for inplace in Caffe2, etc.\nAny attempt to force stable names on ONNX in an ad hoc way is going to just create more problems down the road,  especially if people begin to expect stable naming.\nWhat can we do instead? I think we should just supplement onnx_caffe2 with a helper functions that let you stably extract the Caffe2 name for a parameter based on its position. Something like backend.caffe2NameForInput(0), backend.caffe2NameForOutput(0). These functions are actually trivial one-liners but we should provide them anyway so people know how to do it.\nWe should then flip the input/parameter order so that true inputs come first so people don't have to use -1 to get the inputs. If we ever add named inputs/outputs proper to ONNX we can then think about adding more functionality here.", "body": "I think we should abandon this patch.\r\n\r\nLike LLVM, ONNX inputs and outputs are only meaningfully defined based on position. The input and output names are just used inside the function to specify the implementation.  ONNX takes advantage of this, doing renaming for inplace in Caffe2, etc. \r\n\r\nAny attempt to force stable names on ONNX in an ad hoc way is going to just create more problems down the road,  especially if people begin to expect stable naming. \r\n\r\nWhat can we do instead? I think we should just supplement onnx_caffe2 with a helper functions that let you stably extract the Caffe2 name for a parameter based on its position. Something like `backend.caffe2NameForInput(0)`, `backend.caffe2NameForOutput(0)`. These functions are actually trivial one-liners but we should provide them anyway so people know how to do it.\r\n\r\n We should then flip the input/parameter order so that true inputs come first so people don't have to use `-1` to get the inputs. If we ever add named inputs/outputs proper to ONNX we can then think about adding more functionality here."}