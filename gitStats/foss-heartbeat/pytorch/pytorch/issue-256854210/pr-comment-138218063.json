{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138218063", "pull_request_review_id": 61984523, "id": 138218063, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODIxODA2Mw==", "diff_hunk": "@@ -256,18 +256,46 @@ static void addAttribute(onnx::NodeProto * n_p, jit::Node * n, jit::Symbol name)\n       break;\n     case AttributeKind::g: {\n       auto g = attr->mutable_g();\n-      encodeGraph(g, n->g(name), {});\n+      encodeGraph(g, n->g(name), {}, {}, {});\n     } break;\n     case AttributeKind::gs:\n       for(auto & v : n->gs(name)) {\n         auto g = attr->add_graphs();\n-        encodeGraph(g, v, {});\n+        encodeGraph(g, v, {}, {}, {});\n       }\n       break;\n   }\n }\n \n-static void encodeGraph(onnx::GraphProto * p_g, std::shared_ptr<Graph> & g, const std::vector<at::Tensor> & initializers) {\n+\n+static void encodeGraph(onnx::GraphProto * p_g, std::shared_ptr<Graph> & g,\n+  const std::vector<std::string> & input_names,\n+  const std::vector<std::string> & output_names,\n+  const std::vector<at::Tensor> & initializers) {\n+\n+  std::unordered_map<Node *, std::string> node_names;\n+  auto initNames = [&](const node_list & nodes, const std::vector<std::string> & names) {\n+    JIT_ASSERT(names.size() <= nodes.size());\n+    size_t idx = nodes.size() - names.size();\n+    for (auto & name : names) {\n+      auto node = nodes.at(idx++);\n+      auto it = node_names.find(node);\n+      // rarely, output nodes may be repeated\n+      // if this happens, we just take the first name we find for it as its name\n+      if(it == node_names.end()) {\n+        node_names[node] = name;", "path": "torch/csrc/onnx/export.cpp", "position": null, "original_position": 58, "commit_id": "058878d6db93a2e9f984733ce6aa3251133140e7", "original_commit_id": "e0eb0b50cf4f111efa7fc34e83be88b718802991", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "If this case triggers, the export process will silently fail to give a correct name to the output. When a user attempts to run the model from ONNX, they will simply be told that a name (they rightly expect to exist) doesn't exist. You won't be able to debug this situation without looking at the protobuf.\r\n\r\nIt would be much better to just raise an error in this case.", "created_at": "2017-09-11T23:26:28Z", "updated_at": "2018-11-23T15:34:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/2697#discussion_r138218063", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2697", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138218063"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2697#discussion_r138218063"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2697"}}, "body_html": "<p>If this case triggers, the export process will silently fail to give a correct name to the output. When a user attempts to run the model from ONNX, they will simply be told that a name (they rightly expect to exist) doesn't exist. You won't be able to debug this situation without looking at the protobuf.</p>\n<p>It would be much better to just raise an error in this case.</p>", "body_text": "If this case triggers, the export process will silently fail to give a correct name to the output. When a user attempts to run the model from ONNX, they will simply be told that a name (they rightly expect to exist) doesn't exist. You won't be able to debug this situation without looking at the protobuf.\nIt would be much better to just raise an error in this case."}