{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138228230", "pull_request_review_id": 61995255, "id": 138228230, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODIyODIzMA==", "diff_hunk": "@@ -256,18 +256,46 @@ static void addAttribute(onnx::NodeProto * n_p, jit::Node * n, jit::Symbol name)\n       break;\n     case AttributeKind::g: {\n       auto g = attr->mutable_g();\n-      encodeGraph(g, n->g(name), {});\n+      encodeGraph(g, n->g(name), {}, {}, {});\n     } break;\n     case AttributeKind::gs:\n       for(auto & v : n->gs(name)) {\n         auto g = attr->add_graphs();\n-        encodeGraph(g, v, {});\n+        encodeGraph(g, v, {}, {}, {});\n       }\n       break;\n   }\n }\n \n-static void encodeGraph(onnx::GraphProto * p_g, std::shared_ptr<Graph> & g, const std::vector<at::Tensor> & initializers) {\n+\n+static void encodeGraph(onnx::GraphProto * p_g, std::shared_ptr<Graph> & g,\n+  const std::vector<std::string> & input_names,\n+  const std::vector<std::string> & output_names,\n+  const std::vector<at::Tensor> & initializers) {\n+\n+  std::unordered_map<Node *, std::string> node_names;\n+  auto initNames = [&](const node_list & nodes, const std::vector<std::string> & names) {\n+    JIT_ASSERT(names.size() <= nodes.size());\n+    size_t idx = nodes.size() - names.size();\n+    for (auto & name : names) {\n+      auto node = nodes.at(idx++);\n+      auto it = node_names.find(node);\n+      // rarely, output nodes may be repeated\n+      // if this happens, we just take the first name we find for it as its name\n+      if(it == node_names.end()) {\n+        node_names[node] = name;\n+      }\n+    }\n+  };\n+  initNames(g->inputs(), input_names);\n+  initNames(g->outputs(), output_names);\n+  auto node_name = [&](Node * n) {\n+    auto it = node_names.find(n);\n+    if(it != node_names.end())\n+      return it->second;\n+    return \"$\" + n->uniqueName();", "path": "torch/csrc/onnx/export.cpp", "position": null, "original_position": 68, "commit_id": "058878d6db93a2e9f984733ce6aa3251133140e7", "original_commit_id": "e0eb0b50cf4f111efa7fc34e83be88b718802991", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Well, there are a few possibilities.\r\n\r\n1. Reserve identifiers which start with `[0-9]`. Now you don't need to rename the numeric identifiers with a leading dollar. This is what LLVM does, btw: http://llvm.org/docs/LangRef.html#identifiers\r\n2. Fix up the ONNX printer to not prepend the output with `%`. Perhaps if we want named identifiers to still display with a prefix, we can test if the first character is a `$` or not, and prepend `%` if it is.", "created_at": "2017-09-12T00:44:22Z", "updated_at": "2018-11-23T15:34:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/2697#discussion_r138228230", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2697", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/138228230"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2697#discussion_r138228230"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2697"}}, "body_html": "<p>Well, there are a few possibilities.</p>\n<ol>\n<li>Reserve identifiers which start with <code>[0-9]</code>. Now you don't need to rename the numeric identifiers with a leading dollar. This is what LLVM does, btw: <a href=\"http://llvm.org/docs/LangRef.html#identifiers\" rel=\"nofollow\">http://llvm.org/docs/LangRef.html#identifiers</a></li>\n<li>Fix up the ONNX printer to not prepend the output with <code>%</code>. Perhaps if we want named identifiers to still display with a prefix, we can test if the first character is a <code>$</code> or not, and prepend <code>%</code> if it is.</li>\n</ol>", "body_text": "Well, there are a few possibilities.\n\nReserve identifiers which start with [0-9]. Now you don't need to rename the numeric identifiers with a leading dollar. This is what LLVM does, btw: http://llvm.org/docs/LangRef.html#identifiers\nFix up the ONNX printer to not prepend the output with %. Perhaps if we want named identifiers to still display with a prefix, we can test if the first character is a $ or not, and prepend % if it is.", "in_reply_to_id": 138219068}