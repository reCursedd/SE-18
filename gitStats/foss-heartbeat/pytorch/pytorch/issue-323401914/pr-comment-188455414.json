{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188455414", "pull_request_review_id": 120437834, "id": 188455414, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODQ1NTQxNA==", "diff_hunk": "@@ -13,6 +13,7 @@ class OptimizerImpl {\n   virtual ~OptimizerImpl() = default;\n   virtual void init_state() {}\n   virtual void step() = 0;\n+  virtual at::Scalar step(std::function<at::Scalar()> closure) = 0;", "path": "torch/csrc/api/include/torch/optimizers.h", "position": null, "original_position": 4, "commit_id": "d0d1a740abb750177b17f20e3e416333b08f1036", "original_commit_id": "6f9d9d4b8219957e38a9f6c5f96dc2bb662c5399", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "body": "I think I prefer just one function, but where the signature looks like:\r\n\r\n```c++\r\nvirtual at::Scalar step(std::function<at::Scalar()> closure = OptimizerImpl::NoLoss) = 0;\r\n```\r\n\r\nand define NoLoss to just return an empty scalar. Keep in mind you'll have to define the default again in each of the subclasses as well. It's slightly cleaner than having a separate step() function that users might have to remember to implement.", "created_at": "2018-05-15T22:28:09Z", "updated_at": "2018-11-23T15:44:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/7596#discussion_r188455414", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7596", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188455414"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7596#discussion_r188455414"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7596"}}, "body_html": "<p>I think I prefer just one function, but where the signature looks like:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">virtual</span> at::Scalar <span class=\"pl-en\">step</span>(std::function&lt;at::Scalar()&gt; closure = OptimizerImpl::NoLoss) = 0;</pre></div>\n<p>and define NoLoss to just return an empty scalar. Keep in mind you'll have to define the default again in each of the subclasses as well. It's slightly cleaner than having a separate step() function that users might have to remember to implement.</p>", "body_text": "I think I prefer just one function, but where the signature looks like:\nvirtual at::Scalar step(std::function<at::Scalar()> closure = OptimizerImpl::NoLoss) = 0;\nand define NoLoss to just return an empty scalar. Keep in mind you'll have to define the default again in each of the subclasses as well. It's slightly cleaner than having a separate step() function that users might have to remember to implement."}