{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220241188", "pull_request_review_id": 158601690, "id": 220241188, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDI0MTE4OA==", "diff_hunk": "@@ -14,19 +14,95 @@\n #include <sstream>\n #include <tuple>\n \n+#if ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 2)) || (__GLIBC__ > 2)\n+#include <spawn.h>\n+#ifdef POSIX_SPAWN_USEVFORK\n+#define USE_POSIX_SPAWN\n+#include <sys/wait.h>\n+extern char **environ;\n+#endif\n+#endif\n+\n+#ifndef USE_POSIX_SPAWN\n+#ifndef __APPLE__\n+#include <malloc.h>\n+#define USE_MALLOC_TRIM\n+#endif\n+#endif\n+\n namespace torch { namespace jit { namespace cpufuser {\n \n CPUFusionCompiler& getFusionCompiler() {\n   static CPUFusionCompiler compiler;\n   return compiler;\n }\n \n+#ifdef USE_POSIX_SPAWN\n+struct PosixSpawnAttrVfork {\n+  explicit PosixSpawnAttrVfork() {\n+    int err = posix_spawnattr_init(&attr);\n+    if (err != 0) {\n+      AT_ERROR(\"posix_spawnattr_init: \", strerror(err));\n+    }\n+\n+    err = posix_spawnattr_setflags(&attr, POSIX_SPAWN_USEVFORK);\n+    if (err != 0) {\n+      AT_ERROR(\"posix_spawnattr_setflags: \", strerror(err));\n+    }\n+  }\n+  ~PosixSpawnAttrVfork() {\n+    int err = posix_spawnattr_destroy(&attr);\n+    if (err != 0) {\n+      AT_WARN(\"posix_spawnattr_destroy: \", strerror(err));\n+    }\n+  }\n+  posix_spawnattr_t attr;\n+};\n+#endif // USE_POSIX_SPAWN\n+\n+int runCommand(const std::string& command) {\n+#ifdef USE_POSIX_SPAWN\n+  // NB: Even with copy-on-write, fork can fail if the parent process's resident\n+  // memory usage is more than half the total RAM. Because of this, we avoid\n+  // system() (that calls fork) and try to use posix_spawn whenever possible.\n+  PosixSpawnAttrVfork attr;\n+  pid_t pid;\n+\n+  // Run sh to run the provided command\n+  const char* cmd = command.c_str();\n+  std::vector<char> cmd_copy(cmd, cmd + command.size() + 1);\n+  char* argv[] = {\"sh\", \"-c\", cmd_copy.data(), NULL};", "path": "torch/csrc/jit/fusers/cpu/fusion_compiler.cpp", "position": 50, "original_position": 61, "commit_id": "fd6ab0866e3e35c808a2bb1849bd3f6340103199", "original_commit_id": "8d755f3e256498207d902977cafb590d27f10ec8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Does this really work? Don't you have to supply every single argument separately? Also, won't the compiler complain about `char*[]` instead of `const char*[]`? I remember we had a bunch of warnings for that, because that's what Python often uses.", "created_at": "2018-09-25T15:28:03Z", "updated_at": "2018-11-23T15:51:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/11897#discussion_r220241188", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11897", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220241188"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11897#discussion_r220241188"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11897"}}, "body_html": "<p>Does this really work? Don't you have to supply every single argument separately? Also, won't the compiler complain about <code>char*[]</code> instead of <code>const char*[]</code>? I remember we had a bunch of warnings for that, because that's what Python often uses.</p>", "body_text": "Does this really work? Don't you have to supply every single argument separately? Also, won't the compiler complain about char*[] instead of const char*[]? I remember we had a bunch of warnings for that, because that's what Python often uses."}