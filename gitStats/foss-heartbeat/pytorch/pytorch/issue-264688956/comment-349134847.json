{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/349134847", "html_url": "https://github.com/pytorch/pytorch/issues/3076#issuecomment-349134847", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3076", "id": 349134847, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTEzNDg0Nw==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-04T22:56:25Z", "updated_at": "2017-12-04T22:56:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>But unless there are some jit-fused kernels there, it is still an awful lot of kernels, regardless of whether python or aten function is called, right? <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/925208af72cd956e5cee0a965da632c7985d6c74/torch/nn/_functions/thnn/batchnorm_double_backwards.py#L23-L95\">pytorch/torch/nn/_functions/thnn/batchnorm_double_backwards.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 23 to 95\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/925208af72cd956e5cee0a965da632c7985d6c74\">925208a</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L23\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"23\"></td>\n          <td id=\"LC23\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">batchnorm_double_backwards_fn</span>(<span class=\"pl-smi\">input</span>, <span class=\"pl-smi\">gamma</span>, <span class=\"pl-smi\">ggI</span>, <span class=\"pl-smi\">ggG</span>, <span class=\"pl-smi\">ggB</span>, <span class=\"pl-smi\">gO</span>, <span class=\"pl-smi\">eps</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L24\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"24\"></td>\n          <td id=\"LC24\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     affine <span class=\"pl-k\">=</span> gamma <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L25\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"25\"></td>\n          <td id=\"LC25\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> affine: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L26\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"26\"></td>\n          <td id=\"LC26\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gamma_expanded <span class=\"pl-k\">=</span> expand_as_dim1(gamma, <span class=\"pl-c1\">input</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L27\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"27\"></td>\n          <td id=\"LC27\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L28\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"28\"></td>\n          <td id=\"LC28\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> ggG <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L29\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"29\"></td>\n          <td id=\"LC29\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             ggG_expanded <span class=\"pl-k\">=</span> expand_as_dim1(ggG, <span class=\"pl-c1\">input</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L30\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"30\"></td>\n          <td id=\"LC30\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L31\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"31\"></td>\n          <td id=\"LC31\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> ggB <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L32\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"32\"></td>\n          <td id=\"LC32\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             ggB_expanded <span class=\"pl-k\">=</span> expand_as_dim1(ggB, <span class=\"pl-c1\">input</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L33\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"33\"></td>\n          <td id=\"LC33\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">else</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L34\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"34\"></td>\n          <td id=\"LC34\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gamma_expanded <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L35\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"35\"></td>\n          <td id=\"LC35\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L36\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"36\"></td>\n          <td id=\"LC36\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> define some terms we will reuse</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L37\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"37\"></td>\n          <td id=\"LC37\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     M <span class=\"pl-k\">=</span> <span class=\"pl-v\">reduce</span>(mul, <span class=\"pl-c1\">input</span>.size()[<span class=\"pl-c1\">0</span>:<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> <span class=\"pl-c1\">input</span>.size()[<span class=\"pl-c1\">2</span>:]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     mu <span class=\"pl-k\">=</span> sum_exclude_dim1(<span class=\"pl-c1\">input</span>).div_(M) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     input_sub_mu <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span> <span class=\"pl-k\">-</span> mu </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L40\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"40\"></td>\n          <td id=\"LC40\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     sigma2_eps <span class=\"pl-k\">=</span> sum_exclude_dim1(input_sub_mu.pow(<span class=\"pl-c1\">2</span>)).div_(M).add_(eps) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     sigma2_eps_neg_1_2 <span class=\"pl-k\">=</span> (sigma2_eps).pow(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>. <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     sigma2_eps_neg_3_2 <span class=\"pl-k\">=</span> (sigma2_eps).pow(<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span>. <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L44\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"44\"></td>\n          <td id=\"LC44\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> calculate gI</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L45\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"45\"></td>\n          <td id=\"LC45\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     input_mu_sigma2_neg_3_2 <span class=\"pl-k\">=</span> (input_sub_mu <span class=\"pl-k\">*</span> sigma2_eps_neg_3_2) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L46\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"46\"></td>\n          <td id=\"LC46\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     gOinmu_sum <span class=\"pl-k\">=</span> sum_exclude_dim1(gO <span class=\"pl-k\">*</span> input_sub_mu) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     gO_sum <span class=\"pl-k\">=</span> sum_exclude_dim1(gO) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> start with contribution of input term</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L50\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"50\"></td>\n          <td id=\"LC50\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     gI <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L51\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"51\"></td>\n          <td id=\"LC51\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> ggI <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L52\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"52\"></td>\n          <td id=\"LC52\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggI_sum <span class=\"pl-k\">=</span> sum_exclude_dim1(ggI) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L53\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"53\"></td>\n          <td id=\"LC53\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggIinmu_sum <span class=\"pl-k\">=</span> sum_exclude_dim1(ggI <span class=\"pl-k\">*</span> input_sub_mu) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L54\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"54\"></td>\n          <td id=\"LC54\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         all_sub <span class=\"pl-k\">=</span> ((ggI_sum <span class=\"pl-k\">*</span> gO_sum).div_(M)).sub_(sum_exclude_dim1(gO <span class=\"pl-k\">*</span> ggI)).add_( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                   ((sigma2_eps).pow(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> gOinmu_sum <span class=\"pl-k\">*</span> ggIinmu_sum).mul_(<span class=\"pl-c1\">3</span>. <span class=\"pl-k\">/</span> M)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gI_0t <span class=\"pl-k\">=</span> (input_mu_sigma2_neg_3_2 <span class=\"pl-k\">*</span> all_sub).div_(M) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gI_1t <span class=\"pl-k\">=</span> (ggIinmu_sum <span class=\"pl-k\">*</span> sigma2_eps_neg_3_2).div_(M) <span class=\"pl-k\">*</span> (gO_sum.div(M) <span class=\"pl-k\">-</span> gO) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gI_2t <span class=\"pl-k\">=</span> (gOinmu_sum <span class=\"pl-k\">*</span> sigma2_eps_neg_3_2).div_(M) <span class=\"pl-k\">*</span> (ggI_sum.div(M) <span class=\"pl-k\">-</span> ggI) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gI <span class=\"pl-k\">=</span> gamma_expanded <span class=\"pl-k\">*</span> (gI_0t.add_(gI_1t).add_(gI_2t)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L60\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"60\"></td>\n          <td id=\"LC60\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> add contribution of gamma term to gI</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L62\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"62\"></td>\n          <td id=\"LC62\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> affine <span class=\"pl-k\">and</span> ggG <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L63\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"63\"></td>\n          <td id=\"LC63\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         t0 <span class=\"pl-k\">=</span> gO <span class=\"pl-k\">*</span> sigma2_eps_neg_1_2 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         t1 <span class=\"pl-k\">=</span> (sigma2_eps_neg_1_2 <span class=\"pl-k\">*</span> gO_sum).div_(<span class=\"pl-k\">-</span>M) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L65\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"65\"></td>\n          <td id=\"LC65\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         t2 <span class=\"pl-k\">=</span> (input_mu_sigma2_neg_3_2 <span class=\"pl-k\">*</span> sum_exclude_dim1(gO <span class=\"pl-k\">*</span> input_sub_mu)).div_(<span class=\"pl-k\">-</span>M) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L66\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"66\"></td>\n          <td id=\"LC66\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gI_G_term <span class=\"pl-k\">=</span> ggG_expanded <span class=\"pl-k\">*</span> (t0.add_(t1).add_(t2)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L67\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"67\"></td>\n          <td id=\"LC67\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gI <span class=\"pl-k\">=</span> gI.add_(gI_G_term) <span class=\"pl-k\">if</span> gI <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> gI_G_term </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L68\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"68\"></td>\n          <td id=\"LC68\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> this is the first backward's grad_input</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L70\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"70\"></td>\n          <td id=\"LC70\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">first_back_grad_input</span>(<span class=\"pl-smi\">gO</span>, <span class=\"pl-smi\">gamma</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         h0 <span class=\"pl-k\">=</span> (gamma <span class=\"pl-k\">/</span> (sigma2_eps).sqrt()).div_(M) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         h1 <span class=\"pl-k\">=</span> (M <span class=\"pl-k\">*</span> gO).sub_(sum_exclude_dim1(gO)).sub_( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             input_sub_mu.div(sigma2_eps) <span class=\"pl-k\">*</span> sum_exclude_dim1(gO <span class=\"pl-k\">*</span> input_sub_mu)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">return</span> h0 <span class=\"pl-k\">*</span> h1 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L75\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"75\"></td>\n          <td id=\"LC75\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L76\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"76\"></td>\n          <td id=\"LC76\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> calculate gG</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L77\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"77\"></td>\n          <td id=\"LC77\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     gG <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L78\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"78\"></td>\n          <td id=\"LC78\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> affine <span class=\"pl-k\">and</span> ggI <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c\"><span class=\"pl-c\">#</span> gG is just the first backwards with the gamma term removed (then shaped properly)</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L80\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"80\"></td>\n          <td id=\"LC80\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gG <span class=\"pl-k\">=</span> ggI <span class=\"pl-k\">*</span> first_back_grad_input(gO, <span class=\"pl-c1\">1</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L81\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"81\"></td>\n          <td id=\"LC81\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         gG <span class=\"pl-k\">=</span> sum_exclude_dim1(gG, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L82\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"82\"></td>\n          <td id=\"LC82\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L83\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"83\"></td>\n          <td id=\"LC83\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> calculate ggO</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L84\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"84\"></td>\n          <td id=\"LC84\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     ggO <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L85\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"85\"></td>\n          <td id=\"LC85\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> contribution of input term</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L86\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"86\"></td>\n          <td id=\"LC86\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> ggI <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L87\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"87\"></td>\n          <td id=\"LC87\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggO <span class=\"pl-k\">=</span> first_back_grad_input(ggI, gamma_expanded) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L88\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"88\"></td>\n          <td id=\"LC88\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> ggG <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L89\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"89\"></td>\n          <td id=\"LC89\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggO_G_term <span class=\"pl-k\">=</span> ggG_expanded <span class=\"pl-k\">*</span> input_sub_mu <span class=\"pl-k\">*</span> sigma2_eps_neg_1_2 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L90\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"90\"></td>\n          <td id=\"LC90\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggO <span class=\"pl-k\">=</span> ggO.add_(ggO_G_term) <span class=\"pl-k\">if</span> ggO <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> ggO_G_term </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L91\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"91\"></td>\n          <td id=\"LC91\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> ggB <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L92\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"92\"></td>\n          <td id=\"LC92\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggO_B_term <span class=\"pl-k\">=</span> ggB_expanded </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L93\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"93\"></td>\n          <td id=\"LC93\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ggO <span class=\"pl-k\">=</span> ggO.add_(ggO_B_term) <span class=\"pl-k\">if</span> ggO <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> ggO_B_term </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L94\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"94\"></td>\n          <td id=\"LC94\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L95\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"95\"></td>\n          <td id=\"LC95\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> gI, gG, ggO </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "But unless there are some jit-fused kernels there, it is still an awful lot of kernels, regardless of whether python or aten function is called, right? \n  \n    \n      pytorch/torch/nn/_functions/thnn/batchnorm_double_backwards.py\n    \n    \n        Lines 23 to 95\n      in\n      925208a\n    \n    \n    \n    \n\n        \n          \n           def batchnorm_double_backwards_fn(input, gamma, ggI, ggG, ggB, gO, eps): \n        \n\n        \n          \n               affine = gamma is not None \n        \n\n        \n          \n               if affine: \n        \n\n        \n          \n                   gamma_expanded = expand_as_dim1(gamma, input) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   if ggG is not None: \n        \n\n        \n          \n                       ggG_expanded = expand_as_dim1(ggG, input) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   if ggB is not None: \n        \n\n        \n          \n                       ggB_expanded = expand_as_dim1(ggB, input) \n        \n\n        \n          \n               else: \n        \n\n        \n          \n                   gamma_expanded = 1 \n        \n\n        \n          \n            \n        \n\n        \n          \n               # define some terms we will reuse \n        \n\n        \n          \n               M = reduce(mul, input.size()[0:1] + input.size()[2:]) \n        \n\n        \n          \n               mu = sum_exclude_dim1(input).div_(M) \n        \n\n        \n          \n               input_sub_mu = input - mu \n        \n\n        \n          \n               sigma2_eps = sum_exclude_dim1(input_sub_mu.pow(2)).div_(M).add_(eps) \n        \n\n        \n          \n               sigma2_eps_neg_1_2 = (sigma2_eps).pow(-1. / 2) \n        \n\n        \n          \n               sigma2_eps_neg_3_2 = (sigma2_eps).pow(-3. / 2) \n        \n\n        \n          \n            \n        \n\n        \n          \n               # calculate gI \n        \n\n        \n          \n               input_mu_sigma2_neg_3_2 = (input_sub_mu * sigma2_eps_neg_3_2) \n        \n\n        \n          \n               gOinmu_sum = sum_exclude_dim1(gO * input_sub_mu) \n        \n\n        \n          \n               gO_sum = sum_exclude_dim1(gO) \n        \n\n        \n          \n            \n        \n\n        \n          \n               # start with contribution of input term \n        \n\n        \n          \n               gI = None \n        \n\n        \n          \n               if ggI is not None: \n        \n\n        \n          \n                   ggI_sum = sum_exclude_dim1(ggI) \n        \n\n        \n          \n                   ggIinmu_sum = sum_exclude_dim1(ggI * input_sub_mu) \n        \n\n        \n          \n                   all_sub = ((ggI_sum * gO_sum).div_(M)).sub_(sum_exclude_dim1(gO * ggI)).add_( \n        \n\n        \n          \n                             ((sigma2_eps).pow(-1) * gOinmu_sum * ggIinmu_sum).mul_(3. / M)) \n        \n\n        \n          \n                   gI_0t = (input_mu_sigma2_neg_3_2 * all_sub).div_(M) \n        \n\n        \n          \n                   gI_1t = (ggIinmu_sum * sigma2_eps_neg_3_2).div_(M) * (gO_sum.div(M) - gO) \n        \n\n        \n          \n                   gI_2t = (gOinmu_sum * sigma2_eps_neg_3_2).div_(M) * (ggI_sum.div(M) - ggI) \n        \n\n        \n          \n                   gI = gamma_expanded * (gI_0t.add_(gI_1t).add_(gI_2t)) \n        \n\n        \n          \n            \n        \n\n        \n          \n               # add contribution of gamma term to gI \n        \n\n        \n          \n               if affine and ggG is not None: \n        \n\n        \n          \n                   t0 = gO * sigma2_eps_neg_1_2 \n        \n\n        \n          \n                   t1 = (sigma2_eps_neg_1_2 * gO_sum).div_(-M) \n        \n\n        \n          \n                   t2 = (input_mu_sigma2_neg_3_2 * sum_exclude_dim1(gO * input_sub_mu)).div_(-M) \n        \n\n        \n          \n                   gI_G_term = ggG_expanded * (t0.add_(t1).add_(t2)) \n        \n\n        \n          \n                   gI = gI.add_(gI_G_term) if gI is not None else gI_G_term \n        \n\n        \n          \n            \n        \n\n        \n          \n               # this is the first backward's grad_input \n        \n\n        \n          \n               def first_back_grad_input(gO, gamma): \n        \n\n        \n          \n                   h0 = (gamma / (sigma2_eps).sqrt()).div_(M) \n        \n\n        \n          \n                   h1 = (M * gO).sub_(sum_exclude_dim1(gO)).sub_( \n        \n\n        \n          \n                       input_sub_mu.div(sigma2_eps) * sum_exclude_dim1(gO * input_sub_mu)) \n        \n\n        \n          \n                   return h0 * h1 \n        \n\n        \n          \n            \n        \n\n        \n          \n               # calculate gG \n        \n\n        \n          \n               gG = None \n        \n\n        \n          \n               if affine and ggI is not None: \n        \n\n        \n          \n                   # gG is just the first backwards with the gamma term removed (then shaped properly) \n        \n\n        \n          \n                   gG = ggI * first_back_grad_input(gO, 1) \n        \n\n        \n          \n                   gG = sum_exclude_dim1(gG, keepdim=False) \n        \n\n        \n          \n            \n        \n\n        \n          \n               # calculate ggO \n        \n\n        \n          \n               ggO = None \n        \n\n        \n          \n               # contribution of input term \n        \n\n        \n          \n               if ggI is not None: \n        \n\n        \n          \n                   ggO = first_back_grad_input(ggI, gamma_expanded) \n        \n\n        \n          \n               if ggG is not None: \n        \n\n        \n          \n                   ggO_G_term = ggG_expanded * input_sub_mu * sigma2_eps_neg_1_2 \n        \n\n        \n          \n                   ggO = ggO.add_(ggO_G_term) if ggO is not None else ggO_G_term \n        \n\n        \n          \n               if ggB is not None: \n        \n\n        \n          \n                   ggO_B_term = ggB_expanded \n        \n\n        \n          \n                   ggO = ggO.add_(ggO_B_term) if ggO is not None else ggO_B_term \n        \n\n        \n          \n            \n        \n\n        \n          \n               return gI, gG, ggO", "body": "But unless there are some jit-fused kernels there, it is still an awful lot of kernels, regardless of whether python or aten function is called, right? https://github.com/pytorch/pytorch/blob/925208af72cd956e5cee0a965da632c7985d6c74/torch/nn/_functions/thnn/batchnorm_double_backwards.py#L23-L95"}