{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193560808", "pull_request_review_id": 126551952, "id": 193560808, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU2MDgwOA==", "diff_hunk": "@@ -0,0 +1,442 @@\n+#include \"ProcessGroupNCCL.hpp\"\n+#include \"private/CUDAUtils.hpp\"\n+\n+#include <THC.h>\n+\n+#include <map>\n+#include <unordered_set>\n+\n+namespace c10d {\n+\n+namespace {\n+\n+// NCCL op mapping\n+std::map<ReduceOp, ncclRedOp_t> ncclOp = {\n+    {ReduceOp::MIN, ncclMin},\n+    {ReduceOp::MAX, ncclMax},\n+    {ReduceOp::SUM, ncclSum},\n+    {ReduceOp::PRODUCT, ncclProd},\n+};\n+\n+// NCCL type typing\n+std::map<at::ScalarType, ncclDataType_t> ncclDataType = {\n+    {at::kChar, ncclInt8},\n+    {at::kByte, ncclUint8},\n+    {at::kFloat, ncclFloat},\n+    {at::kDouble, ncclDouble},\n+    {at::kInt, ncclInt32},\n+    {at::kLong, ncclInt64},\n+    {at::kHalf, ncclHalf},\n+};\n+\n+// Helper function that gets the data type and issues error if not supported\n+ncclDataType_t getNcclDataType(at::ScalarType type) {\n+  try {\n+    return ncclDataType.at(type);\n+  } catch (std::out_of_range& e) {\n+    throw std::runtime_error(\"Unsupported data type for NCCL process group\");\n+  }\n+}\n+\n+// Helper function that gets the device list to determine the CUDA devices\n+std::vector<int> getDevicesFromKey(const std::string& deviceSeq) {\n+  std::stringstream ss(deviceSeq);\n+  std::string device;\n+  std::vector<int> devices;\n+  while (std::getline(ss, device, ',')) {\n+    devices.push_back(stoi(device));\n+  }\n+  return devices;\n+}\n+\n+// Get the deviceList String from the list of devices\n+std::string getKeyFromDevices(const std::vector<int>& devices) {\n+  std::string deviceList;\n+  for (auto device : devices) {\n+    if (deviceList.empty()) {\n+      deviceList = std::to_string(device);\n+    } else {\n+      deviceList += \",\" + std::to_string(device);\n+    }\n+  }\n+  return deviceList;\n+}\n+\n+// Get the list of devices from list of tensors\n+std::vector<int> getDevicesOfTensors(const std::vector<at::Tensor>& tensors) {\n+  std::vector<int> res;\n+  for (auto& tensor : tensors) {\n+    res.push_back(tensor.get_device());\n+  }\n+  return res;\n+}\n+\n+// Helper that lets the input ncclStreams to wait for the THC stream\n+void syncStreams(\n+    THCState* thcState,\n+    const std::vector<int>& devices,\n+    std::vector<CUDAEvent>& ncclEvents,\n+    std::vector<CUDAStream>& ncclStreams) {\n+  CUDADevice gpuGuard;\n+  for (auto i = 0; i < devices.size(); ++i) {\n+    gpuGuard.setDevice(devices[i]);\n+    auto currentThcStream = THCState_getCurrentStream(thcState);\n+    CUDAStream& ncclStream = ncclStreams[i];\n+    CUDAEvent& ncclEvent = ncclEvents[i];\n+\n+    C10D_CUDA_CHECK(cudaEventRecord(ncclEvent.getEvent(), currentThcStream));\n+    C10D_CUDA_CHECK(\n+        cudaStreamWaitEvent(ncclStream.getStream(), ncclEvent.getEvent(), 0));\n+  }\n+}\n+\n+} // namespace\n+\n+ProcessGroupNCCL::WorkNCCL::WorkNCCL(const std::vector<int>& devices)\n+    : devices_(devices) {\n+  // GPU deviceGuard\n+  CUDADevice gpuGuard;\n+  cudaEvents_.resize(devices.size());\n+  // Now create the CUDA events\n+  for (auto i = 0; i < devices.size(); ++i) {\n+    // Guard the GPU\n+    gpuGuard.setDevice(devices[i]);\n+    cudaEvents_[i] = CUDAEvent::create(cudaEventDisableTiming);\n+  }\n+}\n+\n+ProcessGroupNCCL::WorkNCCL::~WorkNCCL() {}\n+\n+// Checking the work's corresponding CUDA events' status\n+bool ProcessGroupNCCL::WorkNCCL::isCompleted() const {\n+  CUDADevice gpuGuard;\n+  for (auto i = 0; i < devices_.size(); ++i) {\n+    // Get to the device\n+    gpuGuard.setDevice(devices_[i]);\n+    auto& cudaEvent = cudaEvents_[i];\n+    // Query the event\n+    auto ret = cudaEventQuery(cudaEvent.getEvent());\n+    if (ret != cudaSuccess && ret != cudaErrorNotReady) {\n+      // Throw directly\n+      C10D_CUDA_CHECK(ret);\n+    }\n+    if (ret == cudaErrorNotReady) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n+// Same as synchronize(), and will always return true\n+bool ProcessGroupNCCL::WorkNCCL::wait() {\n+  synchronize();\n+  return true;\n+}\n+\n+// Waiting on the work's corresponding CUDA events\n+void ProcessGroupNCCL::WorkNCCL::synchronize() {\n+  auto thcState = ::at::globalContext().lazyInitCUDA();\n+  CUDADevice gpuGuard;\n+  for (auto i = 0; i < devices_.size(); ++i) {\n+    // Get to the device\n+    gpuGuard.setDevice(devices_[i]);\n+    auto thcStream = THCState_getCurrentStream(thcState);\n+    auto& cudaEvent = cudaEvents_[i];\n+    // Let THC stream wait for the NCCL stream\n+    C10D_CUDA_CHECK(cudaStreamWaitEvent(thcStream, cudaEvent.getEvent(), 0));\n+  }\n+}\n+\n+bool ProcessGroupNCCL::WorkNCCL::isSuccess() const {\n+  throw std::runtime_error(\n+      \"isSuccess() is not supported by NCCL process \"\n+      \"group's work, isCompleted() and wait() will \"\n+      \"either succeed or throw\");\n+}\n+\n+const std::exception& ProcessGroupNCCL::WorkNCCL::exception() const {\n+  throw std::runtime_error(\n+      \"exception() is not supported by NCCL process \"\n+      \"group's work, isCompleted() and wait() will \"\n+      \"either succeed or throw\");\n+}\n+\n+ProcessGroupNCCL::ProcessGroupNCCL(\n+    const std::shared_ptr<Store>& store,\n+    int rank,\n+    int size)\n+    : ProcessGroup(rank, size), store_(store) {\n+  C10D_CUDA_CHECK(cudaGetDeviceCount(&numGPUs_));\n+  thcState_ = ::at::globalContext().lazyInitCUDA();\n+}\n+\n+ProcessGroupNCCL::~ProcessGroupNCCL() {}\n+\n+void ProcessGroupNCCL::broadcastUniqueNCCLId(\n+    const std::string& devicesKey,\n+    ncclUniqueId* ncclId) {\n+  // Rank 0 writes to the store as bcast\n+  if (rank_ == 0) {\n+    auto ncclIdVal = std::vector<uint8_t>(\n+        reinterpret_cast<uint8_t*>(ncclId),\n+        reinterpret_cast<uint8_t*>(ncclId) + NCCL_UNIQUE_ID_BYTES);\n+    store_->set(devicesKey, ncclIdVal);\n+    // Other ranks get to the store\n+  } else {\n+    auto ncclIdVal = store_->get(devicesKey);\n+    // Just a sanity check\n+    if (ncclIdVal.size() != NCCL_UNIQUE_ID_BYTES) {\n+      throw std::runtime_error(\n+          \"Unexpected NCCL unique ID length received \"\n+          \"from the store\");\n+    }\n+    // Now put the data back to the input pointer\n+    memcpy(ncclId, ncclIdVal.data(), NCCL_UNIQUE_ID_BYTES);\n+  }\n+}\n+\n+std::vector<std::shared_ptr<NCCLComm>>& ProcessGroupNCCL::getNCCLComm(\n+    const std::string& devicesKey,\n+    const std::vector<int>& devices) {\n+  // Sanity check\n+  if (devicesKey.empty()) {\n+    throw std::runtime_error(\n+        \"Not able to create/get the Nccl Comm since \"\n+        \"the GPU devices are not known\");\n+  }\n+  if (devNCCLCommMap_.find(devicesKey) != devNCCLCommMap_.end()) {\n+    // Reuse the cached communicator if there is one.\n+    return devNCCLCommMap_[devicesKey];\n+  }\n+  // NCCL communicator not cached, create a new entry\n+  std::vector<std::shared_ptr<NCCLComm>> ncclComms;\n+  ncclComms.resize(devices.size());\n+\n+  // Create the unique NCCL ID and broadcast it\n+  ncclUniqueId ncclId;\n+\n+  if (rank_ == 0) {\n+    C10D_NCCL_CHECK(ncclGetUniqueId(&ncclId));\n+  }\n+\n+  // Broadcast so that each process can have a unique NCCL ID\n+  broadcastUniqueNCCLId(devicesKey, &ncclId);\n+\n+  // GPU deviceGuard\n+  CUDADevice gpuGuard;\n+\n+  std::vector<CUDAEvent> eventVal;\n+  std::vector<CUDAStream> streamVal;\n+\n+  eventVal.resize(devices.size());\n+  streamVal.resize(devices.size());\n+\n+  // Create the NCCL communicators for each GPU\n+  C10D_NCCL_CHECK(ncclGroupStart());\n+\n+  for (auto i = 0; i < devices.size(); ++i) {\n+    // GPU world size and GPU rank\n+    int numRanks = getSize() * devices.size();\n+    int rank = getRank() * devices.size() + i;\n+\n+    // Guard the GPU\n+    gpuGuard.setDevice(devices[i]);\n+    ncclComms[i] = NCCLComm::create(numRanks, rank, ncclId);\n+\n+    // Also create the NCCL streams and events\n+    streamVal[i] = CUDAStream::create();\n+    eventVal[i] = CUDAEvent::create(cudaEventDisableTiming);\n+  }\n+\n+  C10D_NCCL_CHECK(ncclGroupEnd());\n+\n+  // Move the NCCL resource to cache\n+  devNCCLCommMap_.emplace(devicesKey, std::move(ncclComms));\n+  ncclStreams_.emplace(devicesKey, std::move(streamVal));\n+  ncclEvents_.emplace(devicesKey, std::move(eventVal));\n+\n+  return devNCCLCommMap_[devicesKey];\n+}\n+\n+// Helper function that checks the input and output tensors for validity\n+void ProcessGroupNCCL::tensorCheckHelper(\n+    const std::vector<at::Tensor>& input,\n+    const std::vector<at::Tensor>& output,\n+    size_t outputOverInput) {\n+  if (input.size() != output.size()) {\n+    throw std::runtime_error(\n+        \"Input tensor sequence should have the same \"\n+        \"number of tensors as the output tensor sequence\");\n+  }\n+\n+  if (input.size() == 0) {\n+    throw std::runtime_error(\"The number of input tensors should not be zero\");\n+  }\n+\n+  if (input.size() > numGPUs_) {\n+    throw std::runtime_error(\n+        \"The number of input tensors is larger than \"\n+        \"the number of available GPUs\");\n+  }\n+\n+  // To make sure each tensor is on separate devices\n+  std::unordered_set<int> usedDevices;\n+  usedDevices.reserve(input.size());\n+\n+  uint64_t inputNumElement = input[0].numel();\n+  auto elementType = input[0].type().scalarType();\n+\n+  for (auto i = 0; i < input.size(); ++i) {\n+    //  Check to make sure it's a GPU dense tensor\n+    if (!(input[i].type().is_cuda() && !input[i].type().is_sparse() &&\n+          output[i].type().is_cuda() && !output[i].type().is_sparse())) {\n+      throw std::runtime_error(\n+          \"Only CUDA dense tensor is supported for NCCL \"\n+          \"collective operations\");\n+    }\n+    // Check the tensor type is identical\n+    if (input[i].type().scalarType() != elementType ||\n+        output[i].type().scalarType() != elementType) {\n+      throw std::runtime_error(\n+          \"Expecting all GPU tensors to have identical \"\n+          \"type\");\n+    }\n+    // Check the input tensor size is identical\n+    if (input[i].numel() != inputNumElement) {\n+      throw std::runtime_error(\n+          \"Expecting all input tensors to have identical \"\n+          \"number of elements\");\n+    }\n+    // Check the output tensor size equals to input tensor size\n+    if (output[i].numel() != inputNumElement * outputOverInput) {\n+      throw std::runtime_error(\n+          \"The number of elements of output tensor does \"\n+          \"not match the number of elements of the input \"\n+          \"tensor\");\n+    }\n+    // Contiguous verification\n+    if (!input[i].is_contiguous() || !output[i].is_contiguous()) {\n+      throw std::runtime_error(\"Expecting all GPU tensors to be contiguous\");\n+    }\n+\n+    bool inserted;\n+    std::tie(std::ignore, inserted) = usedDevices.insert(input[i].get_device());\n+    // Device verification, if the insertion didn't take place\n+    if (!inserted) {\n+      throw std::runtime_error(\"Expecting inputs on different GPU devices\");\n+    }\n+\n+    // Now check the output device\n+    if (input[i].get_device() != output[i].get_device()) {\n+      throw std::runtime_error(\n+          \"Expecting input and output tensors to be on \"\n+          \"the same device\");\n+    }\n+  }\n+}\n+\n+std::shared_ptr<ProcessGroup::Work> ProcessGroupNCCL::allreduce(\n+    std::vector<at::Tensor>& tensors,\n+    const AllreduceOptions& opts) {\n+  tensorCheckHelper(tensors, tensors);\n+\n+  auto devices = getDevicesOfTensors(tensors);\n+  auto key = getKeyFromDevices(devices);\n+  // Get the NCCL communicators\n+  auto& ncclComms = getNCCLComm(key, devices);\n+\n+  // First let NCCL streams wait for THC stream\n+  syncStreams(thcState_, devices, ncclEvents_[key], ncclStreams_[key]);\n+\n+  // Work itself will create the CUDA events on all GPUs of tensors\n+  auto work = std::make_shared<ProcessGroupNCCL::WorkNCCL>(devices);\n+\n+  // Guard GPU device", "path": "torch/lib/c10d/ProcessGroupNCCL.cpp", "position": null, "original_position": 354, "commit_id": "d50e66c0853fa5d79687e01eb1406ab5f2beb832", "original_commit_id": "1dae2c00d30fefed868ecf0890a6df0588265a33", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "Comment can go", "created_at": "2018-06-06T21:12:08Z", "updated_at": "2018-11-23T15:45:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/8182#discussion_r193560808", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8182", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193560808"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8182#discussion_r193560808"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8182"}}, "body_html": "<p>Comment can go</p>", "body_text": "Comment can go"}