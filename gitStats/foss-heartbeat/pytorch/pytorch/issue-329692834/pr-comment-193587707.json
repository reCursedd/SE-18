{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193587707", "pull_request_review_id": 126587395, "id": 193587707, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU4NzcwNw==", "diff_hunk": "@@ -0,0 +1,442 @@\n+#include \"ProcessGroupNCCL.hpp\"\n+#include \"private/CUDAUtils.hpp\"\n+\n+#include <THC.h>\n+\n+#include <map>\n+#include <unordered_set>\n+\n+namespace c10d {\n+\n+namespace {\n+\n+// NCCL op mapping\n+std::map<ReduceOp, ncclRedOp_t> ncclOp = {\n+    {ReduceOp::MIN, ncclMin},\n+    {ReduceOp::MAX, ncclMax},\n+    {ReduceOp::SUM, ncclSum},\n+    {ReduceOp::PRODUCT, ncclProd},\n+};\n+\n+// NCCL type typing\n+std::map<at::ScalarType, ncclDataType_t> ncclDataType = {\n+    {at::kChar, ncclInt8},\n+    {at::kByte, ncclUint8},\n+    {at::kFloat, ncclFloat},\n+    {at::kDouble, ncclDouble},\n+    {at::kInt, ncclInt32},\n+    {at::kLong, ncclInt64},\n+    {at::kHalf, ncclHalf},\n+};\n+\n+// Helper function that gets the data type and issues error if not supported\n+ncclDataType_t getNcclDataType(at::ScalarType type) {\n+  try {\n+    return ncclDataType.at(type);\n+  } catch (std::out_of_range& e) {\n+    throw std::runtime_error(\"Unsupported data type for NCCL process group\");\n+  }\n+}\n+\n+// Helper function that gets the device list to determine the CUDA devices\n+std::vector<int> getDevicesFromKey(const std::string& deviceSeq) {\n+  std::stringstream ss(deviceSeq);\n+  std::string device;\n+  std::vector<int> devices;\n+  while (std::getline(ss, device, ',')) {\n+    devices.push_back(stoi(device));\n+  }\n+  return devices;\n+}\n+\n+// Get the deviceList String from the list of devices\n+std::string getKeyFromDevices(const std::vector<int>& devices) {\n+  std::string deviceList;\n+  for (auto device : devices) {\n+    if (deviceList.empty()) {\n+      deviceList = std::to_string(device);\n+    } else {\n+      deviceList += \",\" + std::to_string(device);\n+    }\n+  }", "path": "torch/lib/c10d/ProcessGroupNCCL.cpp", "position": 50, "original_position": 61, "commit_id": "d50e66c0853fa5d79687e01eb1406ab5f2beb832", "original_commit_id": "1dae2c00d30fefed868ecf0890a6df0588265a33", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "Hmm, I am under the impression that string stream is slow in some sense, since the string is really tiny here. (maximum, \"0,1,2,3,4,5,6,7\" ) I guess it should be fine.", "created_at": "2018-06-06T23:19:32Z", "updated_at": "2018-11-23T15:45:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/8182#discussion_r193587707", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8182", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193587707"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8182#discussion_r193587707"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8182"}}, "body_html": "<p>Hmm, I am under the impression that string stream is slow in some sense, since the string is really tiny here. (maximum, \"0,1,2,3,4,5,6,7\" ) I guess it should be fine.</p>", "body_text": "Hmm, I am under the impression that string stream is slow in some sense, since the string is really tiny here. (maximum, \"0,1,2,3,4,5,6,7\" ) I guess it should be fine.", "in_reply_to_id": 193557198}