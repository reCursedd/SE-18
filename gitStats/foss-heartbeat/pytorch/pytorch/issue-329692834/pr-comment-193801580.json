{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193801580", "pull_request_review_id": 126848204, "id": 193801580, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzgwMTU4MA==", "diff_hunk": "@@ -0,0 +1,432 @@\n+#include \"ProcessGroupNCCL.hpp\"\n+#include \"private/CUDAUtils.hpp\"\n+\n+#include <THC.h>\n+\n+#include <map>\n+#include <unordered_set>\n+\n+namespace c10d {\n+\n+namespace {\n+\n+// NCCL op mapping\n+std::map<ReduceOp, ncclRedOp_t> ncclOp = {\n+    {ReduceOp::MIN, ncclMin},\n+    {ReduceOp::MAX, ncclMax},\n+    {ReduceOp::SUM, ncclSum},\n+    {ReduceOp::PRODUCT, ncclProd},\n+};\n+\n+// NCCL type typing\n+std::map<at::ScalarType, ncclDataType_t> ncclDataType = {\n+    {at::kChar, ncclInt8},\n+    {at::kByte, ncclUint8},\n+    {at::kFloat, ncclFloat},\n+    {at::kDouble, ncclDouble},\n+    {at::kInt, ncclInt32},\n+    {at::kLong, ncclInt64},\n+    {at::kHalf, ncclHalf},\n+};\n+\n+// Helper function that gets the data type and issues error if not supported\n+ncclDataType_t getNcclDataType(at::ScalarType type) {\n+  try {\n+    return ncclDataType.at(type);\n+  } catch (std::out_of_range& e) {\n+    throw std::runtime_error(\"Unsupported data type for NCCL process group\");\n+  }\n+}\n+\n+// Helper function that gets the device list to determine the CUDA devices\n+std::vector<int> getDevicesFromKey(const std::string& deviceSeq) {\n+  std::stringstream ss(deviceSeq);\n+  std::string device;\n+  std::vector<int> devices;\n+  while (std::getline(ss, device, ',')) {\n+    devices.push_back(stoi(device));\n+  }\n+  return devices;\n+}\n+\n+// Get the deviceList String from the list of devices\n+std::string getKeyFromDevices(const std::vector<int>& devices) {\n+  std::string deviceList;\n+  for (auto device : devices) {\n+    if (deviceList.empty()) {\n+      deviceList = std::to_string(device);\n+    } else {\n+      deviceList += \",\" + std::to_string(device);\n+    }\n+  }\n+  return deviceList;\n+}\n+\n+// Get the list of devices from list of tensors\n+std::vector<int> getDevicesOfTensors(const std::vector<at::Tensor>& tensors) {\n+  std::vector<int> res;\n+  for (auto& tensor : tensors) {\n+    res.push_back(tensor.get_device());\n+  }\n+  return res;\n+}\n+\n+// Helper that lets the input ncclStreams to wait for the THC stream\n+void syncStreams(\n+    THCState* thcState,\n+    const std::vector<int>& devices,\n+    std::vector<CUDAEvent>& ncclEvents,\n+    std::vector<CUDAStream>& ncclStreams) {\n+  CUDADevice gpuGuard;\n+  for (auto i = 0; i < devices.size(); ++i) {\n+    gpuGuard.setDevice(devices[i]);\n+    auto currentThcStream = THCState_getCurrentStreamOnDevice(thcState,\n+        devices[i]);\n+    CUDAStream& ncclStream = ncclStreams[i];\n+    CUDAEvent& ncclEvent = ncclEvents[i];\n+\n+    C10D_CUDA_CHECK(cudaEventRecord(ncclEvent.getEvent(), currentThcStream));\n+    C10D_CUDA_CHECK(\n+        cudaStreamWaitEvent(ncclStream.getStream(), ncclEvent.getEvent(), 0));\n+  }\n+}\n+\n+} // namespace\n+\n+ProcessGroupNCCL::WorkNCCL::WorkNCCL(const std::vector<int>& devices)\n+    : devices_(devices) {\n+  CUDADevice gpuGuard;\n+  cudaEvents_.resize(devices.size());\n+  // Now create the CUDA events\n+  for (auto i = 0; i < devices.size(); ++i) {\n+    gpuGuard.setDevice(devices[i]);\n+    cudaEvents_[i] = CUDAEvent::create(cudaEventDisableTiming);\n+  }\n+}\n+\n+ProcessGroupNCCL::WorkNCCL::~WorkNCCL() {}\n+\n+// Check if the NCCL kernels are queued on the GPUs\n+bool ProcessGroupNCCL::WorkNCCL::isCompleted() const {\n+  return true;\n+}\n+\n+// Helper that checks if the NCCL kernels are completed on the GPUs\n+bool ProcessGroupNCCL::WorkNCCL::finishedGPUExecution() const {\n+  CUDADevice gpuGuard;\n+  for (auto i = 0; i < devices_.size(); ++i) {\n+    gpuGuard.setDevice(devices_[i]);\n+    auto& cudaEvent = cudaEvents_[i];\n+    // Checking the work's corresponding CUDA events' status\n+    auto ret = cudaEventQuery(cudaEvent.getEvent());\n+    if (ret != cudaSuccess && ret != cudaErrorNotReady) {\n+      C10D_CUDA_CHECK(ret);\n+    }\n+    if (ret == cudaErrorNotReady) {\n+      return false;\n+    }\n+  }", "path": "torch/lib/c10d/ProcessGroupNCCL.cpp", "position": 117, "original_position": 128, "commit_id": "d50e66c0853fa5d79687e01eb1406ab5f2beb832", "original_commit_id": "e3648e361a196a7036ff482b09b637f1f952830c", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "The return true was removed here but I think it is still needed", "created_at": "2018-06-07T15:58:30Z", "updated_at": "2018-11-23T15:45:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/8182#discussion_r193801580", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8182", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193801580"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8182#discussion_r193801580"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8182"}}, "body_html": "<p>The return true was removed here but I think it is still needed</p>", "body_text": "The return true was removed here but I think it is still needed"}