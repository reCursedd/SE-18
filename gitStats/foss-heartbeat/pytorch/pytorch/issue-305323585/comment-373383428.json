{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373383428", "html_url": "https://github.com/pytorch/pytorch/issues/5790#issuecomment-373383428", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5790", "id": 373383428, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM4MzQyOA==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-15T13:54:52Z", "updated_at": "2018-03-15T13:54:52Z", "author_association": "MEMBER", "body_html": "<p>I thought in those cases we would encourage the use of the functional interface for writing the computation graph? I think assigning to a module weight in the <code>forward_hook</code> might not be permitted actually.</p>\n<p>What about something like</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyModel</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">self</span>.conv1 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c1\">self</span>.conv2 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c1\">self</span>.conv3 <span class=\"pl-k\">=</span> nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_my_crazy_op</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">layer</span>):\n        weight <span class=\"pl-k\">=</span> layer.weight\n        bias <span class=\"pl-k\">=</span> layer.bias\n        weight <span class=\"pl-k\">=</span> a_crazy_func(weight)\n        bias <span class=\"pl-k\">=</span> another_crazy_func(bias)\n        <span class=\"pl-k\">return</span> F.conv2d(x, weight, bias, stride, <span class=\"pl-c1\">...</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv1(x)\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._my_crazy_op(x, <span class=\"pl-c1\">self</span>.conv2)\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._my_crazy_op(x, <span class=\"pl-c1\">self</span>.conv3)\n        <span class=\"pl-k\">return</span> x</pre></div>", "body_text": "I thought in those cases we would encourage the use of the functional interface for writing the computation graph? I think assigning to a module weight in the forward_hook might not be permitted actually.\nWhat about something like\nclass MyModel(nn.Module):\n    def __init__(self):\n        self.conv1 = nn.Conv2d(1, 1, 1)\n        self.conv2 = nn.Conv2d(1, 1, 1)\n        self.conv3 = nn.Conv2d(1, 1, 1)\n\n    def _my_crazy_op(self, x, layer):\n        weight = layer.weight\n        bias = layer.bias\n        weight = a_crazy_func(weight)\n        bias = another_crazy_func(bias)\n        return F.conv2d(x, weight, bias, stride, ...)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self._my_crazy_op(x, self.conv2)\n        x = self._my_crazy_op(x, self.conv3)\n        return x", "body": "I thought in those cases we would encourage the use of the functional interface for writing the computation graph? I think assigning to a module weight in the `forward_hook` might not be permitted actually.\r\n\r\nWhat about something like\r\n```python\r\nclass MyModel(nn.Module):\r\n    def __init__(self):\r\n        self.conv1 = nn.Conv2d(1, 1, 1)\r\n        self.conv2 = nn.Conv2d(1, 1, 1)\r\n        self.conv3 = nn.Conv2d(1, 1, 1)\r\n\r\n    def _my_crazy_op(self, x, layer):\r\n        weight = layer.weight\r\n        bias = layer.bias\r\n        weight = a_crazy_func(weight)\r\n        bias = another_crazy_func(bias)\r\n        return F.conv2d(x, weight, bias, stride, ...)\r\n\r\n    def forward(self, x):\r\n        x = self.conv1(x)\r\n        x = self._my_crazy_op(x, self.conv2)\r\n        x = self._my_crazy_op(x, self.conv3)\r\n        return x\r\n```"}