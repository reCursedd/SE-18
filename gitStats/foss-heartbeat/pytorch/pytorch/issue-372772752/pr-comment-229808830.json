{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229808830", "pull_request_review_id": 170397545, "id": 229808830, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTgwODgzMA==", "diff_hunk": "@@ -2,67 +2,111 @@\n \n namespace caffe2 {\n \n+USE_IDEEP_DEF_ALIASES();\n+\n+static inline itensor::dims CanonicalAxis(itensor::dims adims, size_t axis) {\n+  if (adims.size() == 2 || axis == 1)\n+    return adims;\n+  auto dim0 = std::accumulate(adims.begin(), adims.begin() + axis, 1,\n+                              std::multiplies<itensor::dim_t>());\n+  auto dim1 = std::accumulate(adims.begin() + axis, adims.end(), 1,\n+                              std::multiplies<itensor::dim_t>());\n+  return itensor::dims({dim0, dim1});\n+}\n+\n class IDEEPFullyConnectedOp final : public IDEEPOperator {\n- public:\n+public:\n   USE_IDEEP_DEF_ALIASES();\n   USE_IDEEP_OPERATOR_FUNCTIONS();\n \n-  IDEEPFullyConnectedOp(const OperatorDef& operator_def, Workspace* ws)\n+  IDEEPFullyConnectedOp(const OperatorDef &operator_def, Workspace *ws)\n       : IDEEPOperator(operator_def, ws),\n+        axis_(OperatorBase::GetSingleArgument<int32_t>(\"axis\", 1)),\n+        axis_w_(OperatorBase::GetSingleArgument<int32_t>(\"axis_w\", 1)),\n         float16_compute_(\n             OperatorBase::GetSingleArgument<bool>(\"float16_compute\", false)) {}\n   virtual ~IDEEPFullyConnectedOp() {}\n \n   bool RunOnDevice() override {\n-    const auto& X = Input(INPUT);\n-    const auto& filter = Input(FILTER);\n-    auto* Y = Output(OUTPUT);\n+    const auto &X = Input(INPUT);", "path": "caffe2/ideep/operators/fully_connected_op.cc", "position": null, "original_position": 35, "commit_id": "8a95554c8fedf774d97f30e97d34ca37518f590e", "original_commit_id": "b975ae388d52980c309905cdea23bc6903f5b4d3", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "Can we not change the format back to `auto &X`?  Our coding style is `auto& X`. ", "created_at": "2018-10-31T18:05:26Z", "updated_at": "2018-11-23T15:53:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/12971#discussion_r229808830", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12971", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229808830"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12971#discussion_r229808830"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12971"}}, "body_html": "<p>Can we not change the format back to <code>auto &amp;X</code>?  Our coding style is <code>auto&amp; X</code>.</p>", "body_text": "Can we not change the format back to auto &X?  Our coding style is auto& X."}