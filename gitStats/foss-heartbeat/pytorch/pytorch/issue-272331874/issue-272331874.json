{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3569", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3569/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3569/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3569/events", "html_url": "https://github.com/pytorch/pytorch/issues/3569", "id": 272331874, "node_id": "MDU6SXNzdWUyNzIzMzE4NzQ=", "number": 3569, "title": "tensor addition assignment strange behavior", "user": {"login": "iammarvelous", "id": 14206232, "node_id": "MDQ6VXNlcjE0MjA2MjMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14206232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iammarvelous", "html_url": "https://github.com/iammarvelous", "followers_url": "https://api.github.com/users/iammarvelous/followers", "following_url": "https://api.github.com/users/iammarvelous/following{/other_user}", "gists_url": "https://api.github.com/users/iammarvelous/gists{/gist_id}", "starred_url": "https://api.github.com/users/iammarvelous/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iammarvelous/subscriptions", "organizations_url": "https://api.github.com/users/iammarvelous/orgs", "repos_url": "https://api.github.com/users/iammarvelous/repos", "events_url": "https://api.github.com/users/iammarvelous/events{/privacy}", "received_events_url": "https://api.github.com/users/iammarvelous/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-08T20:07:07Z", "updated_at": "2017-11-08T20:11:37Z", "closed_at": "2017-11-08T20:11:37Z", "author_association": "NONE", "body_html": "<p>It seems there is a really strange behavior for addition assignment operator. When changing the else statement from addition assignment to naive addition, outputs are different. The first element in the list is changed and it is not desired for addition assignment. The same thing would happen for <code>/=, *=, -=</code></p>\n<pre><code>import torch\ntorch.manual_seed(1)\nloss_list = [] \nfor i in range(2):\n    tmp = torch.FloatTensor(1).normal_()\n    loss_list.append(tmp)\n    if i == 0:  \n        l = tmp\n    else:\n        l += tmp\n    print tmp\n    print loss_list\n</code></pre>\n<p>output: <code>l += tmp</code></p>\n<pre><code>-2.9718\n[torch.FloatTensor of size 1]\n\n[\n-2.9718\n[torch.FloatTensor of size 1]\n]\n\n 1.7070\n[torch.FloatTensor of size 1]\n\n[\n-1.2649\n[torch.FloatTensor of size 1]\n, \n 1.7070\n[torch.FloatTensor of size 1]\n]\n</code></pre>\n<p>output: <code>l = l + tmp</code></p>\n<pre><code>-2.9718\n[torch.FloatTensor of size 1]\n\n[\n-2.9718\n[torch.FloatTensor of size 1]\n]\n\n 1.7070\n[torch.FloatTensor of size 1]\n\n[\n-2.9718\n[torch.FloatTensor of size 1]\n, \n 1.7070\n[torch.FloatTensor of size 1]\n]\n</code></pre>", "body_text": "It seems there is a really strange behavior for addition assignment operator. When changing the else statement from addition assignment to naive addition, outputs are different. The first element in the list is changed and it is not desired for addition assignment. The same thing would happen for /=, *=, -=\nimport torch\ntorch.manual_seed(1)\nloss_list = [] \nfor i in range(2):\n    tmp = torch.FloatTensor(1).normal_()\n    loss_list.append(tmp)\n    if i == 0:  \n        l = tmp\n    else:\n        l += tmp\n    print tmp\n    print loss_list\n\noutput: l += tmp\n-2.9718\n[torch.FloatTensor of size 1]\n\n[\n-2.9718\n[torch.FloatTensor of size 1]\n]\n\n 1.7070\n[torch.FloatTensor of size 1]\n\n[\n-1.2649\n[torch.FloatTensor of size 1]\n, \n 1.7070\n[torch.FloatTensor of size 1]\n]\n\noutput: l = l + tmp\n-2.9718\n[torch.FloatTensor of size 1]\n\n[\n-2.9718\n[torch.FloatTensor of size 1]\n]\n\n 1.7070\n[torch.FloatTensor of size 1]\n\n[\n-2.9718\n[torch.FloatTensor of size 1]\n, \n 1.7070\n[torch.FloatTensor of size 1]\n]", "body": "It seems there is a really strange behavior for addition assignment operator. When changing the else statement from addition assignment to naive addition, outputs are different. The first element in the list is changed and it is not desired for addition assignment. The same thing would happen for `/=, *=, -=`\r\n```\r\nimport torch\r\ntorch.manual_seed(1)\r\nloss_list = [] \r\nfor i in range(2):\r\n    tmp = torch.FloatTensor(1).normal_()\r\n    loss_list.append(tmp)\r\n    if i == 0:  \r\n        l = tmp\r\n    else:\r\n        l += tmp\r\n    print tmp\r\n    print loss_list\r\n```\r\n\r\noutput: `l += tmp`\r\n```\r\n-2.9718\r\n[torch.FloatTensor of size 1]\r\n\r\n[\r\n-2.9718\r\n[torch.FloatTensor of size 1]\r\n]\r\n\r\n 1.7070\r\n[torch.FloatTensor of size 1]\r\n\r\n[\r\n-1.2649\r\n[torch.FloatTensor of size 1]\r\n, \r\n 1.7070\r\n[torch.FloatTensor of size 1]\r\n]\r\n```\r\noutput: `l = l + tmp`\r\n```\r\n-2.9718\r\n[torch.FloatTensor of size 1]\r\n\r\n[\r\n-2.9718\r\n[torch.FloatTensor of size 1]\r\n]\r\n\r\n 1.7070\r\n[torch.FloatTensor of size 1]\r\n\r\n[\r\n-2.9718\r\n[torch.FloatTensor of size 1]\r\n, \r\n 1.7070\r\n[torch.FloatTensor of size 1]\r\n]\r\n```\r\n"}