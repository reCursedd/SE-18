{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4195", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4195/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4195/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4195/events", "html_url": "https://github.com/pytorch/pytorch/issues/4195", "id": 282462351, "node_id": "MDU6SXNzdWUyODI0NjIzNTE=", "number": 4195, "title": "Exposing scope name to python while tracing", "user": {"login": "hhsecond", "id": 13761737, "node_id": "MDQ6VXNlcjEzNzYxNzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/13761737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhsecond", "html_url": "https://github.com/hhsecond", "followers_url": "https://api.github.com/users/hhsecond/followers", "following_url": "https://api.github.com/users/hhsecond/following{/other_user}", "gists_url": "https://api.github.com/users/hhsecond/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhsecond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhsecond/subscriptions", "organizations_url": "https://api.github.com/users/hhsecond/orgs", "repos_url": "https://api.github.com/users/hhsecond/repos", "events_url": "https://api.github.com/users/hhsecond/events{/privacy}", "received_events_url": "https://api.github.com/users/hhsecond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-15T15:30:06Z", "updated_at": "2017-12-17T17:08:34Z", "closed_at": "2017-12-17T17:08:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It would be really great to have scope name available on nodes in the traced graph. Reposting what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=191033\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lantiga\">@lantiga</a> has suggested.</p>\n<p>Something like <code>node.scope()</code> could return a string Foo/Bar or Foo/Bar[baz], where Foo and Bar are scope names. The second form will be generated automatically by modules, one scope name per module: in this case baz is the name of the variable containing the module Bar in the parent module Foo</p>\n<pre><code>class Foo(nn.Module):\n    def __init__(self):\n        [...]\n        self.baz = Bar()\n\n</code></pre>", "body_text": "It would be really great to have scope name available on nodes in the traced graph. Reposting what @lantiga has suggested.\nSomething like node.scope() could return a string Foo/Bar or Foo/Bar[baz], where Foo and Bar are scope names. The second form will be generated automatically by modules, one scope name per module: in this case baz is the name of the variable containing the module Bar in the parent module Foo\nclass Foo(nn.Module):\n    def __init__(self):\n        [...]\n        self.baz = Bar()", "body": "It would be really great to have scope name available on nodes in the traced graph. Reposting what @lantiga has suggested.\r\n\r\nSomething like ``node.scope()`` could return a string Foo/Bar or Foo/Bar[baz], where Foo and Bar are scope names. The second form will be generated automatically by modules, one scope name per module: in this case baz is the name of the variable containing the module Bar in the parent module Foo\r\n\r\n```\r\nclass Foo(nn.Module):\r\n    def __init__(self):\r\n        [...]\r\n        self.baz = Bar()\r\n\r\n```"}