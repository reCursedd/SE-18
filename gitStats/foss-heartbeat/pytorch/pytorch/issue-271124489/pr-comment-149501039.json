{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149501039", "pull_request_review_id": 74904784, "id": 149501039, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTUwMTAzOQ==", "diff_hunk": "@@ -0,0 +1,191 @@\n+#include <sys/wait.h>\n+#include <set>\n+#include <signal.h>\n+\n+#include \"THP.h\"\n+\n+// In cases like data loader, if a worker process die due to bus error/segfault\n+// or just hang, the main process, if implemented with\n+// multiprocessing.queue.SimpleQueue, will hang waiting for data. This is\n+// difficult to avoid on PyTorch side as it can be caused by limited shm, or\n+// other libraries users call in the workers. The following methods is an effort\n+// to do our best provide some error message to users when such unfortunate\n+// events happen.\n+\n+// TODO: The following don't work on Windows. Specifically, waitpid calls and\n+// SIGCHLD handler.\n+\n+#ifndef _WIN32\n+\n+// Critical signal handlers should be registered on worker processes before\n+// doing work.\n+// Python handle is _set_worker_signal_handlers().\n+#define SIGNAL_HANDLER(SIGNAL, HANDLER_NAME, ERROR_MSG)                       \\\n+static void HANDLER_NAME(int sig)                                             \\\n+{                                                                             \\\n+    write(STDERR_FILENO, ERROR_MSG, sizeof(ERROR_MSG) / sizeof(char));        \\\n+    _exit(EXIT_FAILURE);                                                      \\\n+}\n+\n+// signal(2) is really not portable. So use sigaction.\n+// http://man7.org/linux/man-pages/man2/signal.2.html\n+#define SET_SIGNAL_HANDLER(SIGNAL, HANDLER_NAME, ERROR_FLAG)                  \\", "path": "torch/csrc/DataLoader.cpp", "position": null, "original_position": 32, "commit_id": "5733b553bcf269fb3782f7a0dbd4a12918998a5e", "original_commit_id": "55158acd5c8c51e6ebad13f52a53c108580d8caf", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Why would that exception end a process? It's just a helper for setting signal handlers. It's run in one of the regular threads and the exception will be caught and reported in Python", "created_at": "2017-11-07T20:57:16Z", "updated_at": "2018-11-23T15:36:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/3474#discussion_r149501039", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3474", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149501039"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3474#discussion_r149501039"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3474"}}, "body_html": "<p>Why would that exception end a process? It's just a helper for setting signal handlers. It's run in one of the regular threads and the exception will be caught and reported in Python</p>", "body_text": "Why would that exception end a process? It's just a helper for setting signal handlers. It's run in one of the regular threads and the exception will be caught and reported in Python", "in_reply_to_id": 149261520}