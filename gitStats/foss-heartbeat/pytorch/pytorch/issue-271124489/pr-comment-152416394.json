{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152416394", "pull_request_review_id": 78276402, "id": 152416394, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MjQxNjM5NA==", "diff_hunk": "@@ -0,0 +1,166 @@\n+#include <sys/wait.h>\n+#include <map>\n+#include <set>\n+#include <atomic>\n+#include <signal.h>\n+#include \"THP.h\"\n+\n+// In cases like DataLoader, if a worker process die due to bus error/segfault\n+// or just hang, the main process, if implemented with\n+// multiprocessing.queue.SimpleQueue, will hang waiting for data. This is\n+// difficult to avoid on PyTorch side as it can be caused by limited shm, or\n+// other libraries users call in the workers. The following methods is an effort\n+// to do our best provide some error message to users when such unfortunate\n+// events happen.\n+\n+// TODO: The following don't work on Windows. Specifically, sigaction, waitid\n+// calls ,and SIGCHLD handler. Currently, dummy implementations are provided\n+// for Windows.\n+\n+#ifndef _WIN32\n+\n+// Critical signal handlers should be registered on worker processes before\n+// doing work.\n+// Python handle is _set_worker_signal_handlers().\n+#define SIGNAL_HANDLER(SIGNAL, HANDLER_NAME, ERROR_MSG)                       \\\n+static void HANDLER_NAME(int sig, siginfo_t *info, void *ctx)                 \\\n+{                                                                             \\\n+    write(STDERR_FILENO, ERROR_MSG, sizeof(ERROR_MSG) / sizeof(char));        \\\n+    _exit(EXIT_FAILURE);                                                      \\\n+}\n+\n+// signal(2) is really not portable. So use sigaction.\n+// http://man7.org/linux/man-pages/man2/signal.2.html\n+static void setSignalHandler(int signal, void(*handler)(int, siginfo_t *, void *), struct sigaction *old_sa_ptr)\n+{\n+  struct sigaction sa;\n+  sa.sa_sigaction = handler;\n+  sa.sa_flags = SA_RESTART|SA_SIGINFO|SA_NOCLDSTOP;\n+  sigemptyset(&sa.sa_mask);\n+  if (sigaction(signal, &sa, old_sa_ptr) != 0) {\n+    std::ostringstream oss;\n+    oss << \"An error occurred while setting handler for \" << strsignal(signal) << \".\";\n+    throw std::runtime_error(oss.str());\n+  }\n+}\n+\n+SIGNAL_HANDLER(SIGBUS, handler_SIGBUS, \"ERROR: Unexpected bus error encountered in worker. \"\n+  \"This might be caused by insufficient shared memory (shm).\\n\");\n+SIGNAL_HANDLER(SIGSEGV, handler_SIGSEGV, \"ERROR: Unexpected segmentation fault encountered in worker.\\n\");\n+\n+PyObject *THPModule_setWorkerSignalHandlers(PyObject *module, PyObject *arg) {\n+  HANDLE_TH_ERRORS\n+  setSignalHandler(SIGBUS, &handler_SIGBUS, NULL);\n+  setSignalHandler(SIGSEGV, &handler_SIGSEGV, NULL);\n+  Py_RETURN_TRUE;\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static std::map<int64_t, std::set<pid_t>> worker_pids = {};\n+\n+PyObject *THPModule_errorIfAnyWorkerFails(PyObject *module) {\n+  HANDLE_TH_ERRORS\n+  int error;\n+  std::set<pid_t> pid_set;\n+  pid_t pid;\n+  siginfo_t infop;\n+\n+  // Only check the pids we care about\n+  for (auto it = worker_pids.begin(); it != worker_pids.end(); ++it) {\n+    pid_set = it->second;\n+    for (auto pid_it = pid_set.begin(); pid_it != pid_set.end(); ++pid_it) {\n+      pid = *pid_it;\n+      // Use waitid rather than waitpid so that we can set NOWAIT, and that Python\n+      // and other handlers can get whatever info they want about the child.\n+      error = waitid(P_PID, pid, &infop, WEXITED|WNOHANG|WNOWAIT);\n+      if (error < 0)  // ignore errors\n+        continue;\n+      if ((infop.si_code == CLD_EXITED && infop.si_status != 0) ||  // exit with error\n+          (infop.si_code == CLD_KILLED) ||\n+          (infop.si_code == CLD_DUMPED)) {\n+        std::ostringstream oss;\n+        oss << \"DataLoader worker (pid \" << pid << \") exited unexpectedly.\";\n+        pid_set.clear();", "path": "torch/csrc/DataLoader.cpp", "position": null, "original_position": 83, "commit_id": "5733b553bcf269fb3782f7a0dbd4a12918998a5e", "original_commit_id": "d37c7165b5b7c382438350b385b95b70477f96e3", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "This is necessary. Otherwise, the runtime error will kill the other workers, and trigger this again.", "created_at": "2017-11-21T22:12:25Z", "updated_at": "2018-11-23T15:36:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/3474#discussion_r152416394", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3474", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/152416394"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3474#discussion_r152416394"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3474"}}, "body_html": "<p>This is necessary. Otherwise, the runtime error will kill the other workers, and trigger this again.</p>", "body_text": "This is necessary. Otherwise, the runtime error will kill the other workers, and trigger this again."}