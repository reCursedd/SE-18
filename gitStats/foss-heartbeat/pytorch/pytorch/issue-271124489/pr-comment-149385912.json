{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149385912", "pull_request_review_id": 74769671, "id": 149385912, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTM4NTkxMg==", "diff_hunk": "@@ -0,0 +1,191 @@\n+#include <sys/wait.h>\n+#include <set>\n+#include <signal.h>\n+\n+#include \"THP.h\"\n+\n+// In cases like data loader, if a worker process die due to bus error/segfault\n+// or just hang, the main process, if implemented with\n+// multiprocessing.queue.SimpleQueue, will hang waiting for data. This is\n+// difficult to avoid on PyTorch side as it can be caused by limited shm, or\n+// other libraries users call in the workers. The following methods is an effort\n+// to do our best provide some error message to users when such unfortunate\n+// events happen.\n+\n+// TODO: The following don't work on Windows. Specifically, waitpid calls and\n+// SIGCHLD handler.\n+\n+#ifndef _WIN32\n+\n+// Critical signal handlers should be registered on worker processes before\n+// doing work.\n+// Python handle is _set_worker_signal_handlers().\n+#define SIGNAL_HANDLER(SIGNAL, HANDLER_NAME, ERROR_MSG)                       \\\n+static void HANDLER_NAME(int sig)                                             \\\n+{                                                                             \\\n+    write(STDERR_FILENO, ERROR_MSG, sizeof(ERROR_MSG) / sizeof(char));        \\\n+    _exit(EXIT_FAILURE);                                                      \\\n+}\n+\n+// signal(2) is really not portable. So use sigaction.\n+// http://man7.org/linux/man-pages/man2/signal.2.html\n+#define SET_SIGNAL_HANDLER(SIGNAL, HANDLER_NAME, ERROR_FLAG)                  \\\n+{                                                                             \\\n+  struct sigaction sa;                                                        \\\n+  sa.sa_handler = HANDLER_NAME;                                               \\\n+  sa.sa_flags = SA_RESTART;                                                   \\\n+  sigemptyset(&sa.sa_mask);                                                   \\\n+  ERROR_FLAG |= sigaction(SIGNAL, &sa, NULL) != 0;                            \\\n+}\n+\n+SIGNAL_HANDLER(SIGBUS, handler_SIGBUS, \"ERROR: Unexpected bus error encountered in worker. \"\n+  \"This might be caused by insufficient shared memory (shm).\\n\");\n+SIGNAL_HANDLER(SIGSEGV, handler_SIGSEGV, \"ERROR: Unexpected segmentation fault encountered in worker.\\n\");\n+\n+static std::vector<pid_t> worker_pid_vec = {};\n+// The following are needed since std::vector is not asynchronous safe.\n+static std::atomic<pid_t *> worker_pids;\n+static std::atomic<size_t> num_worker_pids(0);\n+static std::atomic<size_t> num_dataloaders(0);\n+\n+PyObject *THPModule_setWorkerSignalHandlers(PyObject *module, PyObject *arg) {\n+  HANDLE_TH_ERRORS\n+  int error = 0;\n+  SET_SIGNAL_HANDLER(SIGBUS, &handler_SIGBUS, error);\n+  SET_SIGNAL_HANDLER(SIGSEGV, &handler_SIGSEGV, error);\n+  if (error == 0) {\n+    Py_RETURN_TRUE;\n+  } else {\n+    Py_RETURN_FALSE;\n+  }\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+// SIGCHLD hander should be registered on main loader process to catch any\n+// worker failing. SIGALRM handler is needed for implementing timeout.\n+// Python handles are _set_main_signal_handers() and\n+// _remove_main_signal_handers().\n+static void handler_SIGCHLD_main(int sig) {\n+  int status;\n+  pid_t p;\n+  pid_t *pid_ptr = worker_pids;\n+\n+  // Only check the pids we care about so that Python can see other processes'\n+  // status.\n+  for (size_t i = 0; i < num_worker_pids; i++) {\n+    // The flags and status checks ensure that we are really observing a child\n+    // exiting, rather than other cases such as SIGSTOP and SIGCONT.\n+    // https://stackoverflow.com/a/40707100\n+    p = waitpid(*pid_ptr, &status, WNOHANG|WUNTRACED|WCONTINUED);\n+    // Ignore errors / no changes\n+    if (p <= 0)\n+      continue;\n+    if (WIFCONTINUED(status) || WIFSTOPPED(status))\n+      continue;\n+    if (WIFEXITED(status) != 0 && WEXITSTATUS(status) == 0)\n+      continue;\n+    _exit(EXIT_FAILURE);\n+    pid_ptr++;\n+  }\n+}\n+\n+// We don't want to exit on any SIGCHLD from any child. child_pids is a sequence\n+// of pids we are interested in.\n+PyObject *THPModule_setMainSignalHandlers(PyObject *module, PyObject *child_pids) {\n+  HANDLE_TH_ERRORS\n+  // assert these types are lock free, just to be safe\n+  THPUtils_assert(worker_pids.is_lock_free(), \"worker_pids is not lock free\");\n+  THPUtils_assert(num_worker_pids.is_lock_free(), \"num_worker_pids is not lock free\");\n+\n+  THPUtils_assert(PyTuple_Check(child_pids), \"_set_main_signal_handler \"\n+        \"expects a list, but got %s\", THPUtils_typename(child_pids));\n+\n+  num_dataloaders++;\n+  auto size = PyTuple_GET_SIZE(child_pids);\n+  for (int idx = 0; idx < size; idx++) {\n+    PyObject* obj = PyTuple_GET_ITEM(child_pids, idx);\n+    worker_pid_vec.push_back((pid_t) THPUtils_unpackLong(obj));\n+  }\n+  worker_pids = &worker_pid_vec[0];\n+  num_worker_pids = worker_pid_vec.size();\n+\n+  int error = 0;\n+  SET_SIGNAL_HANDLER(SIGCHLD, &handler_SIGCHLD_main, error);\n+  if (error == 0) {\n+    Py_RETURN_TRUE;\n+  } else {\n+    Py_RETURN_FALSE;\n+  }\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+PyObject *THPModule_removeMainSignalHandlers(PyObject *module, PyObject *child_pids) {\n+  HANDLE_TH_ERRORS\n+  THPUtils_assert(PyTuple_Check(child_pids), \"_remove_main_signal_handler \"\n+        \"expects a tuple or list, but got %s\", THPUtils_typename(child_pids));\n+\n+  auto size = PyTuple_GET_SIZE(child_pids);\n+  std::set<pid_t> pid_set;\n+  for (int idx = 0; idx < size; idx++) {\n+    PyObject* obj = PyTuple_GET_ITEM(child_pids, idx);\n+    pid_set.insert((pid_t) THPUtils_unpackLong(obj));\n+  }\n+  // During the following, worker_pids and num_worker_pids will likely not have\n+  // correct values. However, it is guaranteed that all values in this array are\n+  // child pids and contain all alive child pids.\n+  auto write_it = worker_pid_vec.begin();\n+  auto read_it = worker_pid_vec.begin();\n+  size_t remaining_num = 0;\n+  for (; read_it != worker_pid_vec.end(); read_it++) {\n+    if (pid_set.find(*read_it) == pid_set.end()) {\n+      *write_it = *read_it;\n+      write_it++;\n+      remaining_num++;\n+    }\n+  }\n+  worker_pids = &worker_pid_vec[0];\n+  num_worker_pids = remaining_num;\n+  worker_pid_vec.resize(remaining_num);\n+\n+  int error = 0;\n+\n+  // Need to restore original handler so that in case DataLoader errors, the\n+  // waitpids in hander won't block Python from updating Process.is_alive() and\n+  // Process.exitcode, etc.", "path": "torch/csrc/DataLoader.cpp", "position": null, "original_position": 154, "commit_id": "5733b553bcf269fb3782f7a0dbd4a12918998a5e", "original_commit_id": "55158acd5c8c51e6ebad13f52a53c108580d8caf", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Yeah. I found out when I call `waitpid`, on Python side I won't see `child_proc.is_alive()` and `child_proc.exitcode` set correctly.", "created_at": "2017-11-07T14:41:39Z", "updated_at": "2018-11-23T15:36:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/3474#discussion_r149385912", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3474", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149385912"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3474#discussion_r149385912"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3474"}}, "body_html": "<p>Yeah. I found out when I call <code>waitpid</code>, on Python side I won't see <code>child_proc.is_alive()</code> and <code>child_proc.exitcode</code> set correctly.</p>", "body_text": "Yeah. I found out when I call waitpid, on Python side I won't see child_proc.is_alive() and child_proc.exitcode set correctly.", "in_reply_to_id": 149333422}