{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148936009", "pull_request_review_id": 74260375, "id": 148936009, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODkzNjAwOQ==", "diff_hunk": "@@ -570,6 +573,118 @@ PyObject *THPModule_fromDLPack(PyObject *_unused, PyObject *data)\n   return torch::createPyObject(atensor);\n }\n \n+// In cases like data loader, if a worker process die due to bus error/segfault\n+// or just hang, the main process, if implemented with multiprocessing.queue.,\n+// will hang waiting for data. This is difficult to avoid on PyTorch side as it\n+// can be caused by limited shm, other libraries users call in the workers. The\n+// following methods is an effort to do our best provide some error message to\n+// users when such unfortunate events happen.\n+\n+// Critical signal handlers should be registered on worker processes before\n+// doing work.\n+// Python handle is _set_worker_signal_handlers().\n+#define SIGNAL_HANDLER(SIGNAL, HANDLER_NAME, ERROR_MSG)                       \\\n+static void HANDLER_NAME(int sig)                                             \\\n+{                                                                             \\\n+    write(fileno(stderr), ERROR_MSG, strlen(ERROR_MSG));                      \\\n+    _exit(EXIT_FAILURE);                                                      \\\n+}\n+\n+SIGNAL_HANDLER(SIGBUS, handler_SIGBUS, \"ERROR: Unexpected bus error encountered in worker. \"\n+  \"This might be caused by insufficient shared memory (shm).\\n\");\n+SIGNAL_HANDLER(SIGSEGV, handler_SIGSEGV, \"ERROR: Unexpected segmentation fault encountered in worker.\\n\");\n+\n+static std::mutex worker_pid_mutex;\n+static std::vector<pid_t> worker_pid_vec = {};\n+// The following are needed since std::vector is not asynchronous safe.\n+static pid_t *worker_pids;\n+static size_t num_worker_pids = 0;\n+\n+PyObject *THPModule_setWorkerSignalHandlers(PyObject *module, PyObject *arg) {\n+    signal(SIGBUS, handler_SIGBUS);\n+    signal(SIGSEGV, handler_SIGSEGV);", "path": "torch/csrc/Module.cpp", "position": null, "original_position": 44, "commit_id": "5733b553bcf269fb3782f7a0dbd4a12918998a5e", "original_commit_id": "b900f6041a6e0c55a17dc65a3ee01260ae72efb5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Check return values for error", "created_at": "2017-11-04T17:05:52Z", "updated_at": "2018-11-23T15:36:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/3474#discussion_r148936009", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3474", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/148936009"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3474#discussion_r148936009"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3474"}}, "body_html": "<p>Check return values for error</p>", "body_text": "Check return values for error"}