{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/342225470", "html_url": "https://github.com/pytorch/pytorch/pull/3474#issuecomment-342225470", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3474", "id": 342225470, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjIyNTQ3MA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-06T17:36:21Z", "updated_at": "2017-11-06T17:37:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One of the link <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9998726\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/peterjc123\">@peterjc123</a> mentioned (<a href=\"https://eli.thegreenplace.net/2011/08/22/how-not-to-set-a-timeout-on-a-computation-in-python\" rel=\"nofollow\">https://eli.thegreenplace.net/2011/08/22/how-not-to-set-a-timeout-on-a-computation-in-python</a>) makes me wonder if our <code>_pin_memory_loop</code> can possibly live as a zombie thread in case such as a worker hangs, main thread is interrupted and the thread waits forever on getting data.</p>", "body_text": "One of the link @peterjc123 mentioned (https://eli.thegreenplace.net/2011/08/22/how-not-to-set-a-timeout-on-a-computation-in-python) makes me wonder if our _pin_memory_loop can possibly live as a zombie thread in case such as a worker hangs, main thread is interrupted and the thread waits forever on getting data.", "body": "One of the link @peterjc123 mentioned (https://eli.thegreenplace.net/2011/08/22/how-not-to-set-a-timeout-on-a-computation-in-python) makes me wonder if our `_pin_memory_loop` can possibly live as a zombie thread in case such as a worker hangs, main thread is interrupted and the thread waits forever on getting data."}