{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161411321", "pull_request_review_id": 88695690, "id": 161411321, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTQxMTMyMQ==", "diff_hunk": "@@ -75,7 +75,7 @@ def log_prob(self, value):\n         log_factorial_k = torch.lgamma(value + 1)\r\n         log_factorial_nmk = torch.lgamma(self.total_count - value + 1)\r\n         return (log_factorial_n - log_factorial_k - log_factorial_nmk +\r\n-                value * self.logits + (self.total_count - value) * torch.log1p(-probs))\r\n+                value * self.logits + self.total_count * torch.log1p(-probs))\r", "path": "torch/distributions/binomial.py", "position": null, "original_position": 28, "commit_id": "384a7aa1123bea06f052581f5b292b833afa6a49", "original_commit_id": "90c83303144bc4e9ff0a7de5918403aac423e586", "user": {"login": "alicanb", "id": 1093846, "node_id": "MDQ6VXNlcjEwOTM4NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1093846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alicanb", "html_url": "https://github.com/alicanb", "followers_url": "https://api.github.com/users/alicanb/followers", "following_url": "https://api.github.com/users/alicanb/following{/other_user}", "gists_url": "https://api.github.com/users/alicanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alicanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alicanb/subscriptions", "organizations_url": "https://api.github.com/users/alicanb/orgs", "repos_url": "https://api.github.com/users/alicanb/repos", "events_url": "https://api.github.com/users/alicanb/events{/privacy}", "received_events_url": "https://api.github.com/users/alicanb/received_events", "type": "User", "site_admin": false}, "body": "I used to use `logits` here as `probs.log()`, now I fixed it to be log odds which is `probs.log() - torch.log1p(-probs))` , so they are equivalent. Essentially, `value * old_logits - value * torch.log1p(-probs)) + self.total_count * torch.log1p(-probs))`  = `value * new_logits + self.total_count * torch.log1p(-probs))`", "created_at": "2018-01-14T21:53:08Z", "updated_at": "2018-11-23T15:38:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/4658#discussion_r161411321", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4658", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161411321"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4658#discussion_r161411321"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4658"}}, "body_html": "<p>I used to use <code>logits</code> here as <code>probs.log()</code>, now I fixed it to be log odds which is <code>probs.log() - torch.log1p(-probs))</code> , so they are equivalent. Essentially, <code>value * old_logits - value * torch.log1p(-probs)) + self.total_count * torch.log1p(-probs))</code>  = <code>value * new_logits + self.total_count * torch.log1p(-probs))</code></p>", "body_text": "I used to use logits here as probs.log(), now I fixed it to be log odds which is probs.log() - torch.log1p(-probs)) , so they are equivalent. Essentially, value * old_logits - value * torch.log1p(-probs)) + self.total_count * torch.log1p(-probs))  = value * new_logits + self.total_count * torch.log1p(-probs))", "in_reply_to_id": 161410443}