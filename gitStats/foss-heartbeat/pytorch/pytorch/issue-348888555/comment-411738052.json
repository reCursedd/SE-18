{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/411738052", "html_url": "https://github.com/pytorch/pytorch/issues/10357#issuecomment-411738052", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10357", "id": 411738052, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTczODA1Mg==", "user": {"login": "davidmascharka", "id": 5611862, "node_id": "MDQ6VXNlcjU2MTE4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5611862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmascharka", "html_url": "https://github.com/davidmascharka", "followers_url": "https://api.github.com/users/davidmascharka/followers", "following_url": "https://api.github.com/users/davidmascharka/following{/other_user}", "gists_url": "https://api.github.com/users/davidmascharka/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmascharka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmascharka/subscriptions", "organizations_url": "https://api.github.com/users/davidmascharka/orgs", "repos_url": "https://api.github.com/users/davidmascharka/repos", "events_url": "https://api.github.com/users/davidmascharka/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmascharka/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-09T12:20:28Z", "updated_at": "2018-08-09T12:20:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The <code>validate_args</code> argument doesn't really seem to be a problem. The inconsistency comes from <code>sample()</code> in this case. Yes, you can work around this by passing <code>validate_args=True</code> into the distribution init. However, failing this there is inconsistent behavior; either both CPU and GPU versions should allow a sample to be drawn or else neither one should.</p>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"299546794\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5358\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5358/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5358\">#5358</a> does not appear to have fixed this. After rebuilding:</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]: <span class=\"pl-k\">import</span> torch\n\nIn [<span class=\"pl-c1\">2</span>]: torch.<span class=\"pl-c1\">__version__</span>\nOut[<span class=\"pl-c1\">2</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0.5.0a0+04f3816<span class=\"pl-pds\">'</span></span>\n\nIn [<span class=\"pl-c1\">3</span>]: torch.distributions.Bernoulli(torch.cuda.FloatTensor([<span class=\"pl-c1\">1.5</span>])).sample()\nOut[<span class=\"pl-c1\">3</span>]: tensor([<span class=\"pl-c1\">1</span>.], <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda:0<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">4</span>]: torch.distributions.Bernoulli(torch.FloatTensor([<span class=\"pl-c1\">1.5</span>])).sample()\n<span class=\"pl-ii\">--------------------------------------------------------------------------</span><span class=\"pl-k\">-</span>\n<span class=\"pl-c1\">RuntimeError</span>                              Traceback (most recent call last)\n<span class=\"pl-k\">&lt;</span>ipython<span class=\"pl-k\">-</span><span class=\"pl-c1\">input</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">4</span><span class=\"pl-k\">-</span>d17a827b2cc3<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>()\n<span class=\"pl-ii\">----</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span> torch.distributions.Bernoulli(torch.FloatTensor([<span class=\"pl-c1\">1.5</span>])).sample()\n\n<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>torch<span class=\"pl-k\">/</span>distributions<span class=\"pl-k\">/</span>bernoulli.py <span class=\"pl-k\">in</span> sample(<span class=\"pl-c1\">self</span>, sample_shape)\n     <span class=\"pl-c1\">72</span>         shape <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._extended_shape(sample_shape)\n     <span class=\"pl-c1\">73</span>         <span class=\"pl-k\">with</span> torch.no_grad():\n<span class=\"pl-ii\">--</span><span class=\"pl-ii\">-&gt;</span> <span class=\"pl-c1\">74</span>             <span class=\"pl-k\">return</span> torch.bernoulli(<span class=\"pl-c1\">self</span>.probs.expand(shape))\n     <span class=\"pl-c1\">75</span> \n     <span class=\"pl-c1\">76</span>     <span class=\"pl-k\">def</span> <span class=\"pl-en\">log_prob</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">value</span>):\n\n<span class=\"pl-c1\">RuntimeError</span>: invalid argument <span class=\"pl-c1\">1</span>: must be <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">and</span> <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">1</span> at <span class=\"pl-k\">/</span>pytorch<span class=\"pl-k\">/</span>aten<span class=\"pl-k\">/</span>src<span class=\"pl-k\">/</span><span class=\"pl-c1\">TH</span><span class=\"pl-k\">/</span>THRandom.cpp:<span class=\"pl-c1\">314</span></pre></div>", "body_text": "The validate_args argument doesn't really seem to be a problem. The inconsistency comes from sample() in this case. Yes, you can work around this by passing validate_args=True into the distribution init. However, failing this there is inconsistent behavior; either both CPU and GPU versions should allow a sample to be drawn or else neither one should.\n#5358 does not appear to have fixed this. After rebuilding:\nIn [1]: import torch\n\nIn [2]: torch.__version__\nOut[2]: '0.5.0a0+04f3816'\n\nIn [3]: torch.distributions.Bernoulli(torch.cuda.FloatTensor([1.5])).sample()\nOut[3]: tensor([1.], device='cuda:0')\n\nIn [4]: torch.distributions.Bernoulli(torch.FloatTensor([1.5])).sample()\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-4-d17a827b2cc3> in <module>()\n----> 1 torch.distributions.Bernoulli(torch.FloatTensor([1.5])).sample()\n\n/python3.6/site-packages/torch/distributions/bernoulli.py in sample(self, sample_shape)\n     72         shape = self._extended_shape(sample_shape)\n     73         with torch.no_grad():\n---> 74             return torch.bernoulli(self.probs.expand(shape))\n     75 \n     76     def log_prob(self, value):\n\nRuntimeError: invalid argument 1: must be >= 0 and <= 1 at /pytorch/aten/src/TH/THRandom.cpp:314", "body": "The `validate_args` argument doesn't really seem to be a problem. The inconsistency comes from `sample()` in this case. Yes, you can work around this by passing `validate_args=True` into the distribution init. However, failing this there is inconsistent behavior; either both CPU and GPU versions should allow a sample to be drawn or else neither one should.\r\n\r\n#5358 does not appear to have fixed this. After rebuilding:\r\n\r\n```python\r\nIn [1]: import torch\r\n\r\nIn [2]: torch.__version__\r\nOut[2]: '0.5.0a0+04f3816'\r\n\r\nIn [3]: torch.distributions.Bernoulli(torch.cuda.FloatTensor([1.5])).sample()\r\nOut[3]: tensor([1.], device='cuda:0')\r\n\r\nIn [4]: torch.distributions.Bernoulli(torch.FloatTensor([1.5])).sample()\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-4-d17a827b2cc3> in <module>()\r\n----> 1 torch.distributions.Bernoulli(torch.FloatTensor([1.5])).sample()\r\n\r\n/python3.6/site-packages/torch/distributions/bernoulli.py in sample(self, sample_shape)\r\n     72         shape = self._extended_shape(sample_shape)\r\n     73         with torch.no_grad():\r\n---> 74             return torch.bernoulli(self.probs.expand(shape))\r\n     75 \r\n     76     def log_prob(self, value):\r\n\r\nRuntimeError: invalid argument 1: must be >= 0 and <= 1 at /pytorch/aten/src/TH/THRandom.cpp:314\r\n```"}