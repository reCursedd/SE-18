{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/380260983", "html_url": "https://github.com/pytorch/pytorch/pull/6485#issuecomment-380260983", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6485", "id": 380260983, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI2MDk4Mw==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-10T21:58:25Z", "updated_at": "2018-04-10T21:58:25Z", "author_association": "MEMBER", "body_html": "<p>I'd like to replace the uses of <code>std::vector&lt;int64_t&gt;</code> for storing sizes and strides, particularly in performance critical pieces of code. I think it'll eventually be useful for the actual tensor implementation. More immediately, it'll be useful for <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a>'s work on the apply macros and for saving tensors sizes in autograd for backwards.</p>\n<p>I'm thinking of defining an alias in ATen like:</p>\n<pre><code>using ShapeVec = SmallVector&lt;int64_t, 6&gt;;\n</code></pre>\n<p>Where <code>6</code> is chosen because I thin the vast majority of tensors have six or fewer dimensions. Things like at::infer_size would become:</p>\n<pre><code>AT_API ShapeVec infer_size(IntList a, IntList b);\n</code></pre>", "body_text": "I'd like to replace the uses of std::vector<int64_t> for storing sizes and strides, particularly in performance critical pieces of code. I think it'll eventually be useful for the actual tensor implementation. More immediately, it'll be useful for @cpuhrsch's work on the apply macros and for saving tensors sizes in autograd for backwards.\nI'm thinking of defining an alias in ATen like:\nusing ShapeVec = SmallVector<int64_t, 6>;\n\nWhere 6 is chosen because I thin the vast majority of tensors have six or fewer dimensions. Things like at::infer_size would become:\nAT_API ShapeVec infer_size(IntList a, IntList b);", "body": "I'd like to replace the uses of `std::vector<int64_t>` for storing sizes and strides, particularly in performance critical pieces of code. I think it'll eventually be useful for the actual tensor implementation. More immediately, it'll be useful for @cpuhrsch's work on the apply macros and for saving tensors sizes in autograd for backwards.\r\n\r\nI'm thinking of defining an alias in ATen like:\r\n\r\n```\r\nusing ShapeVec = SmallVector<int64_t, 6>;\r\n```\r\n\r\nWhere `6` is chosen because I thin the vast majority of tensors have six or fewer dimensions. Things like at::infer_size would become:\r\n\r\n```\r\nAT_API ShapeVec infer_size(IntList a, IntList b);\r\n```"}