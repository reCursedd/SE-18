{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/380261520", "html_url": "https://github.com/pytorch/pytorch/pull/6485#issuecomment-380261520", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6485", "id": 380261520, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI2MTUyMA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-10T22:00:38Z", "updated_at": "2018-04-10T22:00:38Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1716488\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cpuhrsch\">@cpuhrsch</a> true, that's a reasonable case, although I think that the fastest way would be to depend on <code>alloca</code>, which should be relatively safe to use in this case.</p>\n<p>I'm just asking because last summer I actually wrote and evaluated a patch that replaced the critical places that depend on <code>std::vector</code> in autograd with a <code>SmallVector</code>-like struct, and found that there was no significant difference on the workloads I tested. It's possible that the allocator overhead gets replaced by an additional cost of copying memory because the objects are generally larger.</p>", "body_text": "@cpuhrsch true, that's a reasonable case, although I think that the fastest way would be to depend on alloca, which should be relatively safe to use in this case.\nI'm just asking because last summer I actually wrote and evaluated a patch that replaced the critical places that depend on std::vector in autograd with a SmallVector-like struct, and found that there was no significant difference on the workloads I tested. It's possible that the allocator overhead gets replaced by an additional cost of copying memory because the objects are generally larger.", "body": "@cpuhrsch true, that's a reasonable case, although I think that the fastest way would be to depend on `alloca`, which should be relatively safe to use in this case.\r\n\r\nI'm just asking because last summer I actually wrote and evaluated a patch that replaced the critical places that depend on `std::vector` in autograd with a `SmallVector`-like struct, and found that there was no significant difference on the workloads I tested. It's possible that the allocator overhead gets replaced by an additional cost of copying memory because the objects are generally larger. "}