{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155033076", "pull_request_review_id": 81285391, "id": 155033076, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTAzMzA3Ng==", "diff_hunk": "@@ -0,0 +1,107 @@\n+#include \"python_variable_numpy.h\"\n+\n+#ifndef WITH_NUMPY\n+namespace torch { namespace autograd {\n+PyObject * THPVariable_numpy(PyObject* pyself, PyObject* arg) {\n+  return PyErr_Format(PyExc_RuntimeError, \"PyTorch was compiled without NumPy support\");\n+}\n+}}\n+#else\n+\n+#include \"torch/csrc/Exceptions.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+\n+#include <ATen/ATen.h>\n+#include <memory>\n+#include <sstream>\n+#include <stdexcept>\n+\n+#define NO_IMPORT_ARRAY\n+#define PY_ARRAY_UNIQUE_SYMBOL __numpy_array_api\n+#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\n+#include <numpy/arrayobject.h>\n+\n+using namespace at;\n+\n+namespace torch { namespace autograd {\n+\n+static std::vector<npy_intp> cast_numpy(IntList x) {\n+  auto nelem = x.size();\n+  auto result = std::vector<npy_intp>(nelem);\n+  for (size_t i = 0; i < nelem; i++) {\n+    result[i] = static_cast<npy_intp>(x[i]);\n+  }\n+  return result;\n+}\n+\n+static int numpy_dtype(const at::Type& type);\n+\n+PyObject * THPVariable_numpy(PyObject* pyself, PyObject* arg) {", "path": "torch/csrc/autograd/python_variable_numpy.cpp", "position": 39, "original_position": 39, "commit_id": "33317ee5aa76c911730613a94d2765ce3ff717a4", "original_commit_id": "30f68d5cf17c208b0e7f3cbb3de2181cf3661cc1", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I'll make it an error. We can always allow it later if it turns out to be too annoying.", "created_at": "2017-12-05T18:20:30Z", "updated_at": "2018-11-23T15:37:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/4006#discussion_r155033076", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4006", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155033076"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4006#discussion_r155033076"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4006"}}, "body_html": "<p>I'll make it an error. We can always allow it later if it turns out to be too annoying.</p>", "body_text": "I'll make it an error. We can always allow it later if it turns out to be too annoying.", "in_reply_to_id": 155027860}