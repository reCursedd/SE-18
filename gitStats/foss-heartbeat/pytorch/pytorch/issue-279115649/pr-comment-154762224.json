{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154762224", "pull_request_review_id": 80973859, "id": 154762224, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDc2MjIyNA==", "diff_hunk": "@@ -0,0 +1,107 @@\n+#include \"python_variable_numpy.h\"\n+\n+#ifndef WITH_NUMPY\n+namespace torch { namespace autograd {\n+PyObject * THPVariable_numpy(PyObject* pyself, PyObject* arg) {\n+  return PyErr_Format(PyExc_RuntimeError, \"PyTorch was compiled without NumPy support\");\n+}\n+}}\n+#else\n+\n+#include \"torch/csrc/Exceptions.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+\n+#include <ATen/ATen.h>\n+#include <memory>\n+#include <sstream>\n+#include <stdexcept>\n+\n+#define NO_IMPORT_ARRAY\n+#define PY_ARRAY_UNIQUE_SYMBOL __numpy_array_api\n+#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\n+#include <numpy/arrayobject.h>\n+\n+using namespace at;\n+\n+namespace torch { namespace autograd {\n+\n+static std::vector<npy_intp> cast_numpy(IntList x) {\n+  auto nelem = x.size();\n+  auto result = std::vector<npy_intp>(nelem);\n+  for (size_t i = 0; i < nelem; i++) {\n+    result[i] = static_cast<npy_intp>(x[i]);\n+  }\n+  return result;\n+}\n+\n+static int numpy_dtype(const at::Type& type);\n+\n+PyObject * THPVariable_numpy(PyObject* pyself, PyObject* arg) {\n+  HANDLE_TH_ERRORS\n+  auto& self = reinterpret_cast<THPVariable*>(pyself)->cdata;\n+  auto dtype = numpy_dtype(self.type());\n+  auto sizes = cast_numpy(self.sizes());\n+  auto strides = cast_numpy(self.strides());\n+  // NumPy strides use bytes. Torch strides use element counts.\n+  auto element_size_in_bytes = self.type().elementSizeInBytes();\n+  for (auto& stride : strides) {\n+    stride *= element_size_in_bytes;\n+  }\n+\n+  auto array = THPObjectPtr(PyArray_New(\n+      &PyArray_Type,\n+      self.dim(),\n+      sizes.data(),\n+      dtype,\n+      strides.data(),\n+      self.data_ptr(),\n+      0,\n+      NPY_ARRAY_ALIGNED | NPY_ARRAY_WRITEABLE | NPY_ARRAY_C_CONTIGUOUS,\n+      nullptr));\n+  if (!array) return NULL;\n+\n+  // TODO: This attempts to keep the underlying memory alive by setting the base\n+  // object of the ndarray to the tensor and disabling resizes on the storage.\n+  // This is not sufficient. For example, the tensor's storage may be changed\n+  // via Tensor.set_, which can free the underlying memory.\n+  Py_INCREF(pyself);\n+  if (PyArray_SetBaseObject((PyArrayObject*)array.get(), pyself) == -1) {\n+    return NULL;\n+  }\n+  self.storage()->clear_flag(Storage::RESIZABLE);\n+\n+  return array.release();\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static int numpy_dtype(const at::Type& type) {\n+  if (type.is_cuda()) {\n+    throw std::runtime_error(\n+        \"can't convert CUDA tensor to numpy. Use Tensor.cpu() to \"\n+        \"copy the tensor to host memory first.\");\n+  }\n+  if (type.is_sparse()) {\n+    throw std::runtime_error(\n+        \"can't convert sparse tensor to numpy. Use Tensor.to_dense() to \"\n+        \"convert to a dense tensor first.\");\n+  }\n+  if (type.backend() == kCPU) {\n+    switch (type.scalarType()) {\n+      case kDouble: return NPY_DOUBLE;\n+      case kFloat: return NPY_FLOAT;\n+      case kHalf: return NPY_HALF;\n+      case kLong: return NPY_INT64;\n+      case kInt: return NPY_INT32;\n+      case kShort: return NPY_INT16;\n+      case kByte: return NPY_INT8;", "path": "torch/csrc/autograd/python_variable_numpy.cpp", "position": null, "original_position": 96, "commit_id": "33317ee5aa76c911730613a94d2765ce3ff717a4", "original_commit_id": "8c547949c4d7c77bcc7fef35160bc0860693c706", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I believe [`ByteTensors` are `uint8`](https://github.com/pytorch/pytorch/blob/master/aten/src/TH/THGenerateByteType.h#L5)?", "created_at": "2017-12-04T20:12:35Z", "updated_at": "2018-11-23T15:37:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/4006#discussion_r154762224", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4006", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154762224"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4006#discussion_r154762224"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4006"}}, "body_html": "<p>I believe <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/TH/THGenerateByteType.h#L5\"><code>ByteTensors</code> are <code>uint8</code></a>?</p>", "body_text": "I believe ByteTensors are uint8?"}