{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178195370", "pull_request_review_id": 108221013, "id": 178195370, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE5NTM3MA==", "diff_hunk": "@@ -477,77 +477,74 @@ struct to_ir {\n         Value* body_cond_value = emitExpr(cond.value(), 1)[0];\n         body_block->registerOutput(body_cond_value);\n       } else {\n-        Value* cond_value_dummy = emitBooleanConst(stmt, true)[0];\n+        Value* cond_value_dummy = emitBooleanConst(range, true)[0];\n         body_block->registerOutput(cond_value_dummy);\n       }\n \n       auto body_frame = popFrame();\n       auto outer_frame = environment_stack;\n       // Remove inputs for values that did not mutate within the\n       // block\n-      body_frame->deleteExtraInputs(stmt.range(), skip_inputs_num);\n+      body_frame->deleteExtraInputs(range, skip_inputs_num);\n \n       // Add block outputs\n       for (const auto& x : body_frame->captured_inputs) {\n-        body_block->registerOutput(body_frame->getValueInThisFrame(stmt.range(), x));\n-        n->addInput(outer_frame->getVar(x, stmt));\n+        body_block->registerOutput(body_frame->getValueInThisFrame(range, x));\n+        n->addInput(outer_frame->getVar(x, range));\n         outer_frame->setVar(x, n->addOutput());\n       }\n \n     }\n   }\n \n+  void emitForRange(SourceRange range, const Ident& target, const List<Expr>& args, const List<Stmt>& body) {\n+    // TODO: start, stop, step loop\n+    if (args.size() != 1) {\n+      throw ErrorReport(range)\n+          << \"range() expects one argument but got\" << args.size();\n+    }\n+    emitLoopCommon(range, {args[0]}, {}, body, target);\n+  }\n+\n   void emitFor(const For& stmt) {\n     // For now, we only support range loops. e.g. for i in range(3): ...\n-\n     auto targets = stmt.targets();\n     auto itrs = stmt.itrs();\n     auto body = stmt.body();\n \n-    // itrs must consist of a single Apply node\n     if (stmt.itrs().size() != 1) {\n       throw ErrorReport(stmt)\n           << \"List of iterables is not supported currently.\";\n     }\n-    if (itrs[0].kind() != TK_APPLY) {\n-      throw ErrorReport(stmt)\n-          << \"Non-range for loops are currently not supported.\";\n+    if (targets.size() != 1) {\n+      throw ErrorReport(stmt) << \"Iteration variable unpacking is not supported\";\n     }\n \n-    Apply range_iterator = Apply(itrs[0]);\n-    if (range_iterator.callee().kind() != TK_VAR) {\n-      throw ErrorReport(stmt)\n-          << \"Non-range for loops are currently not supported.\";\n-    }\n-\n-    {\n-      Var var = Var(range_iterator.callee());\n-      if (var.name().name() != \"range\") {\n-        throw ErrorReport(stmt)\n-            << \"Non-range for loops are currently not supported.\";\n+    // match range(<expr>) style loops\n+    // itrs must consist of a single Apply node\n+    if (itrs[0].kind() == TK_APPLY) {\n+      Apply range_iterator = Apply(itrs[0]);\n+      if (range_iterator.callee().kind() == TK_VAR) {\n+        Var var = Var(range_iterator.callee());\n+        if (var.name().name() == \"range\") {\n+          return emitForRange(stmt.range(), targets[0], range_iterator.inputs(), body);\n+        }\n       }\n     }\n \n-    List<Expr> args = range_iterator.inputs();\n-    // TODO: start, stop, step loop\n-    if (args.size() != 1) {\n-      throw ErrorReport(stmt)\n-          << \"range() expects one argument but got\" << args.size();\n-    }\n-\n-    auto target_list = List<Ident>(targets);\n-    if (target_list.size() != 1) {\n-      throw ErrorReport(stmt)\n-          << \"Iteration variable unpacking is not supported\";\n+    // it isn't a range(<expr>) loop, treat it as a sugared value that maybe can be\n+    // unrolled\n+    auto sv = emitSugaredExpr(itrs[0]);\n+    auto instances = sv->unrolledFor(stmt.range(), method);\n+    for(auto inst : instances) {\n+      environment_stack->setSugaredVar(targets[0].name(), inst);", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 184, "commit_id": "a6e35d2bc0342c6e7e33b75015b4751ec3eec98c", "original_commit_id": "c175ea4c8e416f3b803451ea4b4e32e12f6ceeb6", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This will leave the iterator var in the environment, which is inconsistent with other kinds of loops IIRC.", "created_at": "2018-03-29T22:12:34Z", "updated_at": "2018-11-23T15:41:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/6092#discussion_r178195370", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6092", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178195370"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6092#discussion_r178195370"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6092"}}, "body_html": "<p>This will leave the iterator var in the environment, which is inconsistent with other kinds of loops IIRC.</p>", "body_text": "This will leave the iterator var in the environment, which is inconsistent with other kinds of loops IIRC."}