{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178195870", "pull_request_review_id": 108221013, "id": 178195870, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE5NTg3MA==", "diff_hunk": "@@ -83,6 +88,46 @@ struct VISIBILITY_HIDDEN PythonValue : public SugaredValue {\n   py::object self;\n };\n \n+// get the SugaredValue for something inside a torch.jit.Const\n+// this can either be a ConstantPythonValue or a ModuleValue\n+static std::shared_ptr<SugaredValue> createConstantSugaredValue(py::object obj);\n+\n+// by using torch.jit.Const, a user can mark a python value constant\n+// we then make that value immutable.\n+// once marked constant, we enable additional behavior such as\n+// 1. conversion via asValue to a constant Tensor\n+// 2. unrolling of for loops\n+struct VISIBILITY_HIDDEN ConstantPythonValue : public PythonValue {\n+  using PythonValue::PythonValue;\n+  virtual Value * asValue(SourceRange loc, Method & m) override {\n+    if(py::isinstance<py::int_>(self)) {\n+      return createConstant(loc, m, at::CPU(at::kInt).scalarTensor(py::cast<int32_t>(self)));\n+    } else if(py::isinstance<py::float_>(self)) {\n+      return createConstant(loc, m, at::CPU(at::kFloat).scalarTensor(py::cast<float>(self)));\n+    } else if(py::isinstance<py::bool_>(self)) {\n+      return createConstant(loc, m, at::CPU(at::kByte).scalarTensor(py::cast<bool>(self)));", "path": "torch/csrc/jit/script/init.cpp", "position": 59, "original_position": 63, "commit_id": "a6e35d2bc0342c6e7e33b75015b4751ec3eec98c", "original_commit_id": "c175ea4c8e416f3b803451ea4b4e32e12f6ceeb6", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We really should have a single function like `createBool`, `createFloat` to unify how we create primitive values in the IR. It will make maintenance much easier in case we'll ever want to change what we do", "created_at": "2018-03-29T22:15:24Z", "updated_at": "2018-11-23T15:41:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/6092#discussion_r178195870", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6092", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178195870"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6092#discussion_r178195870"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6092"}}, "body_html": "<p>We really should have a single function like <code>createBool</code>, <code>createFloat</code> to unify how we create primitive values in the IR. It will make maintenance much easier in case we'll ever want to change what we do</p>", "body_text": "We really should have a single function like createBool, createFloat to unify how we create primitive values in the IR. It will make maintenance much easier in case we'll ever want to change what we do"}