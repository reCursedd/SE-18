{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178198276", "pull_request_review_id": 108221013, "id": 178198276, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE5ODI3Ng==", "diff_hunk": "@@ -2021,6 +2021,132 @@ def forward(self, input):\n         with self.assertRaisesRegex(RuntimeError, \"cannot re-assign\"):\n             m.sub = nn.Linear(5, 5)\n \n+    def test_script_module_const(self):\n+        class M(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M, self).__init__(False)\n+                self.b = torch.jit.Const(False)\n+                self.i = torch.jit.Const(1)\n+                self.c = torch.jit.Const(3.5)\n+\n+            @torch.jit.script_method\n+            def forward(self):\n+                return self.b, self.i, self.c\n+\n+        m = M()\n+        o0, o1, o2 = m()\n+        self.assertEqual(o0, 0)\n+        self.assertEqual(o1, 1)\n+        self.assertEqual(o2, 3.5)\n+\n+    def test_script_module_fail_const(self):\n+        class M(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M, self).__init__(False)\n+                self.b = False\n+\n+            @torch.jit.script_method\n+            def forward(self):\n+                return self.b\n+        with self.assertRaisesRegex(RuntimeError, \"is not usable in a script method\"):\n+            M()\n+\n+    def test_script_module_valid_consts(self):\n+        torch.jit.Const(1)\n+        torch.jit.Const(1.2)\n+        torch.jit.Const(False)\n+        torch.jit.Const(nn.Linear(3, 4))\n+        torch.jit.Const(lambda x: x)\n+        self.assertTrue(type(torch.jit.Const([3, 4, 5])._value) is tuple)\n+        torch.jit.Const([3, (3, 4), 5])\n+        with self.assertRaisesRegex(TypeError, \"is not a valid constant\"):\n+            torch.jit.Const(type(1))\n+        with self.assertRaisesRegex(TypeError, \"is not a valid constant\"):\n+            torch.jit.Const((3, 4, {}))\n+\n+    def test_script_module_for(self):\n+        class M(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M, self).__init__(False)\n+                self.b = torch.jit.Const([1, 2, 3, 4])\n+\n+            @torch.jit.script_method\n+            def forward(self):\n+                sum = 0\n+                for i in self.b:\n+                    sum += i\n+                return sum\n+\n+        m = M()\n+        self.assertEqual(m(), 10)\n+\n+    def test_script_module_for2(self):\n+        class Sub(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(Sub, self).__init__(False)\n+                self.weight = nn.Parameter(torch.randn(2))\n+\n+            @torch.jit.script_method\n+            def forward(self, thing):\n+                return self.weight + thing\n+\n+        class M(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M, self).__init__(False)\n+                mods = []\n+                for i in range(10):\n+                    m = Sub()\n+                    self.add_module('m' + str(i), m)\n+                    mods.append(m)", "path": "test/test_jit.py", "position": null, "original_position": 80, "commit_id": "a6e35d2bc0342c6e7e33b75015b4751ec3eec98c", "original_commit_id": "c21c92a017b07443b065b223260ddc4402df184f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Keeping modules in regular Python lists is a very bad idea. It will break e.g. with `DataParallel` and in multiple other occasions. That's why we have `nn.ModuleList`", "created_at": "2018-03-29T22:30:06Z", "updated_at": "2018-11-23T15:41:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6092#discussion_r178198276", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6092", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178198276"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6092#discussion_r178198276"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6092"}}, "body_html": "<p>Keeping modules in regular Python lists is a very bad idea. It will break e.g. with <code>DataParallel</code> and in multiple other occasions. That's why we have <code>nn.ModuleList</code></p>", "body_text": "Keeping modules in regular Python lists is a very bad idea. It will break e.g. with DataParallel and in multiple other occasions. That's why we have nn.ModuleList"}