{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175174462", "pull_request_review_id": 104668966, "id": 175174462, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTE3NDQ2Mg==", "diff_hunk": "@@ -294,10 +294,10 @@ def saved_variables(formula, args):\n             'suffix': '_numel',\n             'type': 'int64_t',\n         }),\n-        # replace to_arg_sizes(self, 2) with self_argsizes_2\n-        (r'to_arg_sizes\\({}, (\\w+)\\)', {\n-            'suffix': lambda m: '_sizes_{}'.format(*m.groups()),\n-            'type': 'IntList',\n+        # replace to_args_sizes(self) with self_args_sizes\n+        (r'to_args_sizes\\({}\\)', {\n+            'suffix': '_args_sizes',\n+            'type': 'std::vector<std::vector<int64_t>>',", "path": "tools/autograd/load_derivatives.py", "position": 11, "original_position": 11, "commit_id": "fee486bd3bd78309203926f4af5734d6bbfc1839", "original_commit_id": "9ed3ebafdd29902b54193635a644c09e3a358bd5", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "I looked into it a bit more: IntList is transformed to a std::vector<int64_t> by the code generation, and one can pass in a std::vector<int64_t> into a function that takes IntList.\r\n\r\nWe don't have an analogous thing for std::vector<std::vector<int64_t>> (Unless each inner std::vector<int64_t> has the same size, but this isn't an assumption that we can make here).\r\n\r\nThe alternative to what I have now (`std::vector<std::vector<int>>`) is using `std::vector<IntList>`. There are a few things that would need to happen to support this change:\r\n1) Make the codegen translate `std::vector<IntList>` to `std::vector<std::vector<int64_t>>`\r\n2) The cat_tensors_backward function will still take `std::vector<std::vector<int64_t>>`, unless we also want to change its argument to `std::vector<IntList>` for consistency. Then there needs to be an implicit conversion from `std::vector<std::vector<int64_t>>` to `std::vector<IntList>` which I'm not sure how to do, or an explicit conversion added by the codegen.\r\n\r\nBecause of this, I think it's best to keep the usage of `std::vector<std::vector<int64_t>>` here to avoid the extra complexity -- what do you think?", "created_at": "2018-03-16T18:13:37Z", "updated_at": "2018-11-23T15:40:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/5819#discussion_r175174462", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5819", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175174462"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5819#discussion_r175174462"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5819"}}, "body_html": "<p>I looked into it a bit more: IntList is transformed to a std::vector&lt;int64_t&gt; by the code generation, and one can pass in a std::vector&lt;int64_t&gt; into a function that takes IntList.</p>\n<p>We don't have an analogous thing for std::vector&lt;std::vector&lt;int64_t&gt;&gt; (Unless each inner std::vector&lt;int64_t&gt; has the same size, but this isn't an assumption that we can make here).</p>\n<p>The alternative to what I have now (<code>std::vector&lt;std::vector&lt;int&gt;&gt;</code>) is using <code>std::vector&lt;IntList&gt;</code>. There are a few things that would need to happen to support this change:</p>\n<ol>\n<li>Make the codegen translate <code>std::vector&lt;IntList&gt;</code> to <code>std::vector&lt;std::vector&lt;int64_t&gt;&gt;</code></li>\n<li>The cat_tensors_backward function will still take <code>std::vector&lt;std::vector&lt;int64_t&gt;&gt;</code>, unless we also want to change its argument to <code>std::vector&lt;IntList&gt;</code> for consistency. Then there needs to be an implicit conversion from <code>std::vector&lt;std::vector&lt;int64_t&gt;&gt;</code> to <code>std::vector&lt;IntList&gt;</code> which I'm not sure how to do, or an explicit conversion added by the codegen.</li>\n</ol>\n<p>Because of this, I think it's best to keep the usage of <code>std::vector&lt;std::vector&lt;int64_t&gt;&gt;</code> here to avoid the extra complexity -- what do you think?</p>", "body_text": "I looked into it a bit more: IntList is transformed to a std::vector<int64_t> by the code generation, and one can pass in a std::vector<int64_t> into a function that takes IntList.\nWe don't have an analogous thing for std::vector<std::vector<int64_t>> (Unless each inner std::vector<int64_t> has the same size, but this isn't an assumption that we can make here).\nThe alternative to what I have now (std::vector<std::vector<int>>) is using std::vector<IntList>. There are a few things that would need to happen to support this change:\n\nMake the codegen translate std::vector<IntList> to std::vector<std::vector<int64_t>>\nThe cat_tensors_backward function will still take std::vector<std::vector<int64_t>>, unless we also want to change its argument to std::vector<IntList> for consistency. Then there needs to be an implicit conversion from std::vector<std::vector<int64_t>> to std::vector<IntList> which I'm not sure how to do, or an explicit conversion added by the codegen.\n\nBecause of this, I think it's best to keep the usage of std::vector<std::vector<int64_t>> here to avoid the extra complexity -- what do you think?", "in_reply_to_id": 175151897}