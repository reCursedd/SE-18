{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167327672", "pull_request_review_id": 95538396, "id": 167327672, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzMyNzY3Mg==", "diff_hunk": "@@ -0,0 +1,83 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include <TH/TH.h>\n+#undef THNN_\n+#include <THS/THS.h>\n+\n+#include \"ATen/CPUFloatTensor.h\"\n+#include \"ATen/CPUDoubleTensor.h\"\n+#include \"ATen/SparseCPUFloatTensor.h\"\n+#include \"ATen/SparseCPUDoubleTensor.h\"\n+\n+namespace at {\n+namespace native {\n+\n+// Calling into TH for sspaddmm because ATen code generation currently\n+// doesn't support Sparse x Dense operations on Sparse tensors\n+template <class scalar_t>\n+void sspaddmm_TH_dispatch(Tensor & result, Scalar beta, const Tensor& self,\n+    Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+  runtime_error(\"sspaddmm NYI for types %s %s %s\",\n+      self.type().toString(), mat1.type().toString(), mat2.type().toString());\n+}\n+\n+template <>\n+void sspaddmm_TH_dispatch<float>(Tensor& result, Scalar beta, const Tensor& self,\n+    Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+  auto result_ = checked_cast_tensor<SparseCPUFloatTensor>(result.pImpl,\"result\",0, false);", "path": "aten/src/ATen/native/SparseMM.cpp", "position": 29, "original_position": 29, "commit_id": "85326ed19052ea4c84561e6b4f9b39bf92815608", "original_commit_id": "94212090d9205abe341ce6b9363a31ea1b1b6ef4", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: it might not be that hard to avoid duplicating this code; just dispatch to a templatized function that e.g. for float does <float, SparseCPUFloatTensor, CPUFloatTensor>.  Can you can use <float>.to() instead of toFloat().", "created_at": "2018-02-09T19:44:41Z", "updated_at": "2018-11-23T15:39:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/5017#discussion_r167327672", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5017", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/167327672"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5017#discussion_r167327672"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5017"}}, "body_html": "<p>nit: it might not be that hard to avoid duplicating this code; just dispatch to a templatized function that e.g. for float does &lt;float, SparseCPUFloatTensor, CPUFloatTensor&gt;.  Can you can use .to() instead of toFloat().</p>", "body_text": "nit: it might not be that hard to avoid duplicating this code; just dispatch to a templatized function that e.g. for float does <float, SparseCPUFloatTensor, CPUFloatTensor>.  Can you can use .to() instead of toFloat()."}