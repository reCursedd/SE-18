{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166677206", "pull_request_review_id": 94773431, "id": 166677206, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjY3NzIwNg==", "diff_hunk": "@@ -0,0 +1,85 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+#include <TH/TH.h>\n+#include <THNN/THNN.h>\n+#undef THNN_\n+#include <THS/THS.h>\n+\n+#include \"ATen/CPUFloatTensor.h\"\n+#include \"ATen/CPUDoubleTensor.h\"\n+#include \"ATen/SparseCPUFloatTensor.h\"\n+#include \"ATen/SparseCPUDoubleTensor.h\"\n+\n+namespace at {\n+namespace native {\n+\n+// Calling into TH for sspaddmm because ATen code generation currently\n+// doesn't support Sparse x Dense operations on Sparse tensors\n+template <class scalar>\n+void TH_sspaddmm(Tensor & result, Scalar beta, const Tensor& self,\n+    Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+  runtime_error(\"sspaddmm NYI for passed in types\\n\");\n+}\n+\n+template <>\n+void TH_sspaddmm<float>(Tensor& result, Scalar beta, const Tensor& self,\n+    Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+  auto result_ = checked_cast_tensor<SparseCPUFloatTensor>(result.pImpl,\"result\",0, false);\n+  auto beta_ = beta.toFloat();\n+  auto self_ = checked_cast_tensor<SparseCPUFloatTensor>(self.pImpl,\"self\",2, false);\n+  auto alpha_ = alpha.toFloat();\n+  auto mat1_ = checked_cast_tensor<SparseCPUFloatTensor>(mat1.pImpl,\"mat1\",4, false);\n+  auto mat2_ = checked_cast_tensor<CPUFloatTensor>(mat2.pImpl,\"mat2\",5, false);\n+  THSFloatTensor_sspaddmm(result_->tensor, beta_, self_->tensor, alpha_, mat1_->tensor, mat2_->tensor);\n+  result_->maybeScalar(self_->isScalar() && mat1_->isScalar() && mat2_->isScalar());\n+}\n+\n+template <>\n+void TH_sspaddmm<double>(Tensor& result, Scalar beta, const Tensor& self,\n+    Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+  auto result_ = checked_cast_tensor<SparseCPUDoubleTensor>(result.pImpl,\"result\",0, false);\n+  auto beta_ = beta.toDouble();\n+  auto self_ = checked_cast_tensor<SparseCPUDoubleTensor>(self.pImpl,\"self\",2, false);\n+  auto alpha_ = alpha.toDouble();\n+  auto mat1_ = checked_cast_tensor<SparseCPUDoubleTensor>(mat1.pImpl,\"mat1\",4, false);\n+  auto mat2_ = checked_cast_tensor<CPUDoubleTensor>(mat2.pImpl,\"mat2\",5, false);\n+  THSDoubleTensor_sspaddmm(result_->tensor, beta_, self_->tensor, alpha_, mat1_->tensor, mat2_->tensor);\n+  result_->maybeScalar(self_->isScalar() && mat1_->isScalar() && mat2_->isScalar());\n+}\n+\n+template <typename scalar>\n+struct SspaddmmOp {\n+  static void apply(Tensor& result, Scalar beta, const Tensor& self,\n+      Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+    TH_sspaddmm<scalar>(result, beta, self, alpha, mat1, mat2);\n+  }\n+};\n+\n+// sparse, real, sparse, real, sparse, dense -> sparse\n+Tensor& _sspaddmm_out_cpu(Tensor& result, Scalar beta, const Tensor& self,\n+    Scalar alpha, const Tensor& mat1, const Tensor& mat2) {\n+  dispatch_floating_types<void, SspaddmmOp>(self.type(), \"sspaddmm\",\n+      result, beta, self, alpha, mat1, mat2);\n+  return result;\n+}\n+\n+// sparse, real, sparse, real, sparse, dense -> sparse\n+Tensor& sspaddmm_out(Tensor& result, const Tensor& self, const Tensor& mat1,\n+    const Tensor& mat2, Scalar beta, Scalar alpha) {\n+  return mat2.type()._sspaddmm_out(result, beta, self, alpha, mat1, mat2);\n+}\n+\n+// real, sparse, real, sparse, dense -> sparse\n+Tensor sspaddmm(const Tensor& self, const Tensor& mat1, const Tensor& mat2,\n+    Scalar beta, Scalar alpha) {\n+  // There's no easy way to make an empty sparse tensor right now\n+  auto result = self.clone();", "path": "aten/src/ATen/native/SparseMM.cpp", "position": null, "original_position": 78, "commit_id": "85326ed19052ea4c84561e6b4f9b39bf92815608", "original_commit_id": "5699a68baaabbf1082eacb49083c48650d7873d6", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "self.type().tensor() doesn't work?", "created_at": "2018-02-07T16:39:19Z", "updated_at": "2018-11-23T15:39:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/5017#discussion_r166677206", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5017", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166677206"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5017#discussion_r166677206"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5017"}}, "body_html": "<p>self.type().tensor() doesn't work?</p>", "body_text": "self.type().tensor() doesn't work?"}