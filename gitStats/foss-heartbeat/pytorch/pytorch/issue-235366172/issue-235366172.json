{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1784", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1784/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1784/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1784/events", "html_url": "https://github.com/pytorch/pytorch/issues/1784", "id": 235366172, "node_id": "MDU6SXNzdWUyMzUzNjYxNzI=", "number": 1784, "title": "Consider turning on -Werror / Insufficient type safety with THTensor_(retain) call", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-12T21:08:09Z", "updated_at": "2018-08-17T20:19:16Z", "closed_at": "2018-08-17T20:19:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Recently, I made the following bug (buggy code is old, fixed code is new):</p>\n<pre><code>diff --git a/torch/lib/THS/generic/THSTensor.c b/torch/lib/THS/generic/THSTensor.c\nindex ce24a86..0d5d3e0 100644\n--- a/torch/lib/THS/generic/THSTensor.c\n+++ b/torch/lib/THS/generic/THSTensor.c\n@@ -191,8 +191,8 @@ THSTensor *THSTensor_(newWithTensorAndSize)(THLongTensor *indices, THTensor *val\n   }\n   // NB: by default, we do NOT clone indices/values into the sparse tensor.\n   // Efficient API by default!\n-  THSTensor_(retain)(indices);\n-  THSTensor_(retain)(values);\n+  THLongTensor_retain(indices);\n+  THTensor_(retain)(values);\n   THSTensor_(_move)(self, indices, values);\n \n   return self;\n</code></pre>\n<p>What I found perplexing is that gcc didn't error out when I made this mistake. Instead, it emitted a warning only:</p>\n<pre><code>In file included from generic/THSTensor.c:2:0,\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.c:4:\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.c: In function \u2018THSByteTensor_newWithTenso\nrAndSize\u2019:\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.c:194:3: warning: passing argument 1 of \u2018T\nHSByteTensor_retain\u2019 from incompatible pointer type [enabled by default]\n   THSTensor_(retain)(indices);\n   ^\nIn file included from /home/ezyang/local/pytorch/torch/lib/tmp_install/include/TH/TH.h:4:0,\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:4,\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.c:1:\n/home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:8:40: note: expected \u2018struct THSByteTensor *\u2019 bu\nt argument is of type \u2018struct THLongTensor *\u2019\n #define THSTensor_(NAME)   TH_CONCAT_4(THS,Real,Tensor_,NAME)\n                                        ^\n/home/ezyang/local/pytorch/torch/lib/tmp_install/include/TH/THGeneral.h:109:37: note: in definition o\nf macro \u2018TH_CONCAT_4_EXPAND\u2019\n #define TH_CONCAT_4_EXPAND(x,y,z,w) x ## y ## z ## w\n                                     ^\n/home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:8:28: note: in expansion of macro \u2018TH_CONCAT_4\u2019\n #define THSTensor_(NAME)   TH_CONCAT_4(THS,Real,Tensor_,NAME)\n                            ^\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.h:67:13: note: in expansion of macro \u2018THST\nensor_\u2019\n TH_API void THSTensor_(retain)(THSTensor *self);\n             ^\n</code></pre>\n<p>It would really be great if we can turn this into an honest-to-goodness error. The usual thing to do is <code>-Werror</code> but I have noticed that we are NOT warnings clean, and I don't know how much effort it would be to make it so.</p>\n<p>If try to Werror JUST these warnings, we will need GCC and Clang specific incants. As far as I can tell, for clang, it's <code>-Werror=incompatible-pointer-types</code>; for GCC it's <code>-Werror=strict-aliasing</code> but only if your GCC is sufficiently recent.</p>", "body_text": "Recently, I made the following bug (buggy code is old, fixed code is new):\ndiff --git a/torch/lib/THS/generic/THSTensor.c b/torch/lib/THS/generic/THSTensor.c\nindex ce24a86..0d5d3e0 100644\n--- a/torch/lib/THS/generic/THSTensor.c\n+++ b/torch/lib/THS/generic/THSTensor.c\n@@ -191,8 +191,8 @@ THSTensor *THSTensor_(newWithTensorAndSize)(THLongTensor *indices, THTensor *val\n   }\n   // NB: by default, we do NOT clone indices/values into the sparse tensor.\n   // Efficient API by default!\n-  THSTensor_(retain)(indices);\n-  THSTensor_(retain)(values);\n+  THLongTensor_retain(indices);\n+  THTensor_(retain)(values);\n   THSTensor_(_move)(self, indices, values);\n \n   return self;\n\nWhat I found perplexing is that gcc didn't error out when I made this mistake. Instead, it emitted a warning only:\nIn file included from generic/THSTensor.c:2:0,\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.c:4:\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.c: In function \u2018THSByteTensor_newWithTenso\nrAndSize\u2019:\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.c:194:3: warning: passing argument 1 of \u2018T\nHSByteTensor_retain\u2019 from incompatible pointer type [enabled by default]\n   THSTensor_(retain)(indices);\n   ^\nIn file included from /home/ezyang/local/pytorch/torch/lib/tmp_install/include/TH/TH.h:4:0,\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:4,\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.c:1:\n/home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:8:40: note: expected \u2018struct THSByteTensor *\u2019 bu\nt argument is of type \u2018struct THLongTensor *\u2019\n #define THSTensor_(NAME)   TH_CONCAT_4(THS,Real,Tensor_,NAME)\n                                        ^\n/home/ezyang/local/pytorch/torch/lib/tmp_install/include/TH/THGeneral.h:109:37: note: in definition o\nf macro \u2018TH_CONCAT_4_EXPAND\u2019\n #define TH_CONCAT_4_EXPAND(x,y,z,w) x ## y ## z ## w\n                                     ^\n/home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:8:28: note: in expansion of macro \u2018TH_CONCAT_4\u2019\n #define THSTensor_(NAME)   TH_CONCAT_4(THS,Real,Tensor_,NAME)\n                            ^\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.h:67:13: note: in expansion of macro \u2018THST\nensor_\u2019\n TH_API void THSTensor_(retain)(THSTensor *self);\n             ^\n\nIt would really be great if we can turn this into an honest-to-goodness error. The usual thing to do is -Werror but I have noticed that we are NOT warnings clean, and I don't know how much effort it would be to make it so.\nIf try to Werror JUST these warnings, we will need GCC and Clang specific incants. As far as I can tell, for clang, it's -Werror=incompatible-pointer-types; for GCC it's -Werror=strict-aliasing but only if your GCC is sufficiently recent.", "body": "Recently, I made the following bug (buggy code is old, fixed code is new):\r\n\r\n```\r\ndiff --git a/torch/lib/THS/generic/THSTensor.c b/torch/lib/THS/generic/THSTensor.c\r\nindex ce24a86..0d5d3e0 100644\r\n--- a/torch/lib/THS/generic/THSTensor.c\r\n+++ b/torch/lib/THS/generic/THSTensor.c\r\n@@ -191,8 +191,8 @@ THSTensor *THSTensor_(newWithTensorAndSize)(THLongTensor *indices, THTensor *val\r\n   }\r\n   // NB: by default, we do NOT clone indices/values into the sparse tensor.\r\n   // Efficient API by default!\r\n-  THSTensor_(retain)(indices);\r\n-  THSTensor_(retain)(values);\r\n+  THLongTensor_retain(indices);\r\n+  THTensor_(retain)(values);\r\n   THSTensor_(_move)(self, indices, values);\r\n \r\n   return self;\r\n```\r\n\r\nWhat I found perplexing is that gcc didn't error out when I made this mistake. Instead, it emitted a warning only:\r\n\r\n```\r\nIn file included from generic/THSTensor.c:2:0,\r\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.c:4:\r\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.c: In function \u2018THSByteTensor_newWithTenso\r\nrAndSize\u2019:\r\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.c:194:3: warning: passing argument 1 of \u2018T\r\nHSByteTensor_retain\u2019 from incompatible pointer type [enabled by default]\r\n   THSTensor_(retain)(indices);\r\n   ^\r\nIn file included from /home/ezyang/local/pytorch/torch/lib/tmp_install/include/TH/TH.h:4:0,\r\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:4,\r\n                 from /home/ezyang/local/pytorch/torch/lib/THS/THSTensor.c:1:\r\n/home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:8:40: note: expected \u2018struct THSByteTensor *\u2019 bu\r\nt argument is of type \u2018struct THLongTensor *\u2019\r\n #define THSTensor_(NAME)   TH_CONCAT_4(THS,Real,Tensor_,NAME)\r\n                                        ^\r\n/home/ezyang/local/pytorch/torch/lib/tmp_install/include/TH/THGeneral.h:109:37: note: in definition o\r\nf macro \u2018TH_CONCAT_4_EXPAND\u2019\r\n #define TH_CONCAT_4_EXPAND(x,y,z,w) x ## y ## z ## w\r\n                                     ^\r\n/home/ezyang/local/pytorch/torch/lib/THS/THSTensor.h:8:28: note: in expansion of macro \u2018TH_CONCAT_4\u2019\r\n #define THSTensor_(NAME)   TH_CONCAT_4(THS,Real,Tensor_,NAME)\r\n                            ^\r\n/home/ezyang/local/pytorch/torch/lib/THS/generic/THSTensor.h:67:13: note: in expansion of macro \u2018THST\r\nensor_\u2019\r\n TH_API void THSTensor_(retain)(THSTensor *self);\r\n             ^\r\n```\r\n\r\nIt would really be great if we can turn this into an honest-to-goodness error. The usual thing to do is `-Werror` but I have noticed that we are NOT warnings clean, and I don't know how much effort it would be to make it so.\r\n\r\nIf try to Werror JUST these warnings, we will need GCC and Clang specific incants. As far as I can tell, for clang, it's `-Werror=incompatible-pointer-types`; for GCC it's `-Werror=strict-aliasing` but only if your GCC is sufficiently recent."}