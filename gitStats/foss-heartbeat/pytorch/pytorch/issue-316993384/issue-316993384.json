{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6885", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6885/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6885/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6885/events", "html_url": "https://github.com/pytorch/pytorch/issues/6885", "id": 316993384, "node_id": "MDU6SXNzdWUzMTY5OTMzODQ=", "number": 6885, "title": "[PyTorch] Add torch.astensor and deprecate torch.from_numpy", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 466131885, "node_id": "MDU6TGFiZWw0NjYxMzE4ODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs%20discussion", "name": "needs discussion", "color": "cc317c", "default": false}, {"id": 897288569, "node_id": "MDU6TGFiZWw4OTcyODg1Njk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/pytorch", "name": "pytorch", "color": "f05732", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-04-23T21:39:11Z", "updated_at": "2018-05-18T18:51:13Z", "closed_at": "2018-05-18T18:51:13Z", "author_association": "MEMBER", "body_html": "<p>I believe it would be a good addition to add a new factory function, <code>torch.astensor</code>, which is equivalent to <code>torch.tensor</code>, but which doesn't perform a copy if possible. This means that passing a <code>torch.Tensor</code> returns a view of the same tensor, and passing a numpy array would have a behavior similar to <code>torch.from_numpy</code>.</p>\n<p>This means that we could potentially have a call on <code>torch.astensor</code> in the beginning of every function, as a way of supporting other data types than torch tensors for torch operations.</p>\n<p>For example</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> in torch namespace</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">exp</span>(<span class=\"pl-smi\">x</span>):\n    x <span class=\"pl-k\">=</span> torch.astensor(x)\n    <span class=\"pl-k\">return</span> x.exp()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> can now call `exp` on floats, lists, arrays</span>\ntorch.exp(<span class=\"pl-c1\">1.0</span>)\ntorch.exp([<span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">2.0</span>])\ntorch.exp(np.array([<span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">2.0</span>]))</pre></div>\n<p>Given that <code>torch.tensor</code> infers the type of the tensor from the content of the data we pass to it, we could then probably deprecate <code>torch.from_numpy</code> in favor if this unified constructor.</p>\n<p>What do you think?</p>", "body_text": "I believe it would be a good addition to add a new factory function, torch.astensor, which is equivalent to torch.tensor, but which doesn't perform a copy if possible. This means that passing a torch.Tensor returns a view of the same tensor, and passing a numpy array would have a behavior similar to torch.from_numpy.\nThis means that we could potentially have a call on torch.astensor in the beginning of every function, as a way of supporting other data types than torch tensors for torch operations.\nFor example\n# in torch namespace\ndef exp(x):\n    x = torch.astensor(x)\n    return x.exp()\n\n# can now call `exp` on floats, lists, arrays\ntorch.exp(1.0)\ntorch.exp([1.0, 2.0])\ntorch.exp(np.array([1.0, 2.0]))\nGiven that torch.tensor infers the type of the tensor from the content of the data we pass to it, we could then probably deprecate torch.from_numpy in favor if this unified constructor.\nWhat do you think?", "body": "I believe it would be a good addition to add a new factory function, `torch.astensor`, which is equivalent to `torch.tensor`, but which doesn't perform a copy if possible. This means that passing a `torch.Tensor` returns a view of the same tensor, and passing a numpy array would have a behavior similar to `torch.from_numpy`.\r\n\r\nThis means that we could potentially have a call on `torch.astensor` in the beginning of every function, as a way of supporting other data types than torch tensors for torch operations.\r\n\r\nFor example\r\n```python\r\n# in torch namespace\r\ndef exp(x):\r\n    x = torch.astensor(x)\r\n    return x.exp()\r\n\r\n# can now call `exp` on floats, lists, arrays\r\ntorch.exp(1.0)\r\ntorch.exp([1.0, 2.0])\r\ntorch.exp(np.array([1.0, 2.0]))\r\n```\r\n\r\nGiven that `torch.tensor` infers the type of the tensor from the content of the data we pass to it, we could then probably deprecate `torch.from_numpy` in favor if this unified constructor.\r\n\r\nWhat do you think?"}