{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/410209704", "html_url": "https://github.com/pytorch/pytorch/issues/1468#issuecomment-410209704", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1468", "id": 410209704, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDIwOTcwNA==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-03T10:11:18Z", "updated_at": "2018-08-03T10:11:18Z", "author_association": "MEMBER", "body_html": "<p>The optimization opportunity still exists (and also for max_pool, as we only need to hold the max indices, and not the input).</p>\n<p>The ATen implementation calls <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/nn.yaml#L137-L138\">THNN/THCUNN</a>, which in turn still requires the <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/SpatialDilatedMaxPooling.c#L358-L360\">input (and thus stores the whole input), while only the sizes are necessary</a></p>", "body_text": "The optimization opportunity still exists (and also for max_pool, as we only need to hold the max indices, and not the input).\nThe ATen implementation calls THNN/THCUNN, which in turn still requires the input (and thus stores the whole input), while only the sizes are necessary", "body": "The optimization opportunity still exists (and also for max_pool, as we only need to hold the max indices, and not the input).\r\n\r\nThe ATen implementation calls [THNN/THCUNN](https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/nn.yaml#L137-L138), which in turn still requires the [input (and thus stores the whole input), while only the sizes are necessary](https://github.com/pytorch/pytorch/blob/master/aten/src/THNN/generic/SpatialDilatedMaxPooling.c#L358-L360)"}