{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/349791723", "html_url": "https://github.com/pytorch/pytorch/pull/4058#issuecomment-349791723", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4058", "id": 349791723, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTc5MTcyMw==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-06T22:11:20Z", "updated_at": "2017-12-06T22:11:20Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>Tensor SparseCPUFloatType::_indices(const Tensor &amp; self) const {\n    auto self_ = checked_cast_tensor&lt;SparseCPUFloatTensor&gt;(self.pImpl,\"self\",1, false);\n    return Tensor((new CPULongTensor(context,THSFloatTensor_newIndices(self_-&gt;tensor)))-&gt;maybeScalar(\nself_-&gt;isScalar()),false);\n}\nTensor SparseCPUFloatType::_values(const Tensor &amp; self) const {\n    auto self_ = checked_cast_tensor&lt;SparseCPUFloatTensor&gt;(self.pImpl,\"self\",1, false);\n    return Tensor((new CPUFloatTensor(context,THSFloatTensor_newValues(self_-&gt;tensor)))-&gt;maybeScalar(\nself_-&gt;isScalar()),false);\n}\n</code></pre>", "body_text": "Tensor SparseCPUFloatType::_indices(const Tensor & self) const {\n    auto self_ = checked_cast_tensor<SparseCPUFloatTensor>(self.pImpl,\"self\",1, false);\n    return Tensor((new CPULongTensor(context,THSFloatTensor_newIndices(self_->tensor)))->maybeScalar(\nself_->isScalar()),false);\n}\nTensor SparseCPUFloatType::_values(const Tensor & self) const {\n    auto self_ = checked_cast_tensor<SparseCPUFloatTensor>(self.pImpl,\"self\",1, false);\n    return Tensor((new CPUFloatTensor(context,THSFloatTensor_newValues(self_->tensor)))->maybeScalar(\nself_->isScalar()),false);\n}", "body": "```\r\nTensor SparseCPUFloatType::_indices(const Tensor & self) const {\r\n    auto self_ = checked_cast_tensor<SparseCPUFloatTensor>(self.pImpl,\"self\",1, false);\r\n    return Tensor((new CPULongTensor(context,THSFloatTensor_newIndices(self_->tensor)))->maybeScalar(\r\nself_->isScalar()),false);\r\n}\r\nTensor SparseCPUFloatType::_values(const Tensor & self) const {\r\n    auto self_ = checked_cast_tensor<SparseCPUFloatTensor>(self.pImpl,\"self\",1, false);\r\n    return Tensor((new CPUFloatTensor(context,THSFloatTensor_newValues(self_->tensor)))->maybeScalar(\r\nself_->isScalar()),false);\r\n}\r\n```"}