{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4058", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4058/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4058/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4058/events", "html_url": "https://github.com/pytorch/pytorch/pull/4058", "id": 279902184, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU2ODM2NDY2", "number": 4058, "title": "Implement _values() and _indices() methods for sparse variables in python (and sparse tensors in aten)", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-12-06T20:51:56Z", "updated_at": "2018-11-23T15:37:08Z", "closed_at": "2017-12-20T17:25:26Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4058", "html_url": "https://github.com/pytorch/pytorch/pull/4058", "diff_url": "https://github.com/pytorch/pytorch/pull/4058.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4058.patch"}, "body_html": "<p>This is a part of making sparse tensors work with dataloader (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"276986874\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3898\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3898/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3898\">#3898</a>)</p>\n<p>This exposes <code>_values()</code> and <code>_indices()</code> for sparse variables in python (and sparse tensors in Aten).</p>\n<p>To do this, I added THDenseTensor* and THDenseIndexTensor* return value functionality to Declarations.cwrap. These should always mean \"the dense equivalent of THTensor*\" and \"the dense equivalent of THIndexTensor*\" respectively.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> for the THDenseTensor in cwrap addition</p>\n<h3>Test Plan</h3>\n<p>Run the following:</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\nv = torch.FloatTensor([3, 4, 5])\ni = torch.LongTensor([[0, 1, 1], [2, 0, 2]])\nx = Variable(torch.sparse.FloatTensor(i, v, torch.Size([2,3])))\n\nx._indices()\nx.data._indices()\n\nx._values()\nx.data._values()\n</code></pre>", "body_text": "This is a part of making sparse tensors work with dataloader (#3898)\nThis exposes _values() and _indices() for sparse variables in python (and sparse tensors in Aten).\nTo do this, I added THDenseTensor* and THDenseIndexTensor* return value functionality to Declarations.cwrap. These should always mean \"the dense equivalent of THTensor*\" and \"the dense equivalent of THIndexTensor*\" respectively.\ncc @zdevito for the THDenseTensor in cwrap addition\nTest Plan\nRun the following:\nimport torch\nfrom torch.autograd import Variable\nv = torch.FloatTensor([3, 4, 5])\ni = torch.LongTensor([[0, 1, 1], [2, 0, 2]])\nx = Variable(torch.sparse.FloatTensor(i, v, torch.Size([2,3])))\n\nx._indices()\nx.data._indices()\n\nx._values()\nx.data._values()", "body": "This is a part of making sparse tensors work with dataloader (#3898)\r\n\r\nThis exposes `_values()` and `_indices()` for sparse variables in python (and sparse tensors in Aten).\r\n\r\nTo do this, I added THDenseTensor* and THDenseIndexTensor* return value functionality to Declarations.cwrap. These should always mean \"the dense equivalent of THTensor*\" and \"the dense equivalent of THIndexTensor*\" respectively. \r\n \r\ncc @zdevito for the THDenseTensor in cwrap addition\r\n\r\n### Test Plan\r\nRun the following:\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nv = torch.FloatTensor([3, 4, 5])\r\ni = torch.LongTensor([[0, 1, 1], [2, 0, 2]])\r\nx = Variable(torch.sparse.FloatTensor(i, v, torch.Size([2,3])))\r\n\r\nx._indices()\r\nx.data._indices()\r\n\r\nx._values()\r\nx.data._values()\r\n```"}