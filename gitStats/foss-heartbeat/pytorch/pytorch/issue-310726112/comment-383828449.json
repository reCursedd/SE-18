{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/383828449", "html_url": "https://github.com/pytorch/pytorch/pull/6225#issuecomment-383828449", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6225", "id": 383828449, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgyODQ0OQ==", "user": {"login": "kose-y", "id": 8198142, "node_id": "MDQ6VXNlcjgxOTgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8198142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kose-y", "html_url": "https://github.com/kose-y", "followers_url": "https://api.github.com/users/kose-y/followers", "following_url": "https://api.github.com/users/kose-y/following{/other_user}", "gists_url": "https://api.github.com/users/kose-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/kose-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kose-y/subscriptions", "organizations_url": "https://api.github.com/users/kose-y/orgs", "repos_url": "https://api.github.com/users/kose-y/repos", "events_url": "https://api.github.com/users/kose-y/events{/privacy}", "received_events_url": "https://api.github.com/users/kose-y/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-24T07:15:47Z", "updated_at": "2018-04-24T07:15:47Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> modified per the request. There were some changes:</p>\n<ul>\n<li>CSR representation is now set to <code>TH(Cuda)IntTensor</code> for both CPU and CUDA. The reason why toCSR in CUDA version returns <code>THCudaIntTensor</code> is that the result of <code>cusparseXcoo2csr</code> is of <code>int</code> type. For exposing the CSR tensor, it is better to match the types in CPU and CUDA versions, isn't it?</li>\n<li>Changes were made to support \"<code>THDenseIntegerTensor</code>\" in the cwrap file. This is the <code>Int</code> equivalent of <code>THDenseIndexTensor</code>.</li>\n</ul>", "body_text": "@apaszke modified per the request. There were some changes:\n\nCSR representation is now set to TH(Cuda)IntTensor for both CPU and CUDA. The reason why toCSR in CUDA version returns THCudaIntTensor is that the result of cusparseXcoo2csr is of int type. For exposing the CSR tensor, it is better to match the types in CPU and CUDA versions, isn't it?\nChanges were made to support \"THDenseIntegerTensor\" in the cwrap file. This is the Int equivalent of THDenseIndexTensor.", "body": "@apaszke modified per the request. There were some changes: \r\n- CSR representation is now set to `TH(Cuda)IntTensor` for both CPU and CUDA. The reason why toCSR in CUDA version returns `THCudaIntTensor` is that the result of `cusparseXcoo2csr` is of `int` type. For exposing the CSR tensor, it is better to match the types in CPU and CUDA versions, isn't it?\r\n- Changes were made to support \"`THDenseIntegerTensor`\" in the cwrap file. This is the `Int` equivalent of `THDenseIndexTensor`. \r\n"}