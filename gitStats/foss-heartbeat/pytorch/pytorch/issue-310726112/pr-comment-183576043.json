{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183576043", "pull_request_review_id": 114600175, "id": 183576043, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzU3NjA0Mw==", "diff_hunk": "@@ -283,6 +304,27 @@ THSTensor *THSTensor_(newTranspose)(THSTensor *self, int d1, int d2) {\n  * reshaping methods\n  ******************************************************************************/\n \n+/*** Helper methods ***/\n+THLongTensor *THSTensor_(toCSR)(int64_t const *indices, int64_t dim, int64_t nnz) {\n+  int64_t h, i, hp0, hp1;\n+  THLongTensor *csr = THLongTensor_newWithSize1d(dim + 1);\n+  THLongTensor_zero(csr);\n+\n+  // Convert the sparse matrix to CSR format\n+#pragma omp parallel for private(i, h, hp0, hp1) schedule(static) if (nnz > 10000)\n+  for (i=0; i<nnz; i++) {\n+    hp0 = indices[i];\n+    hp1 = (i+1 == nnz) ?  dim : indices[i+1];\n+    if (hp0 != hp1) for (h = hp0; h < hp1; h++) {\n+      THTensor_fastSet1d(csr, h+1, i+1);\n+    }\n+  }\n+  return csr;", "path": "aten/src/THS/generic/THSTensor.cpp", "position": 80, "original_position": 77, "commit_id": "4855d2f3eb875b994d9efb2004b6258f8dee61e0", "original_commit_id": "36acd951e6c6b4d1fd76bb0fddd527b6b36ce4e4", "user": {"login": "kose-y", "id": 8198142, "node_id": "MDQ6VXNlcjgxOTgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8198142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kose-y", "html_url": "https://github.com/kose-y", "followers_url": "https://api.github.com/users/kose-y/followers", "following_url": "https://api.github.com/users/kose-y/following{/other_user}", "gists_url": "https://api.github.com/users/kose-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/kose-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kose-y/subscriptions", "organizations_url": "https://api.github.com/users/kose-y/orgs", "repos_url": "https://api.github.com/users/kose-y/repos", "events_url": "https://api.github.com/users/kose-y/events{/privacy}", "received_events_url": "https://api.github.com/users/kose-y/received_events", "type": "User", "site_admin": false}, "body": "COO uses row indices and column indices and CSR uses row \"pointers\" and column indices. In order to convert a (coalesced and sorted) COO representation to CSR representation, we need to convert row indices into row pointers, while we don't need to do anything on column indices. \r\n\r\n`toCSR` is the function that converts row indices (1-D) into row pointers (1-D). For GPU version, it wraps [`cusparseXcoo2csr`](https://docs.nvidia.com/cuda/cusparse/index.html#cusparse-lt-t-gt-coo2csr). \r\n> This function converts the array containing the uncompressed row indices (corresponding to COO format) into an array of compressed row pointers (corresponding to CSR format).\r\n\r\nIt is not a new function; it was in `THSTensorMath.cpp` and`THCSTensorMath.cu` as an internal method for matrix multiplication, and it is moved to `THSTensor.cpp` and `THCSTensor.cu` in this pull request.\r\n\r\nThe CPU version implements the equivalent operation in openMP. The input row indices MUST be sorted, or the result will be incorrect (for both GPU and CPU versions).\r\n\r\n", "created_at": "2018-04-24T00:32:29Z", "updated_at": "2018-11-23T15:43:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/6225#discussion_r183576043", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6225", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183576043"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6225#discussion_r183576043"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6225"}}, "body_html": "<p>COO uses row indices and column indices and CSR uses row \"pointers\" and column indices. In order to convert a (coalesced and sorted) COO representation to CSR representation, we need to convert row indices into row pointers, while we don't need to do anything on column indices.</p>\n<p><code>toCSR</code> is the function that converts row indices (1-D) into row pointers (1-D). For GPU version, it wraps <a href=\"https://docs.nvidia.com/cuda/cusparse/index.html#cusparse-lt-t-gt-coo2csr\" rel=\"nofollow\"><code>cusparseXcoo2csr</code></a>.</p>\n<blockquote>\n<p>This function converts the array containing the uncompressed row indices (corresponding to COO format) into an array of compressed row pointers (corresponding to CSR format).</p>\n</blockquote>\n<p>It is not a new function; it was in <code>THSTensorMath.cpp</code> and<code>THCSTensorMath.cu</code> as an internal method for matrix multiplication, and it is moved to <code>THSTensor.cpp</code> and <code>THCSTensor.cu</code> in this pull request.</p>\n<p>The CPU version implements the equivalent operation in openMP. The input row indices MUST be sorted, or the result will be incorrect (for both GPU and CPU versions).</p>", "body_text": "COO uses row indices and column indices and CSR uses row \"pointers\" and column indices. In order to convert a (coalesced and sorted) COO representation to CSR representation, we need to convert row indices into row pointers, while we don't need to do anything on column indices.\ntoCSR is the function that converts row indices (1-D) into row pointers (1-D). For GPU version, it wraps cusparseXcoo2csr.\n\nThis function converts the array containing the uncompressed row indices (corresponding to COO format) into an array of compressed row pointers (corresponding to CSR format).\n\nIt is not a new function; it was in THSTensorMath.cpp andTHCSTensorMath.cu as an internal method for matrix multiplication, and it is moved to THSTensor.cpp and THCSTensor.cu in this pull request.\nThe CPU version implements the equivalent operation in openMP. The input row indices MUST be sorted, or the result will be incorrect (for both GPU and CPU versions).", "in_reply_to_id": 183357065}