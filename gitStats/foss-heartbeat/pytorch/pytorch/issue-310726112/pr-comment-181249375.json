{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181249375", "pull_request_review_id": 111831232, "id": 181249375, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTI0OTM3NQ==", "diff_hunk": "@@ -120,6 +126,29 @@ THCSTensor* THCSTensor_(_set)(THCState *state, THCSTensor *self, THCIndexTensor\n   return THCSTensor_(_move)(state, self, THCIndexTensor_(newClone)(state, indices), THCTensor_(newClone)(state, values));\n }\n \n+THCSTensor* THCSTensor_(_move_csr)(THCState *state, THCSTensor *self, THCudaIntTensor *csr) {\n+  int empty = (csr == NULL);\n+  if (!empty) {\n+    THArgCheck(self->size[0] + 1 == THCudaIntTensor_size(state, csr, 0), 1, \n+        \"csr must be of length of first dimension + 1, expected %d, got %d\", self->size[0] + 1,\n+        THCudaIntTensor_size(state, csr, 0));\n+  }\n+  if (self->csr != NULL) {\n+    THCudaIntTensor_free(state, self->csr);\n+  }\n+  self->csr = csr;\n+\n+  return self;\n+}\n+\n+THCSTensor* THCSTensor_(_set_csr)(THCState *state, THCSTensor *self, THCudaIntTensor * csr) {\n+  if (csr != NULL) {\n+    return THCSTensor_(_move_csr)(state, self, THCudaIntTensor_newClone(state, csr));", "path": "aten/src/THCS/generic/THCSTensor.cpp", "position": null, "original_position": 52, "commit_id": "4855d2f3eb875b994d9efb2004b6258f8dee61e0", "original_commit_id": "358d3416df470f680bf7d361a0cb859ba77167af", "user": {"login": "kose-y", "id": 8198142, "node_id": "MDQ6VXNlcjgxOTgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8198142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kose-y", "html_url": "https://github.com/kose-y", "followers_url": "https://api.github.com/users/kose-y/followers", "following_url": "https://api.github.com/users/kose-y/following{/other_user}", "gists_url": "https://api.github.com/users/kose-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/kose-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kose-y/subscriptions", "organizations_url": "https://api.github.com/users/kose-y/orgs", "repos_url": "https://api.github.com/users/kose-y/repos", "events_url": "https://api.github.com/users/kose-y/events{/privacy}", "received_events_url": "https://api.github.com/users/kose-y/received_events", "type": "User", "site_admin": false}, "body": "Okay.  I thought clone (of a sparse tensor in this case) should be a true clone, copying every information in its entirety, but no harm either way to me.", "created_at": "2018-04-12T23:19:01Z", "updated_at": "2018-11-23T15:42:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/6225#discussion_r181249375", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6225", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181249375"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6225#discussion_r181249375"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6225"}}, "body_html": "<p>Okay.  I thought clone (of a sparse tensor in this case) should be a true clone, copying every information in its entirety, but no harm either way to me.</p>", "body_text": "Okay.  I thought clone (of a sparse tensor in this case) should be a true clone, copying every information in its entirety, but no harm either way to me.", "in_reply_to_id": 181226435}