{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4750", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4750/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4750/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4750/events", "html_url": "https://github.com/pytorch/pytorch/issues/4750", "id": 290123045, "node_id": "MDU6SXNzdWUyOTAxMjMwNDU=", "number": 4750, "title": "Cpp Extension Plan", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-19T22:12:38Z", "updated_at": "2018-02-20T19:20:16Z", "closed_at": "2018-02-20T19:20:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Create PyTorch/PyTorch.h</p>\n<ul>\n<li><a href=\"https://gist.github.com/zdevito/138b0111fc88ef44840d6ce18231bb36\">https://gist.github.com/zdevito/138b0111fc88ef44840d6ce18231bb36</a></li>\n<li>pybind11 headers</li>\n<li>ATen headers</li>\n<li>PyTorch's pybind11 headers. 'pybind.h'<br>\n(for python Variable and python Tensor &lt;-&gt; at::Tensor)</li>\n<li>edit pytorch/setup.py to <em>install the headers</em> required in PyTorch.h</li>\n<li>make torch.cpp_extensions.include_path() work</li>\n<li>debug the example until it works to create a cpp extension guide</li>\n</ul>\n<p>Follow Up:</p>\n<ul>\n<li>handle the cpp build as a jit</li>\n</ul>\n<pre><code>example = torch.cpp_extension.load(['a.cpp', 'b.cpp'])\n     # make ninja build files for compilation unit\n     # run build files, which will pick up ninja cache \n  \n</code></pre>\n<ul>\n<li>how to write a new ATen operator and contribute it</li>\n</ul>", "body_text": "Create PyTorch/PyTorch.h\n\nhttps://gist.github.com/zdevito/138b0111fc88ef44840d6ce18231bb36\npybind11 headers\nATen headers\nPyTorch's pybind11 headers. 'pybind.h'\n(for python Variable and python Tensor <-> at::Tensor)\nedit pytorch/setup.py to install the headers required in PyTorch.h\nmake torch.cpp_extensions.include_path() work\ndebug the example until it works to create a cpp extension guide\n\nFollow Up:\n\nhandle the cpp build as a jit\n\nexample = torch.cpp_extension.load(['a.cpp', 'b.cpp'])\n     # make ninja build files for compilation unit\n     # run build files, which will pick up ninja cache \n  \n\n\nhow to write a new ATen operator and contribute it", "body": "Create PyTorch/PyTorch.h\r\n  - https://gist.github.com/zdevito/138b0111fc88ef44840d6ce18231bb36\r\n  - pybind11 headers\r\n  - ATen headers\r\n  - PyTorch's pybind11 headers. 'pybind.h' \r\n     (for python Variable and python Tensor <-> at::Tensor)\r\n  - edit pytorch/setup.py to _install the headers_ required in PyTorch.h\r\n  - make torch.cpp_extensions.include_path() work\r\n  - debug the example until it works to create a cpp extension guide\r\n  \r\n  \r\nFollow Up:\r\n- handle the cpp build as a jit\r\n```\r\nexample = torch.cpp_extension.load(['a.cpp', 'b.cpp'])\r\n     # make ninja build files for compilation unit\r\n     # run build files, which will pick up ninja cache \r\n  \r\n```\r\n- how to write a new ATen operator and contribute it"}