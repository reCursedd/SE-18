{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393536196", "html_url": "https://github.com/pytorch/pytorch/pull/7984#issuecomment-393536196", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7984", "id": 393536196, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzUzNjE5Ng==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-31T13:49:32Z", "updated_at": "2018-06-01T13:19:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17890620\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dzhulgakov\">@dzhulgakov</a>, here is the timeit for indexing. Test ran on devfair024, I didn't do any CPU/NUMA pinning. CPU governor is on performance. Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz.</p>\n<p>Baseline <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/fce6b24468cfb29d1a6566772215195b92a50e8e/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/fce6b24468cfb29d1a6566772215195b92a50e8e\"><tt>fce6b24</tt></a></p>\n<pre><code>In [1]: import torch\nx\nIn [2]: x = torch.randn(1000)\n\nIn [4]: %timeit x[0]\n1.11 \u00b5s \u00b1 1.34 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: %timeit x[0]\n1.11 \u00b5s \u00b1 1.54 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [6]: %timeit x[0]\n^[[A^[[A1.12 \u00b5s \u00b1 7.03 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]: %timeit x[0] = 1\n3.74 \u00b5s \u00b1 12.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [8]: %timeit x[0] = 1\n3.75 \u00b5s \u00b1 5.55 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</code></pre>\n<p>Your PR <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/04ace5f94f625fe9ac6d8e750406d66997db8dc7/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/04ace5f94f625fe9ac6d8e750406d66997db8dc7\"><tt>04ace5f</tt></a></p>\n<pre><code>In [1]: import torch\nx\nIn [2]: x = torch.randn(1000)\n\nIn [3]: %timeit x[0]\n1.44 \u00b5s \u00b1 1.99 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [4]: %timeit x[0]\n1.37 \u00b5s \u00b1 1.96 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: %timeit x[0]\n1.38 \u00b5s \u00b1 6.61 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [6]: %timeit x[0]\n1.38 \u00b5s \u00b1 20.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]: %timeit x[0] = 1\n4.3 \u00b5s \u00b1 1.24 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [8]: %timeit x[0] = 1\n4.28 \u00b5s \u00b1 9.39 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [9]: %timeit x[0] = 1\n4.32 \u00b5s \u00b1 5.88 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</code></pre>\n<p>Taking the lowest number of all runs:</p>\n<pre><code>      baseline  change  % diff\nget   1.11      1.37    23%\nset   3.74      4.28    14%\n</code></pre>\n<p>This seems quite appreciable. Curious to see the results on the hardware you ran your tests on.</p>\n<p>(Also, lest one might think that this is a synthetic microbenchmark that is not worth writing home about, see <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a>'s original experiment, which also tested the overhead of indexing a <strong>Python list</strong>. It is sooooo fast.)</p>\n<p><strong>UPDATE.</strong> I did some further benchmarking and it seems like the baseline get figure here is overreported.</p>", "body_text": "Hi @dzhulgakov, here is the timeit for indexing. Test ran on devfair024, I didn't do any CPU/NUMA pinning. CPU governor is on performance. Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz.\nBaseline fce6b24\nIn [1]: import torch\nx\nIn [2]: x = torch.randn(1000)\n\nIn [4]: %timeit x[0]\n1.11 \u00b5s \u00b1 1.34 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: %timeit x[0]\n1.11 \u00b5s \u00b1 1.54 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [6]: %timeit x[0]\n^[[A^[[A1.12 \u00b5s \u00b1 7.03 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]: %timeit x[0] = 1\n3.74 \u00b5s \u00b1 12.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [8]: %timeit x[0] = 1\n3.75 \u00b5s \u00b1 5.55 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nYour PR 04ace5f\nIn [1]: import torch\nx\nIn [2]: x = torch.randn(1000)\n\nIn [3]: %timeit x[0]\n1.44 \u00b5s \u00b1 1.99 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [4]: %timeit x[0]\n1.37 \u00b5s \u00b1 1.96 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: %timeit x[0]\n1.38 \u00b5s \u00b1 6.61 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [6]: %timeit x[0]\n1.38 \u00b5s \u00b1 20.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]: %timeit x[0] = 1\n4.3 \u00b5s \u00b1 1.24 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [8]: %timeit x[0] = 1\n4.28 \u00b5s \u00b1 9.39 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [9]: %timeit x[0] = 1\n4.32 \u00b5s \u00b1 5.88 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nTaking the lowest number of all runs:\n      baseline  change  % diff\nget   1.11      1.37    23%\nset   3.74      4.28    14%\n\nThis seems quite appreciable. Curious to see the results on the hardware you ran your tests on.\n(Also, lest one might think that this is a synthetic microbenchmark that is not worth writing home about, see @colesbury's original experiment, which also tested the overhead of indexing a Python list. It is sooooo fast.)\nUPDATE. I did some further benchmarking and it seems like the baseline get figure here is overreported.", "body": "Hi @dzhulgakov, here is the timeit for indexing. Test ran on devfair024, I didn't do any CPU/NUMA pinning. CPU governor is on performance. Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz.\r\n\r\nBaseline fce6b24468cfb29d1a6566772215195b92a50e8e\r\n\r\n```\r\nIn [1]: import torch\r\nx\r\nIn [2]: x = torch.randn(1000)\r\n\r\nIn [4]: %timeit x[0]\r\n1.11 \u00b5s \u00b1 1.34 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [5]: %timeit x[0]\r\n1.11 \u00b5s \u00b1 1.54 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [6]: %timeit x[0]\r\n^[[A^[[A1.12 \u00b5s \u00b1 7.03 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [7]: %timeit x[0] = 1\r\n3.74 \u00b5s \u00b1 12.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [8]: %timeit x[0] = 1\r\n3.75 \u00b5s \u00b1 5.55 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\n\r\nYour PR 04ace5f94f625fe9ac6d8e750406d66997db8dc7\r\n\r\n```\r\nIn [1]: import torch\r\nx\r\nIn [2]: x = torch.randn(1000)\r\n\r\nIn [3]: %timeit x[0]\r\n1.44 \u00b5s \u00b1 1.99 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [4]: %timeit x[0]\r\n1.37 \u00b5s \u00b1 1.96 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [5]: %timeit x[0]\r\n1.38 \u00b5s \u00b1 6.61 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [6]: %timeit x[0]\r\n1.38 \u00b5s \u00b1 20.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [7]: %timeit x[0] = 1\r\n4.3 \u00b5s \u00b1 1.24 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [8]: %timeit x[0] = 1\r\n4.28 \u00b5s \u00b1 9.39 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [9]: %timeit x[0] = 1\r\n4.32 \u00b5s \u00b1 5.88 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\n\r\nTaking the lowest number of all runs:\r\n\r\n```\r\n      baseline  change  % diff\r\nget   1.11      1.37    23%\r\nset   3.74      4.28    14%\r\n```\r\n\r\nThis seems quite appreciable. Curious to see the results on the hardware you ran your tests on.\r\n\r\n(Also, lest one might think that this is a synthetic microbenchmark that is not worth writing home about, see @colesbury's original experiment, which also tested the overhead of indexing a **Python list**. It is sooooo fast.)\r\n\r\n**UPDATE.** I did some further benchmarking and it seems like the baseline get figure here is overreported."}