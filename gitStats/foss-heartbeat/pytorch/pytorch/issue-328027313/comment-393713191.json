{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393713191", "html_url": "https://github.com/pytorch/pytorch/pull/7984#issuecomment-393713191", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7984", "id": 393713191, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzcxMzE5MQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-31T23:24:30Z", "updated_at": "2018-05-31T23:28:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here are the numbers with ska::flat_hash_map: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/ezyang/pytorch/commit/65ee7d816f939868015f11d0024f4cb6387e522c/hovercard\" href=\"https://github.com/ezyang/pytorch/commit/65ee7d816f939868015f11d0024f4cb6387e522c\">ezyang@<tt>65ee7d8</tt></a></p>\n<pre><code>In [1]: import torch\n\nIn [2]: x = torch.randn(1000)\n\nIn [3]: %timeit x[0]\n1.21 \u00b5s \u00b1 34.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [4]: %timeit x[0]\n1.11 \u00b5s \u00b1 5.63 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: %timeit x[0]\n1.11 \u00b5s \u00b1 3.88 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [6]: %timeit x[0]\n1.11 \u00b5s \u00b1 9.45 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]: %timeit x[0]\n1.11 \u00b5s \u00b1 2.97 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [8]: %timeit x[0] = 1\n3.89 \u00b5s \u00b1 7.36 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [9]: %timeit x[0] = 1\n3.88 \u00b5s \u00b1 10.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [10]: %timeit x[0] = 1\n3.88 \u00b5s \u00b1 6.85 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [11]: %timeit x[0] = 1\n3.89 \u00b5s \u00b1 7.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</code></pre>\n<p>That's a good sign, but this benchmark is for a hashmap with size 1. So need to test more things.</p>\n<p>(I did ska::flat_hash_map because <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2373925\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smessmer\">@smessmer</a> picked it for C10, and I'm assuming he did his research and picked a good one :)</p>\n<pre><code>      baseline  change  % diff\nget   1.11      1.11    0%\nset   3.74      3.88    3.7%\n</code></pre>", "body_text": "Here are the numbers with ska::flat_hash_map: ezyang@65ee7d8\nIn [1]: import torch\n\nIn [2]: x = torch.randn(1000)\n\nIn [3]: %timeit x[0]\n1.21 \u00b5s \u00b1 34.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [4]: %timeit x[0]\n1.11 \u00b5s \u00b1 5.63 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [5]: %timeit x[0]\n1.11 \u00b5s \u00b1 3.88 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [6]: %timeit x[0]\n1.11 \u00b5s \u00b1 9.45 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [7]: %timeit x[0]\n1.11 \u00b5s \u00b1 2.97 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\nIn [8]: %timeit x[0] = 1\n3.89 \u00b5s \u00b1 7.36 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [9]: %timeit x[0] = 1\n3.88 \u00b5s \u00b1 10.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [10]: %timeit x[0] = 1\n3.88 \u00b5s \u00b1 6.85 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nIn [11]: %timeit x[0] = 1\n3.89 \u00b5s \u00b1 7.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\nThat's a good sign, but this benchmark is for a hashmap with size 1. So need to test more things.\n(I did ska::flat_hash_map because @smessmer picked it for C10, and I'm assuming he did his research and picked a good one :)\n      baseline  change  % diff\nget   1.11      1.11    0%\nset   3.74      3.88    3.7%", "body": "Here are the numbers with ska::flat_hash_map: https://github.com/ezyang/pytorch-1/commit/65ee7d816f939868015f11d0024f4cb6387e522c\r\n\r\n```\r\nIn [1]: import torch\r\n\r\nIn [2]: x = torch.randn(1000)\r\n\r\nIn [3]: %timeit x[0]\r\n1.21 \u00b5s \u00b1 34.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [4]: %timeit x[0]\r\n1.11 \u00b5s \u00b1 5.63 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [5]: %timeit x[0]\r\n1.11 \u00b5s \u00b1 3.88 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [6]: %timeit x[0]\r\n1.11 \u00b5s \u00b1 9.45 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [7]: %timeit x[0]\r\n1.11 \u00b5s \u00b1 2.97 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\r\n\r\nIn [8]: %timeit x[0] = 1\r\n3.89 \u00b5s \u00b1 7.36 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [9]: %timeit x[0] = 1\r\n3.88 \u00b5s \u00b1 10.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [10]: %timeit x[0] = 1\r\n3.88 \u00b5s \u00b1 6.85 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [11]: %timeit x[0] = 1\r\n3.89 \u00b5s \u00b1 7.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n```\r\n\r\nThat's a good sign, but this benchmark is for a hashmap with size 1. So need to test more things.\r\n\r\n(I did ska::flat_hash_map because @smessmer picked it for C10, and I'm assuming he did his research and picked a good one :)\r\n\r\n```\r\n      baseline  change  % diff\r\nget   1.11      1.11    0%\r\nset   3.74      3.88    3.7%\r\n```"}