{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/393873407", "html_url": "https://github.com/pytorch/pytorch/pull/7984#issuecomment-393873407", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7984", "id": 393873407, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mzg3MzQwNw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-01T13:01:48Z", "updated_at": "2018-06-01T13:01:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Patch for counting (more to come):</p>\n<pre><code>diff --git a/torch/csrc/autograd/python_variable.cpp b/torch/csrc/autograd/python_variable.cpp\nindex eb157fd2e..d7e0adaa3 100644\n--- a/torch/csrc/autograd/python_variable.cpp\n+++ b/torch/csrc/autograd/python_variable.cpp\n@@ -1510,6 +1510,17 @@ static PyObject* THPVariable_NewWithVar(PyTypeObject* type, Variable var)\n   return obj;\n }\n \n+static int gExistingCounter = 0;\n+static int gNewCounter = 0;\n+\n+struct Printer {\n+  ~Printer() {\n+    std::cout &lt;&lt; \"counts: \" &lt;&lt; gExistingCounter &lt;&lt; \" \" &lt;&lt; gNewCounter &lt;&lt; \"\\n\";\n+  }\n+  static Printer printer;\n+};\n+Printer inst;\n+\n PyObject * THPVariable_Wrap(Variable var)\n {\n   if (!var.defined()) {\n@@ -1519,12 +1530,14 @@ PyObject * THPVariable_Wrap(Variable var)\n   auto it = gVariableWrappingCache.insert({var.unique_instance_tag(), nullptr});\n   if (!it.second) {\n     PyObject* obj = it.first-&gt;second;\n-    // std::cout &lt;&lt; gVariableWrappingCache.size() &lt;&lt; \" - \"&lt;&lt; \"@@@ Wrapping var, existing one\\n\";\n+    //std::cout &lt;&lt; gVariableWrappingCache.size() &lt;&lt; \" - \"&lt;&lt; \"@@@ Wrapping var, existing one\\n\";\n+    gExistingCounter++;\n     Py_INCREF(obj);\n     return obj;\n   }\n \n-  // std::cout &lt;&lt; gVariableWrappingCache.size() &lt;&lt; \" - \"&lt;&lt; \"@@@ Wrapping var, new one\\n\";\n+  //std::cout &lt;&lt; gVariableWrappingCache.size() &lt;&lt; \" - \"&lt;&lt; \"@@@ Wrapping var, new one\\n\";\n+  gNewCounter++;\n   PyObject* obj = THPVariable_NewWithVar((PyTypeObject *)THPVariableClass, std::move(var));\n   it.first-&gt;second = obj;\n   return obj;\n</code></pre>", "body_text": "Patch for counting (more to come):\ndiff --git a/torch/csrc/autograd/python_variable.cpp b/torch/csrc/autograd/python_variable.cpp\nindex eb157fd2e..d7e0adaa3 100644\n--- a/torch/csrc/autograd/python_variable.cpp\n+++ b/torch/csrc/autograd/python_variable.cpp\n@@ -1510,6 +1510,17 @@ static PyObject* THPVariable_NewWithVar(PyTypeObject* type, Variable var)\n   return obj;\n }\n \n+static int gExistingCounter = 0;\n+static int gNewCounter = 0;\n+\n+struct Printer {\n+  ~Printer() {\n+    std::cout << \"counts: \" << gExistingCounter << \" \" << gNewCounter << \"\\n\";\n+  }\n+  static Printer printer;\n+};\n+Printer inst;\n+\n PyObject * THPVariable_Wrap(Variable var)\n {\n   if (!var.defined()) {\n@@ -1519,12 +1530,14 @@ PyObject * THPVariable_Wrap(Variable var)\n   auto it = gVariableWrappingCache.insert({var.unique_instance_tag(), nullptr});\n   if (!it.second) {\n     PyObject* obj = it.first->second;\n-    // std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, existing one\\n\";\n+    //std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, existing one\\n\";\n+    gExistingCounter++;\n     Py_INCREF(obj);\n     return obj;\n   }\n \n-  // std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, new one\\n\";\n+  //std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, new one\\n\";\n+  gNewCounter++;\n   PyObject* obj = THPVariable_NewWithVar((PyTypeObject *)THPVariableClass, std::move(var));\n   it.first->second = obj;\n   return obj;", "body": "Patch for counting (more to come):\r\n\r\n```\r\ndiff --git a/torch/csrc/autograd/python_variable.cpp b/torch/csrc/autograd/python_variable.cpp\r\nindex eb157fd2e..d7e0adaa3 100644\r\n--- a/torch/csrc/autograd/python_variable.cpp\r\n+++ b/torch/csrc/autograd/python_variable.cpp\r\n@@ -1510,6 +1510,17 @@ static PyObject* THPVariable_NewWithVar(PyTypeObject* type, Variable var)\r\n   return obj;\r\n }\r\n \r\n+static int gExistingCounter = 0;\r\n+static int gNewCounter = 0;\r\n+\r\n+struct Printer {\r\n+  ~Printer() {\r\n+    std::cout << \"counts: \" << gExistingCounter << \" \" << gNewCounter << \"\\n\";\r\n+  }\r\n+  static Printer printer;\r\n+};\r\n+Printer inst;\r\n+\r\n PyObject * THPVariable_Wrap(Variable var)\r\n {\r\n   if (!var.defined()) {\r\n@@ -1519,12 +1530,14 @@ PyObject * THPVariable_Wrap(Variable var)\r\n   auto it = gVariableWrappingCache.insert({var.unique_instance_tag(), nullptr});\r\n   if (!it.second) {\r\n     PyObject* obj = it.first->second;\r\n-    // std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, existing one\\n\";\r\n+    //std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, existing one\\n\";\r\n+    gExistingCounter++;\r\n     Py_INCREF(obj);\r\n     return obj;\r\n   }\r\n \r\n-  // std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, new one\\n\";\r\n+  //std::cout << gVariableWrappingCache.size() << \" - \"<< \"@@@ Wrapping var, new one\\n\";\r\n+  gNewCounter++;\r\n   PyObject* obj = THPVariable_NewWithVar((PyTypeObject *)THPVariableClass, std::move(var));\r\n   it.first->second = obj;\r\n   return obj;\r\n```"}