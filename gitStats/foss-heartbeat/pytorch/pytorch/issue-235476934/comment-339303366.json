{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/339303366", "html_url": "https://github.com/pytorch/pytorch/issues/1788#issuecomment-339303366", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1788", "id": 339303366, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTMwMzM2Ng==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-25T11:45:46Z", "updated_at": "2017-10-25T11:45:46Z", "author_association": "MEMBER", "body_html": "<p>Having a function will help a lot. I just realized what makes the backward so slow - every <code>narrow</code> actually creates a tensor with size equal to the one that was narrowed in the forward, fills it with 0s, and copies the grad into the narrowed slice. Since we're taking a lot of slices, and the gradient is very sparse, a lot of time is spent on this zeroing</p>", "body_text": "Having a function will help a lot. I just realized what makes the backward so slow - every narrow actually creates a tensor with size equal to the one that was narrowed in the forward, fills it with 0s, and copies the grad into the narrowed slice. Since we're taking a lot of slices, and the gradient is very sparse, a lot of time is spent on this zeroing", "body": "Having a function will help a lot. I just realized what makes the backward so slow - every `narrow` actually creates a tensor with size equal to the one that was narrowed in the forward, fills it with 0s, and copies the grad into the narrowed slice. Since we're taking a lot of slices, and the gradient is very sparse, a lot of time is spent on this zeroing"}