{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1788", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1788/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1788/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1788/events", "html_url": "https://github.com/pytorch/pytorch/issues/1788", "id": 235476934, "node_id": "MDU6SXNzdWUyMzU0NzY5MzQ=", "number": 1788, "title": "Faster packing / unpacking of variable length sequences", "user": {"login": "elanmart", "id": 10772830, "node_id": "MDQ6VXNlcjEwNzcyODMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10772830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elanmart", "html_url": "https://github.com/elanmart", "followers_url": "https://api.github.com/users/elanmart/followers", "following_url": "https://api.github.com/users/elanmart/following{/other_user}", "gists_url": "https://api.github.com/users/elanmart/gists{/gist_id}", "starred_url": "https://api.github.com/users/elanmart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elanmart/subscriptions", "organizations_url": "https://api.github.com/users/elanmart/orgs", "repos_url": "https://api.github.com/users/elanmart/repos", "events_url": "https://api.github.com/users/elanmart/events{/privacy}", "received_events_url": "https://api.github.com/users/elanmart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 838476895, "node_id": "MDU6TGFiZWw4Mzg0NzY4OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/hackamonth", "name": "hackamonth", "color": "0e8a16", "default": false}, {"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-06-13T08:36:36Z", "updated_at": "2018-02-16T14:59:28Z", "closed_at": "2018-02-16T14:59:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11729078\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jekbradbury\">@jekbradbury</a> mentioned on the Forums that it would be possible to speed up packing and unpacking variable length sequences, by moving the code to C++</p>\n<p>In my current work I find this packing really helpful, but it is also a performance bottleneck.</p>\n<p>I'd like to ask few questions regarding this:</p>\n<ol>\n<li>Do you know if anyone is already working on this feature?</li>\n<li>If not, could anyone please advice me how I could best approach this problem, given I have some prior experience working with python C-API?</li>\n<li>If I were allowed to submit it, would You be interested in a PR implementing this feature?</li>\n</ol>", "body_text": "@jekbradbury mentioned on the Forums that it would be possible to speed up packing and unpacking variable length sequences, by moving the code to C++\nIn my current work I find this packing really helpful, but it is also a performance bottleneck.\nI'd like to ask few questions regarding this:\n\nDo you know if anyone is already working on this feature?\nIf not, could anyone please advice me how I could best approach this problem, given I have some prior experience working with python C-API?\nIf I were allowed to submit it, would You be interested in a PR implementing this feature?", "body": "@jekbradbury mentioned on the Forums that it would be possible to speed up packing and unpacking variable length sequences, by moving the code to C++\r\n\r\nIn my current work I find this packing really helpful, but it is also a performance bottleneck.\r\n\r\nI'd like to ask few questions regarding this:\r\n\r\n1. Do you know if anyone is already working on this feature?\r\n2. If not, could anyone please advice me how I could best approach this problem, given I have some prior experience working with python C-API?\r\n3. If I were allowed to submit it, would You be interested in a PR implementing this feature?\r\n"}