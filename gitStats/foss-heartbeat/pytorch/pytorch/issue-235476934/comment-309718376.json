{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/309718376", "html_url": "https://github.com/pytorch/pytorch/issues/1788#issuecomment-309718376", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1788", "id": 309718376, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTcxODM3Ng==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-20T10:57:26Z", "updated_at": "2017-06-20T10:59:05Z", "author_association": "MEMBER", "body_html": "<p>They are equivalent semantically, so they give the same outputs. But by changing the order of operations you can dramatically change the complexity of it. As an example consider this matrix multiplication sequence: [1024 x 2] * [2 x 1024] * [1024 * 1024]. Now, you can order the operations in two ways:</p>\n<ul>\n<li>([1024 x 2] * [2 x 1024]) * [1024 * 1024] -&gt; [1024 x 1024] * [1024 x 1024]</li>\n<li>[1024 x 2] * ([2 x 1024] * [1024 * 1024]) -&gt; [1024 x 2] * [2 x 1024]</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Matrix_chain_multiplication\" rel=\"nofollow\">Both orderings will give you the same outputs, but second one will be waaaay faster to compute</a>. This is exactly what happens here. They both compute the same thing, just swap the order of some associative operations.</p>", "body_text": "They are equivalent semantically, so they give the same outputs. But by changing the order of operations you can dramatically change the complexity of it. As an example consider this matrix multiplication sequence: [1024 x 2] * [2 x 1024] * [1024 * 1024]. Now, you can order the operations in two ways:\n\n([1024 x 2] * [2 x 1024]) * [1024 * 1024] -> [1024 x 1024] * [1024 x 1024]\n[1024 x 2] * ([2 x 1024] * [1024 * 1024]) -> [1024 x 2] * [2 x 1024]\n\nBoth orderings will give you the same outputs, but second one will be waaaay faster to compute. This is exactly what happens here. They both compute the same thing, just swap the order of some associative operations.", "body": "They are equivalent semantically, so they give the same outputs. But by changing the order of operations you can dramatically change the complexity of it. As an example consider this matrix multiplication sequence: [1024 x 2] * [2 x 1024] * [1024 * 1024]. Now, you can order the operations in two ways:\r\n* ([1024 x 2] * [2 x 1024]) * [1024 * 1024] -> [1024 x 1024] * [1024 x 1024]\r\n* [1024 x 2] * ([2 x 1024] * [1024 * 1024]) -> [1024 x 2] * [2 x 1024]\r\n\r\n[Both orderings will give you the same outputs, but second one will be waaaay faster to compute](https://en.wikipedia.org/wiki/Matrix_chain_multiplication). This is exactly what happens here. They both compute the same thing, just swap the order of some associative operations."}