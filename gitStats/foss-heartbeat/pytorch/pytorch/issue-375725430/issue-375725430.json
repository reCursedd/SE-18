{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13350", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13350/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13350/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13350/events", "html_url": "https://github.com/pytorch/pytorch/pull/13350", "id": 375725430, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3MTA2MjE2", "number": 13350, "title": "Fix more spectral norm bugs", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2018-10-30T22:47:04Z", "updated_at": "2018-11-23T15:54:20Z", "closed_at": "2018-11-07T03:17:46Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13350", "html_url": "https://github.com/pytorch/pytorch/pull/13350", "diff_url": "https://github.com/pytorch/pytorch/pull/13350.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13350.patch"}, "body_html": "<p>Problems with SN and DP after <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"370319518\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12671\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12671/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12671\">#12671</a> :</p>\n<ol>\n<li>\n<p>in eval mode, <code>weight_orig</code> is not getting correct gradient <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"370838613\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12737\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/12737/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/12737\">#12737</a> .</p>\n<p>Fix: keep <code>v</code> vector around as a buffer and always calculate <code>W = W_orig / (u @ W_orig @ v)</code> even in eval.</p>\n</li>\n<li>\n<p>in training mode, the <code>weight</code> buffer of the parallelized module is never updated, if someone touches <code>weight_orig</code> and/or <code>weight</code> and makes them not sharing storage. So in <code>eval</code> the weight used is wrong.</p>\n<p>Fix: Make <code>weight</code> not a buffer anymore and always calculate it as above.</p>\n</li>\n<li>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"370319518\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12671\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12671/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12671\">#12671</a> changed SN to update <code>u</code> in-place to make DP work correctly, but then it breaks backward through two forwards (e.g., the common GAN loss <code>D(real) - D(fake)</code>) because the vectors needed to backprop the 1st forward is changed in the 2nd forward.</p>\n<p>Fix: This PR clones <code>u</code> and <code>v</code> before using them.</p>\n</li>\n</ol>\n<p>To maintain BC, I added a hook interface for producing and loading state_dict. This is ugly and we should really have better interface for spectral_norm. But for the purpose to fix this issue, I make this patch. Even if we have a better interface, BC mechanism for legacy loading legacy state_dict still needs to be done.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16191443\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crcrpar\">@crcrpar</a></p>", "body_text": "Problems with SN and DP after #12671 :\n\n\nin eval mode, weight_orig is not getting correct gradient #12737 .\nFix: keep v vector around as a buffer and always calculate W = W_orig / (u @ W_orig @ v) even in eval.\n\n\nin training mode, the weight buffer of the parallelized module is never updated, if someone touches weight_orig and/or weight and makes them not sharing storage. So in eval the weight used is wrong.\nFix: Make weight not a buffer anymore and always calculate it as above.\n\n\n#12671 changed SN to update u in-place to make DP work correctly, but then it breaks backward through two forwards (e.g., the common GAN loss D(real) - D(fake)) because the vectors needed to backprop the 1st forward is changed in the 2nd forward.\nFix: This PR clones u and v before using them.\n\n\nTo maintain BC, I added a hook interface for producing and loading state_dict. This is ugly and we should really have better interface for spectral_norm. But for the purpose to fix this issue, I make this patch. Even if we have a better interface, BC mechanism for legacy loading legacy state_dict still needs to be done.\ncc @t-vi @crcrpar", "body": "Problems with SN and DP after #12671 : \r\n1. in eval mode, `weight_orig` is not getting correct gradient #12737 .\r\n\r\n    Fix: keep `v` vector around as a buffer and always calculate `W = W_orig / (u @ W_orig @ v)` even in eval.\r\n\r\n2. in training mode, the `weight` buffer of the parallelized module is never updated, if someone touches `weight_orig` and/or `weight` and makes them not sharing storage. So in `eval` the weight used is wrong.\r\n\r\n    Fix: Make `weight` not a buffer anymore and always calculate it as above.\r\n\r\n3. #12671 changed SN to update `u` in-place to make DP work correctly, but then it breaks backward through two forwards (e.g., the common GAN loss `D(real) - D(fake)`) because the vectors needed to backprop the 1st forward is changed in the 2nd forward. \r\n\r\n    Fix: This PR clones `u` and `v` before using them.\r\n\r\nTo maintain BC, I added a hook interface for producing and loading state_dict. This is ugly and we should really have better interface for spectral_norm. But for the purpose to fix this issue, I make this patch. Even if we have a better interface, BC mechanism for legacy loading legacy state_dict still needs to be done.\r\n\r\ncc @t-vi @crcrpar "}