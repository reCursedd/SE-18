{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436011370", "html_url": "https://github.com/pytorch/pytorch/pull/13350#issuecomment-436011370", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13350", "id": 436011370, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjAxMTM3MA==", "user": {"login": "zmurez", "id": 33580232, "node_id": "MDQ6VXNlcjMzNTgwMjMy", "avatar_url": "https://avatars2.githubusercontent.com/u/33580232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmurez", "html_url": "https://github.com/zmurez", "followers_url": "https://api.github.com/users/zmurez/followers", "following_url": "https://api.github.com/users/zmurez/following{/other_user}", "gists_url": "https://api.github.com/users/zmurez/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmurez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmurez/subscriptions", "organizations_url": "https://api.github.com/users/zmurez/orgs", "repos_url": "https://api.github.com/users/zmurez/repos", "events_url": "https://api.github.com/users/zmurez/events{/privacy}", "received_events_url": "https://api.github.com/users/zmurez/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-05T19:49:46Z", "updated_at": "2018-11-05T19:49:46Z", "author_association": "NONE", "body_html": "<blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=33580232\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zmurez\">@zmurez</a> It is possible that other changes are needed. Do you have a small repro script I can try on my build?</p>\n</blockquote>\n<pre><code>import torch\nimport torch.nn as nn\n\n#from spectral_norm import spectral_norm       # my local spectral_norm patch\nfrom torch.nn.utils import spectral_norm       # torch implementation\n\ndim=5\nbatchsize=10\nnet = nn.DataParallel(nn.Sequential(\n            #nn.Conv2d(dim, dim,1),\n            nn.BatchNorm2d(dim),\n            #nn.LeakyReLU(0.2, inplace=True),\n            spectral_norm(nn.Conv2d(dim, dim,1)),\n        )).cuda()\nnoise = torch.randn(batchsize, dim, 1, 1).cuda()\nnet.zero_grad()\nout = net(noise).sum()\nout.backward()\nprint('no bug')\n</code></pre>", "body_text": "@zmurez It is possible that other changes are needed. Do you have a small repro script I can try on my build?\n\nimport torch\nimport torch.nn as nn\n\n#from spectral_norm import spectral_norm       # my local spectral_norm patch\nfrom torch.nn.utils import spectral_norm       # torch implementation\n\ndim=5\nbatchsize=10\nnet = nn.DataParallel(nn.Sequential(\n            #nn.Conv2d(dim, dim,1),\n            nn.BatchNorm2d(dim),\n            #nn.LeakyReLU(0.2, inplace=True),\n            spectral_norm(nn.Conv2d(dim, dim,1)),\n        )).cuda()\nnoise = torch.randn(batchsize, dim, 1, 1).cuda()\nnet.zero_grad()\nout = net(noise).sum()\nout.backward()\nprint('no bug')", "body": "> @zmurez It is possible that other changes are needed. Do you have a small repro script I can try on my build?\r\n\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\n\r\n#from spectral_norm import spectral_norm       # my local spectral_norm patch\r\nfrom torch.nn.utils import spectral_norm       # torch implementation\r\n\r\ndim=5\r\nbatchsize=10\r\nnet = nn.DataParallel(nn.Sequential(\r\n            #nn.Conv2d(dim, dim,1),\r\n            nn.BatchNorm2d(dim),\r\n            #nn.LeakyReLU(0.2, inplace=True),\r\n            spectral_norm(nn.Conv2d(dim, dim,1)),\r\n        )).cuda()\r\nnoise = torch.randn(batchsize, dim, 1, 1).cuda()\r\nnet.zero_grad()\r\nout = net(noise).sum()\r\nout.backward()\r\nprint('no bug')"}