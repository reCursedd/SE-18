{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/346977988", "html_url": "https://github.com/pytorch/pytorch/pull/3841#issuecomment-346977988", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3841", "id": 346977988, "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njk3Nzk4OA==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-26T01:41:13Z", "updated_at": "2017-11-26T01:45:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've simplified this PR to implement <code>torch.standard_gamma(alpha)</code> rather than <code>torch.random_gamma(alpha, beta)</code> so as to make it easier to implement reparameterized gradients in a subsequent PR. These two relate by the simple equation</p>\n<div class=\"highlight highlight-source-python\"><pre>random_gamma(alpha, beta) <span class=\"pl-k\">=</span> standard_gamma(alpha) <span class=\"pl-k\">/</span> beta</pre></div>", "body_text": "I've simplified this PR to implement torch.standard_gamma(alpha) rather than torch.random_gamma(alpha, beta) so as to make it easier to implement reparameterized gradients in a subsequent PR. These two relate by the simple equation\nrandom_gamma(alpha, beta) = standard_gamma(alpha) / beta", "body": "I've simplified this PR to implement `torch.standard_gamma(alpha)` rather than `torch.random_gamma(alpha, beta)` so as to make it easier to implement reparameterized gradients in a subsequent PR. These two relate by the simple equation\r\n```py\r\nrandom_gamma(alpha, beta) = standard_gamma(alpha) / beta\r\n```"}