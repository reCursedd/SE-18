{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3841", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3841/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3841/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3841/events", "html_url": "https://github.com/pytorch/pytorch/pull/3841", "id": 276186235, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0MjQxOTA0", "number": 3841, "title": "Implement torch.standard_gamma and distributions.Gamma", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-11-22T19:48:14Z", "updated_at": "2018-11-23T15:36:59Z", "closed_at": "2017-12-02T00:10:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3841", "html_url": "https://github.com/pytorch/pytorch/pull/3841", "diff_url": "https://github.com/pytorch/pytorch/pull/3841.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3841.patch"}, "body_html": "<p>Addresses <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"275791032\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3813\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/3813/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/3813\">#3813</a></p>\n<p>This implements a <code>torch.standard_gamma()</code> random number generator and a <code>distributions.Gamma</code> distribution that implements the <a href=\"https://en.wikipedia.org/wiki/Gamma_distribution\" rel=\"nofollow\">Gamma distribution</a>. Note that this is named <code>torch.standard_gamma</code> to avoid confusion with the <a href=\"https://en.wikipedia.org/wiki/Gamma_function\" rel=\"nofollow\">Gamma function</a> that is already implemented as <code>torch.lgamma</code>.</p>\n<p>We follow scipy in generating standard Gamma variables <code>Gamma(alpha, 1)</code> rather than fully-parameterized <code>Gamma(alpha, beta)</code> random variables for two reasons: (1) this partial parameterization makes it easier to implement reparameterized gradients, and (2) the community is split between the scale parameter <code>theta</code> and the rate parameter <code>beta = 1/theta</code>. This PR uses the <code>beta</code> parameter in <code>distributions.Gamma</code>, but remain agnostic in <code>torch.standard_gamma(alpha)</code>.</p>\n<h2>Tested</h2>\n<ul>\n<li>Added deterministic tests of shape and <code>.log_prob()</code> method</li>\n<li>Added a randomized test of <code>.sample()</code> method (also added a test for <code>Normal.sample()</code>)</li>\n</ul>\n<p><code>test_distributions.py</code> runs in under 1 second.</p>", "body_text": "Addresses #3813\nThis implements a torch.standard_gamma() random number generator and a distributions.Gamma distribution that implements the Gamma distribution. Note that this is named torch.standard_gamma to avoid confusion with the Gamma function that is already implemented as torch.lgamma.\nWe follow scipy in generating standard Gamma variables Gamma(alpha, 1) rather than fully-parameterized Gamma(alpha, beta) random variables for two reasons: (1) this partial parameterization makes it easier to implement reparameterized gradients, and (2) the community is split between the scale parameter theta and the rate parameter beta = 1/theta. This PR uses the beta parameter in distributions.Gamma, but remain agnostic in torch.standard_gamma(alpha).\nTested\n\nAdded deterministic tests of shape and .log_prob() method\nAdded a randomized test of .sample() method (also added a test for Normal.sample())\n\ntest_distributions.py runs in under 1 second.", "body": "Addresses #3813 \r\n\r\nThis implements a `torch.standard_gamma()` random number generator and a `distributions.Gamma` distribution that implements the [Gamma distribution](https://en.wikipedia.org/wiki/Gamma_distribution). Note that this is named `torch.standard_gamma` to avoid confusion with the [Gamma function](https://en.wikipedia.org/wiki/Gamma_function) that is already implemented as `torch.lgamma`. \r\n\r\nWe follow scipy in generating standard Gamma variables `Gamma(alpha, 1)` rather than fully-parameterized `Gamma(alpha, beta)` random variables for two reasons: (1) this partial parameterization makes it easier to implement reparameterized gradients, and (2) the community is split between the scale parameter `theta` and the rate parameter `beta = 1/theta`. This PR uses the `beta` parameter in `distributions.Gamma`, but remain agnostic in `torch.standard_gamma(alpha)`.\r\n\r\n## Tested\r\n\r\n- Added deterministic tests of shape and `.log_prob()` method\r\n- Added a randomized test of `.sample()` method (also added a test for `Normal.sample()`)\r\n\r\n`test_distributions.py` runs in under 1 second."}