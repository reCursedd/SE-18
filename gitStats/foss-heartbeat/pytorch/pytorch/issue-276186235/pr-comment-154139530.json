{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154139530", "pull_request_review_id": 80257262, "id": 154139530, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDEzOTUzMA==", "diff_hunk": "@@ -178,16 +189,59 @@ def sample(self):\n         return torch.normal(self.mean, self.std)\n \n     def sample_n(self, n):\n-        # cleanly expand float or Tensor or Variable parameters\n-        def expand(v):\n-            if isinstance(v, Number):\n-                return torch.Tensor([v]).expand(n, 1)\n-            else:\n-                return v.expand(n, *v.size())\n-        return torch.normal(expand(self.mean), expand(self.std))\n+        return torch.normal(_expand_n(self.mean, n), _expand_n(self.std, n))\n \n     def log_prob(self, value):\n         # compute the variance\n         var = (self.std ** 2)\n         log_std = math.log(self.std) if isinstance(self.std, Number) else self.std.log()\n         return -((value - self.mean) ** 2) / (2 * var) - log_std - math.log(math.sqrt(2 * math.pi))\n+\n+\n+def _standard_gamma(alpha):\n+    if not isinstance(alpha, Variable):\n+        return torch._C._standard_gamma(alpha)\n+    return Variable(torch._C._standard_gamma(alpha.data))\n+\n+\n+class Gamma(Distribution):\n+    r\"\"\"\n+    Creates a Gamma distribution parameterized by shape `alpha` and rate `beta`.\n+\n+    Example::\n+\n+        >>> m = Gamma(torch.Tensor([1.0]), torch.Tensor([1.0]))\n+        >>> m.sample()  # Gamma distributed with shape alpha=1 and rate beta=1\n+         0.1046\n+        [torch.FloatTensor of size 1]\n+\n+    Args:\n+        alpha (float or Tensor or Variable): shape parameter of the distribution\n+        beta (float or Tensor or Variable): rate = 1 / scale of the distribution\n+    \"\"\"\n+\n+    def __init__(self, alpha, beta):\n+        # TODO handle (Variable, Number) cases\n+        alpha_num = isinstance(alpha, Number)\n+        beta_num = isinstance(beta, Number)\n+        if alpha_num and not beta_num:\n+            alpha = beta.new(beta.size()).fill_(alpha)\n+        elif not alpha_num and beta_num:\n+            beta = alpha.new(alpha.size()).fill_(beta)\n+        elif alpha_num and beta_num:\n+            alpha, beta = torch.Tensor([alpha]), torch.Tensor([beta])\n+        else:\n+            alpha = alpha.expand_as(beta)", "path": "torch/distributions.py", "position": null, "original_position": 75, "commit_id": "1872fa2d35560a324c1ad86f85a43bc5debf9672", "original_commit_id": "73877928c31f6d668efb348dde2cbfca1823cd39", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "If you want to support broadcasting, I think you have to do it both ways here (i.e. broadcast the smaller thing to the larger one). Consider this case: `beta.size() == [2]`, `alpha.size() == [4, 4, 2]`.", "created_at": "2017-11-30T17:05:14Z", "updated_at": "2018-11-23T15:36:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/3841#discussion_r154139530", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3841", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/154139530"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3841#discussion_r154139530"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3841"}}, "body_html": "<p>If you want to support broadcasting, I think you have to do it both ways here (i.e. broadcast the smaller thing to the larger one). Consider this case: <code>beta.size() == [2]</code>, <code>alpha.size() == [4, 4, 2]</code>.</p>", "body_text": "If you want to support broadcasting, I think you have to do it both ways here (i.e. broadcast the smaller thing to the larger one). Consider this case: beta.size() == [2], alpha.size() == [4, 4, 2]."}