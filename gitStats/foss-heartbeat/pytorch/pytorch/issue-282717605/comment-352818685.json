{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/352818685", "html_url": "https://github.com/pytorch/pytorch/issues/4215#issuecomment-352818685", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4215", "id": 352818685, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjgxODY4NQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-19T16:52:29Z", "updated_at": "2017-12-19T16:52:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm not a huge fan of the memory mapping either.  The first thing that seems wrong to me is that the pImpl is not actually a <code>VariableImpl</code>, i.e. this definition is just wrong:</p>\n<pre><code>inline VariableImpl* Variable::get() const {\n  return static_cast&lt;VariableImpl*&gt;(pImpl);\n}\n</code></pre>\n<p>Why don't we wrap the undefined tensor in a VariableImpl when we create the Variable?  That should solve the memory corruption issue without playing any memory games.</p>\n<p>It's a little weird to be able to set a grad_fn on a Variable that holds an undefined tensor, but we can decide if we want to provide functions that check that sort of thing.</p>", "body_text": "I'm not a huge fan of the memory mapping either.  The first thing that seems wrong to me is that the pImpl is not actually a VariableImpl, i.e. this definition is just wrong:\ninline VariableImpl* Variable::get() const {\n  return static_cast<VariableImpl*>(pImpl);\n}\n\nWhy don't we wrap the undefined tensor in a VariableImpl when we create the Variable?  That should solve the memory corruption issue without playing any memory games.\nIt's a little weird to be able to set a grad_fn on a Variable that holds an undefined tensor, but we can decide if we want to provide functions that check that sort of thing.", "body": "I'm not a huge fan of the memory mapping either.  The first thing that seems wrong to me is that the pImpl is not actually a `VariableImpl`, i.e. this definition is just wrong:\r\n```\r\ninline VariableImpl* Variable::get() const {\r\n  return static_cast<VariableImpl*>(pImpl);\r\n}\r\n```\r\nWhy don't we wrap the undefined tensor in a VariableImpl when we create the Variable?  That should solve the memory corruption issue without playing any memory games.\r\n\r\nIt's a little weird to be able to set a grad_fn on a Variable that holds an undefined tensor, but we can decide if we want to provide functions that check that sort of thing."}