{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/363911872", "html_url": "https://github.com/pytorch/pytorch/issues/4215#issuecomment-363911872", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4215", "id": 363911872, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzkxMTg3Mg==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-07T21:10:58Z", "updated_at": "2018-02-07T21:52:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am implementing the mmap trick to help me debug another memory corruption which I suspect is due to an undefined tensor. I'm putting up the basic nuts and bolts of it up here in case people want to give implementation feedback:</p>\n<pre><code>namespace {\n\n  constexpr size_t undefined_region_size = 4096; // one page\n\n  UndefinedType* newUndefinedType(Context * context) {\n    static_assert(sizeof(UndefinedType) &lt;= undefined_region_size, \"UndefinedType too large\");\n    void *p = mmap(NULL, undefined_region_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);\n    new (p) UndefinedType(context);\n    mprotect(p, undefined_region_size, PROT_READ);\n    return static_cast&lt;UndefinedType*&gt;(p);\n  }\n\n  void deleteUndefinedType(UndefinedType *p) {\n    if (reinterpret_cast&lt;uintptr_t&gt;(static_cast&lt;void*&gt;(p)) % undefined_region_size != 0) {\n      throw std::runtime_error(\"unaligned UndefinedType pointer, probably garbage\\n\");\n    }\n    p-&gt;~UndefinedType();\n    mprotect(p, undefined_region_size, PROT_READ | PROT_WRITE);\n    munmap(p, undefined_region_size);\n  }\n\n} // anonymous namespace\n\nvoid Type::registerAll(Context * context) {\n  ${type_registrations}\n  context-&gt;type_registry[static_cast&lt;int&gt;(Backend::Undefined)][static_cast&lt;int&gt;(ScalarType::Undefined)] = { newUndefinedType(context), [](Type *x) { deleteUndefinedType(static_cast&lt;UndefinedType*&gt;(x)); } };\n}\n</code></pre>\n<p>EDIT: Except, I'm a derp and I should have guarded UndefinedTensor, not UndefinedType</p>", "body_text": "I am implementing the mmap trick to help me debug another memory corruption which I suspect is due to an undefined tensor. I'm putting up the basic nuts and bolts of it up here in case people want to give implementation feedback:\nnamespace {\n\n  constexpr size_t undefined_region_size = 4096; // one page\n\n  UndefinedType* newUndefinedType(Context * context) {\n    static_assert(sizeof(UndefinedType) <= undefined_region_size, \"UndefinedType too large\");\n    void *p = mmap(NULL, undefined_region_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);\n    new (p) UndefinedType(context);\n    mprotect(p, undefined_region_size, PROT_READ);\n    return static_cast<UndefinedType*>(p);\n  }\n\n  void deleteUndefinedType(UndefinedType *p) {\n    if (reinterpret_cast<uintptr_t>(static_cast<void*>(p)) % undefined_region_size != 0) {\n      throw std::runtime_error(\"unaligned UndefinedType pointer, probably garbage\\n\");\n    }\n    p->~UndefinedType();\n    mprotect(p, undefined_region_size, PROT_READ | PROT_WRITE);\n    munmap(p, undefined_region_size);\n  }\n\n} // anonymous namespace\n\nvoid Type::registerAll(Context * context) {\n  ${type_registrations}\n  context->type_registry[static_cast<int>(Backend::Undefined)][static_cast<int>(ScalarType::Undefined)] = { newUndefinedType(context), [](Type *x) { deleteUndefinedType(static_cast<UndefinedType*>(x)); } };\n}\n\nEDIT: Except, I'm a derp and I should have guarded UndefinedTensor, not UndefinedType", "body": "I am implementing the mmap trick to help me debug another memory corruption which I suspect is due to an undefined tensor. I'm putting up the basic nuts and bolts of it up here in case people want to give implementation feedback:\r\n\r\n```\r\nnamespace {\r\n\r\n  constexpr size_t undefined_region_size = 4096; // one page\r\n\r\n  UndefinedType* newUndefinedType(Context * context) {\r\n    static_assert(sizeof(UndefinedType) <= undefined_region_size, \"UndefinedType too large\");\r\n    void *p = mmap(NULL, undefined_region_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);\r\n    new (p) UndefinedType(context);\r\n    mprotect(p, undefined_region_size, PROT_READ);\r\n    return static_cast<UndefinedType*>(p);\r\n  }\r\n\r\n  void deleteUndefinedType(UndefinedType *p) {\r\n    if (reinterpret_cast<uintptr_t>(static_cast<void*>(p)) % undefined_region_size != 0) {\r\n      throw std::runtime_error(\"unaligned UndefinedType pointer, probably garbage\\n\");\r\n    }\r\n    p->~UndefinedType();\r\n    mprotect(p, undefined_region_size, PROT_READ | PROT_WRITE);\r\n    munmap(p, undefined_region_size);\r\n  }\r\n\r\n} // anonymous namespace\r\n\r\nvoid Type::registerAll(Context * context) {\r\n  ${type_registrations}\r\n  context->type_registry[static_cast<int>(Backend::Undefined)][static_cast<int>(ScalarType::Undefined)] = { newUndefinedType(context), [](Type *x) { deleteUndefinedType(static_cast<UndefinedType*>(x)); } };\r\n}\r\n```\r\n\r\nEDIT: Except, I'm a derp and I should have guarded UndefinedTensor, not UndefinedType"}