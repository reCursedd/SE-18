{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151770033", "pull_request_review_id": 77537666, "id": 151770033, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTc3MDAzMw==", "diff_hunk": "@@ -1,36 +1,107 @@\n #pragma once\n \n #include \"torch/csrc/jit/interpreter.h\"\n+#include \"torch/csrc/jit/tracer_state.h\"\n #include \"torch/csrc/autograd/function.h\"\n+#include \"torch/csrc/autograd/variable.h\"\n #include \"torch/csrc/autograd/functions/utils.h\"\n #include \"torch/csrc/autograd/functions/basic_ops.h\"\n+\n namespace torch { namespace jit {\n+\n+struct StageDetails {\n+  std::vector<tracer::VariableFlags> input_flags;\n+  std::vector<tracer::VariableFlags> output_flags;\n+  std::vector<int> copied_next_fns;\n+};\n+\n struct InterpreterAutogradFunction : public autograd::Function {\n-  InterpreterAutogradFunction(const jit::Code & code)\n-  : interp_(code) {}\n-  InterpreterAutogradFunction(const InterpreterState & interp_, autograd::FunctionFlags && f)\n-  : autograd::Function(std::move(f)), interp_(interp_) {}\n+  InterpreterAutogradFunction(const jit::Code & code,\n+                              const std::vector<StageDetails>& stage_details)\n+    : interp_(code)\n+    , stage_details_(stage_details)\n+    , stage_(0) {}\n+\n+  InterpreterAutogradFunction(InterpreterState interp,\n+                              const std::vector<StageDetails>& stage_details,\n+                              std::size_t stage)\n+    : interp_(std::move(interp))\n+    , stage_details_(stage_details)\n+    , stage_(stage) {}\n \n   virtual void willReleaseVariables() override {\n-    keep_graph = false;\n+    keep_graph_ = false;\n   }\n+\n   virtual autograd::variable_list apply(const autograd::variable_list& inputs) override {\n-    std::vector<at::Tensor> tinputs;\n-    std::vector<at::Tensor> toutputs;\n-    for(auto & i : inputs) {\n-      tinputs.push_back(i.data());\n+    // Initial correctness checks.\n+    if (stage_ == stage_details_.size()) {\n+      throw std::runtime_error(std::string(\"Function compiled only for \") +\n+          std::to_string(stage_details_.size() - 1) + \" derivatives. Use nderivs argument \" +\n+          \"to request more.\");\n     }\n-    InterpreterState interp = (keep_graph) ? interp_.clone() : interp_;\n-    keep_graph = true;\n+    if (used_) throw std::runtime_error(autograd::ERR_BACKWARD_TWICE);\n+    used_ |= !keep_graph_;\n+\n+    const auto & details = stage_details_[stage_];\n+\n+    // Validate inputs\n+    for (std::size_t i = 0; i < (std::size_t)num_inputs; ++i) {\n+      if (!details.input_flags[i].verify(inputs[i])) {\n+        throw std::runtime_error(\"JIT interpreter received inputs with different \"\n+            \"flags than it was compiled for.\");\n+      }\n+    }\n+\n+    // Run the interpreter\n+    auto tinputs = fmap(inputs, [](const autograd::Variable& i) { return i.data(); });\n+    std::vector<at::Tensor> toutputs;\n+    InterpreterState interp = (keep_graph_) ? interp_.clone() : interp_;\n     interp.runOneStage(tinputs, toutputs);\n-    auto r = autograd::wrap_outputs(inputs, std::move(toutputs), [&](autograd::FunctionFlags f) {\n-      return std::make_shared<InterpreterAutogradFunction>(interp, std::move(f));\n-    });\n-    return r;\n+\n+    // Lazily create grad_fn\n+    std::shared_ptr<Function> grad_fn;\n+    auto make_grad_fn = [&]() {\n+      grad_fn = std::make_shared<InterpreterAutogradFunction>(\n+          std::move(interp), stage_details_, stage_ + 1);\n+      // Patch next_functions to include prevous stage next_functions", "path": "torch/csrc/jit/interpreter_autograd_function.h", "position": null, "original_position": 82, "commit_id": "ab30115d73fc12dad20bdf9fabbaaf45d31e2e5b", "original_commit_id": "014c807f4087814fd27e54cbe6aaa1f4a80dfb3c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Sure. The problem is that e.g. stage 2 has to emit gradients not only for inputs to stage 1, but for inputs to stage 0 as well (e.g. some of inputs to stage 0 were used as SavedVariables) - those need to be copied to `next_functions` of stage 2 function from `next_functions` of stage 1 function.", "created_at": "2017-11-17T19:27:45Z", "updated_at": "2018-11-23T15:36:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/3760#discussion_r151770033", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3760", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151770033"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3760#discussion_r151770033"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3760"}}, "body_html": "<p>Sure. The problem is that e.g. stage 2 has to emit gradients not only for inputs to stage 1, but for inputs to stage 0 as well (e.g. some of inputs to stage 0 were used as SavedVariables) - those need to be copied to <code>next_functions</code> of stage 2 function from <code>next_functions</code> of stage 1 function.</p>", "body_text": "Sure. The problem is that e.g. stage 2 has to emit gradients not only for inputs to stage 1, but for inputs to stage 0 as well (e.g. some of inputs to stage 0 were used as SavedVariables) - those need to be copied to next_functions of stage 2 function from next_functions of stage 1 function.", "in_reply_to_id": 151769367}