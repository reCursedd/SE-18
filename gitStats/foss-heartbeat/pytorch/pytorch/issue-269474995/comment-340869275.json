{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340869275", "html_url": "https://github.com/pytorch/pytorch/pull/3359#issuecomment-340869275", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3359", "id": 340869275, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDg2OTI3NQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-31T18:48:42Z", "updated_at": "2017-10-31T18:48:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> Actually, I tried making them return not-copies, but this doesn't work. Look at the implementation of <code>outputs()</code>:</p>\n<pre><code>  std::vector&lt;const Node*&gt; outputs() const {\n    if(!hasMultipleOutputs())\n      return { this };\n    std::vector&lt;const Node*&gt; r;\n    r.reserve(uses().size());\n    for(auto &amp; u : uses())\n      r.push_back(u.user);\n    return r;\n  }\n</code></pre>\n<p>Due to the representation of uses, we MUST materialize a new vector, which means it has to be a copy. I suppose we could rewrite the representation of uses so that you get a vector when everything is select nodes, but this feels like the tail wagging the dog.</p>", "body_text": "@zdevito Actually, I tried making them return not-copies, but this doesn't work. Look at the implementation of outputs():\n  std::vector<const Node*> outputs() const {\n    if(!hasMultipleOutputs())\n      return { this };\n    std::vector<const Node*> r;\n    r.reserve(uses().size());\n    for(auto & u : uses())\n      r.push_back(u.user);\n    return r;\n  }\n\nDue to the representation of uses, we MUST materialize a new vector, which means it has to be a copy. I suppose we could rewrite the representation of uses so that you get a vector when everything is select nodes, but this feels like the tail wagging the dog.", "body": "@zdevito Actually, I tried making them return not-copies, but this doesn't work. Look at the implementation of `outputs()`:\r\n\r\n```\r\n  std::vector<const Node*> outputs() const {\r\n    if(!hasMultipleOutputs())\r\n      return { this };\r\n    std::vector<const Node*> r;\r\n    r.reserve(uses().size());\r\n    for(auto & u : uses())\r\n      r.push_back(u.user);\r\n    return r;\r\n  }\r\n```\r\n\r\nDue to the representation of uses, we MUST materialize a new vector, which means it has to be a copy. I suppose we could rewrite the representation of uses so that you get a vector when everything is select nodes, but this feels like the tail wagging the dog."}