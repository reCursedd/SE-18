{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147649537", "pull_request_review_id": 72772618, "id": 147649537, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzY0OTUzNw==", "diff_hunk": "@@ -167,20 +171,40 @@ struct Node : public Attributes<Node> {\n   size_t stage() const {\n     return stage_;\n   }\n-  const std::vector<Node*>& inputs() const {\n+  // NB: this interface returns a copy!  This is the only reasonable\n+  // way to get a vector of const Node*.  But it's easy to argument\n+  // that this interface is more intuitive, since it avoids an alias\n+  // to an underlying vector that could be mutated.\n+  std::vector<Node*> inputs() {\n     return inputs_;\n   }\n+  std::vector<const Node*> inputs() const {\n+    return {inputs_.begin(), inputs_.end()};\n+  }\n   // lots of things like select/chunk have a single input, so we have a\n   // helper to make accessing it easier\n-  Node * input() const {\n+  Node * input() {\n+    JIT_ASSERT(inputs_.size() == 1);\n+    return inputs_.at(0);\n+  }\n+  const Node * input() const {\n     JIT_ASSERT(inputs_.size() == 1);\n     return inputs_.at(0);\n   }\n   // this is a function helps handle\n   // single and multi-return nodes in a consistent way\n   // it also provides a layer of abstraction if we\n   // ever need to change the way we represent multiple outputs\n-  node_list outputs() {\n+  std::vector<const Node*> outputs() const {\n+    if(!hasMultipleOutputs())\n+      return { this };\n+    std::vector<const Node*> r;\n+    r.reserve(uses().size());\n+    for(auto & u : uses())\n+      r.push_back(u.user);\n+    return r;\n+  }", "path": "torch/csrc/jit/ir.h", "position": 73, "original_position": 59, "commit_id": "9cad088c74f42ace9df625170448476285bfc1f6", "original_commit_id": "6aeb2c6a4026a7f7f1f1471ef4c13fdd948d6fc8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "eh having two implementations for everything is really annoying...", "created_at": "2017-10-30T09:22:16Z", "updated_at": "2018-11-23T15:35:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/3359#discussion_r147649537", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3359", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147649537"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3359#discussion_r147649537"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3359"}}, "body_html": "<p>eh having two implementations for everything is really annoying...</p>", "body_text": "eh having two implementations for everything is really annoying..."}