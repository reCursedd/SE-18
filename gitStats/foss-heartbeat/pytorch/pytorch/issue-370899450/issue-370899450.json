{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12750", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12750/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12750/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12750/events", "html_url": "https://github.com/pytorch/pytorch/pull/12750", "id": 370899450, "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzNDY5MjM1", "number": 12750, "title": "Fix isfinite for int input", "user": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-17T04:59:53Z", "updated_at": "2018-11-23T15:53:07Z", "closed_at": "2018-10-17T18:49:43Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12750", "html_url": "https://github.com/pytorch/pytorch/pull/12750", "diff_url": "https://github.com/pytorch/pytorch/pull/12750.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12750.patch"}, "body_html": "<p><code>torch.isfinite()</code> used to crash on int inputs.</p>\n<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; a = torch.tensor([1, 2])\n&gt;&gt;&gt; torch.isfinite(a)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/scratch/pytorch/torch/functional.py\", line 262, in isfinite\n    return (tensor == tensor) &amp; (tensor.abs() != inf)\nRuntimeError: value cannot be converted to type int64_t without overflow: inf\n</code></pre>\n<p>But this is a easy special case and numpy also supports it.</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.array([1, 2])\n&gt;&gt;&gt; a.dtype\ndtype('int64')\n&gt;&gt;&gt; np.isfinite(a)\narray([ True,  True], dtype=bool)\n</code></pre>\n<p>So added a hacky line to handle non-floating-point input. Since pytorch raises exception when overflow, we can safely assume all valid int tensors are infinite numbers.</p>", "body_text": "torch.isfinite() used to crash on int inputs.\n>>> import torch\n>>> a = torch.tensor([1, 2])\n>>> torch.isfinite(a)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/scratch/pytorch/torch/functional.py\", line 262, in isfinite\n    return (tensor == tensor) & (tensor.abs() != inf)\nRuntimeError: value cannot be converted to type int64_t without overflow: inf\n\nBut this is a easy special case and numpy also supports it.\n>>> import numpy as np\n>>> a = np.array([1, 2])\n>>> a.dtype\ndtype('int64')\n>>> np.isfinite(a)\narray([ True,  True], dtype=bool)\n\nSo added a hacky line to handle non-floating-point input. Since pytorch raises exception when overflow, we can safely assume all valid int tensors are infinite numbers.", "body": "`torch.isfinite()` used to crash on int inputs.\r\n```\r\n>>> import torch\r\n>>> a = torch.tensor([1, 2])\r\n>>> torch.isfinite(a)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/scratch/pytorch/torch/functional.py\", line 262, in isfinite\r\n    return (tensor == tensor) & (tensor.abs() != inf)\r\nRuntimeError: value cannot be converted to type int64_t without overflow: inf\r\n```\r\nBut this is a easy special case and numpy also supports it. \r\n```\r\n>>> import numpy as np\r\n>>> a = np.array([1, 2])\r\n>>> a.dtype\r\ndtype('int64')\r\n>>> np.isfinite(a)\r\narray([ True,  True], dtype=bool)\r\n```\r\nSo added a hacky line to handle non-floating-point input. Since pytorch raises exception when overflow, we can safely assume all valid int tensors are infinite numbers. \r\n"}