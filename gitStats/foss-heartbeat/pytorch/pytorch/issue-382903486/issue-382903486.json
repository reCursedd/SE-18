{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14257", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14257/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14257/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14257/events", "html_url": "https://github.com/pytorch/pytorch/issues/14257", "id": 382903486, "node_id": "MDU6SXNzdWUzODI5MDM0ODY=", "number": 14257, "title": "at::Tensor should not be castable to torch::Tensor", "user": {"login": "ejoebstl", "id": 1852126, "node_id": "MDQ6VXNlcjE4NTIxMjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1852126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejoebstl", "html_url": "https://github.com/ejoebstl", "followers_url": "https://api.github.com/users/ejoebstl/followers", "following_url": "https://api.github.com/users/ejoebstl/following{/other_user}", "gists_url": "https://api.github.com/users/ejoebstl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejoebstl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejoebstl/subscriptions", "organizations_url": "https://api.github.com/users/ejoebstl/orgs", "repos_url": "https://api.github.com/users/ejoebstl/repos", "events_url": "https://api.github.com/users/ejoebstl/events{/privacy}", "received_events_url": "https://api.github.com/users/ejoebstl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-21T00:23:29Z", "updated_at": "2018-11-21T09:26:50Z", "closed_at": "2018-11-21T09:26:49Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Suggestion</h2>\n<p>Regarding the new c++ frontend.</p>\n<p>Currently, <code>at::Tensor</code> can be converted to <code>torch::Tensor</code> implicitly.</p>\n<p>However, the following code works:</p>\n<pre><code>torch::Tensor x = torch::ones({ 1, 1, 10 });  \ntorch::nn::GRU decoder(10, 10);\ndecoder-&gt;forward(x);\n</code></pre>\n<p>While the following code fails with <code> what():  Expected object of type Variable but found type CPUFloatType for argument #1 'mat1'</code>:</p>\n<pre><code>at::Tensor x = at::ones({ 1, 1, 10 });  \ntorch::nn::GRU decoder(10, 10);\ndecoder-&gt;forward(x);\n</code></pre>\n<p>This can be confusing.</p>", "body_text": "Suggestion\nRegarding the new c++ frontend.\nCurrently, at::Tensor can be converted to torch::Tensor implicitly.\nHowever, the following code works:\ntorch::Tensor x = torch::ones({ 1, 1, 10 });  \ntorch::nn::GRU decoder(10, 10);\ndecoder->forward(x);\n\nWhile the following code fails with  what():  Expected object of type Variable but found type CPUFloatType for argument #1 'mat1':\nat::Tensor x = at::ones({ 1, 1, 10 });  \ntorch::nn::GRU decoder(10, 10);\ndecoder->forward(x);\n\nThis can be confusing.", "body": "## Suggestion\r\n\r\nRegarding the new c++ frontend.\r\n\r\nCurrently, `at::Tensor` can be converted to `torch::Tensor` implicitly. \r\n\r\nHowever, the following code works: \r\n\r\n```\r\ntorch::Tensor x = torch::ones({ 1, 1, 10 });  \r\ntorch::nn::GRU decoder(10, 10);\r\ndecoder->forward(x);\r\n```\r\n\r\nWhile the following code fails with ` what():  Expected object of type Variable but found type CPUFloatType for argument #1 'mat1'`: \r\n\r\n```\r\nat::Tensor x = at::ones({ 1, 1, 10 });  \r\ntorch::nn::GRU decoder(10, 10);\r\ndecoder->forward(x);\r\n```\r\n\r\nThis can be confusing. "}