{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187680143", "pull_request_review_id": 119515470, "id": 187680143, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzY4MDE0Mw==", "diff_hunk": "@@ -139,7 +139,17 @@ vector<float> SimpleNet::TEST_Benchmark(\n           if (schema && schema->HasCostInferenceFunction()) {\n             vector<TensorShape> shapes = op->InputTensorShapes();\n \n-            OpSchema::Cost cost = schema->InferCost(op->debug_def(), shapes);\n+            auto all_good_shapes = std::accumulate(\n+                shapes.begin(),\n+                shapes.end(),\n+                true,\n+                [](bool acc, const TensorShape& shape) {\n+                  return acc && !shape.unknown_shape();\n+                });\n+            OpSchema::Cost cost;\n+            if (all_good_shapes) {\n+              cost = schema->InferCost(op->debug_def(), shapes);\n+            }\n \n             flops_per_op.emplace_back(cost.flops);", "path": "caffe2/core/net_simple.cc", "position": 17, "original_position": 17, "commit_id": "77477c71692872b57e8eae5bebf525b99ed90690", "original_commit_id": "5627ea80f4666d656389d364c34f9e441d9e44e5", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "If we have bad or empty shapes, Some of the op's `InferCost` will blindly access `dim(x)` of `shape(y)`, which causes an out-of-bound exception, wrecking the run. This is not what we want. Here if we have bad shapes, we just fill the costs with dummy 0s. ", "created_at": "2018-05-11T17:27:08Z", "updated_at": "2018-11-23T15:43:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/7503#discussion_r187680143", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7503", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/187680143"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7503#discussion_r187680143"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7503"}}, "body_html": "<p>If we have bad or empty shapes, Some of the op's <code>InferCost</code> will blindly access <code>dim(x)</code> of <code>shape(y)</code>, which causes an out-of-bound exception, wrecking the run. This is not what we want. Here if we have bad shapes, we just fill the costs with dummy 0s.</p>", "body_text": "If we have bad or empty shapes, Some of the op's InferCost will blindly access dim(x) of shape(y), which causes an out-of-bound exception, wrecking the run. This is not what we want. Here if we have bad shapes, we just fill the costs with dummy 0s.", "in_reply_to_id": 187678798}