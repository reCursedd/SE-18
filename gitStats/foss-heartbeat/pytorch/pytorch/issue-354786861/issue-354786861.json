{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10949", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10949/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10949/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10949/events", "html_url": "https://github.com/pytorch/pytorch/pull/10949", "id": 354786861, "node_id": "MDExOlB1bGxSZXF1ZXN0MjExNDY2MDQ5", "number": 10949, "title": "Don't flatten output lists in the JIT IR", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-28T15:34:25Z", "updated_at": "2018-11-23T15:50:18Z", "closed_at": "2018-08-31T02:55:47Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10949", "html_url": "https://github.com/pytorch/pytorch/pull/10949", "diff_url": "https://github.com/pytorch/pytorch/pull/10949.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10949.patch"}, "body_html": "<p>Operators like aten::chunk used to return a number of tensors, but<br>\nnow return a list. To make it easier to do shape prop through<br>\naten::chunk and fuse it, I've also introduced prim::ConstantChunk,<br>\nwhich behaves like the previous implementation (has a variable length<br>\noutput list).</p>\n<p>The downside of this PR is that the introduction of more lists to the IR causes the LSTM and MiLSTM graphs to be considered as non-differentiable by the graph executor. I verified that they are still optimize correctly, and my next patch (that changes how the specializations/differentiation works) will restore those.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "Operators like aten::chunk used to return a number of tensors, but\nnow return a list. To make it easier to do shape prop through\naten::chunk and fuse it, I've also introduced prim::ConstantChunk,\nwhich behaves like the previous implementation (has a variable length\noutput list).\nThe downside of this PR is that the introduction of more lists to the IR causes the LSTM and MiLSTM graphs to be considered as non-differentiable by the graph executor. I verified that they are still optimize correctly, and my next patch (that changes how the specializations/differentiation works) will restore those.\n@zdevito", "body": "Operators like aten::chunk used to return a number of tensors, but\r\nnow return a list. To make it easier to do shape prop through\r\naten::chunk and fuse it, I've also introduced prim::ConstantChunk,\r\nwhich behaves like the previous implementation (has a variable length\r\noutput list).\r\n\r\nThe downside of this PR is that the introduction of more lists to the IR causes the LSTM and MiLSTM graphs to be considered as non-differentiable by the graph executor. I verified that they are still optimize correctly, and my next patch (that changes how the specializations/differentiation works) will restore those.\r\n\r\n@zdevito \r\n\r\n"}