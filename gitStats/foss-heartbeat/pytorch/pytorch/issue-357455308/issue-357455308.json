{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11314", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11314/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11314/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11314/events", "html_url": "https://github.com/pytorch/pytorch/pull/11314", "id": 357455308, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEzNDY2Njk5", "number": 11314, "title": "Reimplement storage slicing.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-06T00:52:15Z", "updated_at": "2018-09-06T23:14:16Z", "closed_at": "2018-09-06T23:14:16Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11314", "html_url": "https://github.com/pytorch/pytorch/pull/11314", "diff_url": "https://github.com/pytorch/pytorch/pull/11314.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11314.patch"}, "body_html": "<p>In <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"341584076\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9466\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9466/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9466\">#9466</a> I got rid of storage views and eliminated all places where<br>\nthey were used... OR SO I THOUGHT.  In actuality, under certain<br>\nconditions (specifically, if you trained a CUDA multiprocessing model<br>\nshared over CUDA IPC and then serialized your parameters), you could<br>\nalso serialize storage slices to the saved model format.  In <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"341584076\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9466\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9466/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9466\">#9466</a>,<br>\nI \"fixed\" the case when you loaded the legacy model format (really,<br>\njust unshared the storages--not strictly kosher but if you aren't<br>\nupdating the parameters, shouldn't matter), but NOT the modern model format, so<br>\nsuch models would fail.</p>\n<p>So, I could have applied the legacy model format fix too, but<br>\nhyperfraise remarked that he had applied a fix that was effectively<br>\nthe same as unsharing the storages, but it had caused his model to<br>\nbehave differently.  So I looked into it again, and realized that<br>\nusing a custom deleter, I could simulate the same behavior as old<br>\nstorage slices.  So back they come.</p>\n<p>In principle, I could also reimplement storage views entirely using<br>\nour allocators, but I'm not going to do that unless someone really<br>\nreally wants it.</p>\n<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #10120.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"346638696\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10120\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/10120/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/10120\">#10120</a>.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "In #9466 I got rid of storage views and eliminated all places where\nthey were used... OR SO I THOUGHT.  In actuality, under certain\nconditions (specifically, if you trained a CUDA multiprocessing model\nshared over CUDA IPC and then serialized your parameters), you could\nalso serialize storage slices to the saved model format.  In #9466,\nI \"fixed\" the case when you loaded the legacy model format (really,\njust unshared the storages--not strictly kosher but if you aren't\nupdating the parameters, shouldn't matter), but NOT the modern model format, so\nsuch models would fail.\nSo, I could have applied the legacy model format fix too, but\nhyperfraise remarked that he had applied a fix that was effectively\nthe same as unsharing the storages, but it had caused his model to\nbehave differently.  So I looked into it again, and realized that\nusing a custom deleter, I could simulate the same behavior as old\nstorage slices.  So back they come.\nIn principle, I could also reimplement storage views entirely using\nour allocators, but I'm not going to do that unless someone really\nreally wants it.\nFixes #10120.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "In #9466 I got rid of storage views and eliminated all places where\r\nthey were used... OR SO I THOUGHT.  In actuality, under certain\r\nconditions (specifically, if you trained a CUDA multiprocessing model\r\nshared over CUDA IPC and then serialized your parameters), you could\r\nalso serialize storage slices to the saved model format.  In #9466,\r\nI \"fixed\" the case when you loaded the legacy model format (really,\r\njust unshared the storages--not strictly kosher but if you aren't\r\nupdating the parameters, shouldn't matter), but NOT the modern model format, so\r\nsuch models would fail.\r\n\r\nSo, I could have applied the legacy model format fix too, but\r\nhyperfraise remarked that he had applied a fix that was effectively\r\nthe same as unsharing the storages, but it had caused his model to\r\nbehave differently.  So I looked into it again, and realized that\r\nusing a custom deleter, I could simulate the same behavior as old\r\nstorage slices.  So back they come.\r\n\r\nIn principle, I could also reimplement storage views entirely using\r\nour allocators, but I'm not going to do that unless someone really\r\nreally wants it.\r\n\r\nFixes #10120.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>\r\n\r\n"}