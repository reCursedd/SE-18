{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189733995", "pull_request_review_id": 121968887, "id": 189733995, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTczMzk5NQ==", "diff_hunk": "@@ -0,0 +1,217 @@\n+#include \"torch/csrc/jit/passes/loop_unrolling.h\"\n+\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/jit/symbolic_variable.h\"\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+\n+namespace torch { namespace jit {\n+\n+namespace {\n+\n+static constexpr int64_t kUnrollFactor = 8;\n+static constexpr int64_t kMaxBodySize = 16;\n+static constexpr int64_t kMaxBodyRepeats = 64;\n+\n+bool isTrueConstant(Value *val) {\n+  Node *producer = val->node();\n+  if (producer->kind() != prim::Constant)\n+    return false;\n+  auto value = producer->t(attr::value);\n+  return value.type() == at::CPU(at::kByte) && value.dim() == 0 && value.toCLong() == 1;\n+}\n+\n+bool isForLoop(Node* node) {\n+  if (node->kind() != prim::Loop)\n+    return false;\n+  Value *start_cond = node->inputs().at(1);\n+  Value *continue_cond = node->blocks().at(0)->outputs().at(0);\n+  return isTrueConstant(start_cond) && isTrueConstant(continue_cond);", "path": "torch/csrc/jit/passes/loop_unrolling.cpp", "position": 26, "original_position": 28, "commit_id": "f79b8222e6011cdbde84440ddb672c5dd3dabbec", "original_commit_id": "10b622cdb4f78054006f48c271e0abb8a62bbe96", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Consider refactoring `constant_as<bool>` from compiler.cpp, which does something similar.", "created_at": "2018-05-21T22:43:11Z", "updated_at": "2018-11-23T15:44:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/7672#discussion_r189733995", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7672", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189733995"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7672#discussion_r189733995"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7672"}}, "body_html": "<p>Consider refactoring <code>constant_as&lt;bool&gt;</code> from compiler.cpp, which does something similar.</p>", "body_text": "Consider refactoring constant_as<bool> from compiler.cpp, which does something similar."}