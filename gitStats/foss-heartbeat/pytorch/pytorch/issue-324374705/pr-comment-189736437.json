{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189736437", "pull_request_review_id": 121968887, "id": 189736437, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTczNjQzNw==", "diff_hunk": "@@ -0,0 +1,217 @@\n+#include \"torch/csrc/jit/passes/loop_unrolling.h\"\n+\n+#include \"torch/csrc/jit/interned_strings.h\"\n+#include \"torch/csrc/jit/symbolic_variable.h\"\n+#include \"torch/csrc/jit/passes/dead_code_elimination.h\"\n+\n+namespace torch { namespace jit {\n+\n+namespace {\n+\n+static constexpr int64_t kUnrollFactor = 8;\n+static constexpr int64_t kMaxBodySize = 16;\n+static constexpr int64_t kMaxBodyRepeats = 64;\n+\n+bool isTrueConstant(Value *val) {\n+  Node *producer = val->node();\n+  if (producer->kind() != prim::Constant)\n+    return false;\n+  auto value = producer->t(attr::value);\n+  return value.type() == at::CPU(at::kByte) && value.dim() == 0 && value.toCLong() == 1;\n+}\n+\n+bool isForLoop(Node* node) {\n+  if (node->kind() != prim::Loop)\n+    return false;\n+  Value *start_cond = node->inputs().at(1);\n+  Value *continue_cond = node->blocks().at(0)->outputs().at(0);\n+  return isTrueConstant(start_cond) && isTrueConstant(continue_cond);\n+}\n+\n+int64_t limitedBlockSize(Block *body, int64_t limit) {\n+  auto it = body->nodes().begin();\n+  auto end = body->nodes().end();\n+  for (int64_t i = 0; i < limit; ++i, ++it) {\n+    for (Block *subblock : it->blocks()) {\n+      i += limitedBlockSize(subblock, limit);\n+    }\n+    if (it == end) {\n+      return i;\n+    }\n+  }\n+  return limit;\n+}\n+\n+bool isSmallBlock(Block *body) {\n+  return limitedBlockSize(body, kMaxBodySize + 1) <= kMaxBodySize;\n+}\n+\n+at::optional<int64_t> getConstantLength(Node *loop) {\n+  Value *trip_count = loop->inputs().at(0);\n+  if (trip_count->node()->kind() != prim::Constant)\n+    return at::nullopt;\n+  return {trip_count->node()->t(attr::value).toCLong()};\n+}\n+\n+// XXX: This function can only be called with a loop that is guaranteed to execute EXACTLY ONCE.\n+void inlineBody(Node *loop) {\n+  auto graph = loop->owningGraph();\n+  auto body = loop->blocks().at(0);\n+  WithInsertPoint insert_point_guard { loop };\n+\n+  std::unordered_map<Value*, Value*> value_map;\n+  auto get_value = [&](Value *v) {\n+    auto it = value_map.find(v);\n+    if (it != value_map.end())\n+      return it->second;\n+    return v;\n+  };\n+\n+  // Loop node has extra (max_iters, initial_cond) inputs,\n+  // body has an extra (loop_counter) input.\n+  for (size_t i = 2; i < loop->inputs().size(); ++i) {\n+    value_map[body->inputs()[i - 1]] = loop->inputs()[i];\n+  }\n+\n+  for (Node *orig : body->nodes()) {\n+    Node *clone = graph->insertNode(graph->createClone(orig, get_value));\n+    for (size_t i = 0; i < orig->outputs().size(); ++i) {\n+      value_map[orig->outputs()[i]] = clone->outputs()[i];\n+    }\n+  }\n+  for (size_t i = 0; i < loop->outputs().size(); ++i) {\n+    loop->outputs().at(i)->replaceAllUsesWith(get_value(body->outputs().at(i + 1)));\n+  }\n+  // XXX: it is extremely important to destroy the loop in here. DCE might not be able\n+  // to conclude that it's safe, because the loop might contain side effects.\n+  loop->destroy();\n+}\n+\n+void repeatBody(Block *body, int64_t times) {\n+  // We will be adding nodes to the body, so cache the initial start and end.\n+  // XXX: they are both inclusive", "path": "torch/csrc/jit/passes/loop_unrolling.cpp", "position": null, "original_position": 92, "commit_id": "f79b8222e6011cdbde84440ddb672c5dd3dabbec", "original_commit_id": "10b622cdb4f78054006f48c271e0abb8a62bbe96", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "can you document why body_end is inclusive, the distinction is subtle.", "created_at": "2018-05-21T22:57:41Z", "updated_at": "2018-11-23T15:44:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/7672#discussion_r189736437", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7672", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189736437"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7672#discussion_r189736437"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7672"}}, "body_html": "<p>can you document why body_end is inclusive, the distinction is subtle.</p>", "body_text": "can you document why body_end is inclusive, the distinction is subtle."}