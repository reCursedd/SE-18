{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390422197", "html_url": "https://github.com/pytorch/pytorch/pull/7672#issuecomment-390422197", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7672", "id": 390422197, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDQyMjE5Nw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-19T18:01:06Z", "updated_at": "2018-05-19T18:01:06Z", "author_association": "MEMBER", "body_html": "<p>Ugh the regex parts are actually really useful, but I can simplify it to use regular string operations <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1388690\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/anderspapitto\">@anderspapitto</a> The problem is that we currently use the DCE trick to implement the symbolic override, but once we stop ever DCEing PythonOps, then PythonOps that appear inside the body will no longer disappear. This e.g. causes the test that pack_padded + pad_packed = no-op to fail, because the <code>PackPadded</code> autograd function call stays embedded in the trace.</p>\n<p>A fairly simple workaround would be to mark known autograd functions somehow to indicate that they are side-effect free. Otherwise we might need to have a proper scoping mechanism instead of the current trick.</p>", "body_text": "Ugh the regex parts are actually really useful, but I can simplify it to use regular string operations \ud83d\ude15\n@ezyang @anderspapitto The problem is that we currently use the DCE trick to implement the symbolic override, but once we stop ever DCEing PythonOps, then PythonOps that appear inside the body will no longer disappear. This e.g. causes the test that pack_padded + pad_packed = no-op to fail, because the PackPadded autograd function call stays embedded in the trace.\nA fairly simple workaround would be to mark known autograd functions somehow to indicate that they are side-effect free. Otherwise we might need to have a proper scoping mechanism instead of the current trick.", "body": "Ugh the regex parts are actually really useful, but I can simplify it to use regular string operations \ud83d\ude15\r\n\r\n@ezyang @anderspapitto The problem is that we currently use the DCE trick to implement the symbolic override, but once we stop ever DCEing PythonOps, then PythonOps that appear inside the body will no longer disappear. This e.g. causes the test that pack_padded + pad_packed = no-op to fail, because the `PackPadded` autograd function call stays embedded in the trace.\r\n\r\nA fairly simple workaround would be to mark known autograd functions somehow to indicate that they are side-effect free. Otherwise we might need to have a proper scoping mechanism instead of the current trick."}