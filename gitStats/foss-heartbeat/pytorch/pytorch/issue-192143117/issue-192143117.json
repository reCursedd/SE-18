{"url": "https://api.github.com/repos/pytorch/pytorch/issues/264", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/264/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/264/events", "html_url": "https://github.com/pytorch/pytorch/issues/264", "id": 192143117, "node_id": "MDU6SXNzdWUxOTIxNDMxMTc=", "number": 264, "title": "losses per-batch-element", "user": {"login": "bshillingford", "id": 2326749, "node_id": "MDQ6VXNlcjIzMjY3NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2326749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bshillingford", "html_url": "https://github.com/bshillingford", "followers_url": "https://api.github.com/users/bshillingford/followers", "following_url": "https://api.github.com/users/bshillingford/following{/other_user}", "gists_url": "https://api.github.com/users/bshillingford/gists{/gist_id}", "starred_url": "https://api.github.com/users/bshillingford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bshillingford/subscriptions", "organizations_url": "https://api.github.com/users/bshillingford/orgs", "repos_url": "https://api.github.com/users/bshillingford/repos", "events_url": "https://api.github.com/users/bshillingford/events{/privacy}", "received_events_url": "https://api.github.com/users/bshillingford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 586699385, "node_id": "MDU6TGFiZWw1ODY2OTkzODU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/24hr+", "name": "24hr+", "color": "d4a5d9", "default": false}, {"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 838476895, "node_id": "MDU6TGFiZWw4Mzg0NzY4OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/hackamonth", "name": "hackamonth", "color": "0e8a16", "default": false}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-11-28T23:10:26Z", "updated_at": "2018-03-30T16:44:59Z", "closed_at": "2018-03-30T16:44:59Z", "author_association": "NONE", "body_html": "<p>It would be useful to have losses that return a batch of losses, rather than summing/mean-ing them. This is useful e.g. for adding weights on the loss that vary for each batch element, and for masking losses on the outputs of variable-length RNNs.</p>\n<p>Most common losses can be emulated using element-wise arithmetic (or in the case of the categorical NLL, a Gather operation), and that was my standard solution in lua torch. However, having them built-in is arguably cleaner and leads to more consistent code for the end user.</p>", "body_text": "It would be useful to have losses that return a batch of losses, rather than summing/mean-ing them. This is useful e.g. for adding weights on the loss that vary for each batch element, and for masking losses on the outputs of variable-length RNNs.\nMost common losses can be emulated using element-wise arithmetic (or in the case of the categorical NLL, a Gather operation), and that was my standard solution in lua torch. However, having them built-in is arguably cleaner and leads to more consistent code for the end user.", "body": "It would be useful to have losses that return a batch of losses, rather than summing/mean-ing them. This is useful e.g. for adding weights on the loss that vary for each batch element, and for masking losses on the outputs of variable-length RNNs.\r\n\r\nMost common losses can be emulated using element-wise arithmetic (or in the case of the categorical NLL, a Gather operation), and that was my standard solution in lua torch. However, having them built-in is arguably cleaner and leads to more consistent code for the end user."}