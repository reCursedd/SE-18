{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/107815200", "pull_request_review_id": 28810055, "id": 107815200, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzgxNTIwMA==", "diff_hunk": "@@ -340,21 +340,75 @@ def parameters(self, memo=None):\n                 yield p\n \n     def children(self):\n-        \"\"\"Returns an iterator over children modules.\"\"\"\n+        \"\"\"Returns an iterator over immediate children modules.\"\"\"\n+        for name, module in self.named_children():\n+            yield module\n+\n+    def named_children(self):\n+        \"\"\"Returns an iterator over immediate children modules, yielding both\n+        the name of the module as well as the module itself.\n+\n+        Example:\n+            >>> for name, module in model.named_children():\n+            >>>     if name in ['conv4', 'conv5']:\n+            >>>         print(module)\n+        \"\"\"\n         memo = set()\n-        for module in self._modules.values():\n+        for name, module in self._modules.items():\n             if module is not None and module not in memo:\n                 memo.add(module)\n-                yield module\n+                yield name, module\n+\n+    def modules(self):\n+        \"\"\"Returns an iterator over all modules in the network.\n+\n+        Note:\n+            Duplicate modules are returned only once. In the following\n+            example, ``l`` will be returned only once.\n+\n+            >>> l = nn.Linear(2, 2)\n+            >>> net = nn.Sequential(l, l)\n+            >>> for idx, m in enumerate(net.modules()):\n+            >>>     print(idx, '->', m)\n+            0 -> Sequential (\n+              (0): Linear (2 -> 2)\n+              (1): Linear (2 -> 2)\n+            )\n+            1 -> Linear (2 -> 2)\n+        \"\"\"\n+        for name, module in self.named_modules():\n+            yield module\n+\n+    def named_modules(self, memo=None, prefix=''):\n+        \"\"\"Returns an iterator over all modules in the network, yielding\n+        both the name of the module as well as the module itself.\n+\n+        Note:\n+            Duplicate modules are returned only once. In the following\n+            example, ``l`` will be returned only once.\n+\n+            >>> l = nn.Linear(2, 2)\n+            >>> net = nn.Sequential(l, l)\n+            >>> for idx, m in enumerate(net.named_modules()):\n+            >>>     print(idx, '->', m)\n+            0 -> ('', Sequential (\n+              (0): Linear (2 -> 2)\n+              (1): Linear (2 -> 2)\n+            ))\n+            1 -> ('0', Linear (2 -> 2))\n+        \"\"\"\n \n-    def modules(self, memo=None):\n         if memo is None:\n             memo = set()\n         if self not in memo:\n             memo.add(self)\n-            yield self\n-            for module in self.children():\n-                for m in module.modules(memo):\n+            yield prefix, self\n+            for name, module in self.named_children():\n+                if prefix:\n+                    submodule_prefix = prefix + '.' + name\n+                else:\n+                    submodule_prefix = name", "path": "torch/nn/modules/module.py", "position": null, "original_position": 78, "commit_id": "43298c785f39c50d2b6cdc1b7d3dec597d16f3a7", "original_commit_id": "68a72b70dd1016f95edd36be5ecf9b15dba5c0de", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "A nicer thing to do would be to pass `prefix + name + '.'` to the recursive call and `yield prefix + name, self`. This should give correct results in all calls.", "created_at": "2017-03-24T00:35:03Z", "updated_at": "2018-11-23T15:32:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/941#discussion_r107815200", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/941", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/107815200"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/941#discussion_r107815200"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/941"}}, "body_html": "<p>A nicer thing to do would be to pass <code>prefix + name + '.'</code> to the recursive call and <code>yield prefix + name, self</code>. This should give correct results in all calls.</p>", "body_text": "A nicer thing to do would be to pass prefix + name + '.' to the recursive call and yield prefix + name, self. This should give correct results in all calls."}