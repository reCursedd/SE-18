{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/433625174", "html_url": "https://github.com/pytorch/pytorch/issues/13197#issuecomment-433625174", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13197", "id": 433625174, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzYyNTE3NA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-27T14:25:22Z", "updated_at": "2018-10-27T14:25:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>As discussed in the notes you link, there currently are CUDA functions that won't be deterministic.<br>\n0.4.1 (and also the initial 1.0RC) also have a bug that the only one of the two CUDA rngs is fixed down when seeding. This has been fixed in master.</p>\n<p>I'm not sure I will be able to look into this very deeply, but maybe you can check intermediate calculation results to determine which exact operation is causing the non-deterministic behaviour.</p>\n<p>(I think that getting deterministic versions of the CUDA kernels is feasible and possibly worthwhile, but it is a sizeable effort, and would need someone to spend time or money on.)</p>", "body_text": "As discussed in the notes you link, there currently are CUDA functions that won't be deterministic.\n0.4.1 (and also the initial 1.0RC) also have a bug that the only one of the two CUDA rngs is fixed down when seeding. This has been fixed in master.\nI'm not sure I will be able to look into this very deeply, but maybe you can check intermediate calculation results to determine which exact operation is causing the non-deterministic behaviour.\n(I think that getting deterministic versions of the CUDA kernels is feasible and possibly worthwhile, but it is a sizeable effort, and would need someone to spend time or money on.)", "body": "As discussed in the notes you link, there currently are CUDA functions that won't be deterministic.\r\n0.4.1 (and also the initial 1.0RC) also have a bug that the only one of the two CUDA rngs is fixed down when seeding. This has been fixed in master.\r\n\r\nI'm not sure I will be able to look into this very deeply, but maybe you can check intermediate calculation results to determine which exact operation is causing the non-deterministic behaviour.\r\n\r\n(I think that getting deterministic versions of the CUDA kernels is feasible and possibly worthwhile, but it is a sizeable effort, and would need someone to spend time or money on.)"}