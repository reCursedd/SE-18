{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182312792", "pull_request_review_id": 113079460, "id": 182312792, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjMxMjc5Mg==", "diff_hunk": "@@ -235,9 +245,33 @@ void encodeGraph(onnx::GraphProto * p_g, const std::shared_ptr<Graph> & g,\n     for(auto attr_name : node->attributeNames()) {\n       addAttribute(p_n, node, attr_name);\n     }\n+    if (node->kind() == torch::jit::onnx::Loop) {\n+      JIT_ASSERT(node->blocks().size() == 1);\n+\n+      auto body = p_n->add_attribute();\n+      body->set_name(\"body\");\n+      body->set_type(onnx::aGRAPH);\n+      auto g = body->mutable_g();\n+      encodeBlock(g, node->blocks()[0], initializers, raw_data_export_map);\n+    }\n+    if (node->kind() == torch::jit::onnx::If) {", "path": "torch/csrc/jit/export.cpp", "position": null, "original_position": 56, "commit_id": "7185babd313816952574dbf818e34481e82709c5", "original_commit_id": "dc1e54a10bfd50ae22011e7cb174b3a7f1f11c45", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "It is a bit crappy that we need special cases in the protobuf translation. I can see why though -- we have numbered blocks in IR and named graphs in ONNX. I wonder if we can add \"block attributes\" to the IR (e.g. a `graph.b` function). They would simply hold the _index_ of the block, not the block itself, but would then translate into onnx automatically:\r\n\r\n```\r\nauto then_branch = graph->addBlock();\r\ngraph.b_(onnx::then_branch, 0);\r\nauto else_branch = graph->addBlock();\r\ngraph.b_(onnx::then_branch, 1);\r\n```\r\n\r\nThen add a `::b` case to addAttribute.\r\n", "created_at": "2018-04-18T05:32:14Z", "updated_at": "2018-11-23T15:42:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/6608#discussion_r182312792", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6608", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182312792"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6608#discussion_r182312792"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6608"}}, "body_html": "<p>It is a bit crappy that we need special cases in the protobuf translation. I can see why though -- we have numbered blocks in IR and named graphs in ONNX. I wonder if we can add \"block attributes\" to the IR (e.g. a <code>graph.b</code> function). They would simply hold the <em>index</em> of the block, not the block itself, but would then translate into onnx automatically:</p>\n<pre><code>auto then_branch = graph-&gt;addBlock();\ngraph.b_(onnx::then_branch, 0);\nauto else_branch = graph-&gt;addBlock();\ngraph.b_(onnx::then_branch, 1);\n</code></pre>\n<p>Then add a <code>::b</code> case to addAttribute.</p>", "body_text": "It is a bit crappy that we need special cases in the protobuf translation. I can see why though -- we have numbered blocks in IR and named graphs in ONNX. I wonder if we can add \"block attributes\" to the IR (e.g. a graph.b function). They would simply hold the index of the block, not the block itself, but would then translate into onnx automatically:\nauto then_branch = graph->addBlock();\ngraph.b_(onnx::then_branch, 0);\nauto else_branch = graph->addBlock();\ngraph.b_(onnx::then_branch, 1);\n\nThen add a ::b case to addAttribute."}