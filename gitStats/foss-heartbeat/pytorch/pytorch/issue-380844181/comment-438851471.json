{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/438851471", "html_url": "https://github.com/pytorch/pytorch/issues/13988#issuecomment-438851471", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13988", "id": 438851471, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODg1MTQ3MQ==", "user": {"login": "Jianhui-Li", "id": 23248843, "node_id": "MDQ6VXNlcjIzMjQ4ODQz", "avatar_url": "https://avatars3.githubusercontent.com/u/23248843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jianhui-Li", "html_url": "https://github.com/Jianhui-Li", "followers_url": "https://api.github.com/users/Jianhui-Li/followers", "following_url": "https://api.github.com/users/Jianhui-Li/following{/other_user}", "gists_url": "https://api.github.com/users/Jianhui-Li/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jianhui-Li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jianhui-Li/subscriptions", "organizations_url": "https://api.github.com/users/Jianhui-Li/orgs", "repos_url": "https://api.github.com/users/Jianhui-Li/repos", "events_url": "https://api.github.com/users/Jianhui-Li/events{/privacy}", "received_events_url": "https://api.github.com/users/Jianhui-Li/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-14T23:00:53Z", "updated_at": "2018-11-14T23:00:53Z", "author_association": "NONE", "body_html": "<p>Hi Soumith,</p>\n<p>I believe it is because gcc optimized the expression inside assertions to a simpler form like \"assert(id&lt;2)\"  with the assumption that \u201cjcp.alpha * jcp.alpha + 14\u201d doesn\u2019t overflow.  There are 7 assertions of this kind (4 in jit_avx512_core_u8s8s32x_wino_convolution.cpp, and 3 in jit_avx512_core_fp32_wino_conv_2x3.cpp).  We need to verify this but you may give it a try.</p>\n<pre><code>Zmm vreg_tmp(int id) { // 2\n    const int id_reg_tmp = jcp.alpha * jcp.alpha + 12 + id;\n    assert(id_reg_tmp &lt; jcp.alpha * jcp.alpha + 14);   // =&gt; assert(id&lt;2); \n    return Zmm(31 - id_reg_tmp);\n}\n</code></pre>", "body_text": "Hi Soumith,\nI believe it is because gcc optimized the expression inside assertions to a simpler form like \"assert(id<2)\"  with the assumption that \u201cjcp.alpha * jcp.alpha + 14\u201d doesn\u2019t overflow.  There are 7 assertions of this kind (4 in jit_avx512_core_u8s8s32x_wino_convolution.cpp, and 3 in jit_avx512_core_fp32_wino_conv_2x3.cpp).  We need to verify this but you may give it a try.\nZmm vreg_tmp(int id) { // 2\n    const int id_reg_tmp = jcp.alpha * jcp.alpha + 12 + id;\n    assert(id_reg_tmp < jcp.alpha * jcp.alpha + 14);   // => assert(id<2); \n    return Zmm(31 - id_reg_tmp);\n}", "body": "Hi Soumith, \r\n\r\nI believe it is because gcc optimized the expression inside assertions to a simpler form like \"assert(id<2)\"  with the assumption that \u201cjcp.alpha * jcp.alpha + 14\u201d doesn\u2019t overflow.  There are 7 assertions of this kind (4 in jit_avx512_core_u8s8s32x_wino_convolution.cpp, and 3 in jit_avx512_core_fp32_wino_conv_2x3.cpp).  We need to verify this but you may give it a try. \r\n \r\n    Zmm vreg_tmp(int id) { // 2\r\n        const int id_reg_tmp = jcp.alpha * jcp.alpha + 12 + id;\r\n        assert(id_reg_tmp < jcp.alpha * jcp.alpha + 14);   // => assert(id<2); \r\n        return Zmm(31 - id_reg_tmp);\r\n    }\r\n"}