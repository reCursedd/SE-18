{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/405276617", "html_url": "https://github.com/pytorch/pytorch/pull/9246#issuecomment-405276617", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9246", "id": 405276617, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTI3NjYxNw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T14:59:03Z", "updated_at": "2018-07-16T14:59:03Z", "author_association": "MEMBER", "body_html": "<p>Actually a final improvement we could do would be to do a range check on the <code>std::hash</code> output before we <code>static_cast</code> it. This will prevent overflow errors, which can cause UB and make the hash function not conform to its invariants (e.g. hash of a single object can be different every time). You can use <code>std::numeric_limits</code> to find out what's the max value for <code>Py_ssize_t</code> (we're good with <code>min</code> because it's a signed type, so it's surely not larger than 0).</p>\n<p>Sorry, I didn't think of that before <g-emoji class=\"g-emoji\" alias=\"confused\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f615.png\">\ud83d\ude15</g-emoji></p>", "body_text": "Actually a final improvement we could do would be to do a range check on the std::hash output before we static_cast it. This will prevent overflow errors, which can cause UB and make the hash function not conform to its invariants (e.g. hash of a single object can be different every time). You can use std::numeric_limits to find out what's the max value for Py_ssize_t (we're good with min because it's a signed type, so it's surely not larger than 0).\nSorry, I didn't think of that before \ud83d\ude15", "body": "Actually a final improvement we could do would be to do a range check on the `std::hash` output before we `static_cast` it. This will prevent overflow errors, which can cause UB and make the hash function not conform to its invariants (e.g. hash of a single object can be different every time). You can use `std::numeric_limits` to find out what's the max value for `Py_ssize_t` (we're good with `min` because it's a signed type, so it's surely not larger than 0).\r\n\r\nSorry, I didn't think of that before \ud83d\ude15 "}