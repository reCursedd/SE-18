{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201076754", "pull_request_review_id": 135507778, "id": 201076754, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3Njc1NA==", "diff_hunk": "@@ -112,3 +113,16 @@ struct Device {\n \n std::ostream& operator<<(std::ostream& stream, at::Device::Type type);\n std::ostream& operator<<(std::ostream& stream, const at::Device& device);\n+\n+namespace std {\n+  template<> struct hash<at::Device>\n+  {\n+    int64_t operator()(const at::Device& device) const noexcept {\n+      int64_t hash_val = static_cast<int64_t>(device.index());\n+      if (device.type() == at::Device::Type::CUDA) {\n+        hash_val += 2;", "path": "aten/src/ATen/Device.h", "position": null, "original_position": 19, "commit_id": "a8e6bcc4aa2a692000146d4f755d8df02c75d919", "original_commit_id": "0f0c1010757c6e7ddbf19f7d1995ff24a20845e0", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "body": "The upper bound is still high practically speaking.\r\n\r\nAnother simple way to deterministically hash it would be to use the device string:\r\n```\r\nstd::string device_string = toString(device.type()) + \":\" + to_string(device.index());\r\nreturn std::hash<std::string>{}(device_string);\r\n```\r\nBut again, this value might result in non-deterministic overflow.", "created_at": "2018-07-09T17:01:31Z", "updated_at": "2018-11-23T15:46:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/9246#discussion_r201076754", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9246", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201076754"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9246#discussion_r201076754"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9246"}}, "body_html": "<p>The upper bound is still high practically speaking.</p>\n<p>Another simple way to deterministically hash it would be to use the device string:</p>\n<pre><code>std::string device_string = toString(device.type()) + \":\" + to_string(device.index());\nreturn std::hash&lt;std::string&gt;{}(device_string);\n</code></pre>\n<p>But again, this value might result in non-deterministic overflow.</p>", "body_text": "The upper bound is still high practically speaking.\nAnother simple way to deterministically hash it would be to use the device string:\nstd::string device_string = toString(device.type()) + \":\" + to_string(device.index());\nreturn std::hash<std::string>{}(device_string);\n\nBut again, this value might result in non-deterministic overflow.", "in_reply_to_id": 201032168}