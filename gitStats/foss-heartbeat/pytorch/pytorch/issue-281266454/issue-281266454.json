{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4129", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4129/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4129/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4129/events", "html_url": "https://github.com/pytorch/pytorch/pull/4129", "id": 281266454, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU3NzQyNzAx", "number": 4129, "title": "Implement .enumerate_support() for Bernoulli, Categorical distributions", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-12T05:53:25Z", "updated_at": "2018-11-23T15:37:17Z", "closed_at": "2017-12-13T12:01:06Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4129", "html_url": "https://github.com/pytorch/pytorch/pull/4129", "diff_url": "https://github.com/pytorch/pytorch/pull/4129.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4129.patch"}, "body_html": "<h2>Why?</h2>\n<p>This method is used heavily in Pyro distributions for summing-out discrete variables.</p>\n<h2>How?</h2>\n<p>The <code>.enumerate_support()</code> method returns a Tensor (or Variable) with all possible elementwise values, enumerated over the leftmost dimension. The result can thus be passed to <code>dist.log_prob()</code> as if it were a batch of samples. Note that <code>.enumerate_support()</code> does not enumerate over the cartesian product: doing so is exponentially expensive, rarely useful, and easy to accomplish efficiently via <code>itertools.product(dist.enumerate_support())</code>. In Pyro we originally implemented cartesian product but then switched to this more useful version.</p>\n<p>This PR also includes the property <code>.has_enumerate_support</code> which is only true for discrete distributions.</p>\n<p>Note this PR should be completely forwards-compatible with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1762463\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/neerajprad\">@neerajprad</a>'s upcoming PR to change batch shape <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"281221418\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/probtorch/pytorch/issues/30\" data-hovercard-type=\"issue\" data-hovercard-url=\"/probtorch/pytorch/issues/30/hovercard\" href=\"https://github.com/probtorch/pytorch/issues/30\">probtorch#30</a>.</p>", "body_text": "Why?\nThis method is used heavily in Pyro distributions for summing-out discrete variables.\nHow?\nThe .enumerate_support() method returns a Tensor (or Variable) with all possible elementwise values, enumerated over the leftmost dimension. The result can thus be passed to dist.log_prob() as if it were a batch of samples. Note that .enumerate_support() does not enumerate over the cartesian product: doing so is exponentially expensive, rarely useful, and easy to accomplish efficiently via itertools.product(dist.enumerate_support()). In Pyro we originally implemented cartesian product but then switched to this more useful version.\nThis PR also includes the property .has_enumerate_support which is only true for discrete distributions.\nNote this PR should be completely forwards-compatible with @neerajprad's upcoming PR to change batch shape probtorch#30.", "body": "## Why?\r\nThis method is used heavily in Pyro distributions for summing-out discrete variables.\r\n\r\n## How?\r\n\r\nThe `.enumerate_support()` method returns a Tensor (or Variable) with all possible elementwise values, enumerated over the leftmost dimension. The result can thus be passed to `dist.log_prob()` as if it were a batch of samples. Note that `.enumerate_support()` does not enumerate over the cartesian product: doing so is exponentially expensive, rarely useful, and easy to accomplish efficiently via `itertools.product(dist.enumerate_support())`. In Pyro we originally implemented cartesian product but then switched to this more useful version.\r\n\r\nThis PR also includes the property `.has_enumerate_support` which is only true for discrete distributions.\r\n\r\nNote this PR should be completely forwards-compatible with @neerajprad's upcoming PR to change batch shape https://github.com/probtorch/pytorch/issues/30."}