{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10477", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10477/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10477/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10477/events", "html_url": "https://github.com/pytorch/pytorch/issues/10477", "id": 350142003, "node_id": "MDU6SXNzdWUzNTAxNDIwMDM=", "number": 10477, "title": "[Caffe2] Workspaces in Caffe2", "user": {"login": "minthetkhine", "id": 36428221, "node_id": "MDQ6VXNlcjM2NDI4MjIx", "avatar_url": "https://avatars0.githubusercontent.com/u/36428221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minthetkhine", "html_url": "https://github.com/minthetkhine", "followers_url": "https://api.github.com/users/minthetkhine/followers", "following_url": "https://api.github.com/users/minthetkhine/following{/other_user}", "gists_url": "https://api.github.com/users/minthetkhine/gists{/gist_id}", "starred_url": "https://api.github.com/users/minthetkhine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minthetkhine/subscriptions", "organizations_url": "https://api.github.com/users/minthetkhine/orgs", "repos_url": "https://api.github.com/users/minthetkhine/repos", "events_url": "https://api.github.com/users/minthetkhine/events{/privacy}", "received_events_url": "https://api.github.com/users/minthetkhine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-13T18:29:40Z", "updated_at": "2018-08-15T22:17:58Z", "closed_at": "2018-08-15T22:17:58Z", "author_association": "NONE", "body_html": "<p>Is it possible to run two threads with each thread working in its own Caffe2 workspace?</p>\n<pre><code>#!/usr/bin/python\n\nfrom caffe2.python import workspace, model_helper\nimport numpy as np  \nimport threading\n\nNUM_THREADS = 3\n\ndef worker():\n\n    if threading.current_thread().name == 'Thread0':\n        workspace.SwitchWorkspace('workspace0', True)\n    \n    elif threading.current_thread().name == 'Thread1':\n        workspace.SwitchWorkspace('workspace1', True)\n        \n    elif threading.current_thread().name == 'Thread2':\n        workspace.SwitchWorkspace('workspace2', True)\n    \n    # Create the input data\n    data = np.random.rand(16, 100).astype(np.float32)\n\n    # Create labels for the data as integers [0, 9]\n    label = (np.random.rand(16) * 10).astype(np.int32)\n\n    workspace.FeedBlob(\"data\", data)\n    workspace.FeedBlob(\"label\", label)\n\n    # Create model using a model helper\n    m = model_helper.ModelHelper(name=\"my first net\")\n\n    weight = m.param_init_net.XavierFill([], \"fc_w\", shape=[10, 100])\n    bias = m.param_init_net.ConstantFill([], \"fc_b\", shape=[10,])\n\n    fc_l = m.net.FC([\"data\", \"fc_w\", \"fc_b\"], \"fcl\")\n    pred = m.net.Sigmoid(fc_l, \"pred\")\n    softmax, loss = m.net.SoftmaxWithLoss([pred, \"label\"], [\"softmax\", \"loss\"])\n\n    workspace.RunNetOnce(m.param_init_net)\n    workspace.CreateNet(m.net)\n    \n    for _ in range(100):\n        data = np.random.rand(16, 100).astype(np.float32)\n        label = (np.random.rand(16) * 10).astype(np.int32)\n        workspace.FeedBlob(\"data\", data) \n        workspace.FeedBlob(\"label\", label)\n        workspace.RunNet(m.name, 10)\n\n    print(\"{} in {} fetched blob softmax:\\n{}\".format(workspace.CurrentWorkspace(), threading.current_thread().name, workspace.FetchBlob(\"softmax\")))\n    print(\"{} in {} fetched blob loss:\\n{}\".format(workspace.CurrentWorkspace(), threading.current_thread().name, workspace.FetchBlob(\"loss\")))\n\ndef run_workers():\n\n    threads = [threading.Thread(name=\"Thread{}\".format(i), target=worker) for i in range(NUM_THREADS)]\n    for thread in threads:\n        thread.start()\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    run_workers()\n</code></pre>\n<p>This is my example code to test out the behaviour to see if that will work, using some examples from the Caffe2 Tutorial, but I keep receiving segmentation faults.</p>", "body_text": "Is it possible to run two threads with each thread working in its own Caffe2 workspace?\n#!/usr/bin/python\n\nfrom caffe2.python import workspace, model_helper\nimport numpy as np  \nimport threading\n\nNUM_THREADS = 3\n\ndef worker():\n\n    if threading.current_thread().name == 'Thread0':\n        workspace.SwitchWorkspace('workspace0', True)\n    \n    elif threading.current_thread().name == 'Thread1':\n        workspace.SwitchWorkspace('workspace1', True)\n        \n    elif threading.current_thread().name == 'Thread2':\n        workspace.SwitchWorkspace('workspace2', True)\n    \n    # Create the input data\n    data = np.random.rand(16, 100).astype(np.float32)\n\n    # Create labels for the data as integers [0, 9]\n    label = (np.random.rand(16) * 10).astype(np.int32)\n\n    workspace.FeedBlob(\"data\", data)\n    workspace.FeedBlob(\"label\", label)\n\n    # Create model using a model helper\n    m = model_helper.ModelHelper(name=\"my first net\")\n\n    weight = m.param_init_net.XavierFill([], \"fc_w\", shape=[10, 100])\n    bias = m.param_init_net.ConstantFill([], \"fc_b\", shape=[10,])\n\n    fc_l = m.net.FC([\"data\", \"fc_w\", \"fc_b\"], \"fcl\")\n    pred = m.net.Sigmoid(fc_l, \"pred\")\n    softmax, loss = m.net.SoftmaxWithLoss([pred, \"label\"], [\"softmax\", \"loss\"])\n\n    workspace.RunNetOnce(m.param_init_net)\n    workspace.CreateNet(m.net)\n    \n    for _ in range(100):\n        data = np.random.rand(16, 100).astype(np.float32)\n        label = (np.random.rand(16) * 10).astype(np.int32)\n        workspace.FeedBlob(\"data\", data) \n        workspace.FeedBlob(\"label\", label)\n        workspace.RunNet(m.name, 10)\n\n    print(\"{} in {} fetched blob softmax:\\n{}\".format(workspace.CurrentWorkspace(), threading.current_thread().name, workspace.FetchBlob(\"softmax\")))\n    print(\"{} in {} fetched blob loss:\\n{}\".format(workspace.CurrentWorkspace(), threading.current_thread().name, workspace.FetchBlob(\"loss\")))\n\ndef run_workers():\n\n    threads = [threading.Thread(name=\"Thread{}\".format(i), target=worker) for i in range(NUM_THREADS)]\n    for thread in threads:\n        thread.start()\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    run_workers()\n\nThis is my example code to test out the behaviour to see if that will work, using some examples from the Caffe2 Tutorial, but I keep receiving segmentation faults.", "body": "Is it possible to run two threads with each thread working in its own Caffe2 workspace?\r\n\r\n```\r\n#!/usr/bin/python\r\n\r\nfrom caffe2.python import workspace, model_helper\r\nimport numpy as np  \r\nimport threading\r\n\r\nNUM_THREADS = 3\r\n\r\ndef worker():\r\n\r\n    if threading.current_thread().name == 'Thread0':\r\n        workspace.SwitchWorkspace('workspace0', True)\r\n    \r\n    elif threading.current_thread().name == 'Thread1':\r\n        workspace.SwitchWorkspace('workspace1', True)\r\n        \r\n    elif threading.current_thread().name == 'Thread2':\r\n        workspace.SwitchWorkspace('workspace2', True)\r\n    \r\n    # Create the input data\r\n    data = np.random.rand(16, 100).astype(np.float32)\r\n\r\n    # Create labels for the data as integers [0, 9]\r\n    label = (np.random.rand(16) * 10).astype(np.int32)\r\n\r\n    workspace.FeedBlob(\"data\", data)\r\n    workspace.FeedBlob(\"label\", label)\r\n\r\n    # Create model using a model helper\r\n    m = model_helper.ModelHelper(name=\"my first net\")\r\n\r\n    weight = m.param_init_net.XavierFill([], \"fc_w\", shape=[10, 100])\r\n    bias = m.param_init_net.ConstantFill([], \"fc_b\", shape=[10,])\r\n\r\n    fc_l = m.net.FC([\"data\", \"fc_w\", \"fc_b\"], \"fcl\")\r\n    pred = m.net.Sigmoid(fc_l, \"pred\")\r\n    softmax, loss = m.net.SoftmaxWithLoss([pred, \"label\"], [\"softmax\", \"loss\"])\r\n\r\n    workspace.RunNetOnce(m.param_init_net)\r\n    workspace.CreateNet(m.net)\r\n    \r\n    for _ in range(100):\r\n        data = np.random.rand(16, 100).astype(np.float32)\r\n        label = (np.random.rand(16) * 10).astype(np.int32)\r\n        workspace.FeedBlob(\"data\", data) \r\n        workspace.FeedBlob(\"label\", label)\r\n        workspace.RunNet(m.name, 10)\r\n\r\n    print(\"{} in {} fetched blob softmax:\\n{}\".format(workspace.CurrentWorkspace(), threading.current_thread().name, workspace.FetchBlob(\"softmax\")))\r\n    print(\"{} in {} fetched blob loss:\\n{}\".format(workspace.CurrentWorkspace(), threading.current_thread().name, workspace.FetchBlob(\"loss\")))\r\n\r\ndef run_workers():\r\n\r\n    threads = [threading.Thread(name=\"Thread{}\".format(i), target=worker) for i in range(NUM_THREADS)]\r\n    for thread in threads:\r\n        thread.start()\r\n\r\nif __name__ == '__main__':\r\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\r\n    run_workers()\r\n```\r\n\r\nThis is my example code to test out the behaviour to see if that will work, using some examples from the Caffe2 Tutorial, but I keep receiving segmentation faults."}