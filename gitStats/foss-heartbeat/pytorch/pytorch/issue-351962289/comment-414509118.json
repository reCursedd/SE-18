{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/414509118", "html_url": "https://github.com/pytorch/pytorch/issues/10675#issuecomment-414509118", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10675", "id": 414509118, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDUwOTExOA==", "user": {"login": "beichen2012", "id": 10824490, "node_id": "MDQ6VXNlcjEwODI0NDkw", "avatar_url": "https://avatars0.githubusercontent.com/u/10824490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beichen2012", "html_url": "https://github.com/beichen2012", "followers_url": "https://api.github.com/users/beichen2012/followers", "following_url": "https://api.github.com/users/beichen2012/following{/other_user}", "gists_url": "https://api.github.com/users/beichen2012/gists{/gist_id}", "starred_url": "https://api.github.com/users/beichen2012/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beichen2012/subscriptions", "organizations_url": "https://api.github.com/users/beichen2012/orgs", "repos_url": "https://api.github.com/users/beichen2012/repos", "events_url": "https://api.github.com/users/beichen2012/events{/privacy}", "received_events_url": "https://api.github.com/users/beichen2012/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-21T00:34:38Z", "updated_at": "2018-08-21T00:34:38Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a><br>\nAn operator after RPN</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-en\">OPERATOR_SCHEMA</span>(GenerateProposals)\n    .NumInputs(<span class=\"pl-c1\">4</span>)\n    .NumOutputs(<span class=\"pl-c1\">2</span>)\n    .SetDoc(<span class=\"pl-s\"><span class=\"pl-pds\">R\"DOC(</span></span>\n<span class=\"pl-s\">Generate bounding box proposals for Faster RCNN. The propoasls are generated for</span>\n<span class=\"pl-s\">a list of images based on image score 'score', bounding box regression result</span>\n<span class=\"pl-s\">'deltas' as well as predefined bounding box shapes 'anchors'. Greedy</span>\n<span class=\"pl-s\">non-maximum suppression is applied to generate the final bounding boxes.</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">)DOC\"</span></span>)\n    .Arg(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spatial_scale<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(float) spatial scale<span class=\"pl-pds\">\"</span></span>)\n    .Arg(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pre_nms_topN<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(int) RPN_PRE_NMS_TOP_N<span class=\"pl-pds\">\"</span></span>)\n    .Arg(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>post_nms_topN<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(int) RPN_POST_NMS_TOP_N<span class=\"pl-pds\">\"</span></span>)\n    .Arg(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nms_thresh<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(float) RPN_NMS_THRESH<span class=\"pl-pds\">\"</span></span>)\n    .Arg(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>min_size<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(float) RPN_MIN_SIZE<span class=\"pl-pds\">\"</span></span>)\n    .Arg(\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>correct_transform_coords<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bool (default false), Correct bounding box transform coordates,<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> see bbox_transform() in boxes.py <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Set to true to match the detectron code, set to false for backward<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> compatibility<span class=\"pl-pds\">\"</span></span>)\n    .Arg(\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>angle_bound_on<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bool (default true). If set, for rotated boxes, angle is <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>normalized to be within [angle_bound_lo, angle_bound_hi].<span class=\"pl-pds\">\"</span></span>)\n    .Arg(\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>angle_bound_lo<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int (default -90 degrees). If set, for rotated boxes, angle is <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>normalized to be within [angle_bound_lo, angle_bound_hi].<span class=\"pl-pds\">\"</span></span>)\n    .Arg(\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>angle_bound_hi<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int (default 90 degrees). If set, for rotated boxes, angle is <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>normalized to be within [angle_bound_lo, angle_bound_hi].<span class=\"pl-pds\">\"</span></span>)\n    .Arg(\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>clip_angle_thresh<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float (default 1.0 degrees). For RRPN, clip almost horizontal boxes <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>within this threshold of tolerance for backward compatibility. <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Set to negative value for no clipping.<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scores<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Scores from conv layer, size (img_count, A, H, W)<span class=\"pl-pds\">\"</span></span>)\n    .Input(\n        <span class=\"pl-c1\">1</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bbox_deltas<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bounding box deltas from conv layer, <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size (img_count, 4 * A, H, W)<span class=\"pl-pds\">\"</span></span>)\n    .Input(\n        <span class=\"pl-c1\">2</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>im_info<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Image info, size (img_count, 3), <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>format (height, width, scale)<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-c1\">3</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>anchors<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bounding box anchors, size (A, 4)<span class=\"pl-pds\">\"</span></span>)\n    .Output(\n        <span class=\"pl-c1\">0</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rois<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Proposals, size (n x 5), <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>format (image_index, x1, y1, x2, y2)<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rois_probs<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scores of proposals, size (n)<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> For backward compatibility</span>\n<span class=\"pl-en\">OPERATOR_SCHEMA</span>(GenerateProposalsCPP).NumInputs(<span class=\"pl-c1\">4</span>).NumOutputs(<span class=\"pl-c1\">2</span>);</pre></div>", "body_text": "@zou3519\nAn operator after RPN\nOPERATOR_SCHEMA(GenerateProposals)\n    .NumInputs(4)\n    .NumOutputs(2)\n    .SetDoc(R\"DOC(\nGenerate bounding box proposals for Faster RCNN. The propoasls are generated for\na list of images based on image score 'score', bounding box regression result\n'deltas' as well as predefined bounding box shapes 'anchors'. Greedy\nnon-maximum suppression is applied to generate the final bounding boxes.\n)DOC\")\n    .Arg(\"spatial_scale\", \"(float) spatial scale\")\n    .Arg(\"pre_nms_topN\", \"(int) RPN_PRE_NMS_TOP_N\")\n    .Arg(\"post_nms_topN\", \"(int) RPN_POST_NMS_TOP_N\")\n    .Arg(\"nms_thresh\", \"(float) RPN_NMS_THRESH\")\n    .Arg(\"min_size\", \"(float) RPN_MIN_SIZE\")\n    .Arg(\n        \"correct_transform_coords\",\n        \"bool (default false), Correct bounding box transform coordates,\"\n        \" see bbox_transform() in boxes.py \"\n        \"Set to true to match the detectron code, set to false for backward\"\n        \" compatibility\")\n    .Arg(\n        \"angle_bound_on\",\n        \"bool (default true). If set, for rotated boxes, angle is \"\n        \"normalized to be within [angle_bound_lo, angle_bound_hi].\")\n    .Arg(\n        \"angle_bound_lo\",\n        \"int (default -90 degrees). If set, for rotated boxes, angle is \"\n        \"normalized to be within [angle_bound_lo, angle_bound_hi].\")\n    .Arg(\n        \"angle_bound_hi\",\n        \"int (default 90 degrees). If set, for rotated boxes, angle is \"\n        \"normalized to be within [angle_bound_lo, angle_bound_hi].\")\n    .Arg(\n        \"clip_angle_thresh\",\n        \"float (default 1.0 degrees). For RRPN, clip almost horizontal boxes \"\n        \"within this threshold of tolerance for backward compatibility. \"\n        \"Set to negative value for no clipping.\")\n    .Input(0, \"scores\", \"Scores from conv layer, size (img_count, A, H, W)\")\n    .Input(\n        1,\n        \"bbox_deltas\",\n        \"Bounding box deltas from conv layer, \"\n        \"size (img_count, 4 * A, H, W)\")\n    .Input(\n        2,\n        \"im_info\",\n        \"Image info, size (img_count, 3), \"\n        \"format (height, width, scale)\")\n    .Input(3, \"anchors\", \"Bounding box anchors, size (A, 4)\")\n    .Output(\n        0,\n        \"rois\",\n        \"Proposals, size (n x 5), \"\n        \"format (image_index, x1, y1, x2, y2)\")\n    .Output(1, \"rois_probs\", \"scores of proposals, size (n)\");\n// For backward compatibility\nOPERATOR_SCHEMA(GenerateProposalsCPP).NumInputs(4).NumOutputs(2);", "body": "@zou3519 \r\nAn operator after RPN\r\n```c++\r\nOPERATOR_SCHEMA(GenerateProposals)\r\n    .NumInputs(4)\r\n    .NumOutputs(2)\r\n    .SetDoc(R\"DOC(\r\nGenerate bounding box proposals for Faster RCNN. The propoasls are generated for\r\na list of images based on image score 'score', bounding box regression result\r\n'deltas' as well as predefined bounding box shapes 'anchors'. Greedy\r\nnon-maximum suppression is applied to generate the final bounding boxes.\r\n)DOC\")\r\n    .Arg(\"spatial_scale\", \"(float) spatial scale\")\r\n    .Arg(\"pre_nms_topN\", \"(int) RPN_PRE_NMS_TOP_N\")\r\n    .Arg(\"post_nms_topN\", \"(int) RPN_POST_NMS_TOP_N\")\r\n    .Arg(\"nms_thresh\", \"(float) RPN_NMS_THRESH\")\r\n    .Arg(\"min_size\", \"(float) RPN_MIN_SIZE\")\r\n    .Arg(\r\n        \"correct_transform_coords\",\r\n        \"bool (default false), Correct bounding box transform coordates,\"\r\n        \" see bbox_transform() in boxes.py \"\r\n        \"Set to true to match the detectron code, set to false for backward\"\r\n        \" compatibility\")\r\n    .Arg(\r\n        \"angle_bound_on\",\r\n        \"bool (default true). If set, for rotated boxes, angle is \"\r\n        \"normalized to be within [angle_bound_lo, angle_bound_hi].\")\r\n    .Arg(\r\n        \"angle_bound_lo\",\r\n        \"int (default -90 degrees). If set, for rotated boxes, angle is \"\r\n        \"normalized to be within [angle_bound_lo, angle_bound_hi].\")\r\n    .Arg(\r\n        \"angle_bound_hi\",\r\n        \"int (default 90 degrees). If set, for rotated boxes, angle is \"\r\n        \"normalized to be within [angle_bound_lo, angle_bound_hi].\")\r\n    .Arg(\r\n        \"clip_angle_thresh\",\r\n        \"float (default 1.0 degrees). For RRPN, clip almost horizontal boxes \"\r\n        \"within this threshold of tolerance for backward compatibility. \"\r\n        \"Set to negative value for no clipping.\")\r\n    .Input(0, \"scores\", \"Scores from conv layer, size (img_count, A, H, W)\")\r\n    .Input(\r\n        1,\r\n        \"bbox_deltas\",\r\n        \"Bounding box deltas from conv layer, \"\r\n        \"size (img_count, 4 * A, H, W)\")\r\n    .Input(\r\n        2,\r\n        \"im_info\",\r\n        \"Image info, size (img_count, 3), \"\r\n        \"format (height, width, scale)\")\r\n    .Input(3, \"anchors\", \"Bounding box anchors, size (A, 4)\")\r\n    .Output(\r\n        0,\r\n        \"rois\",\r\n        \"Proposals, size (n x 5), \"\r\n        \"format (image_index, x1, y1, x2, y2)\")\r\n    .Output(1, \"rois_probs\", \"scores of proposals, size (n)\");\r\n// For backward compatibility\r\nOPERATOR_SCHEMA(GenerateProposalsCPP).NumInputs(4).NumOutputs(2);\r\n```"}