{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231609034", "pull_request_review_id": 172606354, "id": 231609034, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYwOTAzNA==", "diff_hunk": "@@ -49,7 +49,73 @@ Tensor & cat_out(Tensor & result, TensorList tensors, int64_t dim) {\n   return at::_th_cat_out(result, tensors, dim);\n }\n \n+static bool sizes_match_except(IntList s1, IntList s2, int64_t dim_except) {\n+  if (s1.size() != s2.size()) {\n+    return false;\n+  }\n+  for (int64_t i = 0; i < s1.size(); ++i) {\n+    if (i != dim_except && s1[i] != s2[i]) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n+static Tensor cat_sparse(TensorList tensors, int64_t dim) {\n+  std::vector<Tensor> indices;\n+  std::vector<Tensor> values;\n+  int64_t sparse_dim = tensors[0].sparse_dim();\n+  int64_t dense_dim = tensors[0].dense_dim();\n+  AT_CHECK(dim < sparse_dim,\n+           \"Can't cat or stack tensors of sparse dim \", sparse_dim, \"along non-sparse dimension \", dim);\n+  IntList sizes = tensors[0].sizes();\n+  for (size_t i = 0; i < tensors.size(); ++i) {\n+    auto const &t = tensors[i];\n+    AT_CHECK(t.is_sparse(),\n+             \"Can't cat dense tensor at position \", i, \" with sparse tensor(s).\");\n+    AT_CHECK(t.sparse_dim() == sparse_dim && t.dense_dim() == dense_dim,\n+             \"Tensor at position \", i, \" has dimension: sparse \", t.sparse_dim(), \", dense \", t.dense_dim(),\n+             \". Can't cat with tensor of dimensions \", sparse_dim, \", \", dense_dim);\n+    AT_CHECK(sizes_match_except(sizes, t.sizes(), dim),\n+             \"Tensor at position \", i, \" of sizes \", t.sizes(), \" can't be concatenated with tensor of sizes \", sizes,\n+             \" along dimension \", dim);\n+    indices.push_back(t._indices());\n+    values.push_back(t._values());\n+  }\n+  Tensor idxs = native::cat(indices, 1);\n+  Tensor vals = native::cat(values, 0);\n+  \n+  // We now need to move the indices of each\n+  // input tensor up along `dim` by an appropriate amount.\n+  // E.g., if t1 has indices [[2,3,4],[5,6,7]], \n+  // and sizes [10, 7]\n+  // then torch.cat((t1,t1,t1),1) should have indices\n+  // [[2,3,4,2,3,4,2,3,4],[5,6,7,12,13,14,19,20,21]],\n+  // so we need to increase idxs[1][3:6] by 7 \n+  // and idxs[1][6:9] by 14.\n+  int64_t col = 0;\n+  int64_t cumulative_offset = 0;\n+  for (size_t i = 0; i < tensors.size(); ++i) {\n+    auto const &t = tensors[i];\n+    int64_t this_piece_size = t._nnz();\n+    // cumulative_offset is zero for the first piece, so\n+    // don't waste time doing this operation unless i > 0.\n+    if (i > 0) {\n+      idxs[dim].narrow(0, col, this_piece_size) += cumulative_offset;\n+    }\n+    cumulative_offset += t.size(dim);\n+    col += this_piece_size;\n+  }\n+  auto sizes_copy = sizes.vec();\n+  sizes_copy[dim] = cumulative_offset;", "path": "aten/src/ATen/native/TensorShape.cpp", "position": null, "original_position": 62, "commit_id": "0686a6a0c363cd8375953c7a488afc38272b4afa", "original_commit_id": "e63d2d1a499cab84f0b375f21a10e62093126be2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "same here wrt wrapping dimensions.", "created_at": "2018-11-07T17:47:01Z", "updated_at": "2018-11-23T15:54:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/13577#discussion_r231609034", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13577", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/231609034"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13577#discussion_r231609034"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13577"}}, "body_html": "<p>same here wrt wrapping dimensions.</p>", "body_text": "same here wrt wrapping dimensions."}