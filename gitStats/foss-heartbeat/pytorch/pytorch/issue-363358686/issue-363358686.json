{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12028", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12028/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12028/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12028/events", "html_url": "https://github.com/pytorch/pytorch/pull/12028", "id": 363358686, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3ODE4MDQ4", "number": 12028, "title": "fix segfault when grad to a hook fn is None", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-24T23:38:52Z", "updated_at": "2018-11-23T15:51:59Z", "closed_at": "2018-09-26T02:11:44Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12028", "html_url": "https://github.com/pytorch/pytorch/pull/12028", "diff_url": "https://github.com/pytorch/pytorch/pull/12028.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12028.patch"}, "body_html": "<ul>\n<li><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #11751.\">fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"360795052\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11751\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/11751/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/11751\">#11751</a> by checking if a grad is a Python None object before getting cdata from it</li>\n<li>behaviors:</li>\n</ul>\n<p>pre-fix</p>\n<pre><code>&gt;&gt;&gt; a = torch.randn(5, requires_grad=True)\n&gt;&gt;&gt; a_list = a.unbind()\n\n&gt;&gt;&gt; a0 = a_list[0]\n&gt;&gt;&gt; @a0.register_hook\n...:def hook(grad):\n...:    print(grad)\n\n&gt;&gt;&gt; a_list[0].backward()\ntensor(1.)\n\n&gt;&gt;&gt; print('a_list[0]', a_list[0].grad, a.grad)\n('a_list[0]', None, tensor([1., 0., 0., 0., 0.]))\n\n&gt;&gt;&gt; a_list[1].backward() # segfault\n</code></pre>\n<p>post-fix</p>\n<pre><code>&gt;&gt;&gt; a = torch.randn(5, requires_grad=True)\n&gt;&gt;&gt; a_list = a.unbind()\n\n&gt;&gt;&gt; a0 = a_list[0]\n&gt;&gt;&gt; @a0.register_hook\n... :def hook(grad):\n... :    print(grad)\n\n&gt;&gt;&gt; a_list[0].backward()\ntensor(1.)\n\n&gt;&gt;&gt; print(a_list[0].grad, a.grad)\n(None, tensor([1., 0., 0., 0., 0.]))\n\n&gt;&gt;&gt; a_list[1].backward()\nNone\n\n&gt;&gt;&gt; print(a_list[1].grad, a.grad)\n(None, tensor([1., 1., 0., 0., 0.]))\n</code></pre>", "body_text": "fixes #11751 by checking if a grad is a Python None object before getting cdata from it\nbehaviors:\n\npre-fix\n>>> a = torch.randn(5, requires_grad=True)\n>>> a_list = a.unbind()\n\n>>> a0 = a_list[0]\n>>> @a0.register_hook\n...:def hook(grad):\n...:    print(grad)\n\n>>> a_list[0].backward()\ntensor(1.)\n\n>>> print('a_list[0]', a_list[0].grad, a.grad)\n('a_list[0]', None, tensor([1., 0., 0., 0., 0.]))\n\n>>> a_list[1].backward() # segfault\n\npost-fix\n>>> a = torch.randn(5, requires_grad=True)\n>>> a_list = a.unbind()\n\n>>> a0 = a_list[0]\n>>> @a0.register_hook\n... :def hook(grad):\n... :    print(grad)\n\n>>> a_list[0].backward()\ntensor(1.)\n\n>>> print(a_list[0].grad, a.grad)\n(None, tensor([1., 0., 0., 0., 0.]))\n\n>>> a_list[1].backward()\nNone\n\n>>> print(a_list[1].grad, a.grad)\n(None, tensor([1., 1., 0., 0., 0.]))", "body": "- fixes https://github.com/pytorch/pytorch/issues/11751 by checking if a grad is a Python None object before getting cdata from it\r\n- behaviors:\r\n\r\npre-fix\r\n```\r\n>>> a = torch.randn(5, requires_grad=True)\r\n>>> a_list = a.unbind()\r\n\r\n>>> a0 = a_list[0]\r\n>>> @a0.register_hook\r\n...:def hook(grad):\r\n...:    print(grad)\r\n\r\n>>> a_list[0].backward()\r\ntensor(1.)\r\n\r\n>>> print('a_list[0]', a_list[0].grad, a.grad)\r\n('a_list[0]', None, tensor([1., 0., 0., 0., 0.]))\r\n\r\n>>> a_list[1].backward() # segfault\r\n```\r\n\r\npost-fix\r\n```\r\n>>> a = torch.randn(5, requires_grad=True)\r\n>>> a_list = a.unbind()\r\n\r\n>>> a0 = a_list[0]\r\n>>> @a0.register_hook\r\n... :def hook(grad):\r\n... :    print(grad)\r\n\r\n>>> a_list[0].backward()\r\ntensor(1.)\r\n\r\n>>> print(a_list[0].grad, a.grad)\r\n(None, tensor([1., 0., 0., 0., 0.]))\r\n\r\n>>> a_list[1].backward()\r\nNone\r\n\r\n>>> print(a_list[1].grad, a.grad)\r\n(None, tensor([1., 1., 0., 0., 0.]))\r\n```"}