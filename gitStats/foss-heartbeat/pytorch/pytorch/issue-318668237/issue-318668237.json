{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7072", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7072/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7072/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7072/events", "html_url": "https://github.com/pytorch/pytorch/issues/7072", "id": 318668237, "node_id": "MDU6SXNzdWUzMTg2NjgyMzc=", "number": 7072, "title": "JIT fails on GPU !=0", "user": {"login": "deepbrain", "id": 10003025, "node_id": "MDQ6VXNlcjEwMDAzMDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/10003025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deepbrain", "html_url": "https://github.com/deepbrain", "followers_url": "https://api.github.com/users/deepbrain/followers", "following_url": "https://api.github.com/users/deepbrain/following{/other_user}", "gists_url": "https://api.github.com/users/deepbrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/deepbrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deepbrain/subscriptions", "organizations_url": "https://api.github.com/users/deepbrain/orgs", "repos_url": "https://api.github.com/users/deepbrain/repos", "events_url": "https://api.github.com/users/deepbrain/events{/privacy}", "received_events_url": "https://api.github.com/users/deepbrain/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-28T20:58:04Z", "updated_at": "2018-04-30T02:39:45Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>Run the test case code below on a system with 2 or more GPUs and you will get this stack trace:</p>\n<p>Traceback (most recent call last):<br>\nFile \"testnet.py\", line 51, in <br>\nr = net(V)<br>\nRuntimeError: arguments are located on different GPUs at /home/tester/pytorch/aten/src/THC/generic/THCTensorMathPairwise.cu:250</p>\n<h2>Code example</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> jit\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> torch.optim <span class=\"pl-k\">as</span> optim<span class=\"pl-c1\">......</span>..\n\ntorch.backends.cudnn.benchmark <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\n<span class=\"pl-en\">@torch.jit.compile</span>(<span class=\"pl-v\">nderivs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">TestNet</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(TestNet, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.net1 <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">200</span>)\n        <span class=\"pl-c1\">self</span>.net2 <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">200</span>, <span class=\"pl-c1\">1</span>)\n        <span class=\"pl-c1\">self</span>.bn <span class=\"pl-k\">=</span> nn.BatchNorm1d(<span class=\"pl-c1\">200</span>)\n        <span class=\"pl-c1\">self</span>.sigmoid <span class=\"pl-k\">=</span> nn.Sigmoid()\n        <span class=\"pl-c1\">self</span>.ReLU <span class=\"pl-k\">=</span> nn.ReLU(<span class=\"pl-v\">inplace</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n        <span class=\"pl-c1\">self</span>.drop <span class=\"pl-k\">=</span> nn.Dropout(<span class=\"pl-c1\">0.5</span>)\n<span class=\"pl-c1\">...............</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">V</span>):\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>        return self.sigmoid(self.net2(self.drop(self.ReLU(self.bn(self.net1(V)))))).squeeze().</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.sigmoid(<span class=\"pl-c1\">self</span>.net2(<span class=\"pl-c1\">self</span>.ReLU(<span class=\"pl-c1\">self</span>.bn(<span class=\"pl-c1\">self</span>.net1(V))))).squeeze().\n\n\nuse_cuda <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n<span class=\"pl-c1\">GPU</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\nnet <span class=\"pl-k\">=</span> TestNet()\ncriterion <span class=\"pl-k\">=</span> nn.BCELoss()\n<span class=\"pl-k\">if</span> use_cuda:\n    net.cuda(<span class=\"pl-c1\">GPU</span>)\n    criterion.cuda(<span class=\"pl-c1\">GPU</span>)\n    V <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">100</span>)).cuda(<span class=\"pl-c1\">GPU</span>)\n    label <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">100</span>)).cuda(<span class=\"pl-c1\">GPU</span>)\n<span class=\"pl-k\">else</span>:\n    V <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">100</span>))\n    label <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">100</span>))\n\n\noptim_betas <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">0.9</span>, <span class=\"pl-c1\">0.999</span>)\noptimizer <span class=\"pl-k\">=</span> optim.Adam(<span class=\"pl-c1\">filter</span>(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">p</span>: p.requires_grad, net.parameters()), <span class=\"pl-v\">lr</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.01</span>, <span class=\"pl-v\">betas</span><span class=\"pl-k\">=</span>optim_betas)\ncriterion <span class=\"pl-k\">=</span> nn.BCELoss()\n\nnet.train()\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1000000</span>):\n    net.zero_grad()\n    r <span class=\"pl-k\">=</span> net(V)\n    err <span class=\"pl-k\">=</span> criterion(r, label)\n    err.backward()<span class=\"pl-c1\">...</span>\n</pre></div>", "body_text": "Issue description\nRun the test case code below on a system with 2 or more GPUs and you will get this stack trace:\nTraceback (most recent call last):\nFile \"testnet.py\", line 51, in \nr = net(V)\nRuntimeError: arguments are located on different GPUs at /home/tester/pytorch/aten/src/THC/generic/THCTensorMathPairwise.cu:250\nCode example\nimport torch\nfrom torch import jit\nimport torch.nn as nn\nfrom torch.autograd import Variable\nimport torch.optim as optim........\n\ntorch.backends.cudnn.benchmark = True\n\n@torch.jit.compile(nderivs=1)\nclass TestNet(nn.Module):\n    def __init__(self):\n        super(TestNet, self).__init__()\n        self.net1 = nn.Linear(100, 200)\n        self.net2 = nn.Linear(200, 1)\n        self.bn = nn.BatchNorm1d(200)\n        self.sigmoid = nn.Sigmoid()\n        self.ReLU = nn.ReLU(inplace=False)\n        self.drop = nn.Dropout(0.5)\n...............\n    def forward(self, V):\n#        return self.sigmoid(self.net2(self.drop(self.ReLU(self.bn(self.net1(V)))))).squeeze().\n        return self.sigmoid(self.net2(self.ReLU(self.bn(self.net1(V))))).squeeze().\n\n\nuse_cuda = True\nGPU = 1\nnet = TestNet()\ncriterion = nn.BCELoss()\nif use_cuda:\n    net.cuda(GPU)\n    criterion.cuda(GPU)\n    V = Variable(torch.randn(100, 100)).cuda(GPU)\n    label = Variable(torch.randn(100)).cuda(GPU)\nelse:\n    V = Variable(torch.randn(100, 100))\n    label = Variable(torch.randn(100))\n\n\noptim_betas = (0.9, 0.999)\noptimizer = optim.Adam(filter(lambda p: p.requires_grad, net.parameters()), lr=0.01, betas=optim_betas)\ncriterion = nn.BCELoss()\n\nnet.train()\nfor i in range(0,1000000):\n    net.zero_grad()\n    r = net(V)\n    err = criterion(r, label)\n    err.backward()...", "body": "## Issue description\r\n\r\nRun the test case code below on a system with 2 or more GPUs and you will get this stack trace:\r\n\r\nTraceback (most recent call last):\r\n  File \"testnet.py\", line 51, in <module>\r\n    r = net(V)\r\nRuntimeError: arguments are located on different GPUs at /home/tester/pytorch/aten/src/THC/generic/THCTensorMathPairwise.cu:250\r\n\r\n## Code example\r\n```python\r\nimport torch\r\nfrom torch import jit\r\nimport torch.nn as nn\r\nfrom torch.autograd import Variable\r\nimport torch.optim as optim........\r\n\r\ntorch.backends.cudnn.benchmark = True\r\n\r\n@torch.jit.compile(nderivs=1)\r\nclass TestNet(nn.Module):\r\n    def __init__(self):\r\n        super(TestNet, self).__init__()\r\n        self.net1 = nn.Linear(100, 200)\r\n        self.net2 = nn.Linear(200, 1)\r\n        self.bn = nn.BatchNorm1d(200)\r\n        self.sigmoid = nn.Sigmoid()\r\n        self.ReLU = nn.ReLU(inplace=False)\r\n        self.drop = nn.Dropout(0.5)\r\n...............\r\n    def forward(self, V):\r\n#        return self.sigmoid(self.net2(self.drop(self.ReLU(self.bn(self.net1(V)))))).squeeze().\r\n        return self.sigmoid(self.net2(self.ReLU(self.bn(self.net1(V))))).squeeze().\r\n\r\n\r\nuse_cuda = True\r\nGPU = 1\r\nnet = TestNet()\r\ncriterion = nn.BCELoss()\r\nif use_cuda:\r\n    net.cuda(GPU)\r\n    criterion.cuda(GPU)\r\n    V = Variable(torch.randn(100, 100)).cuda(GPU)\r\n    label = Variable(torch.randn(100)).cuda(GPU)\r\nelse:\r\n    V = Variable(torch.randn(100, 100))\r\n    label = Variable(torch.randn(100))\r\n\r\n\r\noptim_betas = (0.9, 0.999)\r\noptimizer = optim.Adam(filter(lambda p: p.requires_grad, net.parameters()), lr=0.01, betas=optim_betas)\r\ncriterion = nn.BCELoss()\r\n\r\nnet.train()\r\nfor i in range(0,1000000):\r\n    net.zero_grad()\r\n    r = net(V)\r\n    err = criterion(r, label)\r\n    err.backward()...\r\n\r\n```\r\n"}