{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/349926313", "html_url": "https://github.com/pytorch/pytorch/issues/3883#issuecomment-349926313", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3883", "id": 349926313, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTkyNjMxMw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-07T10:26:24Z", "updated_at": "2017-12-07T10:26:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the information. We'd really like to fix this bug, and so there are a few things that would help us out a lot (in order of difficulty):</p>\n<ol>\n<li>\n<p>Can you run your training process with gdb attached with a <code>catch throw</code> breakpoint, so that we can get a backtrace when the assertion fails? Also, if you can go one frame up and print the name of the function (run <code>p fn.name()</code> in gdb) that would also be helpful. We basically want to know if it's either a C++ function or a Python function.</p>\n</li>\n<li>\n<p>As soon as you can publish your latest layers, uploading a script that reproduces (even if it takes a while to reproduce); we would be happy to run the script to try to reproduce, which would be very helpful for us.</p>\n</li>\n</ol>\n<p>We'd love a bisection, but given that it can sometimes take 18hrs+ to repro, it doesn't sound like that would be easy to do.</p>", "body_text": "Thanks for the information. We'd really like to fix this bug, and so there are a few things that would help us out a lot (in order of difficulty):\n\n\nCan you run your training process with gdb attached with a catch throw breakpoint, so that we can get a backtrace when the assertion fails? Also, if you can go one frame up and print the name of the function (run p fn.name() in gdb) that would also be helpful. We basically want to know if it's either a C++ function or a Python function.\n\n\nAs soon as you can publish your latest layers, uploading a script that reproduces (even if it takes a while to reproduce); we would be happy to run the script to try to reproduce, which would be very helpful for us.\n\n\nWe'd love a bisection, but given that it can sometimes take 18hrs+ to repro, it doesn't sound like that would be easy to do.", "body": "Thanks for the information. We'd really like to fix this bug, and so there are a few things that would help us out a lot (in order of difficulty):\r\n\r\n1. Can you run your training process with gdb attached with a `catch throw` breakpoint, so that we can get a backtrace when the assertion fails? Also, if you can go one frame up and print the name of the function (run `p fn.name()` in gdb) that would also be helpful. We basically want to know if it's either a C++ function or a Python function.\r\n\r\n2. As soon as you can publish your latest layers, uploading a script that reproduces (even if it takes a while to reproduce); we would be happy to run the script to try to reproduce, which would be very helpful for us.\r\n\r\nWe'd love a bisection, but given that it can sometimes take 18hrs+ to repro, it doesn't sound like that would be easy to do."}