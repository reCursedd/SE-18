{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168356612", "pull_request_review_id": 96710074, "id": 168356612, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODM1NjYxMg==", "diff_hunk": "@@ -131,7 +131,6 @@ __global__ void cunn_MultiLabelMarginCriterion_updateGradInput_kernel(Dtype *gra\n         }\n       }\n     }\n-    __syncthreads();", "path": "aten/src/THCUNN/MultiLabelMarginCriterion.cu", "position": 4, "original_position": 4, "commit_id": "c6493d51b54086d6f2f53a2d2352b88f1b71af10", "original_commit_id": "c6493d51b54086d6f2f53a2d2352b88f1b71af10", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I am very sorry, but I think this is actually needed. Since this `reduceBlock` is in a loop, this prevents non-0 threads override shared memory in the next loop before thread 0 reads from it. Since there are no other `__syncthreads` in this loop, we can only rely on this one. So in fact, the comments I added in my PR about \"no need to call __syncthreads` before reduceBlock\" etc. are misleading. We should fix those as well.", "created_at": "2018-02-15T00:47:17Z", "updated_at": "2018-11-23T15:39:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/5242#discussion_r168356612", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5242", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/168356612"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5242#discussion_r168356612"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5242"}}, "body_html": "<p>I am very sorry, but I think this is actually needed. Since this <code>reduceBlock</code> is in a loop, this prevents non-0 threads override shared memory in the next loop before thread 0 reads from it. Since there are no other <code>__syncthreads</code> in this loop, we can only rely on this one. So in fact, the comments I added in my PR about \"no need to call __syncthreads` before reduceBlock\" etc. are misleading. We should fix those as well.</p>", "body_text": "I am very sorry, but I think this is actually needed. Since this reduceBlock is in a loop, this prevents non-0 threads override shared memory in the next loop before thread 0 reads from it. Since there are no other __syncthreads in this loop, we can only rely on this one. So in fact, the comments I added in my PR about \"no need to call __syncthreads` before reduceBlock\" etc. are misleading. We should fix those as well."}