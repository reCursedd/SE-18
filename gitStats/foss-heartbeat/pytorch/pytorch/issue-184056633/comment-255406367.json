{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/255406367", "html_url": "https://github.com/pytorch/pytorch/issues/143#issuecomment-255406367", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/143", "id": 255406367, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQwNjM2Nw==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-21T15:21:14Z", "updated_at": "2016-10-21T15:21:14Z", "author_association": "MEMBER", "body_html": "<p>Yeah, one way to get around this is to write a small class like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">StatelessRNN</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">rnn</span>):\n        <span class=\"pl-c1\">self</span>.rnn <span class=\"pl-k\">=</span> rnn\n        <span class=\"pl-c1\">self</span>.reset()\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">reset</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> initialize hidden state here</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getattr__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">name</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">getattr</span>(<span class=\"pl-c1\">self</span>.rnn, name)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__call__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>):\n        output, hidden <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.rnn(<span class=\"pl-c1\">input</span>, <span class=\"pl-c1\">self</span>.h)\n        <span class=\"pl-c1\">self</span>.h <span class=\"pl-k\">=</span> hidden\n        <span class=\"pl-k\">return</span> output</pre></div>", "body_text": "Yeah, one way to get around this is to write a small class like this:\nclass StatelessRNN(object):\n    def __init__(self, rnn):\n        self.rnn = rnn\n        self.reset()\n\n    def reset(self):\n        # initialize hidden state here\n\n    def __getattr__(self, name):\n        return getattr(self.rnn, name)\n\n    def __call__(self, input):\n        output, hidden = self.rnn(input, self.h)\n        self.h = hidden\n        return output", "body": "Yeah, one way to get around this is to write a small class like this:\n\n``` python\nclass StatelessRNN(object):\n    def __init__(self, rnn):\n        self.rnn = rnn\n        self.reset()\n\n    def reset(self):\n        # initialize hidden state here\n\n    def __getattr__(self, name):\n        return getattr(self.rnn, name)\n\n    def __call__(self, input):\n        output, hidden = self.rnn(input, self.h)\n        self.h = hidden\n        return output\n```\n"}