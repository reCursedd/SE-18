{"url": "https://api.github.com/repos/pytorch/pytorch/issues/143", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/143/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/143/events", "html_url": "https://github.com/pytorch/pytorch/issues/143", "id": 184056633, "node_id": "MDU6SXNzdWUxODQwNTY2MzM=", "number": 143, "title": "automatically assign attributes that are variable as parameters?", "user": {"login": "glample", "id": 8885556, "node_id": "MDQ6VXNlcjg4ODU1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8885556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glample", "html_url": "https://github.com/glample", "followers_url": "https://api.github.com/users/glample/followers", "following_url": "https://api.github.com/users/glample/following{/other_user}", "gists_url": "https://api.github.com/users/glample/gists{/gist_id}", "starred_url": "https://api.github.com/users/glample/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glample/subscriptions", "organizations_url": "https://api.github.com/users/glample/orgs", "repos_url": "https://api.github.com/users/glample/repos", "events_url": "https://api.github.com/users/glample/events{/privacy}", "received_events_url": "https://api.github.com/users/glample/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-10-19T19:47:11Z", "updated_at": "2016-10-28T15:32:08Z", "closed_at": "2016-10-28T15:32:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Currently, when a variable is assigned to an attribute, the container will consider that this variable is a parameter of the model.</p>\n<p><a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L95\">https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L95</a></p>\n<p>This example will not work, because <code>self.h</code> is considered as a parameter, although it is an intermediate state:</p>\n<pre><code>class RNN(nn.Container):\n\n    def __init__(self, input_dim, hidden_dim):\n        super(RNN, self).__init__(\n            i2h=nn.Linear(input_dim, hidden_dim),\n            h2h=nn.Linear(hidden_dim, hidden_dim)\n        )\n        self.input_dim = input_dim\n        self.hidden_dim = hidden_dim\n        self.reset()\n\n    def forward(self, x):\n        last_h = self.h\n        if self.step == 0:\n            last_h = last_h.view(1, self.hidden_dim).expand(x.size(0), self.hidden_dim)\n        self.h = nn.Sigmoid()(self.i2h(x) + self.h2h(last_h))\n        self.step += 1\n        return self.h\n\n    def reset(self):\n        self.step = 0\n        self.h = Variable(torch.zeros(self.hidden_dim), requires_grad=False)\n\na = RNN(3, 4)\na.forward(Variable(torch.FloatTensor(2, 3).zero_()))\n</code></pre>\n<p>Maybe it would be safer to let the user explicitely say what is a parameter or not, with some add_parameter / remove_parameter methods?</p>", "body_text": "Currently, when a variable is assigned to an attribute, the container will consider that this variable is a parameter of the model.\nhttps://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L95\nThis example will not work, because self.h is considered as a parameter, although it is an intermediate state:\nclass RNN(nn.Container):\n\n    def __init__(self, input_dim, hidden_dim):\n        super(RNN, self).__init__(\n            i2h=nn.Linear(input_dim, hidden_dim),\n            h2h=nn.Linear(hidden_dim, hidden_dim)\n        )\n        self.input_dim = input_dim\n        self.hidden_dim = hidden_dim\n        self.reset()\n\n    def forward(self, x):\n        last_h = self.h\n        if self.step == 0:\n            last_h = last_h.view(1, self.hidden_dim).expand(x.size(0), self.hidden_dim)\n        self.h = nn.Sigmoid()(self.i2h(x) + self.h2h(last_h))\n        self.step += 1\n        return self.h\n\n    def reset(self):\n        self.step = 0\n        self.h = Variable(torch.zeros(self.hidden_dim), requires_grad=False)\n\na = RNN(3, 4)\na.forward(Variable(torch.FloatTensor(2, 3).zero_()))\n\nMaybe it would be safer to let the user explicitely say what is a parameter or not, with some add_parameter / remove_parameter methods?", "body": "Currently, when a variable is assigned to an attribute, the container will consider that this variable is a parameter of the model.\n\nhttps://github.com/pytorch/pytorch/blob/master/torch/nn/modules/module.py#L95\n\nThis example will not work, because `self.h` is considered as a parameter, although it is an intermediate state:\n\n```\nclass RNN(nn.Container):\n\n    def __init__(self, input_dim, hidden_dim):\n        super(RNN, self).__init__(\n            i2h=nn.Linear(input_dim, hidden_dim),\n            h2h=nn.Linear(hidden_dim, hidden_dim)\n        )\n        self.input_dim = input_dim\n        self.hidden_dim = hidden_dim\n        self.reset()\n\n    def forward(self, x):\n        last_h = self.h\n        if self.step == 0:\n            last_h = last_h.view(1, self.hidden_dim).expand(x.size(0), self.hidden_dim)\n        self.h = nn.Sigmoid()(self.i2h(x) + self.h2h(last_h))\n        self.step += 1\n        return self.h\n\n    def reset(self):\n        self.step = 0\n        self.h = Variable(torch.zeros(self.hidden_dim), requires_grad=False)\n\na = RNN(3, 4)\na.forward(Variable(torch.FloatTensor(2, 3).zero_()))\n```\n\nMaybe it would be safer to let the user explicitely say what is a parameter or not, with some add_parameter / remove_parameter methods?\n"}