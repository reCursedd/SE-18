{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/380392818", "html_url": "https://github.com/pytorch/pytorch/issues/6479#issuecomment-380392818", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6479", "id": 380392818, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDM5MjgxOA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-11T09:44:15Z", "updated_at": "2018-04-12T09:32:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thank you for your feedback, I have updated the code to use <code>numpy</code> semantics.</p>\n<p>So the summary in terms of semantics:</p>\n<ul>\n<li>All NumPy parameters with NumPy-compatible defaults (save the usual axis-&gt;dims naming).</li>\n<li>NumPy-style semantics for the \"new\" axis.</li>\n<li>Returns a writable view (which is handy for .backward). NumPy currently returns a read-only view, but that is for the migration from copy to writable view. NumPy documents the intention to do a writable view.</li>\n</ul>\n<p>From my point of view, I think I could send PR with <a href=\"https://github.com/t-vi/pytorch/tree/diagonal_with_dim\">branch</a> in its current state. What do you think?</p>", "body_text": "Thank you for your feedback, I have updated the code to use numpy semantics.\nSo the summary in terms of semantics:\n\nAll NumPy parameters with NumPy-compatible defaults (save the usual axis->dims naming).\nNumPy-style semantics for the \"new\" axis.\nReturns a writable view (which is handy for .backward). NumPy currently returns a read-only view, but that is for the migration from copy to writable view. NumPy documents the intention to do a writable view.\n\nFrom my point of view, I think I could send PR with branch in its current state. What do you think?", "body": "Thank you for your feedback, I have updated the code to use `numpy` semantics.\r\n\r\nSo the summary in terms of semantics:\r\n- All NumPy parameters with NumPy-compatible defaults (save the usual axis->dims naming).\r\n- NumPy-style semantics for the \"new\" axis.\r\n- Returns a writable view (which is handy for .backward). NumPy currently returns a read-only view, but that is for the migration from copy to writable view. NumPy documents the intention to do a writable view.\r\n\r\nFrom my point of view, I think I could send PR with [branch](https://github.com/t-vi/pytorch/tree/diagonal_with_dim) in its current state. What do you think?"}