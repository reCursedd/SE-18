{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166345779", "pull_request_review_id": 94304114, "id": 166345779, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM0NTc3OQ==", "diff_hunk": "@@ -0,0 +1,444 @@\n+#include \"torch/csrc/jit/script/compiler.h\"\n+#include \"torch/csrc/jit/script/parser.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+\n+namespace torch {\n+namespace jit {\n+namespace script {\n+\n+namespace {\n+\n+// record of defined function\n+// Graph + metadata\n+struct FunctionDefinition {\n+  explicit FunctionDefinition(Def tree_)\n+      : tree(new Def(tree_)), graph(new Graph()) {}\n+\n+  explicit FunctionDefinition(std::unique_ptr<Graph> graph_)\n+      : tree(nullptr), graph(std::move(graph_)) {}\n+\n+  bool isExtern() const {\n+    return tree == nullptr;\n+  }\n+  std::unique_ptr<Def> tree;\n+  std::unique_ptr<Graph> graph;\n+};\n+\n+} // namespace\n+\n+using FunctionTable = std::unordered_map<std::string, FunctionDefinition>;\n+using ValueTable = std::unordered_map<std::string, Value*>;\n+\n+struct DefCompiler {\n+  DefCompiler(FunctionDefinition& def, FunctionTable& function_table)\n+      : def(def),\n+        function_table(function_table) {}\n+\n+  // populate def->graph\n+  std::vector<Value*> run() {\n+    auto& tree = *def.tree;\n+    for (auto input : tree.params()) {\n+      auto& name = input.ident().name();\n+      map(name, def.graph->addInput(name));\n+    }\n+    emitStatements(tree.statements());\n+\n+    std::vector<Value*> output_values{};\n+    for (auto output : tree.returns()) {\n+        auto* value = lookup(output.ident());\n+        def.graph->registerOutput(value);\n+        output_values.push_back(value);\n+    }\n+    return output_values;\n+  }\n+  void emitStatements(const ListView<TreeRef>& statements) {\n+    for (auto stmt : statements) {\n+      switch (stmt->kind()) {\n+        case TK_IF:\n+          emitIf(If(stmt));\n+          break;\n+        case TK_WHILE:\n+          emitWhile(While(stmt));\n+          break;\n+        case TK_ASSIGN:\n+          emitAssignment(Assign(stmt));\n+          break;\n+        case TK_GLOBAL:\n+          for (auto ident : stmt->trees()) {\n+            const auto& name = Ident(ident).name();\n+            map(name, def.graph->addInput(name));\n+          }\n+          break;\n+        default:\n+          emitExpressionStatement(stmt);\n+          break;\n+      }\n+    }\n+  }\n+  void emitIf(const If& stmt) {\n+      // TODO: add support for control flow ops\n+      throw ErrorReport(stmt)\n+          << \"Control flow is not supported yet.\";\n+  }\n+\n+  void emitWhile(const While& stmt) {\n+      // TODO: add support for control flow ops\n+      throw ErrorReport(stmt)\n+          << \"Control flow is not supported yet.\";\n+  }\n+\n+  void emitExpressionStatement(TreeRef stmt) {\n+    // expression with no used outputs\n+    emit(stmt);\n+  }\n+\n+  std::vector<Value*> emitAssignment(const Assign& stmt) {\n+    std::vector<Value*> outputs{stmt.lhs().size()};\n+    if (stmt.reduction() != '=') {\n+      if (stmt.lhs().size() != 1) {\n+        throw ErrorReport(stmt)\n+            << \"reductions are only allow when there is a single variable \"\n+            << \"on the left-hand side.\";\n+      }\n+      auto lhs = stmt.lhs()[0];\n+      auto expr =\n+          Compound::create(stmt.reduction(), stmt.range(), {lhs, stmt.rhs()});\n+      outputs = emit(expr, 1);\n+    } else {\n+      outputs = emit(stmt.rhs(), stmt.lhs().size());\n+    }\n+    int i = 0;\n+    for (auto ident : stmt.lhs()) {\n+      if (ident->kind() == TK_IDENT)\n+        map(Ident(ident).name(), outputs.at(i));\n+      i++;\n+    }\n+    return outputs;\n+  }\n+\n+  void map(const std::string& name, Value* value) {\n+    value_table[name] = value;\n+  }\n+\n+  Value* lookup(const Ident& ident) {\n+    if (value_table.count(ident.name()) == 0)\n+      throw ErrorReport(ident) << \"undefined value \" << ident.name();\n+    return value_table[ident.name()];\n+  }\n+\n+  NodeKind getKind(int kind, int ninputs) {\n+    switch (kind) {\n+      case '+':\n+        return kAdd;\n+      case '-':\n+        if (ninputs == 1)\n+          return kneg;\n+        else\n+          return kSub;\n+      case '*':\n+        return kMul;\n+      case '/':\n+        return kDiv;\n+      case TK_NE:\n+        return kne;\n+      case TK_EQ:\n+        return keq;\n+      case '<':\n+        return klt;\n+      case '>':\n+        return kgt;\n+      case TK_LE:\n+        return kle;\n+      case TK_GE:\n+        return kge;\n+      case TK_AND:\n+        return k__and__;\n+      case TK_OR:\n+        return k__or__;\n+      case TK_NOT:\n+        return k__not__;\n+      default:\n+        throw std::runtime_error(\"unknown kind \" + std::to_string(kind));\n+    }\n+  }\n+\n+  Value* getValue(const TreeRef& tree) {\n+    switch (tree->kind()) {\n+      case TK_IDENT: {\n+        return lookup(Ident(tree));\n+      } break;\n+      case '.': {\n+        throw ErrorReport(tree) << \"Not supported yet: \" << tree;\n+      } break;\n+      default: {\n+        const auto outputs = emit(tree, 1);\n+        return outputs[0];\n+      } break;\n+    }\n+  }\n+\n+  template <typename Trees>\n+  std::vector<Value*> getValues(const Trees& trees) {\n+    std::vector<Value*> values;\n+    for (const auto& tree : trees) {\n+      values.push_back(getValue(tree));\n+    }\n+    return values;\n+  }\n+\n+  // emit a function call by inlining the function's Graph into our\n+  // Graph\n+  std::vector<Value*> emitFunctionCall(Apply& apply, const size_t output_size) {\n+    auto& fn = function_table.at(apply.name().name());\n+    std::vector<Value*> inputs = getValues(apply.inputs());\n+\n+    std::unordered_map<Value*, Value*> value_table;\n+    auto value_map = [&](Value * v) {\n+        return value_table.at(v);\n+    };\n+    for (size_t i = 0; i < inputs.size(); ++i) {\n+        value_table[fn.graph->inputs()[i]] = inputs[i];\n+    }\n+    for (auto* node : fn.graph->nodes()) {\n+        auto* new_node = def.graph->appendNode(def.graph->createClone(node, value_map));\n+        for (size_t i = 0; i < node->outputs().size(); ++i) {\n+            value_table[node->outputs()[i]] = new_node->outputs()[i];\n+            new_node->outputs()[i]->copyMetadata(node->outputs()[i]);\n+        }\n+    }\n+\n+    std::vector<Value*> outputs{};\n+    for(auto* output : fn.graph->outputs()) {\n+        outputs.push_back(value_map(output));\n+    }\n+    return outputs;\n+    // TODO: Add support for function call\n+  }\n+\n+  void expectOutputs(\n+      const TreeRef& tree,\n+      const size_t expected_size,\n+      const size_t size) {\n+    if (expected_size != 0 && expected_size != size) {\n+      throw ErrorReport(tree)\n+          << \"expected operator to produce \" << expected_size\n+          << \" outputs but it produced \" << size;\n+    }\n+  }\n+\n+  // This will _always_ compute something, unlike 'getValue' which simply\n+  // returns an already computed reference if possible.\n+  std::vector<Value*> emit(const TreeRef& tree, const size_t output_size = 0) {\n+    switch (tree->kind()) {\n+      case TK_IDENT: {\n+        return {getValue(tree)};\n+      } break;\n+      case TK_NE:\n+      case TK_EQ:\n+      case '<':\n+      case '>':\n+      case TK_LE:\n+      case TK_GE:\n+      case '-':\n+      case '*':\n+      case '/':\n+      case '+':\n+      case TK_AND:\n+      case TK_OR:\n+      case TK_NOT: {\n+        expectOutputs(tree, output_size, 1);\n+        const auto& inputs = tree->trees();\n+        auto kind = getKind(tree->kind(), inputs.size());\n+        return emitNode(kind, getValues(inputs), {}, output_size);\n+      } break;\n+      case TK_APPLY: {\n+        auto apply = Apply(tree);\n+        if (function_table.count(apply.name().name()) > 0) {\n+          return emitFunctionCall(apply, output_size);\n+        } else {\n+          const auto& inputs = getValues(apply.inputs());\n+          NodeKind kind{apply.name().name()};\n+\n+          std::unordered_map<std::string, TreeRef> attributes{};\n+          for (const auto& attr : apply.attributes()) {\n+              attributes[attr.name().name()] = attr.value();\n+          }\n+          return emitNode(kind, inputs, attributes, output_size);\n+        }\n+      } break;\n+      case TK_CAST: {\n+        const auto cast = Cast(tree);\n+        return emitCast(cast.input(),\n+                        cast.type());\n+      } break;\n+      case TK_CONST: {\n+        return emitConst(tree->tree(0)->doubleValue(),\n+                         tree->tree(1)->stringValue());\n+      } break;\n+      case TK_SLICE: {\n+        const auto slice = Slice(tree);\n+        return emitSlice(slice.range(),\n+                         {slice.value(), slice.startOr(0), slice.endOr(-1)},\n+                         output_size);\n+      } break;\n+      case TK_GATHER: {\n+        const auto gather = Gather(tree);\n+        return emitGather(gather.range(),\n+                          {gather.value(), gather.indices()},\n+                          output_size);\n+      } break;\n+      case '.':\n+          // TODO: add support for \".\"\n+      case TK_IF_EXPR:\n+        // TODO: add support for conditional\n+      default:\n+        throw ErrorReport(tree) << \"NYI: \" << tree;\n+        break;\n+    }\n+  }\n+\n+  std::vector<Value*> emitCast(const TreeRef& input, const int type) {\n+      // TODO: add support for conditional\n+      return {};\n+  }\n+\n+  std::vector<Value*> emitConst(const double val, const std::string& type) {\n+      if (type == \"f\") {\n+          return {createConstant(at::CPU(at::kFloat).scalarTensor(val))};\n+      } else if (type == \"LL\") {\n+          return {createConstant(at::CPU(at::kLong).scalarTensor(val))};\n+      } else if (type == \"b\") {\n+          return {createConstant(at::CPU(at::kByte).scalarTensor(val))};\n+      } else if (type == \"i\") {\n+          return {createConstant(at::CPU(at::kInt).scalarTensor(val))};\n+      } else {\n+        throw std::runtime_error(\"unknown const type \" + type);\n+      }\n+  }\n+\n+  std::vector<Value*> emitNode(NodeKind kind,\n+                               const std::vector<Value*> inputs,\n+                               const std::unordered_map<std::string, TreeRef>& attributes,\n+                               const size_t output_size) {\n+      Node * n = def.graph->appendNode(def.graph->create(kind, output_size));\n+      for (auto* input_value : inputs) {\n+          n->addInput(input_value);\n+      }\n+      for (const auto& iter : attributes) {\n+          const auto& name = Symbol(iter.first);\n+          const auto& value = iter.second;\n+          // TODO: handle non-float attributes\n+          switch (value->kind()) {\n+          case TK_CONST: {\n+              auto v = value->tree(0)->doubleValue();\n+              auto type = value->tree(1)->stringValue();\n+              if (type == \"f\") {\n+                  n->f_(name, v);\n+              } else {\n+                  n->i_(name, v);\n+              }\n+          } break;\n+          case TK_LIST:\n+              if (value->trees().size()) {\n+                  std::vector<double> values{};\n+                  for (const auto& tree : value->trees()) {\n+                      values.push_back(tree->tree(0)->doubleValue());\n+                  }\n+                  if (value->trees()[0]->tree(1)->stringValue() == \"f\") {\n+                      n->fs_(name, std::move(values));\n+                  } else {\n+                      n->is_(name, std::vector<int64_t>(values.begin(), values.end()));\n+                  }\n+              }\n+              break;\n+          }\n+      }\n+      return n->outputs();\n+  }\n+\n+  // Desugars slice syntactic sugar tensor[begin:end] -> tensor.slice(begin, end).\n+  std::vector<Value*> emitSlice(const SourceRange& range,\n+                                TreeList&& inputs,\n+                                const size_t output_size) {\n+    const auto applyInputs =\n+        Compound::create(TK_LIST, range, std::move(inputs));\n+    const auto applyAttributes = Compound::create(TK_LIST, range, {});\n+\n+    return emitNode(Symbol(\"slice\"), getValues(applyInputs->trees()), {}, output_size);\n+  }\n+\n+  // Desugars gather syntactic sugar tensor[indices] -> tensor.gather(indices).\n+  std::vector<Value*> emitGather(const SourceRange& range,\n+                                TreeList&& inputs,\n+                                const size_t output_size) {\n+    const auto applyInputs =\n+        Compound::create(TK_LIST, range, std::move(inputs));\n+    const auto applyAttributes = Compound::create(TK_LIST, range, {});\n+    return emitNode(Symbol(\"gather\"), getValues(applyInputs->trees()), {}, output_size);\n+  }\n+\n+  FunctionDefinition& def; // the def being constructed\n+  FunctionTable& function_table;\n+  ValueTable value_table;\n+\n+private:\n+  Value* createConstant(const at::Tensor& val) {\n+    return def.graph->appendNode(def.graph->createConstant(val))->output();\n+  }\n+};\n+\n+struct CompilationUnitImpl {\n+  void defineFunction(const Def& def) {\n+    const auto& name = def.name().name();\n+\n+    if (functions.count(name) > 0) {\n+      throw ErrorReport(def) << name << \" already defined.\";\n+    }\n+\n+    auto inserted = functions.emplace(name, FunctionDefinition{def});\n+    DefCompiler compiler(inserted.first->second, functions);\n+    compiler.run();", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 400, "commit_id": "cab32638004845e223cd9bcce868632d65f90c63", "original_commit_id": "e973255c0d0d0bdcd7c0435c8b1f8da9890613d8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Since we're using `DefCompiler` as a very short lived struct only to avoid passing around a few arguments, I'd consider calling it e.g. `struct to_ir { ... }`, and then put the body of `run()` in its constructor. Then, you could do `to_ir(it->second, functions)`. It looks like a function, but will really create a temporary object and delete it immediately once it's constructed.", "created_at": "2018-02-06T15:48:20Z", "updated_at": "2018-11-23T15:39:09Z", "html_url": "https://github.com/pytorch/pytorch/pull/5074#discussion_r166345779", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5074", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166345779"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5074#discussion_r166345779"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5074"}}, "body_html": "<p>Since we're using <code>DefCompiler</code> as a very short lived struct only to avoid passing around a few arguments, I'd consider calling it e.g. <code>struct to_ir { ... }</code>, and then put the body of <code>run()</code> in its constructor. Then, you could do <code>to_ir(it-&gt;second, functions)</code>. It looks like a function, but will really create a temporary object and delete it immediately once it's constructed.</p>", "body_text": "Since we're using DefCompiler as a very short lived struct only to avoid passing around a few arguments, I'd consider calling it e.g. struct to_ir { ... }, and then put the body of run() in its constructor. Then, you could do to_ir(it->second, functions). It looks like a function, but will really create a temporary object and delete it immediately once it's constructed."}