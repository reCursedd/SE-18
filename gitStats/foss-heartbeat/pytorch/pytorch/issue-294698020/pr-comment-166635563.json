{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166635563", "pull_request_review_id": 94729486, "id": 166635563, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjYzNTU2Mw==", "diff_hunk": "@@ -1297,6 +1297,91 @@ def foo(a, b):\n         g2result2 = torch.autograd.grad(l3, [da2, db2])\n         self.assertEqual(g2result, g2result2)\n \n+    def checkScript(self, script, name, inputs, outputs, optimize):\n+        cu = torch.jit._jit_script_compile(script)\n+        graph = cu.get_graph(name)\n+        ge = torch._C.GraphExecutor(graph, optimize)\n+        outputs_ge = ge(*inputs)\n+        self.assertEqual(outputs, outputs_ge)\n+\n+    def test_script_add(self):\n+        script = '''\n+        def add(a, b) -> (c):\n+            c = a + b\n+        '''\n+\n+        a = Variable(torch.rand(1), requires_grad=True)\n+        b = Variable(torch.rand(1), requires_grad=True)\n+        outputs = a + b\n+        self.checkScript(script, 'add', [a, b], [outputs], False)\n+\n+    def test_script_mul(self):\n+        script = '''\n+        def mul(a, b) -> (c):\n+            c = a * b\n+        '''\n+\n+        a = Variable(torch.rand(1), requires_grad=True)\n+        b = Variable(torch.rand(1), requires_grad=True)\n+        outputs = a * b\n+        self.checkScript(script, 'mul', [a, b], [outputs], False)\n+\n+    @unittest.skip(\"RuntimeError: Expected object of type CPUFloatType \"\n+                   \"but found type Variable[CPUFloatType] for argument #2 'other'\")\n+    def test_script_triple(self):\n+        script = '''\n+        def triple(x) -> (y):\n+            y = 3f * x\n+        '''\n+        x = Variable(torch.rand(1).float(), requires_grad=True)\n+        outputs = 3 * x\n+        self.checkScript(script, 'triple', [x], [outputs], False)\n+\n+    def test_script_slice(self):\n+        script = '''\n+        def head(x) -> (head):\n+            head = x[:5]\n+        '''\n+        x = Variable(torch.rand(10).float(), requires_grad=True)\n+        outputs = x[:5]\n+        self.checkScript(script, 'head', [x], [outputs], False)\n+\n+    def test_script_gather(self):\n+        script = '''\n+        def first(x) -> (y):\n+            y = x[0]\n+        '''\n+        x = Variable(torch.rand(10).float(), requires_grad=True)\n+        outputs = x[0]\n+        self.checkScript(script, 'first', [x], [outputs], False)\n+\n+    def test_script_func_call(self):\n+        script = '''\n+        def add(a, b) -> (c):\n+            c = a + b\n+\n+        def mul(a, x) -> (y):\n+            y = a * x\n+\n+        def lin_comb(alpha, beta, x, y) -> (z):\n+            z = add(mul(alpha, x), mul(beta, y))\n+        '''\n+        alpha = Variable(torch.rand(1).float(), requires_grad=True)\n+        beta = Variable(torch.rand(1).float(), requires_grad=True)\n+        x = Variable(torch.rand(3).float(), requires_grad=True)\n+        y = Variable(torch.rand(3).float(), requires_grad=True)\n+        outputs = alpha * x + beta * y\n+        self.checkScript(script, 'lin_comb', [alpha, beta, x, y], [outputs], False)\n+\n+    @unittest.skip(\"RuntimeError: VariableType::ID() not implemented\")\n+    def test_script_cast(self):\n+        script = '''\n+        def to_int(x) -> (y):\n+            y = int(x)\n+        '''\n+        x = Variable(torch.FloatTensor([1.1, 2.3]), requires_grad=True)\n+        outputs = Variable(torch.IntTensor([1, 2]), requires_grad=True)\n+        self.checkScript(script, 'to_int', [x], [outputs], False)\n ", "path": "test/test_jit.py", "position": 89, "original_position": 89, "commit_id": "cab32638004845e223cd9bcce868632d65f90c63", "original_commit_id": "0bc4ed7c13aad1049e3c25e47226532ee61d051f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "What I imagined would be to have a list of tuples with (source, reference_fn) and use that to automatically generate the tests. That\u2019s what we do in many places and it works great (less duplication, better coverage)", "created_at": "2018-02-07T14:37:47Z", "updated_at": "2018-11-23T15:39:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/5074#discussion_r166635563", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5074", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166635563"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5074#discussion_r166635563"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5074"}}, "body_html": "<p>What I imagined would be to have a list of tuples with (source, reference_fn) and use that to automatically generate the tests. That\u2019s what we do in many places and it works great (less duplication, better coverage)</p>", "body_text": "What I imagined would be to have a list of tuples with (source, reference_fn) and use that to automatically generate the tests. That\u2019s what we do in many places and it works great (less duplication, better coverage)"}