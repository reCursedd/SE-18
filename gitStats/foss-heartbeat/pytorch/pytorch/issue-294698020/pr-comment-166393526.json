{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166393526", "pull_request_review_id": 94304114, "id": 166393526, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM5MzUyNg==", "diff_hunk": "@@ -0,0 +1,444 @@\n+#include \"torch/csrc/jit/script/compiler.h\"\n+#include \"torch/csrc/jit/script/parser.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+\n+namespace torch {\n+namespace jit {\n+namespace script {\n+\n+namespace {\n+\n+// record of defined function\n+// Graph + metadata\n+struct FunctionDefinition {\n+  explicit FunctionDefinition(Def tree_)\n+      : tree(new Def(tree_)), graph(new Graph()) {}\n+\n+  explicit FunctionDefinition(std::unique_ptr<Graph> graph_)\n+      : tree(nullptr), graph(std::move(graph_)) {}\n+\n+  bool isExtern() const {\n+    return tree == nullptr;\n+  }\n+  std::unique_ptr<Def> tree;\n+  std::unique_ptr<Graph> graph;\n+};\n+\n+} // namespace\n+\n+using FunctionTable = std::unordered_map<std::string, FunctionDefinition>;\n+using ValueTable = std::unordered_map<std::string, Value*>;\n+\n+struct DefCompiler {\n+  DefCompiler(FunctionDefinition& def, FunctionTable& function_table)\n+      : def(def),\n+        function_table(function_table) {}\n+\n+  // populate def->graph\n+  std::vector<Value*> run() {\n+    auto& tree = *def.tree;\n+    for (auto input : tree.params()) {\n+      auto& name = input.ident().name();\n+      map(name, def.graph->addInput(name));\n+    }\n+    emitStatements(tree.statements());\n+\n+    std::vector<Value*> output_values{};\n+    for (auto output : tree.returns()) {\n+        auto* value = lookup(output.ident());\n+        def.graph->registerOutput(value);\n+        output_values.push_back(value);\n+    }\n+    return output_values;\n+  }\n+  void emitStatements(const ListView<TreeRef>& statements) {\n+    for (auto stmt : statements) {\n+      switch (stmt->kind()) {\n+        case TK_IF:\n+          emitIf(If(stmt));\n+          break;\n+        case TK_WHILE:\n+          emitWhile(While(stmt));\n+          break;\n+        case TK_ASSIGN:\n+          emitAssignment(Assign(stmt));\n+          break;\n+        case TK_GLOBAL:\n+          for (auto ident : stmt->trees()) {\n+            const auto& name = Ident(ident).name();\n+            map(name, def.graph->addInput(name));\n+          }\n+          break;\n+        default:\n+          emitExpressionStatement(stmt);\n+          break;\n+      }\n+    }\n+  }\n+  void emitIf(const If& stmt) {\n+      // TODO: add support for control flow ops\n+      throw ErrorReport(stmt)\n+          << \"Control flow is not supported yet.\";\n+  }\n+\n+  void emitWhile(const While& stmt) {\n+      // TODO: add support for control flow ops\n+      throw ErrorReport(stmt)\n+          << \"Control flow is not supported yet.\";\n+  }\n+\n+  void emitExpressionStatement(TreeRef stmt) {\n+    // expression with no used outputs\n+    emit(stmt);\n+  }\n+\n+  std::vector<Value*> emitAssignment(const Assign& stmt) {\n+    std::vector<Value*> outputs{stmt.lhs().size()};\n+    if (stmt.reduction() != '=') {\n+      if (stmt.lhs().size() != 1) {\n+        throw ErrorReport(stmt)\n+            << \"reductions are only allow when there is a single variable \"\n+            << \"on the left-hand side.\";\n+      }\n+      auto lhs = stmt.lhs()[0];\n+      auto expr =\n+          Compound::create(stmt.reduction(), stmt.range(), {lhs, stmt.rhs()});\n+      outputs = emit(expr, 1);\n+    } else {\n+      outputs = emit(stmt.rhs(), stmt.lhs().size());\n+    }\n+    int i = 0;\n+    for (auto ident : stmt.lhs()) {\n+      if (ident->kind() == TK_IDENT)\n+        map(Ident(ident).name(), outputs.at(i));", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 113, "commit_id": "cab32638004845e223cd9bcce868632d65f90c63", "original_commit_id": "e973255c0d0d0bdcd7c0435c8b1f8da9890613d8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This will give a very cryptic error if you write too many entries on the lhs (something like `runtime_error: std::__vector::at`)", "created_at": "2018-02-06T18:12:22Z", "updated_at": "2018-11-23T15:39:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/5074#discussion_r166393526", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5074", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/166393526"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5074#discussion_r166393526"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5074"}}, "body_html": "<p>This will give a very cryptic error if you write too many entries on the lhs (something like <code>runtime_error: std::__vector::at</code>)</p>", "body_text": "This will give a very cryptic error if you write too many entries on the lhs (something like runtime_error: std::__vector::at)"}