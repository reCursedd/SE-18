{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11116", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11116/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11116/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11116/events", "html_url": "https://github.com/pytorch/pytorch/pull/11116", "id": 355781262, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEyMjMyMTEw", "number": 11116, "title": "Logical short circuit", "user": {"login": "eellison", "id": 11477974, "node_id": "MDQ6VXNlcjExNDc3OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/11477974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eellison", "html_url": "https://github.com/eellison", "followers_url": "https://api.github.com/users/eellison/followers", "following_url": "https://api.github.com/users/eellison/following{/other_user}", "gists_url": "https://api.github.com/users/eellison/gists{/gist_id}", "starred_url": "https://api.github.com/users/eellison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eellison/subscriptions", "organizations_url": "https://api.github.com/users/eellison/orgs", "repos_url": "https://api.github.com/users/eellison/repos", "events_url": "https://api.github.com/users/eellison/events{/privacy}", "received_events_url": "https://api.github.com/users/eellison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-30T22:50:17Z", "updated_at": "2018-11-23T15:50:29Z", "closed_at": "2018-09-04T16:26:28Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11116", "html_url": "https://github.com/pytorch/pytorch/pull/11116", "diff_url": "https://github.com/pytorch/pytorch/pull/11116.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11116.patch"}, "body_html": "<p>Adding short circuit evaluation to AND or OR. The second expression of and AND or OR gets lifted into an if branch, which is conditionally evaluated.</p>\n<p>BatchOps was using the expression <code>dims = dims1 or dims2</code>, where dims is often an empty tensor. This nows throws an error, because dims1 gets cast to a boolean, and you can't convert an empty tensor to a scalar. It now matches the behavior of pytorch in python.</p>\n<p>One thing that came up is if the second expression in an and/or in python gets returned, it does not get coerced to a boolean.</p>\n<p><code>tensor == (False or tensor)</code><br>\n<code>tensor == (True and tensor)</code></p>\n<p>We do not currently support this.</p>\n<p>edit: wording</p>", "body_text": "Adding short circuit evaluation to AND or OR. The second expression of and AND or OR gets lifted into an if branch, which is conditionally evaluated.\nBatchOps was using the expression dims = dims1 or dims2, where dims is often an empty tensor. This nows throws an error, because dims1 gets cast to a boolean, and you can't convert an empty tensor to a scalar. It now matches the behavior of pytorch in python.\nOne thing that came up is if the second expression in an and/or in python gets returned, it does not get coerced to a boolean.\ntensor == (False or tensor)\ntensor == (True and tensor)\nWe do not currently support this.\nedit: wording", "body": "Adding short circuit evaluation to AND or OR. The second expression of and AND or OR gets lifted into an if branch, which is conditionally evaluated. \r\n\r\nBatchOps was using the expression `dims = dims1 or dims2`, where dims is often an empty tensor. This nows throws an error, because dims1 gets cast to a boolean, and you can't convert an empty tensor to a scalar. It now matches the behavior of pytorch in python. \r\n\r\nOne thing that came up is if the second expression in an and/or in python gets returned, it does not get coerced to a boolean. \r\n\r\n`tensor == (False or tensor)`\r\n`tensor == (True and tensor)`\r\n\r\nWe do not currently support this. \r\n\r\nedit: wording\r\n\r\n"}