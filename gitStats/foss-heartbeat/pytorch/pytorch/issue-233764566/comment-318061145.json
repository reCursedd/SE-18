{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/318061145", "html_url": "https://github.com/pytorch/pytorch/issues/1734#issuecomment-318061145", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1734", "id": 318061145, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODA2MTE0NQ==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-26T13:58:42Z", "updated_at": "2017-07-26T14:00:20Z", "author_association": "NONE", "body_html": "<p>Introducing <code>attach</code> to the example above, it may be:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">attach_</span>(<span class=\"pl-smi\">variable</span>):\n    variable.requires_grad <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n    <span class=\"pl-k\">return</span> variable\n\ni <span class=\"pl-k\">=</span> torch.autograd.Variable(torch.Tensor(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">8</span>))\nm <span class=\"pl-k\">=</span> torch.nn.Conv2d(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">1</span>)\no <span class=\"pl-k\">=</span> m(attach_(i))\ng <span class=\"pl-k\">=</span> torch.autograd.grad(o.sum(), i)[<span class=\"pl-c1\">0</span>]\n\n<span class=\"pl-c1\">print</span>(g.sum())</pre></div>\n<p>Here <code>attach_</code> would ensure no-error execution of <code>autograd.grad</code> (even in cases where <code>i</code> is a volatile or user-provided variable that doesn't require gradients). I guess <code>attach</code> generating a new variable object should also be possible.</p>", "body_text": "Introducing attach to the example above, it may be:\nimport torch\nimport torch.nn\n\ndef attach_(variable):\n    variable.requires_grad = True\n    return variable\n\ni = torch.autograd.Variable(torch.Tensor(1, 4, 8, 8))\nm = torch.nn.Conv2d(4, 4, 1)\no = m(attach_(i))\ng = torch.autograd.grad(o.sum(), i)[0]\n\nprint(g.sum())\nHere attach_ would ensure no-error execution of autograd.grad (even in cases where i is a volatile or user-provided variable that doesn't require gradients). I guess attach generating a new variable object should also be possible.", "body": "Introducing `attach` to the example above, it may be:\r\n```python\r\nimport torch\r\nimport torch.nn\r\n\r\ndef attach_(variable):\r\n    variable.requires_grad = True\r\n    return variable\r\n\r\ni = torch.autograd.Variable(torch.Tensor(1, 4, 8, 8))\r\nm = torch.nn.Conv2d(4, 4, 1)\r\no = m(attach_(i))\r\ng = torch.autograd.grad(o.sum(), i)[0]\r\n\r\nprint(g.sum())\r\n```\r\n\r\nHere `attach_` would ensure no-error execution of `autograd.grad` (even in cases where `i` is a volatile or user-provided variable that doesn't require gradients). I guess `attach` generating a new variable object should also be possible."}