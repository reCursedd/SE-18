{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85138941", "pull_request_review_id": 5856818, "id": 85138941, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTM4OTQx", "diff_hunk": "@@ -0,0 +1,359 @@\n+#include \"Conv.h\"\n+\n+#include \"THC/THC.h\"\n+\n+#include <cudnn.h>\n+#include <stdint.h>\n+#include <memory>\n+#include <unordered_map>\n+#include <functional>\n+#include <mutex>\n+\n+namespace torch { namespace cudnn {\n+\n+namespace {\n+\n+union Constant\n+{\n+  float f;\n+  double d;\n+  Constant(cudnnDataType_t dataType, int value) {\n+    if (dataType == CUDNN_DATA_HALF || dataType == CUDNN_DATA_FLOAT) {\n+      f = (float) value;\n+    } else {\n+      d = (double) value;\n+    }\n+  }\n+};\n+\n+void setTensorDescriptor(TensorDescriptor& desc, cudnnDataType_t dataType, THVoidTensor* tensor, int groups)\n+{\n+  int inputSize[4];\n+  int inputStride[4];\n+  for (int i = 0; i < 4; ++i) {\n+    inputSize[i] = (int) tensor->size[i];\n+    inputStride[i] = (int) tensor->stride[i];\n+  }\n+  inputSize[1] /= groups;\n+  desc.set(dataType, 4, inputSize, inputStride);\n+}\n+\n+void setWeightDescriptor(FilterDescriptor& desc, cudnnDataType_t dataType, THVoidTensor* weight, int groups)\n+{\n+  int inputSize[4] = { 1, 1, 1, 1 };\n+  for (int i = 0; i < 4; ++i) {\n+    inputSize[i] = (int) weight->size[i];\n+  }\n+  inputSize[0] /= groups;\n+  inputSize[1] /= groups;\n+  desc.set(dataType, inputSize);\n+}\n+\n+struct ParamsHash {\n+  std::size_t operator()(const ConvolutionParams& params) const {\n+    auto ptr = reinterpret_cast<const uint8_t*>(&params);\n+    uint32_t value = 0x811C9DC5;\n+    for (int i = 0; i < (int)sizeof(ConvolutionParams); ++i) {\n+      value ^= ptr[i];\n+      value *= 0x01000193;\n+    }\n+    return (size_t)value;\n+  }\n+};\n+\n+struct ParamsEqual {\n+  bool operator()(const ConvolutionParams& a, const ConvolutionParams& b) const {\n+    auto ptr1 = reinterpret_cast<const uint8_t*>(&a);\n+    auto ptr2 = reinterpret_cast<const uint8_t*>(&b);\n+    return memcmp(ptr1, ptr2, sizeof(ConvolutionParams)) == 0;\n+  }\n+};\n+\n+template <typename T>\n+struct BenchmarkCache {\n+  std::mutex mutex;\n+  std::unordered_map<ConvolutionParams, T, ParamsHash, ParamsEqual> map;\n+\n+  bool find(const ConvolutionParams& params, T& results) {\n+    std::lock_guard<std::mutex> guard(mutex);\n+    auto it = map.find(params);\n+    if (it == map.end()) {\n+      return false;\n+    }\n+    results = it->second;\n+    return true;\n+  }\n+\n+  void insert(const ConvolutionParams& params, const T& results) {\n+    std::lock_guard<std::mutex> guard(mutex);\n+    map[params] = results;\n+  }\n+};\n+\n+BenchmarkCache<cudnnConvolutionFwdAlgo_t> fwd_algos;\n+BenchmarkCache<cudnnConvolutionBwdDataAlgo_t> bwd_data_algos;\n+BenchmarkCache<cudnnConvolutionBwdFilterAlgo_t> bwd_filter_algos;\n+\n+struct Workspace {\n+  void* data;\n+  THCState* state;\n+  Workspace(THCState* state, size_t size) : data(NULL), state(state) {\n+    CUDA_CHECK(THCudaMalloc(state, &data, size));\n+  }\n+  ~Workspace() {\n+    THCudaFree(state, data);\n+  }\n+};\n+\n+cudnnConvolutionFwdAlgo_t chooseForwardAlgorithm(\n+  cudnnHandle_t handle, const Convolution& conv, bool benchmark)\n+{\n+  cudnnConvolutionFwdAlgo_t algo;\n+  if (benchmark) {\n+    if (fwd_algos.find(conv.params, algo)) {\n+      return algo;\n+    }\n+    int algoCount;\n+    cudnnConvolutionFwdAlgoPerf_t perfResults;\n+    CHECK(cudnnFindConvolutionForwardAlgorithm(handle, conv.idesc.desc,\n+        conv.wdesc.desc, conv.cdesc.desc, conv.odesc.desc, 1, &algoCount, &perfResults));\n+    fwd_algos.insert(conv.params, perfResults.algo);\n+    return perfResults.algo;\n+  }\n+  cudnnConvolutionFwdPreference_t pref = CUDNN_CONVOLUTION_FWD_PREFER_FASTEST;\n+  CHECK(cudnnGetConvolutionForwardAlgorithm(handle, conv.idesc.desc,\n+      conv.wdesc.desc, conv.cdesc.desc, conv.odesc.desc, pref, 0, &algo));\n+  return algo;\n+}\n+\n+cudnnConvolutionBwdDataAlgo_t chooseBackwardDataAlgorithm(\n+    cudnnHandle_t handle, const Convolution& conv, bool benchmark)\n+{\n+  cudnnConvolutionBwdDataAlgo_t algo;\n+  if (benchmark) {\n+    if (bwd_data_algos.find(conv.params, algo)) {\n+      return algo;\n+    }\n+    int algoCount;\n+    cudnnConvolutionBwdDataAlgoPerf_t perfResults;\n+    CHECK(cudnnFindConvolutionBackwardDataAlgorithm(handle, conv.wdesc.desc,\n+        conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, 1, &algoCount, &perfResults));\n+    bwd_data_algos.insert(conv.params, perfResults.algo);\n+    return perfResults.algo;\n+  }\n+  cudnnConvolutionBwdDataPreference_t pref = CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST;\n+  CHECK(cudnnGetConvolutionBackwardDataAlgorithm(handle, conv.wdesc.desc,\n+      conv.odesc.desc, conv.cdesc.desc, conv.idesc.desc, pref, 0, &algo));\n+  return algo;\n+}\n+\n+cudnnConvolutionBwdFilterAlgo_t chooseBackwardFilterAlgorithm(\n+    cudnnHandle_t handle, const Convolution& conv, bool benchmark)\n+{\n+  cudnnConvolutionBwdFilterAlgo_t algo;\n+  if (benchmark) {\n+    if (bwd_filter_algos.find(conv.params, algo)) {\n+      return algo;\n+    }\n+    int algoCount;\n+    cudnnConvolutionBwdFilterAlgoPerf_t perfResults;\n+    CHECK(cudnnFindConvolutionBackwardFilterAlgorithm(handle, conv.idesc.desc,\n+        conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc, 1, &algoCount, &perfResults));\n+    return perfResults.algo;\n+    bwd_filter_algos.insert(conv.params, perfResults.algo);\n+    return perfResults.algo;\n+  }\n+  cudnnConvolutionBwdFilterPreference_t pref = CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST;\n+  CHECK(cudnnGetConvolutionBackwardFilterAlgorithm(handle, conv.idesc.desc,\n+      conv.odesc.desc, conv.cdesc.desc, conv.wdesc.desc, pref, 0, &algo));\n+  return algo;\n+}\n+\n+int dataSize(cudnnDataType_t dataType)\n+{\n+  switch (dataType) {\n+    case CUDNN_DATA_HALF: return 2;\n+    case CUDNN_DATA_FLOAT: return 4;\n+    default: return 8;\n+  }\n+}\n+\n+void* tensorPointer(cudnnDataType_t dataType, THVoidTensor* tensor, int groups, int i)\n+{\n+  int elementSize = dataSize(dataType);\n+  char* ptr = (char*) tensor->storage->data;\n+  ptr += elementSize * tensor->storageOffset;\n+  if (i > 0) {", "path": "torch/csrc/cudnn/Conv.cpp", "position": null, "original_position": 186, "commit_id": "38b67961eaa934e308a2867f9b68874288f0afa2", "original_commit_id": "c5c14e27cc3a964a1e1abe4ae3d069a5d31286f1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I'm not sure what does `i` exactly do + you're using the same name for a loop counter below. Can you give it a more descriptive name please?\n", "created_at": "2016-10-26T14:44:38Z", "updated_at": "2018-11-23T15:31:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/167#discussion_r85138941", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/167", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85138941"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/167#discussion_r85138941"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/167"}}, "body_html": "<p>I'm not sure what does <code>i</code> exactly do + you're using the same name for a loop counter below. Can you give it a more descriptive name please?</p>", "body_text": "I'm not sure what does i exactly do + you're using the same name for a loop counter below. Can you give it a more descriptive name please?"}