{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85137683", "pull_request_review_id": 5856818, "id": 85137683, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTM3Njgz", "diff_hunk": "@@ -0,0 +1,359 @@\n+#include \"Conv.h\"\n+\n+#include \"THC/THC.h\"\n+\n+#include <cudnn.h>\n+#include <stdint.h>\n+#include <memory>\n+#include <unordered_map>\n+#include <functional>\n+#include <mutex>\n+\n+namespace torch { namespace cudnn {\n+\n+namespace {\n+\n+union Constant\n+{\n+  float f;\n+  double d;\n+  Constant(cudnnDataType_t dataType, int value) {\n+    if (dataType == CUDNN_DATA_HALF || dataType == CUDNN_DATA_FLOAT) {\n+      f = (float) value;\n+    } else {\n+      d = (double) value;\n+    }\n+  }\n+};\n+\n+void setTensorDescriptor(TensorDescriptor& desc, cudnnDataType_t dataType, THVoidTensor* tensor, int groups)\n+{\n+  int inputSize[4];\n+  int inputStride[4];\n+  for (int i = 0; i < 4; ++i) {\n+    inputSize[i] = (int) tensor->size[i];\n+    inputStride[i] = (int) tensor->stride[i];\n+  }\n+  inputSize[1] /= groups;\n+  desc.set(dataType, 4, inputSize, inputStride);\n+}\n+\n+void setWeightDescriptor(FilterDescriptor& desc, cudnnDataType_t dataType, THVoidTensor* weight, int groups)\n+{\n+  int inputSize[4] = { 1, 1, 1, 1 };\n+  for (int i = 0; i < 4; ++i) {\n+    inputSize[i] = (int) weight->size[i];\n+  }\n+  inputSize[0] /= groups;\n+  inputSize[1] /= groups;\n+  desc.set(dataType, inputSize);\n+}\n+\n+struct ParamsHash {\n+  std::size_t operator()(const ConvolutionParams& params) const {\n+    auto ptr = reinterpret_cast<const uint8_t*>(&params);\n+    uint32_t value = 0x811C9DC5;\n+    for (int i = 0; i < (int)sizeof(ConvolutionParams); ++i) {\n+      value ^= ptr[i];\n+      value *= 0x01000193;\n+    }\n+    return (size_t)value;\n+  }\n+};\n+\n+struct ParamsEqual {\n+  bool operator()(const ConvolutionParams& a, const ConvolutionParams& b) const {\n+    auto ptr1 = reinterpret_cast<const uint8_t*>(&a);\n+    auto ptr2 = reinterpret_cast<const uint8_t*>(&b);\n+    return memcmp(ptr1, ptr2, sizeof(ConvolutionParams)) == 0;", "path": "torch/csrc/cudnn/Conv.cpp", "position": 68, "original_position": 68, "commit_id": "38b67961eaa934e308a2867f9b68874288f0afa2", "original_commit_id": "c5c14e27cc3a964a1e1abe4ae3d069a5d31286f1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "What a hack \ud83d\ude06 \n", "created_at": "2016-10-26T14:39:50Z", "updated_at": "2018-11-23T15:31:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/167#discussion_r85137683", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/167", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85137683"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/167#discussion_r85137683"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/167"}}, "body_html": "<p>What a hack <g-emoji class=\"g-emoji\" alias=\"laughing\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f606.png\">\ud83d\ude06</g-emoji></p>", "body_text": "What a hack \ud83d\ude06"}