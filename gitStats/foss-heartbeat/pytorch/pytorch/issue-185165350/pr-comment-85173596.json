{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85173596", "pull_request_review_id": 5904220, "id": 85173596, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MTczNTk2", "diff_hunk": "@@ -0,0 +1,101 @@\n+#include <Python.h>\n+#include <functional>\n+\n+static PyObject* THPWrapperClass = NULL;\n+\n+struct THPWrapper {\n+  PyObject_HEAD\n+  void *data;\n+  std::function<void(void*)> destructor;\n+};\n+\n+PyObject * THPWrapper_New(void *data, std::function<void(void*)> destructor)\n+{\n+  PyObject *args = PyTuple_New(0);\n+  if (!args) {\n+    return NULL;\n+  }\n+  PyObject *result = PyObject_Call(THPWrapperClass, args, NULL);\n+  if (result) {\n+    THPWrapper* wrapper = (THPWrapper*) result;\n+    wrapper->data = data;\n+    wrapper->destructor = destructor;\n+  }\n+  Py_DECREF(args);\n+  return result;\n+}\n+\n+bool THPWrapper_check(PyObject * obj)\n+{\n+  return (PyObject*)Py_TYPE(obj) == THPWrapperClass;\n+}\n+\n+void * THPWrapper_get(PyObject * obj)\n+{\n+  return ((THPWrapper*)obj)->data;\n+}\n+\n+static PyObject * THPWrapper_pynew(PyTypeObject *type, PyObject *args, PyObject *kwargs)\n+{\n+  PyObject* self = type->tp_alloc(type, 0);\n+  THPWrapper* wrapper = (THPWrapper*) self;\n+  wrapper->data = NULL;\n+  wrapper->destructor = NULL;\n+  return self;\n+}\n+\n+static void THPWrapper_dealloc(THPWrapper* self)\n+{\n+  self->destructor(self->data);\n+  Py_TYPE(self)->tp_free((PyObject*)self);", "path": "torch/csrc/cudnn/CppWrapper.cpp", "position": 50, "original_position": 50, "commit_id": "38b67961eaa934e308a2867f9b68874288f0afa2", "original_commit_id": "c5c14e27cc3a964a1e1abe4ae3d069a5d31286f1", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Actually, I think using a C-style function pointer should work here:\n\n`typedef void(*DestructorFn)(void *)`\n\nThat will avoid messing with `new` and `delete`. (The non-capturing lambda in cuDNN.cpp is convertible to the function pointer)\n", "created_at": "2016-10-26T17:15:45Z", "updated_at": "2018-11-23T15:31:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/167#discussion_r85173596", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/167", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/85173596"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/167#discussion_r85173596"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/167"}}, "body_html": "<p>Actually, I think using a C-style function pointer should work here:</p>\n<p><code>typedef void(*DestructorFn)(void *)</code></p>\n<p>That will avoid messing with <code>new</code> and <code>delete</code>. (The non-capturing lambda in cuDNN.cpp is convertible to the function pointer)</p>", "body_text": "Actually, I think using a C-style function pointer should work here:\ntypedef void(*DestructorFn)(void *)\nThat will avoid messing with new and delete. (The non-capturing lambda in cuDNN.cpp is convertible to the function pointer)", "in_reply_to_id": 85140401}