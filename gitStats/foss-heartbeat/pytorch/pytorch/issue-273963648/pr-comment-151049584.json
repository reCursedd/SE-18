{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151049584", "pull_request_review_id": 76689068, "id": 151049584, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTA0OTU4NA==", "diff_hunk": "@@ -757,37 +744,65 @@ friend struct Node;\n     delete *it;\n     all_nodes.erase(it);\n   }\n+  void freeValue(Value * v) {\n+    auto it = all_values.find(v);\n+    JIT_ASSERT(it != all_values.end());\n+    all_values.erase(it);\n+  }\n };\n \n+inline Value::Value(Node * node_, size_t offset_)\n+: node_(node_),\n+  offset_(offset_),\n+  unique_(node_->graph_->next_unique_++),\n+  stage_(node_->graph_->new_node_stage_) {\n+  node_->graph_->all_values.emplace(this);\n+}\n+\n+inline Graph * Value::owningGraph() {\n+  return node()->owningGraph();\n+}\n+\n+inline const Graph * Value::owningGraph() const {\n+  return node()->owningGraph();\n+}\n+\n+inline void Value::replaceAllUsesWith(Value * newValue) {\n+  JIT_ASSERT(owningGraph() == newValue->owningGraph());\n+  for(auto u : uses()) {\n+    u.user->inputs_[u.offset] = newValue;\n+    newValue->uses_.push_back(u);\n+  }\n+  uses_.clear();\n+}\n+\n inline Node::Node(Graph * graph_, NodeKind kind_) :\n   kind_(kind_),\n   graph_(graph_),\n-  unique_(graph_->next_unique_++),\n-  stage_(graph_->new_node_stage_),\n-  type_(getInitialType(kind_)) {\n+  stage_(graph_->new_node_stage_) {\n   graph_->all_nodes.emplace(this);\n }\n \n+inline void Node::eraseOutput(size_t i) {\n+  JIT_ASSERT(i < outputs_.size());\n+  JIT_ASSERT(outputs_[i]->uses().size() == 0);\n+  Value * n = outputs_[i];\n+  outputs_.erase(outputs_.begin() + i);\n+  owningGraph()->freeValue(n);\n+  for(size_t j = i; j < outputs_.size(); j++) {\n+    outputs_[j]->offset_--;\n+  }\n+}\n+\n inline void Node::destroy() {", "path": "torch/csrc/jit/ir.h", "position": 683, "original_position": 691, "commit_id": "c84859a8d33c6b8f5f25aa0fec424f04b293bfb8", "original_commit_id": "7901741bc1a19aade61c7692c2a8009f4e690ab6", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Since destroy now also gets rid of the outputs, we should add to its comment that it invalidates any Value pointers to the output in question. Most importantly, when you see the idiom `value->node()->destroy()`, `value` must not be used afterwards. (Not for this PR, but if people keep using invalidated value nodes, we should seriously consider keeping them around but marking them dead, so that we can give assert failures when someone tries to use them.)", "created_at": "2017-11-15T07:23:24Z", "updated_at": "2018-11-23T15:36:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151049584", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3705", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151049584"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151049584"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3705"}}, "body_html": "<p>Since destroy now also gets rid of the outputs, we should add to its comment that it invalidates any Value pointers to the output in question. Most importantly, when you see the idiom <code>value-&gt;node()-&gt;destroy()</code>, <code>value</code> must not be used afterwards. (Not for this PR, but if people keep using invalidated value nodes, we should seriously consider keeping them around but marking them dead, so that we can give assert failures when someone tries to use them.)</p>", "body_text": "Since destroy now also gets rid of the outputs, we should add to its comment that it invalidates any Value pointers to the output in question. Most importantly, when you see the idiom value->node()->destroy(), value must not be used afterwards. (Not for this PR, but if people keep using invalidated value nodes, we should seriously consider keeping them around but marking them dead, so that we can give assert failures when someone tries to use them.)"}