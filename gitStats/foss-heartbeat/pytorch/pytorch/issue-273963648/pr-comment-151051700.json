{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151051700", "pull_request_review_id": 76689068, "id": 151051700, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTA1MTcwMA==", "diff_hunk": "@@ -330,13 +304,9 @@ void Node::lint() const {\n     for (auto input : inputs_) {\n       // WARNING: O(n^2)\n       JIT_ASSERT(std::find(ALL_OF(input->uses_), Use(const_cast<Node*>(this), i)) != input->uses_.end());\n+      size_t stage_ = stage();", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 124, "commit_id": "c84859a8d33c6b8f5f25aa0fec424f04b293bfb8", "original_commit_id": "7901741bc1a19aade61c7692c2a8009f4e690ab6", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I can see we are butting heads about whether or not lint should use methods or direct data member access :) My philosophy was, \"lint is making intensional statements about the actual data in the classes, not the extensional behavior of methods, therefore, methods should not be used as much as possible, and if you restructure how the internal data representation works, you SHOULD refactor the lint pass.\" But I am not hardline about this. You don't have to do anything here, but I thought I'd mention this in case you were wondering. It is a little goofy to have a local variable named `stage_` that is not a member variable though ;)", "created_at": "2017-11-15T07:40:23Z", "updated_at": "2018-11-23T15:36:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151051700", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3705", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151051700"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151051700"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3705"}}, "body_html": "<p>I can see we are butting heads about whether or not lint should use methods or direct data member access :) My philosophy was, \"lint is making intensional statements about the actual data in the classes, not the extensional behavior of methods, therefore, methods should not be used as much as possible, and if you restructure how the internal data representation works, you SHOULD refactor the lint pass.\" But I am not hardline about this. You don't have to do anything here, but I thought I'd mention this in case you were wondering. It is a little goofy to have a local variable named <code>stage_</code> that is not a member variable though ;)</p>", "body_text": "I can see we are butting heads about whether or not lint should use methods or direct data member access :) My philosophy was, \"lint is making intensional statements about the actual data in the classes, not the extensional behavior of methods, therefore, methods should not be used as much as possible, and if you restructure how the internal data representation works, you SHOULD refactor the lint pass.\" But I am not hardline about this. You don't have to do anything here, but I thought I'd mention this in case you were wondering. It is a little goofy to have a local variable named stage_ that is not a member variable though ;)"}