{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151046945", "pull_request_review_id": 76689068, "id": 151046945, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTA0Njk0NQ==", "diff_hunk": "@@ -250,20 +239,7 @@ std::ostream& printNode(std::ostream & out, const Node * n, std::vector<const No\n       printAttributes(out,n);\n     }\n   IR_END()\n-  out << \"(\" << n->inputs() << \"), uses = [\";", "path": "torch/csrc/jit/ir.cpp", "position": 77, "original_position": 77, "commit_id": "c84859a8d33c6b8f5f25aa0fec424f04b293bfb8", "original_commit_id": "7901741bc1a19aade61c7692c2a8009f4e690ab6", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "(This comment makes no requests for this PR.) I absolutely agree that, as you noted, the uses information is basically useless out of the box. However, if I ever am in the situation where I need to debug corrupt uses information (perhaps I found out about it because lint failed), the first piece of code I am going to write is printer for uses info (and probably a printer for the uniques of nodes). I don't think it should be printed by default, but I do think we should have a debug print mode for this situation. OTOH, with lint we should catch these bugs quite quickly, so I'm OK with letting the person who has to actually debug such a thing write the code.", "created_at": "2017-11-15T07:04:56Z", "updated_at": "2018-11-23T15:36:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151046945", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3705", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151046945"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151046945"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3705"}}, "body_html": "<p>(This comment makes no requests for this PR.) I absolutely agree that, as you noted, the uses information is basically useless out of the box. However, if I ever am in the situation where I need to debug corrupt uses information (perhaps I found out about it because lint failed), the first piece of code I am going to write is printer for uses info (and probably a printer for the uniques of nodes). I don't think it should be printed by default, but I do think we should have a debug print mode for this situation. OTOH, with lint we should catch these bugs quite quickly, so I'm OK with letting the person who has to actually debug such a thing write the code.</p>", "body_text": "(This comment makes no requests for this PR.) I absolutely agree that, as you noted, the uses information is basically useless out of the box. However, if I ever am in the situation where I need to debug corrupt uses information (perhaps I found out about it because lint failed), the first piece of code I am going to write is printer for uses info (and probably a printer for the uniques of nodes). I don't think it should be printed by default, but I do think we should have a debug print mode for this situation. OTOH, with lint we should catch these bugs quite quickly, so I'm OK with letting the person who has to actually debug such a thing write the code."}