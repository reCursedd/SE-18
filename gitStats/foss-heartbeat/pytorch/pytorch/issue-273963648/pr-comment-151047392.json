{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151047392", "pull_request_review_id": 76689068, "id": 151047392, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTA0NzM5Mg==", "diff_hunk": "@@ -72,28 +72,107 @@ struct SourceLocation {\n // the list types are intentionally simple, but we type-def\n // them here so if we need to change them, refactoring will be easier\n using node_list = std::vector<Node*>;\n-using param_list = node_list;\n+using value_list = std::vector<Value*>;\n using use_list = std::vector<Use>;\n using pyobj_list = std::vector<THPObjectPtr>;\n template<typename T>\n using ArrayRef = at::ArrayRef<T>;\n using NodeKind = Symbol;\n \n-inline TypePtr getInitialType(NodeKind kind) {\n-  switch(kind) {\n-    case kPythonOp:\n-    case kCppOp:\n-    case kEval:\n-    case kFusionGroup:\n-      return multiType();\n-    default:\n-      return nullptr;\n+struct Value {\n+  TH_DISALLOW_COPY_AND_ASSIGN(Value);\n+  Value(Node * node_, size_t offset_);\n+private:\n+  friend struct Node;\n+  Node * node_;\n+  size_t offset_;\n+  size_t unique_ = 0;          // unique id\n+  size_t stage_ = 0;           // 0-forward, 1-backward, 2-double-backward,...", "path": "torch/csrc/jit/ir.h", "position": null, "original_position": 58, "commit_id": "c84859a8d33c6b8f5f25aa0fec424f04b293bfb8", "original_commit_id": "7901741bc1a19aade61c7692c2a8009f4e690ab6", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "(This comment requests no changes for the current PR). I do idly wonder if you might be able to kill this by introducing a synthetic node whose outputs are all of the actual input parameters; a kind of \"load input\" instruction (ala Swift IR). It may be hard to see if this is actually an improvement unless we actually do the change. Something to keep an eye out for if maintaining stage in both Value and Node becomes painful.", "created_at": "2017-11-15T07:08:17Z", "updated_at": "2018-11-23T15:36:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151047392", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3705", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151047392"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151047392"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3705"}}, "body_html": "<p>(This comment requests no changes for the current PR). I do idly wonder if you might be able to kill this by introducing a synthetic node whose outputs are all of the actual input parameters; a kind of \"load input\" instruction (ala Swift IR). It may be hard to see if this is actually an improvement unless we actually do the change. Something to keep an eye out for if maintaining stage in both Value and Node becomes painful.</p>", "body_text": "(This comment requests no changes for the current PR). I do idly wonder if you might be able to kill this by introducing a synthetic node whose outputs are all of the actual input parameters; a kind of \"load input\" instruction (ala Swift IR). It may be hard to see if this is actually an improvement unless we actually do the change. Something to keep an eye out for if maintaining stage in both Value and Node becomes painful."}