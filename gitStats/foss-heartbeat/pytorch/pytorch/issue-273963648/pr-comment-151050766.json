{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151050766", "pull_request_review_id": 76689068, "id": 151050766, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTA1MDc2Ng==", "diff_hunk": "@@ -425,40 +380,42 @@ void Graph::lint() const {\n   // - uniques in all_nodes are unique\n   // - every use will occur later in the topsort\n \n-  std::unordered_set<const Node*> in_scope;\n+  std::unordered_set<const Value*> in_scope;\n+  std::unordered_set<const Node*> node_in_scope;\n   std::unordered_set<size_t> seen_uniques;\n   std::unordered_map<const Node*, int64_t> anticipated_uses;\n+  auto check_value = [&](const Value* v) {\n+    auto b = in_scope.insert(v);\n+    JIT_ASSERT(b.second);  // insertion took place\n+    auto b2 = seen_uniques.insert(v->unique());\n+    JIT_ASSERT(b2.second);  // insertion took place\n+    JIT_ASSERT(v->unique() < next_unique_);\n+\n+    for (auto use : v->uses()) {\n+      JIT_ASSERT(node_in_scope.count(use.user) == 0);\n+      JIT_ASSERT(all_nodes.count(use.user) == 1);\n+      anticipated_uses[use.user]++;  // int default constructs to 0\n+    }\n+  };\n   auto check_node = [&](const Node* n) {\n     for (auto input : n->inputs_) {\n       if (in_scope.count(input) != 1) {\n-        if (n->kind_ == kSelect) {\n-          JIT_ASSERTM(0, \"%%%d (select node) not in scope; you probably forget to append it to the graph (you won't see this in the graph rendering)\", input->unique_);\n-        } else {\n-          JIT_ASSERTM(0, \"%%%d not in scope\", input->unique_);\n-        }\n+        JIT_ASSERTM(0, \"%%%d not in scope\", input->unique());\n       }\n     }\n     JIT_ASSERT(anticipated_uses[n] == static_cast<int64_t>(n->inputs_.size()));\n     anticipated_uses[n] = -1;  // we saw the anticipated user!\n-\n-    auto b = in_scope.insert(n);\n-    JIT_ASSERT(b.second);  // insertion took place\n-    auto b2 = seen_uniques.insert(n->unique_);\n-    JIT_ASSERT(b2.second);  // insertion took place\n-    JIT_ASSERT(n->unique_ < next_unique_);\n-\n-    for (auto use : n->uses_) {\n-      JIT_ASSERT(in_scope.count(use.user) == 0);\n-      JIT_ASSERT(all_nodes.count(use.user) == 1);\n-      anticipated_uses[use.user]++;  // int default constructs to 0\n+    auto node_inserted = node_in_scope.insert(n);\n+    JIT_ASSERT(node_inserted.second);  // insertion took place\n+    for(auto o : n->outputs()) {\n+      check_value(o);", "path": "torch/csrc/jit/ir.cpp", "position": null, "original_position": 227, "commit_id": "c84859a8d33c6b8f5f25aa0fec424f04b293bfb8", "original_commit_id": "7901741bc1a19aade61c7692c2a8009f4e690ab6", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Also, let's check that `offset_` is consistent with the ordering in `outputs()`. This will have the added bonus of ensuring there are not duplicate Value in the outputs.", "created_at": "2017-11-15T07:33:13Z", "updated_at": "2018-11-23T15:36:31Z", "html_url": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151050766", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3705", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/151050766"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3705#discussion_r151050766"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3705"}}, "body_html": "<p>Also, let's check that <code>offset_</code> is consistent with the ordering in <code>outputs()</code>. This will have the added bonus of ensuring there are not duplicate Value in the outputs.</p>", "body_text": "Also, let's check that offset_ is consistent with the ordering in outputs(). This will have the added bonus of ensuring there are not duplicate Value in the outputs.", "in_reply_to_id": 151050504}