{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211042388", "pull_request_review_id": 147392044, "id": 211042388, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA0MjM4OA==", "diff_hunk": "@@ -0,0 +1,145 @@\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+from __future__ import unicode_literals\n+\n+from caffe2.python import core, workspace\n+from hypothesis import given\n+import caffe2.python.hypothesis_test_util as hu\n+import hypothesis.strategies as st\n+import numpy as np\n+\n+\n+class TestLengthSplitOperator(hu.HypothesisTestCase):\n+\n+    def _length_split_op_ref(self, input_lengths, n_splits):\n+        output = []\n+        n_splits = n_splits[0]\n+        for i in range(input_lengths.size):\n+            x = input_lengths[i]\n+            mod = x % n_splits\n+            val = x // n_splits + 1\n+            for _ in range(n_splits):\n+                if mod > 0:\n+                    output.append(val)\n+                    mod -= 1\n+                else:\n+                    output.append(val - 1)\n+        return [np.array(output).astype(np.int32)]\n+\n+    @given(**hu.gcs_cpu_only)\n+    def test_length_split_example(self, gc, dc):\n+        input_lengths = np.array([9, 4, 5]).astype(np.int32)\n+        n_splits_ = np.array([3]).astype(np.int32)\n+\n+        workspace.FeedBlob('input_lengths', input_lengths)\n+        workspace.FeedBlob('n_splits', n_splits_)\n+\n+        test_net = core.Net(\"example\")\n+        test_net.LengthsSplit(['input_lengths', 'n_splits'], 'output')\n+        workspace.RunNetOnce(test_net)\n+\n+        Y = workspace.FetchBlob('output')\n+        np.testing.assert_array_equal(Y, np.array([3, 3, 3, 2, 1, 1, 2, 2, 1]))\n+\n+    @given(**hu.gcs_cpu_only)\n+    def test_length_split_edge(self, gc, dc):\n+        input_lengths = np.array([3, 4, 5]).astype(np.int32)\n+        n_splits_ = np.array([5]).astype(np.int32)\n+\n+        workspace.FeedBlob('input_lengths', input_lengths)\n+        workspace.FeedBlob('n_splits', n_splits_)\n+\n+        test_net = core.Net(\"example\")\n+        test_net.LengthsSplit(['input_lengths', 'n_splits'], 'output')\n+        workspace.RunNetOnce(test_net)\n+\n+        Y = workspace.FetchBlob('output')\n+        np.testing.assert_array_equal(\n+            Y,\n+            np.array([1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]))\n+\n+    @given(**hu.gcs_cpu_only)\n+    def test_length_split_arg(self, gc, dc):", "path": "caffe2/python/operator_test/length_split_op_test.py", "position": 63, "original_position": 63, "commit_id": "65f88834c297fb582e433aa9f919096aac7095ac", "original_commit_id": "65f88834c297fb582e433aa9f919096aac7095ac", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "Could you also use `assertReferenceChecks` and `assertDeviceChecks` here?", "created_at": "2018-08-17T21:59:49Z", "updated_at": "2018-11-23T15:49:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/10291#discussion_r211042388", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10291", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211042388"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10291#discussion_r211042388"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10291"}}, "body_html": "<p>Could you also use <code>assertReferenceChecks</code> and <code>assertDeviceChecks</code> here?</p>", "body_text": "Could you also use assertReferenceChecks and assertDeviceChecks here?"}