{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211041595", "pull_request_review_id": 147392044, "id": 211041595, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTA0MTU5NQ==", "diff_hunk": "@@ -0,0 +1,76 @@\n+#ifndef CAFFE2_OPERATORS_LENGTH_SPLIT_OP_H_\n+#define CAFFE2_OPERATORS_LENGTH_SPLIT_OP_H_\n+\n+#include \"caffe2/core/common_omp.h\"\n+#include \"caffe2/core/context.h\"\n+#include \"caffe2/core/logging.h\"\n+#include \"caffe2/core/operator.h\"\n+#include \"caffe2/utils/math.h\"\n+\n+namespace caffe2 {\n+\n+template <class Context>\n+class LengthsSplitOp final : public Operator<Context> {\n+ public:\n+  USE_OPERATOR_CONTEXT_FUNCTIONS;\n+\n+  LengthsSplitOp(const OperatorDef& operator_def, Workspace* ws)\n+      : Operator<Context>(operator_def, ws),\n+        n_splits_(OperatorBase::GetSingleArgument<int32_t>(\"n_splits\", 0)) {\n+    if (InputSize() == 1) {\n+      // If not specified, then must have this argument\n+      CAFFE_ENFORCE(\n+          OperatorBase::HasArgument(\"n_splits\"),\n+          \"Argument `n_splits` is missing and was not specified as input.\");\n+    }\n+  }\n+  ~LengthsSplitOp() {}\n+\n+  bool RunOnDevice() override {\n+    const auto& L = Input(0);\n+    CAFFE_ENFORCE(L.ndim() == 1, \"Input `LENGTHS` should be a 1D vector.\");\n+\n+    std::array<int32_t, 1> temp_params = {{n_splits_}};\n+    if (InputSize() > 1) {\n+      // We potentially have n_splits specified as inputs as well\n+      CAFFE_ENFORCE(\n+          Input(1).ndim() == 1 && Input(1).size() == 1,\n+          \"Input `n_splits` should be a vector of size 1.\");\n+\n+      const auto& input1 = Input(1);\n+      context_.template CopyItems<Context, CPUContext>(\n+          input1.meta(),\n+          1,\n+          static_cast<const char*>(input1.raw_data()),", "path": "caffe2/operators/length_split_op.h", "position": 44, "original_position": 44, "commit_id": "65f88834c297fb582e433aa9f919096aac7095ac", "original_commit_id": "65f88834c297fb582e433aa9f919096aac7095ac", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "why cast to `const char*` here? CopyItems takes `void*` so there should be no need to cast.", "created_at": "2018-08-17T21:55:06Z", "updated_at": "2018-11-23T15:49:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/10291#discussion_r211041595", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10291", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211041595"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10291#discussion_r211041595"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10291"}}, "body_html": "<p>why cast to <code>const char*</code> here? CopyItems takes <code>void*</code> so there should be no need to cast.</p>", "body_text": "why cast to const char* here? CopyItems takes void* so there should be no need to cast."}