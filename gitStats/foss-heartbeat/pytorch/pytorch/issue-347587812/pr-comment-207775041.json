{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207775041", "pull_request_review_id": 143453588, "id": 207775041, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc3NTA0MQ==", "diff_hunk": "@@ -394,13 +380,30 @@ static inline bool isIntUsedAsIntList(\n          *arg.type == *ListType::ofInts() && arg.N;\n }\n \n+template<class T>\n+static Value* materializeConstant(T val, Graph& graph,\n+    const SourceRange& r, std::unordered_map<T, Value*>& map) {\n+  auto existing_constant = map.find(val);\n+  if (existing_constant != map.end()) {\n+    return existing_constant->second;\n+  }\n+\n+  WithInsertPoint guard(graph.block()->nodes().front());\n+  auto new_constant = graph.insertConstant(val, r);\n+  map[val] = new_constant;\n+\n+  return new_constant;\n+}\n+\n at::optional<std::vector<Value*>> tryMatchSchema(\n   const FunctionSchema& schema,\n   const SourceRange& loc,\n   Graph& graph,\n   at::ArrayRef<NamedValue> inputs,\n   at::ArrayRef<NamedValue> attributes,\n-  std::ostream& failure_messages) {\n+  std::ostream& failure_messages,\n+  std::unordered_map<int64_t, Value*>* integral_constants,", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 48, "commit_id": "d21055d16045971cf542ce77608bd8850ed3ec35", "original_commit_id": "ce822e5bc801ca411ff2d8b3e729e0f2fb63bbf0", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "These are threaded through here, but then never used.\r\n\r\nMore generally, the constant table is not actually reaching all the places where constants might be inserted in compilation. \r\n\r\nI think the right balance, at least for now, is to use the tables inside the compiler struct where they are easy to access, but not to worry about them for functions that exist outside it (like jit/script/init.cpp functions or tryMatchSchema). These functions are exposed in other places, for instance I have a PR that uses tryMatchSchema so that passes can create schema-checked IR, and it would get awkard to add the additional context. ", "created_at": "2018-08-06T05:10:06Z", "updated_at": "2018-11-23T15:48:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/10231#discussion_r207775041", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10231", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207775041"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10231#discussion_r207775041"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10231"}}, "body_html": "<p>These are threaded through here, but then never used.</p>\n<p>More generally, the constant table is not actually reaching all the places where constants might be inserted in compilation.</p>\n<p>I think the right balance, at least for now, is to use the tables inside the compiler struct where they are easy to access, but not to worry about them for functions that exist outside it (like jit/script/init.cpp functions or tryMatchSchema). These functions are exposed in other places, for instance I have a PR that uses tryMatchSchema so that passes can create schema-checked IR, and it would get awkard to add the additional context.</p>", "body_text": "These are threaded through here, but then never used.\nMore generally, the constant table is not actually reaching all the places where constants might be inserted in compilation.\nI think the right balance, at least for now, is to use the tables inside the compiler struct where they are easy to access, but not to worry about them for functions that exist outside it (like jit/script/init.cpp functions or tryMatchSchema). These functions are exposed in other places, for instance I have a PR that uses tryMatchSchema so that passes can create schema-checked IR, and it would get awkard to add the additional context."}