{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226428944", "pull_request_review_id": 166249795, "id": 226428944, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQyODk0NA==", "diff_hunk": "@@ -0,0 +1,104 @@\n+import expecttest\n+\n+import unittest\n+import string\n+import textwrap\n+import doctest\n+\n+import hypothesis\n+from hypothesis.strategies import text, integers, composite, sampled_from, booleans\n+\n+\n+@composite\n+def text_lineno(draw):\n+    t = draw(text(\"a\\n\"))\n+    lineno = draw(integers(min_value=1, max_value=t.count(\"\\n\") + 1))\n+    return (t, lineno)\n+\n+\n+class TestExpectTest(expecttest.TestCase):\n+    @hypothesis.given(text_lineno())\n+    def test_nth_line_ref(self, t_lineno):\n+        t, lineno = t_lineno\n+        hypothesis.event(\"lineno = {}\".format(lineno))\n+\n+        def nth_line_ref(src, lineno):\n+            xs = src.split(\"\\n\")[:lineno]\n+            xs[-1] = ''\n+            return len(\"\\n\".join(xs))\n+        self.assertEqual(expecttest.nth_line(t, lineno), nth_line_ref(t, lineno))\n+\n+    @hypothesis.given(text(string.printable), booleans(), sampled_from(['\"', \"'\"]))\n+    def test_replace_string_literal_roundtrip(self, t, raw, quote):\n+        if raw:\n+            hypothesis.assume(expecttest.ok_for_raw_triple_quoted_string(t, quote=quote))\n+        prog = \"\"\"\\\n+        r = {r}{quote}placeholder{quote}\n+        r2 = {r}{quote}placeholder2{quote}\n+        r3 = {r}{quote}placeholder3{quote}\n+        \"\"\".format(r='r' if raw else '', quote=quote * 3)\n+        new_prog = expecttest.replace_string_literal(textwrap.dedent(prog), 2, t)[0]\n+        exec(new_prog)\n+        msg = \"program was:\\n{}\".format(new_prog)\n+        self.assertEqual(r, 'placeholder', msg=msg)  # noqa: F821\n+        self.assertEqual(r2, expecttest.normalize_nl(t), msg=msg)  # noqa: F821\n+        self.assertEqual(r3, 'placeholder3', msg=msg)  # noqa: F821\n+\n+    def test_sample(self):\n+        prog = r\"\"\"\n+single_single('''0''')\n+single_multi('''1''')\n+multi_single('''\\\n+2\n+''')\n+multi_multi_less('''\\\n+3\n+4\n+''')\n+multi_multi_same('''\\\n+5\n+''')\n+multi_multi_more('''\\\n+6\n+''')\n+\"\"\"\n+        # NB: These are the end of the statements, not beginning\n+        # TODO: Test other permutations of these edits\n+        edits = [(2, \"a\"),\n+                 (3, \"b\\n\"),\n+                 (6, \"c\"),\n+                 (10, \"d\\n\"),\n+                 (13, \"e\\n\"),\n+                 (16, \"f\\ng\\n\")]\n+        history = expecttest.EditHistory()\n+        fn = 'not_a_real_file.py'\n+        for lineno, actual in edits:\n+            lineno = history.adjust_lineno(fn, lineno)\n+            prog, delta = expecttest.replace_string_literal(prog, lineno, actual)\n+            history.record_edit(fn, lineno, delta)\n+        self.assertExpectedInline(prog, r\"\"\"\n+single_single('''a''')\n+single_multi('''\\\n+b\n+''')\n+multi_single('''c''')\n+multi_multi_less('''\\\n+d\n+''')\n+multi_multi_same('''\\\n+e\n+''')\n+multi_multi_more('''\\\n+f\n+g\n+''')\n+\"\"\")\n+\n+\n+def load_tests(loader, tests, ignore):\n+    tests.addTests(doctest.DocTestSuite(expecttest))\n+    return tests\n+\n+\n+if __name__ == '__main__':", "path": "test/test_expecttest.py", "position": 104, "original_position": 103, "commit_id": "7a509338039dee7626809e32f7da5561a5309950", "original_commit_id": "174c3d646fab1bfe5993a323999c424082f34a4c", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Add this to `run_tests.py`?", "created_at": "2018-10-18T19:04:59Z", "updated_at": "2018-11-23T15:53:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/12825#discussion_r226428944", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12825", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/226428944"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12825#discussion_r226428944"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12825"}}, "body_html": "<p>Add this to <code>run_tests.py</code>?</p>", "body_text": "Add this to run_tests.py?"}