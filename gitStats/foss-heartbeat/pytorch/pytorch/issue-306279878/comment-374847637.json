{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/374847637", "html_url": "https://github.com/pytorch/pytorch/issues/5863#issuecomment-374847637", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5863", "id": 374847637, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDg0NzYzNw==", "user": {"login": "mattiaspaul", "id": 11568065, "node_id": "MDQ6VXNlcjExNTY4MDY1", "avatar_url": "https://avatars1.githubusercontent.com/u/11568065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattiaspaul", "html_url": "https://github.com/mattiaspaul", "followers_url": "https://api.github.com/users/mattiaspaul/followers", "following_url": "https://api.github.com/users/mattiaspaul/following{/other_user}", "gists_url": "https://api.github.com/users/mattiaspaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattiaspaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattiaspaul/subscriptions", "organizations_url": "https://api.github.com/users/mattiaspaul/orgs", "repos_url": "https://api.github.com/users/mattiaspaul/repos", "events_url": "https://api.github.com/users/mattiaspaul/events{/privacy}", "received_events_url": "https://api.github.com/users/mattiaspaul/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-21T06:56:40Z", "updated_at": "2018-03-21T06:56:40Z", "author_association": "NONE", "body_html": "<p>this might not be completely related, but torch.sum also gives unexpected results on large float tensors the first example works fine:</p>\n<pre><code>T = torch.randn(4, 100, 320)\nM = torch.mean(T,0)*4.0\nS = torch.sum(T,0)\nprint(torch.norm(M-S))\n 0\n[torch.FloatTensor of size ()]\n</code></pre>\n<p>But increasing the tensor size leads to a wrong result:</p>\n<pre><code>T = torch.randn(4, 200, 320)\nM = torch.mean(T,0)*4.0\nS = torch.sum(T,0)\nprint(torch.norm(M-S))\n 507.3207\n[torch.FloatTensor of size ()]\n</code></pre>\n<p>I have seen this problem when compiling the newest master version from source on both Linux and Mac.</p>", "body_text": "this might not be completely related, but torch.sum also gives unexpected results on large float tensors the first example works fine:\nT = torch.randn(4, 100, 320)\nM = torch.mean(T,0)*4.0\nS = torch.sum(T,0)\nprint(torch.norm(M-S))\n 0\n[torch.FloatTensor of size ()]\n\nBut increasing the tensor size leads to a wrong result:\nT = torch.randn(4, 200, 320)\nM = torch.mean(T,0)*4.0\nS = torch.sum(T,0)\nprint(torch.norm(M-S))\n 507.3207\n[torch.FloatTensor of size ()]\n\nI have seen this problem when compiling the newest master version from source on both Linux and Mac.", "body": "this might not be completely related, but torch.sum also gives unexpected results on large float tensors the first example works fine:\r\n```\r\nT = torch.randn(4, 100, 320)\r\nM = torch.mean(T,0)*4.0\r\nS = torch.sum(T,0)\r\nprint(torch.norm(M-S))\r\n 0\r\n[torch.FloatTensor of size ()]\r\n```\r\nBut increasing the tensor size leads to a wrong result:\r\n ```\r\nT = torch.randn(4, 200, 320)\r\nM = torch.mean(T,0)*4.0\r\nS = torch.sum(T,0)\r\nprint(torch.norm(M-S))\r\n  507.3207\r\n[torch.FloatTensor of size ()]\r\n```\r\nI have seen this problem when compiling the newest master version from source on both Linux and Mac."}