{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140008779", "pull_request_review_id": 64020970, "id": 140008779, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDAwODc3OQ==", "diff_hunk": "@@ -23,35 +44,60 @@ def export(model, args, f, export_params=True, kwargs=None, verbose=False):\n \n     Arguments:\n         model (torch.nn.Module): the model to be exported.\n-        args (torch.autograd.Variable or tuple of variables): the inputs to\n-            the model, e.g., such that ``model(*args, **kwargs)`` is a valid\n-            invocation of the model (see kwargs below).\n+        args (tuple of arguments): the inputs to\n+            the model, e.g., such that ``model(*args)`` is a valid\n+            invocation of the model.  Any non-Variable arguments will\n+            be hard-coded into the exported model; any Variable arguments\n+            will become inputs of the exported model, in the order they\n+            occur in args.  If args is a Variable, this is equivalent\n+            to having called it with a 1-ary tuple of that Variable.\n+            (Note: passing keyword arguments to the model is not currently\n+            supported.  Give us a shout if you need it.)\n         f: a file-like object (has to implement fileno that returns a file descriptor)\n             or a string containing a file name.  A binary Protobuf will be written\n             to this file.\n         export_params (bool, default True): if specified, all parameters will\n-            be exported.  Set this to False if you are exporting an\n-            untrained model.\n-        kwargs (dict, optional): keyword inputs to the model.\n+            be exported.  Set this to False if you want to export an untrained model.\n+            In this case, the exported model will first take all of its parameters\n+            as arguments, the ordering as specified by ``model.state_dict().values()``\n+        verbose (bool, default False): if specified, we will print out a debug\n+            description of the trace being exported.\n+        training (bool, default False): export the model in training mode.  At\n+            the moment, ONNX is oriented towards exporting models for inference\n+            only, so you will generally not need to set this to True.\n     \"\"\"\n-    _export(model, args, f, export_params, kwargs, verbose)\n+    _export(model, args, f, export_params, verbose, training)\n \n \n-def _export(model, args, f, export_params=True, kwargs=None, verbose=False):\n+def _export(model, args, f, export_params=True, verbose=False, training=False):\n     # Special case for common case of passing a single Variable\n     if isinstance(args, torch.autograd.Variable):\n         args = (args, )\n-    if not kwargs:\n-        kwargs = {}\n-    trace, torch_out = torch.jit.record_trace(model, *args, **kwargs)\n+    # Look at the state_dict *prior* to running the model, as this\n+    # accurately captures what inputs we actually passed to the model.\n+    # If we run it afterwards, a buggy forward pass could have\n+    # added/deleted parameters, changing the structure of the state_dict.", "path": "torch/onnx.py", "position": null, "original_position": 80, "commit_id": "32ae63e6e787ed3eb88e36cb78da3a16c27d725f", "original_commit_id": "9e20d5b58b1d876f66effba438b096345bb0e687", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I will check that the keys match.", "created_at": "2017-09-20T15:40:45Z", "updated_at": "2018-11-23T15:34:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/2781#discussion_r140008779", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2781", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140008779"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2781#discussion_r140008779"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2781"}}, "body_html": "<p>I will check that the keys match.</p>", "body_text": "I will check that the keys match.", "in_reply_to_id": 139987184}