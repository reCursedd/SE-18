{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189422837", "pull_request_review_id": 121606786, "id": 189422837, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQyMjgzNw==", "diff_hunk": "@@ -1,23 +1,23 @@\n #include \"caffe2/utils/threadpool/pthreadpool.h\"\n-#include \"caffe2/utils/threadpool/pthreadpool_impl.h\"\n #include \"caffe2/utils/threadpool/ThreadPool.h\"\n \n \n //\n // External API\n //\n \n-void pthreadpool_compute_1d(struct pthreadpool* threadpool,\n+void pthreadpool_compute_1d(pthreadpool_t threadpool,\n                             pthreadpool_function_1d_t function,\n                             void* argument,\n-                            size_t range) {\n-    threadpool->pool_->run(\n-      [function, argument](int threadId, size_t workId) {\n-        function(argument, workId);\n-      },\n-      range);\n+                            size_t range)\n+{\n+  reinterpret_cast<caffe2::ThreadPool*>(threadpool)->run(\n+    [function, argument](int threadId, size_t workId) {\n+      function(argument, workId);\n+    },\n+    range);\n }\n \n-size_t pthreadpool_get_threads_count(struct pthreadpool* threadpool) {\n-  return threadpool->pool_->getNumThreads();\n+size_t pthreadpool_get_threads_count(pthreadpool_t threadpool) {\n+  return reinterpret_cast<caffe2::ThreadPool*>(threadpool)->getNumThreads();", "path": "caffe2/utils/threadpool/pthreadpool_impl.cc", "position": 35, "original_position": 32, "commit_id": "8fb578086609e5c1ac75dec9b3a895df97225c80", "original_commit_id": "941cd025d7be34c6cd6bc44d5b423efdb7964d6b", "user": {"login": "Maratyszcza", "id": 1093985, "node_id": "MDQ6VXNlcjEwOTM5ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1093985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maratyszcza", "html_url": "https://github.com/Maratyszcza", "followers_url": "https://api.github.com/users/Maratyszcza/followers", "following_url": "https://api.github.com/users/Maratyszcza/following{/other_user}", "gists_url": "https://api.github.com/users/Maratyszcza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maratyszcza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maratyszcza/subscriptions", "organizations_url": "https://api.github.com/users/Maratyszcza/orgs", "repos_url": "https://api.github.com/users/Maratyszcza/repos", "events_url": "https://api.github.com/users/Maratyszcza/events{/privacy}", "received_events_url": "https://api.github.com/users/Maratyszcza/received_events", "type": "User", "site_admin": false}, "body": "`reinterpret_cast` is similar to C-style cast. It is needed because I cast pointers between unrelated class hierarchies: `pthreadpool_t` is a typedef for `struct pthreadpool*`, where `struct pthreadpool` is never fully defined, and not related to `caffe2::ThreadPool`. It works because NNPACK passes threadpool pointer from `nnp_convolution_inference` as is to `pthreadpool_compute...` functions, where it is cast back to `caffe2::ThreadPool*`", "created_at": "2018-05-19T02:47:16Z", "updated_at": "2018-11-23T15:44:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/7666#discussion_r189422837", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7666", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189422837"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7666#discussion_r189422837"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7666"}}, "body_html": "<p><code>reinterpret_cast</code> is similar to C-style cast. It is needed because I cast pointers between unrelated class hierarchies: <code>pthreadpool_t</code> is a typedef for <code>struct pthreadpool*</code>, where <code>struct pthreadpool</code> is never fully defined, and not related to <code>caffe2::ThreadPool</code>. It works because NNPACK passes threadpool pointer from <code>nnp_convolution_inference</code> as is to <code>pthreadpool_compute...</code> functions, where it is cast back to <code>caffe2::ThreadPool*</code></p>", "body_text": "reinterpret_cast is similar to C-style cast. It is needed because I cast pointers between unrelated class hierarchies: pthreadpool_t is a typedef for struct pthreadpool*, where struct pthreadpool is never fully defined, and not related to caffe2::ThreadPool. It works because NNPACK passes threadpool pointer from nnp_convolution_inference as is to pthreadpool_compute... functions, where it is cast back to caffe2::ThreadPool*", "in_reply_to_id": 189421544}