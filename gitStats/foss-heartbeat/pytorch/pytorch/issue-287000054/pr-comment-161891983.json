{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161891983", "pull_request_review_id": 89255163, "id": 161891983, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTg5MTk4Mw==", "diff_hunk": "@@ -0,0 +1,104 @@\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/cuda/CUDAApplyUtils.cuh\"\n+#include <curand.h>\n+#include <curand_kernel.h>\n+#include <curand_philox4x32_x.h>\n+#include <thrust/functional.h>\n+\n+#include <THC/THCGeneral.h>\n+#include <THC/THCHalf.h>\n+#include <THC/THCApply.cuh>\n+#include <THC/THCNumerics.cuh>\n+#include <THC/THCTensorRandom.h>\n+\n+THCGenerator* THCRandom_getGenerator(THCState* state);\n+\n+namespace at {\n+namespace native {\n+\n+namespace dist {\n+  thrust::pair<uint64_t, uint64_t> get_philox_seed(Generator *gen) {\n+    auto gen_ = THCRandom_getGenerator(at::globalContext().thc_state);\n+    return thrust::make_pair(gen_->initial_seed, gen_->philox_seed_offset++);\n+  }\n+\n+  // note that sample_poisson is adapted from Numpy's distributions.c\n+  // see Distributions.cpp for the license\n+  __device__ int64_t sample_poisson(float lambda, curandStatePhilox4_32_10_t *state) {", "path": "aten/src/ATen/native/cuda/Distributions.cu", "position": null, "original_position": 28, "commit_id": "db8fcff8305b83a485ce4ef561bc6afee5b64ac2", "original_commit_id": "5a7d114cda116292fc2a48f029a923428d95bbe4", "user": {"login": "rachtsingh", "id": 1606892, "node_id": "MDQ6VXNlcjE2MDY4OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1606892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rachtsingh", "html_url": "https://github.com/rachtsingh", "followers_url": "https://api.github.com/users/rachtsingh/followers", "following_url": "https://api.github.com/users/rachtsingh/following{/other_user}", "gists_url": "https://api.github.com/users/rachtsingh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rachtsingh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rachtsingh/subscriptions", "organizations_url": "https://api.github.com/users/rachtsingh/orgs", "repos_url": "https://api.github.com/users/rachtsingh/repos", "events_url": "https://api.github.com/users/rachtsingh/events{/privacy}", "received_events_url": "https://api.github.com/users/rachtsingh/received_events", "type": "User", "site_admin": false}, "body": "Ok, I don't think I know how to do this. We need to pass a callable object to the shared `sample_poisson`, but that function needs to know `state` or have a reference to the `THGenerator`. So, it would need to be an `std::function`, which can't be called by `__device__` code. CUDA offers `nvstd::function`, but that only adds support for `__host__/__device__` shared calls in CUDA 8 (here's a link: https://devblogs.nvidia.com/parallelforall/new-compiler-features-cuda-8/) ", "created_at": "2018-01-16T21:30:20Z", "updated_at": "2018-11-23T15:38:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/4556#discussion_r161891983", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4556", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161891983"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4556#discussion_r161891983"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4556"}}, "body_html": "<p>Ok, I don't think I know how to do this. We need to pass a callable object to the shared <code>sample_poisson</code>, but that function needs to know <code>state</code> or have a reference to the <code>THGenerator</code>. So, it would need to be an <code>std::function</code>, which can't be called by <code>__device__</code> code. CUDA offers <code>nvstd::function</code>, but that only adds support for <code>__host__/__device__</code> shared calls in CUDA 8 (here's a link: <a href=\"https://devblogs.nvidia.com/parallelforall/new-compiler-features-cuda-8/\" rel=\"nofollow\">https://devblogs.nvidia.com/parallelforall/new-compiler-features-cuda-8/</a>)</p>", "body_text": "Ok, I don't think I know how to do this. We need to pass a callable object to the shared sample_poisson, but that function needs to know state or have a reference to the THGenerator. So, it would need to be an std::function, which can't be called by __device__ code. CUDA offers nvstd::function, but that only adds support for __host__/__device__ shared calls in CUDA 8 (here's a link: https://devblogs.nvidia.com/parallelforall/new-compiler-features-cuda-8/)", "in_reply_to_id": 161811746}