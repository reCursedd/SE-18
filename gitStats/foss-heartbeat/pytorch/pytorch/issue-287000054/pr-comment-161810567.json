{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161810567", "pull_request_review_id": 89149242, "id": 161810567, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTgxMDU2Nw==", "diff_hunk": "@@ -41,11 +41,11 @@ __host__ void createGeneratorState(Generator* gen, uint64_t seed)\n \n __host__ void THCRandom_getRNGState(THCState* state, THByteTensor *rng_state)\n {\n-  Generator* gen = THCRandom_getGenerator(state);\n+  THCGenerator* gen = THCRandom_getGenerator(state);\n \n   // The RNG state comprises the MTPG32 states and the seed.\n   static const size_t states_size = MAX_NUM_BLOCKS * sizeof(curandStateMtgp32);\n-  static const size_t seed_size = sizeof(gen->initial_seed);\n+  static const size_t seed_size = sizeof(gen->initial_seed) + sizeof(gen->philox_seed_offset);", "path": "aten/src/THC/THCTensorRandom.cu", "position": null, "original_position": 31, "commit_id": "db8fcff8305b83a485ce4ef561bc6afee5b64ac2", "original_commit_id": "5a7d114cda116292fc2a48f029a923428d95bbe4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Ugh, can you split the `memcpy` below into two calls (one for `initial_seed` and one for `philox_seed_offset`)? It's not guaranteed that there is no padding between them in `THCState` and it introduces a silent invariant that they should be consecutive.\r\n\r\nAlso, this is going to make it impossible to seed CUDA generators with old saved states (in case anyone did so for reproducibility). It would be nice to accept a smaller tensor in `setRNGState` and default to offset of `0` then", "created_at": "2018-01-16T16:25:48Z", "updated_at": "2018-11-23T15:38:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/4556#discussion_r161810567", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4556", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161810567"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4556#discussion_r161810567"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4556"}}, "body_html": "<p>Ugh, can you split the <code>memcpy</code> below into two calls (one for <code>initial_seed</code> and one for <code>philox_seed_offset</code>)? It's not guaranteed that there is no padding between them in <code>THCState</code> and it introduces a silent invariant that they should be consecutive.</p>\n<p>Also, this is going to make it impossible to seed CUDA generators with old saved states (in case anyone did so for reproducibility). It would be nice to accept a smaller tensor in <code>setRNGState</code> and default to offset of <code>0</code> then</p>", "body_text": "Ugh, can you split the memcpy below into two calls (one for initial_seed and one for philox_seed_offset)? It's not guaranteed that there is no padding between them in THCState and it introduces a silent invariant that they should be consecutive.\nAlso, this is going to make it impossible to seed CUDA generators with old saved states (in case anyone did so for reproducibility). It would be nice to accept a smaller tensor in setRNGState and default to offset of 0 then"}