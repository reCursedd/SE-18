{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161820320", "pull_request_review_id": 89170134, "id": 161820320, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTgyMDMyMA==", "diff_hunk": "@@ -0,0 +1,104 @@\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/cuda/CUDAApplyUtils.cuh\"\n+#include <curand.h>\n+#include <curand_kernel.h>\n+#include <curand_philox4x32_x.h>\n+#include <thrust/functional.h>\n+\n+#include <THC/THCGeneral.h>\n+#include <THC/THCHalf.h>\n+#include <THC/THCApply.cuh>\n+#include <THC/THCNumerics.cuh>\n+#include <THC/THCTensorRandom.h>\n+\n+THCGenerator* THCRandom_getGenerator(THCState* state);\n+\n+namespace at {\n+namespace native {\n+\n+namespace dist {\n+  thrust::pair<uint64_t, uint64_t> get_philox_seed(Generator *gen) {\n+    auto gen_ = THCRandom_getGenerator(at::globalContext().thc_state);\n+    return thrust::make_pair(gen_->initial_seed, gen_->philox_seed_offset++);\n+  }\n+\n+  // note that sample_poisson is adapted from Numpy's distributions.c\n+  // see Distributions.cpp for the license\n+  __device__ int64_t sample_poisson(float lambda, curandStatePhilox4_32_10_t *state) {", "path": "aten/src/ATen/native/cuda/Distributions.cu", "position": null, "original_position": 28, "commit_id": "db8fcff8305b83a485ce4ef561bc6afee5b64ac2", "original_commit_id": "5a7d114cda116292fc2a48f029a923428d95bbe4", "user": {"login": "rachtsingh", "id": 1606892, "node_id": "MDQ6VXNlcjE2MDY4OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1606892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rachtsingh", "html_url": "https://github.com/rachtsingh", "followers_url": "https://api.github.com/users/rachtsingh/followers", "following_url": "https://api.github.com/users/rachtsingh/following{/other_user}", "gists_url": "https://api.github.com/users/rachtsingh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rachtsingh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rachtsingh/subscriptions", "organizations_url": "https://api.github.com/users/rachtsingh/orgs", "repos_url": "https://api.github.com/users/rachtsingh/repos", "events_url": "https://api.github.com/users/rachtsingh/events{/privacy}", "received_events_url": "https://api.github.com/users/rachtsingh/received_events", "type": "User", "site_admin": false}, "body": "I was thinking about this - the issue is the sampler required is different, but we could abstract it away using a function pointer (i.e. for getting a uniform, and getting a normal, etc.). The other thing is that the CPU version runs on double precision, but the GPU is at float, since it's slower to do double. Let me know what you think.", "created_at": "2018-01-16T16:56:45Z", "updated_at": "2018-11-23T15:38:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/4556#discussion_r161820320", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4556", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161820320"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4556#discussion_r161820320"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4556"}}, "body_html": "<p>I was thinking about this - the issue is the sampler required is different, but we could abstract it away using a function pointer (i.e. for getting a uniform, and getting a normal, etc.). The other thing is that the CPU version runs on double precision, but the GPU is at float, since it's slower to do double. Let me know what you think.</p>", "body_text": "I was thinking about this - the issue is the sampler required is different, but we could abstract it away using a function pointer (i.e. for getting a uniform, and getting a normal, etc.). The other thing is that the CPU version runs on double precision, but the GPU is at float, since it's slower to do double. Let me know what you think.", "in_reply_to_id": 161811746}