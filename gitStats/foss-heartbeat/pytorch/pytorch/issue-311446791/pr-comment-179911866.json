{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179911866", "pull_request_review_id": 110250199, "id": 179911866, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTkxMTg2Ng==", "diff_hunk": "@@ -51,80 +33,121 @@ const ::google::protobuf::RepeatedPtrField<::std::string>& getBlobs(\n   }\n   CAFFE_THROW(\"Blob not found: \", name);\n }\n-} // namespace\n \n-Predictor::Predictor(const MetaNetDef& def, Workspace* parent)\n-    : Predictor(\n-          getNet(\n+void shareInputTensor(\n+    Workspace* ws,\n+    const std::string& name,\n+    TensorCPU* input) {\n+  enforceIsTensor<TensorCPU>(ws, name);\n+  auto* blob = ws->GetBlob(name);\n+  CAFFE_ENFORCE(blob, \"Blob: \", name, \" does not exist\");\n+  auto* tensor = blob->template GetMutable<TensorCPU>();\n+  tensor->ResizeLike(*input);\n+  tensor->ShareData(*input);\n+}\n+\n+std::shared_ptr<TensorCPU> extractOutputTensor(Workspace* ws, const std::string& name) {\n+  enforceIsTensor<TensorCPU>(ws, name);\n+  auto* blob = ws->GetBlob(name);\n+  CAFFE_ENFORCE(blob, \"Blob: \", name, \" does not exist\");\n+\n+  // Since the tensor is a member of blob, we should not delete the pointer.\n+  // By given a customized deleter, the pointer won't be deleted on shared_ptr deconstruction.\n+  return std::shared_ptr<TensorCPU>(blob->template GetMutable<TensorCPU>(), [](TensorCPU *){});", "path": "caffe2/core/predictor.cc", "position": 85, "original_position": 73, "commit_id": "9a6956bcec7153827087c118a920ed1d37d464e9", "original_commit_id": "fcb324b01291950c3dfb52980c9ccee757e980c7", "user": {"login": "harrysummer", "id": 1215413, "node_id": "MDQ6VXNlcjEyMTU0MTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1215413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harrysummer", "html_url": "https://github.com/harrysummer", "followers_url": "https://api.github.com/users/harrysummer/followers", "following_url": "https://api.github.com/users/harrysummer/following{/other_user}", "gists_url": "https://api.github.com/users/harrysummer/gists{/gist_id}", "starred_url": "https://api.github.com/users/harrysummer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harrysummer/subscriptions", "organizations_url": "https://api.github.com/users/harrysummer/orgs", "repos_url": "https://api.github.com/users/harrysummer/repos", "events_url": "https://api.github.com/users/harrysummer/events{/privacy}", "received_events_url": "https://api.github.com/users/harrysummer/received_events", "type": "User", "site_admin": false}, "body": "The reason of changing the interface from raw pointer to `shared_ptr` is to make it compatible to thread-safe evaluation case, in which we temporarily create a new `Workspace` and new `Blob`'s for calculation. Therefore, we should take responsibility to deallocate the memory allocation we have made for those temporary `Tensor`'s, and `shared_ptr` is the only clean solution. Then for non-thread-safe case, in order to make them share the same interface, we have to do these hacks.", "created_at": "2018-04-07T08:28:53Z", "updated_at": "2018-11-23T15:41:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/6298#discussion_r179911866", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6298", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179911866"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6298#discussion_r179911866"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6298"}}, "body_html": "<p>The reason of changing the interface from raw pointer to <code>shared_ptr</code> is to make it compatible to thread-safe evaluation case, in which we temporarily create a new <code>Workspace</code> and new <code>Blob</code>'s for calculation. Therefore, we should take responsibility to deallocate the memory allocation we have made for those temporary <code>Tensor</code>'s, and <code>shared_ptr</code> is the only clean solution. Then for non-thread-safe case, in order to make them share the same interface, we have to do these hacks.</p>", "body_text": "The reason of changing the interface from raw pointer to shared_ptr is to make it compatible to thread-safe evaluation case, in which we temporarily create a new Workspace and new Blob's for calculation. Therefore, we should take responsibility to deallocate the memory allocation we have made for those temporary Tensor's, and shared_ptr is the only clean solution. Then for non-thread-safe case, in order to make them share the same interface, we have to do these hacks.", "in_reply_to_id": 179907466}