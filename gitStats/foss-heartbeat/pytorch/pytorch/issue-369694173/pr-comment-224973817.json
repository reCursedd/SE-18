{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224973817", "pull_request_review_id": 164478541, "id": 224973817, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3MzgxNw==", "diff_hunk": "@@ -274,16 +270,27 @@ def declkey(decl):\n                 ])\n                 decl['has_tensor_options'] = True\n \n-    jit_decls = sort_decls(jit_decls)\n-    for decl in jit_decls:\n-        ops.append(OPERATOR.substitute(signature=signature(decl),\n-                                       op=emit_decl_variant(decl)))\n-\n-    # Sort the generated snippets to ensure that the generation is deterministic\n-    env = {\n-        'constructors': ops,\n-    }\n-    write(out, 'register_aten_ops.cpp', REGISTER_ATEN_OPS_CPP, env)\n+    # Group and sort the generated snippets to ensure that the\n+    # generation is deterministic\n+    jit_decl_groups = sort_decls(jit_decls)\n+\n+    # NOTE: see the comment at the top of the register_aten_ops.cpp\n+    # template regarding sharding of the generated files.\n+    num_shards = 3\n+    shards = [[] for _ in range(num_shards)]\n+\n+    # ops are assigned arbitrarily but stably to a file based on hash\n+    for group in jit_decl_groups:\n+        x = sum(ord(c) for c in group[0]['name']) % num_shards\n+        for decl in group:\n+            shards[x].append(OPERATOR.substitute(signature=signature(decl),\n+                                                 op=emit_decl_variant(decl)))\n+\n+    for i, shard in enumerate(shards):\n+        env = {\n+            'constructors': shard,\n+        }\n+        write(out, 'register_aten_ops-%d.cpp' % i, REGISTER_ATEN_OPS_CPP, env)", "path": "tools/jit/gen_jit_dispatch.py", "position": null, "original_position": 47, "commit_id": "05b09de249370f8785d4623dfc27d5d16158467d", "original_commit_id": "db57af7bb99f7c96e39500e5857aab04310623ba", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "~~This is not portable to Python 3. Use 'register_aten_ops-{}.cpp'.format(i) instead~~\r\n\r\nI'm wrong, it's not a portability problem, just a style one.", "created_at": "2018-10-13T22:32:36Z", "updated_at": "2018-11-23T15:52:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/12615#discussion_r224973817", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/224973817"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12615#discussion_r224973817"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12615"}}, "body_html": "<p><del>This is not portable to Python 3. Use 'register_aten_ops-{}.cpp'.format(i) instead</del></p>\n<p>I'm wrong, it's not a portability problem, just a style one.</p>", "body_text": "This is not portable to Python 3. Use 'register_aten_ops-{}.cpp'.format(i) instead\nI'm wrong, it's not a portability problem, just a style one."}