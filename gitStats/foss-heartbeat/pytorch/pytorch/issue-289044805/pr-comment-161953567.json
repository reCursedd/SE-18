{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161953567", "pull_request_review_id": 89325572, "id": 161953567, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTk1MzU2Nw==", "diff_hunk": "@@ -53,11 +60,13 @@ def entropy(self):\n         return self._categorical.entropy()\n \n     def enumerate_support(self):\n-        probs = self._categorical.probs\n         n = self.event_shape[0]\n-        if isinstance(probs, Variable):\n-            values = Variable(torch.eye(n, out=probs.data.new(n, n)))\n+        out = self._categorical.new((n, n))\n+        if isinstance(out, Variable):", "path": "torch/distributions/one_hot_categorical.py", "position": null, "original_position": 29, "commit_id": "e7b2bbb187b455c58029aa4ac87fd0b85f47989b", "original_commit_id": "56d79469b1054671f207b14b7707c1704fd5730d", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "I guess you could simplify a tiny bit\r\n```py\r\nvalues = self._categorical.new((n, n))\r\ntorch.eye(n, out=(values.data if isinstance(values, Variable) else values)\r\n```\r\nIf `torch.eye(out=values)` really doesn't work for CUDA then we should ask Adam what to do. (because your `out` would live on CUDA).", "created_at": "2018-01-17T04:24:55Z", "updated_at": "2018-11-23T15:38:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/4691#discussion_r161953567", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4691", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161953567"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4691#discussion_r161953567"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4691"}}, "body_html": "<p>I guess you could simplify a tiny bit</p>\n<div class=\"highlight highlight-source-python\"><pre>values <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._categorical.new((n, n))\ntorch.eye(n, <span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>(values.data <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(values, Variable) <span class=\"pl-k\">else</span> values)</pre></div>\n<p>If <code>torch.eye(out=values)</code> really doesn't work for CUDA then we should ask Adam what to do. (because your <code>out</code> would live on CUDA).</p>", "body_text": "I guess you could simplify a tiny bit\nvalues = self._categorical.new((n, n))\ntorch.eye(n, out=(values.data if isinstance(values, Variable) else values)\nIf torch.eye(out=values) really doesn't work for CUDA then we should ask Adam what to do. (because your out would live on CUDA).", "in_reply_to_id": 161942583}