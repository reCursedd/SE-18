{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340352492", "html_url": "https://github.com/pytorch/pytorch/issues/3358#issuecomment-340352492", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3358", "id": 340352492, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM1MjQ5Mg==", "user": {"login": "Mickey-Livesgood", "id": 31745473, "node_id": "MDQ6VXNlcjMxNzQ1NDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/31745473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mickey-Livesgood", "html_url": "https://github.com/Mickey-Livesgood", "followers_url": "https://api.github.com/users/Mickey-Livesgood/followers", "following_url": "https://api.github.com/users/Mickey-Livesgood/following{/other_user}", "gists_url": "https://api.github.com/users/Mickey-Livesgood/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mickey-Livesgood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mickey-Livesgood/subscriptions", "organizations_url": "https://api.github.com/users/Mickey-Livesgood/orgs", "repos_url": "https://api.github.com/users/Mickey-Livesgood/repos", "events_url": "https://api.github.com/users/Mickey-Livesgood/events{/privacy}", "received_events_url": "https://api.github.com/users/Mickey-Livesgood/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-30T06:12:22Z", "updated_at": "2017-10-30T06:57:36Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3382128\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/IssamLaradji\">@IssamLaradji</a><br>\nThanks for the reply.<br>\nI have tried it, but my gradients are not all zero.. I guess that it has something to do with the <code>step()</code> part. This is an example of what your code prints:</p>\n<pre><code>-0.5104657087122177\n-0.058136511710472405\n4.710732403683254\n0.3100423458381556\n-10.81544414441908\n-1.4291214804979973\n8.55161297514863\n1.877118336444255\n0.0\n0.0\n</code></pre>\n<p>Edit:<br>\nAlthough not all the grads are 0, it seems that some of them are. I thought one reason for it that I have some layers \"die\" during the gradient descent, because of the ReLU activation function.<br>\nI tried to tweak the learning rate better and I got back to the good accuracy. It seems that when introducing mini-batch training - the learning rate had a smaller \"sweet spot\".<br>\nCan someone confirm my thought? If so, why did it happen with the mini-batches? Also, if you think that that was the problem indeed - I guess the case can be closed.<br>\nThanks a lot!</p>\n<p>Edit 2:<br>\nIt happens even if I remove the ReLU, so it's not the activation function.</p>", "body_text": "@IssamLaradji\nThanks for the reply.\nI have tried it, but my gradients are not all zero.. I guess that it has something to do with the step() part. This is an example of what your code prints:\n-0.5104657087122177\n-0.058136511710472405\n4.710732403683254\n0.3100423458381556\n-10.81544414441908\n-1.4291214804979973\n8.55161297514863\n1.877118336444255\n0.0\n0.0\n\nEdit:\nAlthough not all the grads are 0, it seems that some of them are. I thought one reason for it that I have some layers \"die\" during the gradient descent, because of the ReLU activation function.\nI tried to tweak the learning rate better and I got back to the good accuracy. It seems that when introducing mini-batch training - the learning rate had a smaller \"sweet spot\".\nCan someone confirm my thought? If so, why did it happen with the mini-batches? Also, if you think that that was the problem indeed - I guess the case can be closed.\nThanks a lot!\nEdit 2:\nIt happens even if I remove the ReLU, so it's not the activation function.", "body": "@IssamLaradji \r\nThanks for the reply.\r\nI have tried it, but my gradients are not all zero.. I guess that it has something to do with the `step()` part. This is an example of what your code prints:\r\n```\r\n-0.5104657087122177\r\n-0.058136511710472405\r\n4.710732403683254\r\n0.3100423458381556\r\n-10.81544414441908\r\n-1.4291214804979973\r\n8.55161297514863\r\n1.877118336444255\r\n0.0\r\n0.0\r\n```\r\n\r\nEdit:\r\nAlthough not all the grads are 0, it seems that some of them are. I thought one reason for it that I have some layers \"die\" during the gradient descent, because of the ReLU activation function.\r\nI tried to tweak the learning rate better and I got back to the good accuracy. It seems that when introducing mini-batch training - the learning rate had a smaller \"sweet spot\". \r\nCan someone confirm my thought? If so, why did it happen with the mini-batches? Also, if you think that that was the problem indeed - I guess the case can be closed.\r\nThanks a lot!\r\n\r\nEdit 2:\r\nIt happens even if I remove the ReLU, so it's not the activation function."}