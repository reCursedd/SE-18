{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/305696922", "html_url": "https://github.com/pytorch/pytorch/issues/1362#issuecomment-305696922", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1362", "id": 305696922, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTY5NjkyMg==", "user": {"login": "tonyyuango", "id": 19245634, "node_id": "MDQ6VXNlcjE5MjQ1NjM0", "avatar_url": "https://avatars3.githubusercontent.com/u/19245634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonyyuango", "html_url": "https://github.com/tonyyuango", "followers_url": "https://api.github.com/users/tonyyuango/followers", "following_url": "https://api.github.com/users/tonyyuango/following{/other_user}", "gists_url": "https://api.github.com/users/tonyyuango/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonyyuango/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonyyuango/subscriptions", "organizations_url": "https://api.github.com/users/tonyyuango/orgs", "repos_url": "https://api.github.com/users/tonyyuango/repos", "events_url": "https://api.github.com/users/tonyyuango/events{/privacy}", "received_events_url": "https://api.github.com/users/tonyyuango/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-02T05:56:54Z", "updated_at": "2017-06-02T05:56:54Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20216001\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/parthaca\">@parthaca</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4556044\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stonesjtu\">@Stonesjtu</a>! Your implementations help me a lot! I'm new to both pytorch and deep learning, and I just transfer to python from Java, so I encountered some difficulties when reading your code. It would be appreciated if you could clarify them.</p>\n<p>I found <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20216001\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/parthaca\">@parthaca</a> uses the same parameters (weight and bias) for both encoder and nce decoder (\"self.decoder.weight = self.encoder.weight\" in model.py). I'm not quite clear about the reason. Does it mean that the input and output spaces must be the same?</p>\n<p>I implemented my nce by following <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4556044\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Stonesjtu\">@Stonesjtu</a> 's code as it came out a little earlier, but I found the parameters of the decoder don't change during model fitting. Perhaps it's because the decoder is a part of the loss function and its parameters are not involved in the backward propagation (please correct me if I'm wrong). Thus I put the decoder into the RNN model and then it worked.</p>", "body_text": "Thanks @parthaca and @Stonesjtu! Your implementations help me a lot! I'm new to both pytorch and deep learning, and I just transfer to python from Java, so I encountered some difficulties when reading your code. It would be appreciated if you could clarify them.\nI found @parthaca uses the same parameters (weight and bias) for both encoder and nce decoder (\"self.decoder.weight = self.encoder.weight\" in model.py). I'm not quite clear about the reason. Does it mean that the input and output spaces must be the same?\nI implemented my nce by following @Stonesjtu 's code as it came out a little earlier, but I found the parameters of the decoder don't change during model fitting. Perhaps it's because the decoder is a part of the loss function and its parameters are not involved in the backward propagation (please correct me if I'm wrong). Thus I put the decoder into the RNN model and then it worked.", "body": "Thanks @parthaca and @Stonesjtu! Your implementations help me a lot! I'm new to both pytorch and deep learning, and I just transfer to python from Java, so I encountered some difficulties when reading your code. It would be appreciated if you could clarify them.\r\n\r\nI found @parthaca uses the same parameters (weight and bias) for both encoder and nce decoder (\"self.decoder.weight = self.encoder.weight\" in model.py). I'm not quite clear about the reason. Does it mean that the input and output spaces must be the same? \r\n\r\nI implemented my nce by following @Stonesjtu 's code as it came out a little earlier, but I found the parameters of the decoder don't change during model fitting. Perhaps it's because the decoder is a part of the loss function and its parameters are not involved in the backward propagation (please correct me if I'm wrong). Thus I put the decoder into the RNN model and then it worked."}