{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/300132470", "html_url": "https://github.com/pytorch/pytorch/issues/1362#issuecomment-300132470", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1362", "id": 300132470, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDEzMjQ3MA==", "user": {"login": "Stonesjtu", "id": 4556044, "node_id": "MDQ6VXNlcjQ1NTYwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4556044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stonesjtu", "html_url": "https://github.com/Stonesjtu", "followers_url": "https://api.github.com/users/Stonesjtu/followers", "following_url": "https://api.github.com/users/Stonesjtu/following{/other_user}", "gists_url": "https://api.github.com/users/Stonesjtu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stonesjtu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stonesjtu/subscriptions", "organizations_url": "https://api.github.com/users/Stonesjtu/orgs", "repos_url": "https://api.github.com/users/Stonesjtu/repos", "events_url": "https://api.github.com/users/Stonesjtu/events{/privacy}", "received_events_url": "https://api.github.com/users/Stonesjtu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-09T11:10:33Z", "updated_at": "2017-05-09T11:10:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=414788\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nsaphra\">@nsaphra</a> I have written an NCELoss module that takes the same parameters as <code>nn.nllloss</code>. The only difference is the unnormalized probability without softmax . But actually the NCE module should replace the traditional linear decoder at the output layer right before softmax, only in this way the complexity decreases from <strong>|V|</strong> to <strong>k+1</strong>.<br>\nSuch a module is stateful because it stores the decoder matrix, and, in my opinion it's beyond a <strong>simple</strong> 'Loss' function.<br>\nCan I have an early access to your working code?</p>", "body_text": "@nsaphra I have written an NCELoss module that takes the same parameters as nn.nllloss. The only difference is the unnormalized probability without softmax . But actually the NCE module should replace the traditional linear decoder at the output layer right before softmax, only in this way the complexity decreases from |V| to k+1.\nSuch a module is stateful because it stores the decoder matrix, and, in my opinion it's beyond a simple 'Loss' function.\nCan I have an early access to your working code?", "body": "@nsaphra I have written an NCELoss module that takes the same parameters as `nn.nllloss`. The only difference is the unnormalized probability without softmax . But actually the NCE module should replace the traditional linear decoder at the output layer right before softmax, only in this way the complexity decreases from **|V|** to **k+1**.\r\nSuch a module is stateful because it stores the decoder matrix, and, in my opinion it's beyond a **simple** 'Loss' function.\r\nCan I have an early access to your working code?"}