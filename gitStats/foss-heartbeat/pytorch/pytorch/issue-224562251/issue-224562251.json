{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1362", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1362/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1362/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1362/events", "html_url": "https://github.com/pytorch/pytorch/issues/1362", "id": 224562251, "node_id": "MDU6SXNzdWUyMjQ1NjIyNTE=", "number": 1362, "title": "noise contrastive estimation/negative sampling", "user": {"login": "nsaphra", "id": 414788, "node_id": "MDQ6VXNlcjQxNDc4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/414788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsaphra", "html_url": "https://github.com/nsaphra", "followers_url": "https://api.github.com/users/nsaphra/followers", "following_url": "https://api.github.com/users/nsaphra/following{/other_user}", "gists_url": "https://api.github.com/users/nsaphra/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsaphra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsaphra/subscriptions", "organizations_url": "https://api.github.com/users/nsaphra/orgs", "repos_url": "https://api.github.com/users/nsaphra/repos", "events_url": "https://api.github.com/users/nsaphra/events{/privacy}", "received_events_url": "https://api.github.com/users/nsaphra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2017-04-26T18:40:29Z", "updated_at": "2018-02-27T11:40:07Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>There isn't a standard loss function implementing this, even though it's pretty common. I am perfectly willing to implement it myself, if nobody else feels like it. It shouldn't be terribly complicated. I would structure it something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">NCELoss</span>(<span class=\"pl-e\">torch</span>.<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">modules</span>.<span class=\"pl-e\">loss</span>.<span class=\"pl-e\">_Loss</span>):\n    <span class=\"pl-s\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">\"\"\"</span>Noise contrastive estimation loss function.</span>\n<span class=\"pl-s\">    Args:</span>\n<span class=\"pl-s\">        num_classes: int number of classes for the output layer</span>\n<span class=\"pl-s\">        num_sampled: int number of samples to extract from noise distribution</span>\n<span class=\"pl-s\">        noise_sampler: () -&gt; int function</span>\n<span class=\"pl-s\">            Function to generate k class labels according to noise distribution.</span>\n<span class=\"pl-s\">            By default, noise will be assumed log uniform unigram.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Shape:</span>\n<span class=\"pl-s\">        - Input: :math:`(N, C)` where `C = num_classes`</span>\n<span class=\"pl-s\">        - Target: :math:`(N)` where each value is `0 &lt;= targets[i] &lt;= C-1`</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span></pre></div>\n<p>The API for tensorflow also uses a parameter <code>subtract_log_q</code> so that by setting it to <code>False</code> you can switch to a negative sampling objective from nce. Is this worth doing?</p>\n<p>Is this something that already exists? Is this something worth implementing?</p>", "body_text": "There isn't a standard loss function implementing this, even though it's pretty common. I am perfectly willing to implement it myself, if nobody else feels like it. It shouldn't be terribly complicated. I would structure it something like:\nclass NCELoss(torch.nn.modules.loss._Loss):\n    r\"\"\"Noise contrastive estimation loss function.\n    Args:\n        num_classes: int number of classes for the output layer\n        num_sampled: int number of samples to extract from noise distribution\n        noise_sampler: () -> int function\n            Function to generate k class labels according to noise distribution.\n            By default, noise will be assumed log uniform unigram.\n\n    Shape:\n        - Input: :math:`(N, C)` where `C = num_classes`\n        - Target: :math:`(N)` where each value is `0 <= targets[i] <= C-1`\n    \"\"\"\nThe API for tensorflow also uses a parameter subtract_log_q so that by setting it to False you can switch to a negative sampling objective from nce. Is this worth doing?\nIs this something that already exists? Is this something worth implementing?", "body": "There isn't a standard loss function implementing this, even though it's pretty common. I am perfectly willing to implement it myself, if nobody else feels like it. It shouldn't be terribly complicated. I would structure it something like:\r\n```python\r\nclass NCELoss(torch.nn.modules.loss._Loss):\r\n    r\"\"\"Noise contrastive estimation loss function.\r\n    Args:\r\n        num_classes: int number of classes for the output layer\r\n        num_sampled: int number of samples to extract from noise distribution\r\n        noise_sampler: () -> int function\r\n            Function to generate k class labels according to noise distribution.\r\n            By default, noise will be assumed log uniform unigram.\r\n\r\n    Shape:\r\n        - Input: :math:`(N, C)` where `C = num_classes`\r\n        - Target: :math:`(N)` where each value is `0 <= targets[i] <= C-1`\r\n    \"\"\"\r\n```\r\nThe API for tensorflow also uses a parameter `subtract_log_q` so that by setting it to `False` you can switch to a negative sampling objective from nce. Is this worth doing?\r\n\r\nIs this something that already exists? Is this something worth implementing?"}