{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/364481859", "html_url": "https://github.com/pytorch/pytorch/issues/5157#issuecomment-364481859", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5157", "id": 364481859, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDQ4MTg1OQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-09T16:22:55Z", "updated_at": "2018-02-09T16:23:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Good catch, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11662379\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ptrblck\">@ptrblck</a>!</p>\n<p>Based on how BCELoss <a href=\"https://github.com/pytorch/pytorch/blob/ccf4dc15250534e6906aaca696f94b430a4da443/aten/src/THNN/generic/BCECriterion.c#L17\">is implemented</a>, the weights look like they should be per-element weights, not class weights. Correct me if I'm wrong, but I don't think BCELoss has a concept of per-class weights because the inputs and targets are values between 0 and 1.</p>\n<p>In this respect the current behavior makes sense (weights of size <code>(4,)</code> are not broadcastable to the input size of <code>(4, 2, 2)</code>). I think the best thing to do is to fix the docs.</p>", "body_text": "Good catch, @ptrblck!\nBased on how BCELoss is implemented, the weights look like they should be per-element weights, not class weights. Correct me if I'm wrong, but I don't think BCELoss has a concept of per-class weights because the inputs and targets are values between 0 and 1.\nIn this respect the current behavior makes sense (weights of size (4,) are not broadcastable to the input size of (4, 2, 2)). I think the best thing to do is to fix the docs.", "body": "Good catch, @ptrblck!\r\n\r\nBased on how BCELoss [is implemented](https://github.com/pytorch/pytorch/blob/ccf4dc15250534e6906aaca696f94b430a4da443/aten/src/THNN/generic/BCECriterion.c#L17), the weights look like they should be per-element weights, not class weights. Correct me if I'm wrong, but I don't think BCELoss has a concept of per-class weights because the inputs and targets are values between 0 and 1.\r\n\r\nIn this respect the current behavior makes sense (weights of size `(4,)` are not broadcastable to the input size of `(4, 2, 2)`). I think the best thing to do is to fix the docs."}