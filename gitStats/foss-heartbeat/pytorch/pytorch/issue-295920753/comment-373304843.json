{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373304843", "html_url": "https://github.com/pytorch/pytorch/issues/5157#issuecomment-373304843", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5157", "id": 373304843, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzMwNDg0Mw==", "user": {"login": "ptrblck", "id": 11662379, "node_id": "MDQ6VXNlcjExNjYyMzc5", "avatar_url": "https://avatars3.githubusercontent.com/u/11662379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrblck", "html_url": "https://github.com/ptrblck", "followers_url": "https://api.github.com/users/ptrblck/followers", "following_url": "https://api.github.com/users/ptrblck/following{/other_user}", "gists_url": "https://api.github.com/users/ptrblck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrblck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrblck/subscriptions", "organizations_url": "https://api.github.com/users/ptrblck/orgs", "repos_url": "https://api.github.com/users/ptrblck/repos", "events_url": "https://api.github.com/users/ptrblck/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrblck/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-15T08:56:45Z", "updated_at": "2018-03-15T08:56:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> What do you think about multi-label classification using BCELoss?<br>\nIt seems the <code>weights</code> can be used as a class weight in this case.<br>\nRelated to <a href=\"https://discuss.pytorch.org/t/what-is-the-difference-between-bcewithlogitsloss-and-multilabelsoftmarginloss/14944\" rel=\"nofollow\">this</a> thread:</p>\n<pre><code>x = Variable(torch.randn(10, 3))\ny = Variable(torch.FloatTensor(10, 3).random_(2))\n\n# double the loss for class 1\nclass_weight = torch.FloatTensor([1.0, 2.0, 1.0])\n# double the loss for last sample\nelement_weight = torch.FloatTensor([1.0]*9 + [2.0]).view(-1, 1)\nelement_weight = element_weight.repeat(1, 3)\n\nbce_criterion = nn.BCEWithLogitsLoss(weight=None, reduce=False)\nmulti_criterion = nn.MultiLabelSoftMarginLoss(weight=None, reduce=False)\n\nbce_criterion_class = nn.BCEWithLogitsLoss(weight=class_weight, reduce=False)\nmulti_criterion_class = nn.MultiLabelSoftMarginLoss(weight=class_weight, reduce=False)\n\nbce_criterion_element = nn.BCEWithLogitsLoss(weight=element_weight, reduce=False)\nmulti_criterion_element = nn.MultiLabelSoftMarginLoss(weight=element_weight, reduce=False)\n\nbce_loss = bce_criterion(x, y)\nmulti_loss = multi_criterion(x, y)\n\nbce_loss_class = bce_criterion_class(x, y)\nmulti_loss_class = multi_criterion_class(x, y)\n\nbce_loss_element = bce_criterion_element(x, y)\nmulti_loss_element = multi_criterion_element(x, y)\n\nprint(bce_loss - multi_loss)\nprint(bce_loss_class - multi_loss_class)\nprint(bce_loss_element - multi_loss_element)\n</code></pre>", "body_text": "@zou3519 What do you think about multi-label classification using BCELoss?\nIt seems the weights can be used as a class weight in this case.\nRelated to this thread:\nx = Variable(torch.randn(10, 3))\ny = Variable(torch.FloatTensor(10, 3).random_(2))\n\n# double the loss for class 1\nclass_weight = torch.FloatTensor([1.0, 2.0, 1.0])\n# double the loss for last sample\nelement_weight = torch.FloatTensor([1.0]*9 + [2.0]).view(-1, 1)\nelement_weight = element_weight.repeat(1, 3)\n\nbce_criterion = nn.BCEWithLogitsLoss(weight=None, reduce=False)\nmulti_criterion = nn.MultiLabelSoftMarginLoss(weight=None, reduce=False)\n\nbce_criterion_class = nn.BCEWithLogitsLoss(weight=class_weight, reduce=False)\nmulti_criterion_class = nn.MultiLabelSoftMarginLoss(weight=class_weight, reduce=False)\n\nbce_criterion_element = nn.BCEWithLogitsLoss(weight=element_weight, reduce=False)\nmulti_criterion_element = nn.MultiLabelSoftMarginLoss(weight=element_weight, reduce=False)\n\nbce_loss = bce_criterion(x, y)\nmulti_loss = multi_criterion(x, y)\n\nbce_loss_class = bce_criterion_class(x, y)\nmulti_loss_class = multi_criterion_class(x, y)\n\nbce_loss_element = bce_criterion_element(x, y)\nmulti_loss_element = multi_criterion_element(x, y)\n\nprint(bce_loss - multi_loss)\nprint(bce_loss_class - multi_loss_class)\nprint(bce_loss_element - multi_loss_element)", "body": "@zou3519 What do you think about multi-label classification using BCELoss?\r\nIt seems the `weights` can be used as a class weight in this case.\r\nRelated to [this](https://discuss.pytorch.org/t/what-is-the-difference-between-bcewithlogitsloss-and-multilabelsoftmarginloss/14944) thread:\r\n\r\n```\r\nx = Variable(torch.randn(10, 3))\r\ny = Variable(torch.FloatTensor(10, 3).random_(2))\r\n\r\n# double the loss for class 1\r\nclass_weight = torch.FloatTensor([1.0, 2.0, 1.0])\r\n# double the loss for last sample\r\nelement_weight = torch.FloatTensor([1.0]*9 + [2.0]).view(-1, 1)\r\nelement_weight = element_weight.repeat(1, 3)\r\n\r\nbce_criterion = nn.BCEWithLogitsLoss(weight=None, reduce=False)\r\nmulti_criterion = nn.MultiLabelSoftMarginLoss(weight=None, reduce=False)\r\n\r\nbce_criterion_class = nn.BCEWithLogitsLoss(weight=class_weight, reduce=False)\r\nmulti_criterion_class = nn.MultiLabelSoftMarginLoss(weight=class_weight, reduce=False)\r\n\r\nbce_criterion_element = nn.BCEWithLogitsLoss(weight=element_weight, reduce=False)\r\nmulti_criterion_element = nn.MultiLabelSoftMarginLoss(weight=element_weight, reduce=False)\r\n\r\nbce_loss = bce_criterion(x, y)\r\nmulti_loss = multi_criterion(x, y)\r\n\r\nbce_loss_class = bce_criterion_class(x, y)\r\nmulti_loss_class = multi_criterion_class(x, y)\r\n\r\nbce_loss_element = bce_criterion_element(x, y)\r\nmulti_loss_element = multi_criterion_element(x, y)\r\n\r\nprint(bce_loss - multi_loss)\r\nprint(bce_loss_class - multi_loss_class)\r\nprint(bce_loss_element - multi_loss_element)\r\n```"}