{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/431392073", "html_url": "https://github.com/pytorch/pytorch/issues/12873#issuecomment-431392073", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12873", "id": 431392073, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM5MjA3Mw==", "user": {"login": "davidmascharka", "id": 5611862, "node_id": "MDQ6VXNlcjU2MTE4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5611862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmascharka", "html_url": "https://github.com/davidmascharka", "followers_url": "https://api.github.com/users/davidmascharka/followers", "following_url": "https://api.github.com/users/davidmascharka/following{/other_user}", "gists_url": "https://api.github.com/users/davidmascharka/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmascharka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmascharka/subscriptions", "organizations_url": "https://api.github.com/users/davidmascharka/orgs", "repos_url": "https://api.github.com/users/davidmascharka/repos", "events_url": "https://api.github.com/users/davidmascharka/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmascharka/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-19T14:57:58Z", "updated_at": "2018-10-19T14:57:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Using <a href=\"https://pypi.org/project/memory_profiler/\" rel=\"nofollow\">memory_profiler</a> I'm getting:</p>\n<pre><code>Filename: test.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     8  153.824 MiB  153.824 MiB   @profile\n     9                             def f():\n    10  153.824 MiB    0.000 MiB       torch.set_grad_enabled(False)\n    11  155.766 MiB    1.941 MiB       torch.cuda._lazy_init()\n    12  155.766 MiB    0.000 MiB       device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    13 1278.254 MiB 1122.488 MiB       model = torch.nn.Conv2d(1, 1, 1).to(device)\n    14 1278.254 MiB    0.000 MiB       x = torch.rand(1, 1, args.size, args.size).to(device)\n    15 1872.660 MiB  594.406 MiB       y = model(x)\n</code></pre>\n<p>for the corresponding script:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> argparse\n\nparser <span class=\"pl-k\">=</span> argparse.ArgumentParser()\nparser.add_argument(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">type</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">int</span>)\nargs <span class=\"pl-k\">=</span> parser.parse_args()\n\n<span class=\"pl-en\">@profile</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>():\n    torch.set_grad_enabled(<span class=\"pl-c1\">False</span>)\n    torch.cuda._lazy_init()\n    device <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">if</span> torch.cuda.is_available() <span class=\"pl-k\">else</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cpu<span class=\"pl-pds\">'</span></span>\n    model <span class=\"pl-k\">=</span> torch.nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>).to(device)\n    x <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, args.size, args.size).to(device)\n    y <span class=\"pl-k\">=</span> model(x)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    f()</pre></div>", "body_text": "Using memory_profiler I'm getting:\nFilename: test.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     8  153.824 MiB  153.824 MiB   @profile\n     9                             def f():\n    10  153.824 MiB    0.000 MiB       torch.set_grad_enabled(False)\n    11  155.766 MiB    1.941 MiB       torch.cuda._lazy_init()\n    12  155.766 MiB    0.000 MiB       device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    13 1278.254 MiB 1122.488 MiB       model = torch.nn.Conv2d(1, 1, 1).to(device)\n    14 1278.254 MiB    0.000 MiB       x = torch.rand(1, 1, args.size, args.size).to(device)\n    15 1872.660 MiB  594.406 MiB       y = model(x)\n\nfor the corresponding script:\nimport torch\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('size', type=int)\nargs = parser.parse_args()\n\n@profile\ndef f():\n    torch.set_grad_enabled(False)\n    torch.cuda._lazy_init()\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    model = torch.nn.Conv2d(1, 1, 1).to(device)\n    x = torch.rand(1, 1, args.size, args.size).to(device)\n    y = model(x)\n\nif __name__ == '__main__':\n    f()", "body": "Using [memory_profiler](https://pypi.org/project/memory_profiler/) I'm getting:\r\n\r\n```\r\nFilename: test.py\r\n\r\nLine #    Mem usage    Increment   Line Contents\r\n================================================\r\n     8  153.824 MiB  153.824 MiB   @profile\r\n     9                             def f():\r\n    10  153.824 MiB    0.000 MiB       torch.set_grad_enabled(False)\r\n    11  155.766 MiB    1.941 MiB       torch.cuda._lazy_init()\r\n    12  155.766 MiB    0.000 MiB       device = 'cuda' if torch.cuda.is_available() else 'cpu'\r\n    13 1278.254 MiB 1122.488 MiB       model = torch.nn.Conv2d(1, 1, 1).to(device)\r\n    14 1278.254 MiB    0.000 MiB       x = torch.rand(1, 1, args.size, args.size).to(device)\r\n    15 1872.660 MiB  594.406 MiB       y = model(x)\r\n```\r\n\r\nfor the corresponding script:\r\n\r\n``` python\r\nimport torch\r\nimport argparse\r\n\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument('size', type=int)\r\nargs = parser.parse_args()\r\n\r\n@profile\r\ndef f():\r\n    torch.set_grad_enabled(False)\r\n    torch.cuda._lazy_init()\r\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\r\n    model = torch.nn.Conv2d(1, 1, 1).to(device)\r\n    x = torch.rand(1, 1, args.size, args.size).to(device)\r\n    y = model(x)\r\n\r\nif __name__ == '__main__':\r\n    f()\r\n```"}