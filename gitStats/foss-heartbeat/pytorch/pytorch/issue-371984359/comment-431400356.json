{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/431400356", "html_url": "https://github.com/pytorch/pytorch/issues/12873#issuecomment-431400356", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12873", "id": 431400356, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTQwMDM1Ng==", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-19T15:23:03Z", "updated_at": "2018-10-19T15:23:03Z", "author_association": "COLLABORATOR", "body_html": "<p>I get the following output for a modified version of your script:</p>\n<pre><code>Filename: tmp.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     8  139.164 MiB  139.164 MiB   @profile\n     9                             def f():\n    10  139.227 MiB    0.062 MiB       torch.set_grad_enabled(False)\n    11  286.297 MiB  147.070 MiB       torch.cuda.synchronize()\n    12  286.297 MiB    0.000 MiB       torch.cuda._lazy_init()\n    13  286.297 MiB    0.000 MiB       torch.cuda.synchronize()\n    14 1076.344 MiB  790.047 MiB       torch.cuda.FloatTensor([1])\n    15 1076.344 MiB    0.000 MiB       torch.cuda.synchronize()\n    16 1076.344 MiB    0.000 MiB       device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    17 1077.180 MiB    0.836 MiB       model_cpu = torch.nn.Conv2d(1, 1, 1)\n    18 1077.281 MiB    0.102 MiB       model = model_cpu.to(device)\n    19 1077.387 MiB    0.105 MiB       x = torch.rand(1, 1, args.size, args.size).to(device)\n    20 1330.621 MiB  253.234 MiB       y = model(x)\n</code></pre>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> argparse\n\nparser <span class=\"pl-k\">=</span> argparse.ArgumentParser()\nparser.add_argument(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>size<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">type</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">int</span>)\nargs <span class=\"pl-k\">=</span> parser.parse_args()\n\n<span class=\"pl-en\">@profile</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>():\n    torch.set_grad_enabled(<span class=\"pl-c1\">False</span>)\n    torch.cuda.synchronize()\n    torch.cuda._lazy_init()\n    torch.cuda.synchronize()\n    torch.cuda.FloatTensor([<span class=\"pl-c1\">1</span>])\n    torch.cuda.synchronize()\n    device <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">if</span> torch.cuda.is_available() <span class=\"pl-k\">else</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cpu<span class=\"pl-pds\">'</span></span>\n    model_cpu <span class=\"pl-k\">=</span> torch.nn.Conv2d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n    model <span class=\"pl-k\">=</span> model_cpu.to(device)\n    x <span class=\"pl-k\">=</span> torch.rand(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, args.size, args.size).to(device)\n    y <span class=\"pl-k\">=</span> model(x)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    f()</pre></div>\n<p>So it does look like cpu-side overhead of the cuda init.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a>  is this amount of peak RAM usage is expected? Could it be caused by a problem within pytorch?</p>", "body_text": "I get the following output for a modified version of your script:\nFilename: tmp.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     8  139.164 MiB  139.164 MiB   @profile\n     9                             def f():\n    10  139.227 MiB    0.062 MiB       torch.set_grad_enabled(False)\n    11  286.297 MiB  147.070 MiB       torch.cuda.synchronize()\n    12  286.297 MiB    0.000 MiB       torch.cuda._lazy_init()\n    13  286.297 MiB    0.000 MiB       torch.cuda.synchronize()\n    14 1076.344 MiB  790.047 MiB       torch.cuda.FloatTensor([1])\n    15 1076.344 MiB    0.000 MiB       torch.cuda.synchronize()\n    16 1076.344 MiB    0.000 MiB       device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    17 1077.180 MiB    0.836 MiB       model_cpu = torch.nn.Conv2d(1, 1, 1)\n    18 1077.281 MiB    0.102 MiB       model = model_cpu.to(device)\n    19 1077.387 MiB    0.105 MiB       x = torch.rand(1, 1, args.size, args.size).to(device)\n    20 1330.621 MiB  253.234 MiB       y = model(x)\n\nimport torch\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('size', type=int)\nargs = parser.parse_args()\n\n@profile\ndef f():\n    torch.set_grad_enabled(False)\n    torch.cuda.synchronize()\n    torch.cuda._lazy_init()\n    torch.cuda.synchronize()\n    torch.cuda.FloatTensor([1])\n    torch.cuda.synchronize()\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    model_cpu = torch.nn.Conv2d(1, 1, 1)\n    model = model_cpu.to(device)\n    x = torch.rand(1, 1, args.size, args.size).to(device)\n    y = model(x)\n\nif __name__ == '__main__':\n    f()\nSo it does look like cpu-side overhead of the cuda init.\n@ngimel  is this amount of peak RAM usage is expected? Could it be caused by a problem within pytorch?", "body": "I get the following output for a modified version of your script:\r\n```\r\nFilename: tmp.py\r\n\r\nLine #    Mem usage    Increment   Line Contents\r\n================================================\r\n     8  139.164 MiB  139.164 MiB   @profile\r\n     9                             def f():\r\n    10  139.227 MiB    0.062 MiB       torch.set_grad_enabled(False)\r\n    11  286.297 MiB  147.070 MiB       torch.cuda.synchronize()\r\n    12  286.297 MiB    0.000 MiB       torch.cuda._lazy_init()\r\n    13  286.297 MiB    0.000 MiB       torch.cuda.synchronize()\r\n    14 1076.344 MiB  790.047 MiB       torch.cuda.FloatTensor([1])\r\n    15 1076.344 MiB    0.000 MiB       torch.cuda.synchronize()\r\n    16 1076.344 MiB    0.000 MiB       device = 'cuda' if torch.cuda.is_available() else 'cpu'\r\n    17 1077.180 MiB    0.836 MiB       model_cpu = torch.nn.Conv2d(1, 1, 1)\r\n    18 1077.281 MiB    0.102 MiB       model = model_cpu.to(device)\r\n    19 1077.387 MiB    0.105 MiB       x = torch.rand(1, 1, args.size, args.size).to(device)\r\n    20 1330.621 MiB  253.234 MiB       y = model(x)\r\n```\r\n\r\n\r\n```python\r\nimport torch\r\nimport argparse\r\n\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument('size', type=int)\r\nargs = parser.parse_args()\r\n\r\n@profile\r\ndef f():\r\n    torch.set_grad_enabled(False)\r\n    torch.cuda.synchronize()\r\n    torch.cuda._lazy_init()\r\n    torch.cuda.synchronize()\r\n    torch.cuda.FloatTensor([1])\r\n    torch.cuda.synchronize()\r\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\r\n    model_cpu = torch.nn.Conv2d(1, 1, 1)\r\n    model = model_cpu.to(device)\r\n    x = torch.rand(1, 1, args.size, args.size).to(device)\r\n    y = model(x)\r\n\r\nif __name__ == '__main__':\r\n    f()\r\n```\r\n\r\nSo it does look like cpu-side overhead of the cuda init.\r\n@ngimel  is this amount of peak RAM usage is expected? Could it be caused by a problem within pytorch?"}