{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/417951887", "html_url": "https://github.com/pytorch/pytorch/pull/11152#issuecomment-417951887", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11152", "id": 417951887, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzk1MTg4Nw==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-02T18:52:06Z", "updated_at": "2018-09-02T18:52:06Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Renamed <code>{_values,_indices,_nnz}</code> to <code>{values,indices,nnz}</code> (no underscore) in C++ and expose those in Python</p>\n</blockquote>\n<p>No, please don't do this. I'll quote the current sparse documentation:</p>\n<blockquote>\n<p>Second, some operators will produce different values depending on whether or not they are coalesced or not (e.g., torch.sparse.FloatTensor._values() and torch.sparse.FloatTensor._indices(), as well as torch.Tensor._sparse_mask()). These operators are prefixed by an underscore to indicate that they reveal internal implementation details and should be used with care, since code that works with coalesced sparse tensors may not work with uncoalesced sparse tensors; generally speaking, it is safest to explicitly coalesce before working with these operators.</p>\n</blockquote>\n<p><a href=\"https://pytorch.org/docs/stable/sparse.html\" rel=\"nofollow\">https://pytorch.org/docs/stable/sparse.html</a></p>", "body_text": "Renamed {_values,_indices,_nnz} to {values,indices,nnz} (no underscore) in C++ and expose those in Python\n\nNo, please don't do this. I'll quote the current sparse documentation:\n\nSecond, some operators will produce different values depending on whether or not they are coalesced or not (e.g., torch.sparse.FloatTensor._values() and torch.sparse.FloatTensor._indices(), as well as torch.Tensor._sparse_mask()). These operators are prefixed by an underscore to indicate that they reveal internal implementation details and should be used with care, since code that works with coalesced sparse tensors may not work with uncoalesced sparse tensors; generally speaking, it is safest to explicitly coalesce before working with these operators.\n\nhttps://pytorch.org/docs/stable/sparse.html", "body": "> Renamed `{_values,_indices,_nnz}` to `{values,indices,nnz}` (no underscore) in C++ and expose those in Python\r\n\r\nNo, please don't do this. I'll quote the current sparse documentation:\r\n\r\n> Second, some operators will produce different values depending on whether or not they are coalesced or not (e.g., torch.sparse.FloatTensor._values() and torch.sparse.FloatTensor._indices(), as well as torch.Tensor._sparse_mask()). These operators are prefixed by an underscore to indicate that they reveal internal implementation details and should be used with care, since code that works with coalesced sparse tensors may not work with uncoalesced sparse tensors; generally speaking, it is safest to explicitly coalesce before working with these operators.\r\n\r\nhttps://pytorch.org/docs/stable/sparse.html"}