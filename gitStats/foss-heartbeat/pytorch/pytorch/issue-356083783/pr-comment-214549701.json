{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214549701", "pull_request_review_id": 151629741, "id": 214549701, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDU0OTcwMQ==", "diff_hunk": "@@ -66,8 +66,8 @@ def step(self, closure=None):\n                 state['step'] += 1\n \n                 grad = grad.coalesce()  # the update is non-linear so indices must be unique\n-                grad_indices = grad._indices()\n-                grad_values = grad._values()\n+                grad_indices = torch._indices(grad)", "path": "torch/optim/sparse_adam.py", "position": null, "original_position": 6, "commit_id": "1381c1410ea67add946aa8a99697bfb0872f1ac8", "original_commit_id": "701dd79132b8b30898f77c12d8fecc12cf651ed7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "I believe the original reason why indices and values were prefixed with an underscore was because if you are working directly with `_values`, you have to be very careful about whether or not the sparse tensor is coalesced or not. Additionally, you can't differentiate through them, because `_indices` is defined to alias with the original tensor, but you can't do that if you have to wrap it in a new Variable to track the autograd (you also have differentiability problems if you allow returning duplicate entries!). @SsnL's pending patch closes these loopholes and gives you something that is semantically sound, but is less efficient than you would otherwise expect.\r\n", "created_at": "2018-09-02T18:50:05Z", "updated_at": "2018-11-23T15:50:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/11152#discussion_r214549701", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11152", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214549701"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11152#discussion_r214549701"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11152"}}, "body_html": "<p>I believe the original reason why indices and values were prefixed with an underscore was because if you are working directly with <code>_values</code>, you have to be very careful about whether or not the sparse tensor is coalesced or not. Additionally, you can't differentiate through them, because <code>_indices</code> is defined to alias with the original tensor, but you can't do that if you have to wrap it in a new Variable to track the autograd (you also have differentiability problems if you allow returning duplicate entries!). <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a>'s pending patch closes these loopholes and gives you something that is semantically sound, but is less efficient than you would otherwise expect.</p>", "body_text": "I believe the original reason why indices and values were prefixed with an underscore was because if you are working directly with _values, you have to be very careful about whether or not the sparse tensor is coalesced or not. Additionally, you can't differentiate through them, because _indices is defined to alias with the original tensor, but you can't do that if you have to wrap it in a new Variable to track the autograd (you also have differentiability problems if you allow returning duplicate entries!). @SsnL's pending patch closes these loopholes and gives you something that is semantically sound, but is less efficient than you would otherwise expect.", "in_reply_to_id": 214441817}