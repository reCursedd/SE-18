{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214467384", "pull_request_review_id": 151539236, "id": 214467384, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ2NzM4NA==", "diff_hunk": "@@ -66,8 +66,8 @@ def step(self, closure=None):\n                 state['step'] += 1\n \n                 grad = grad.coalesce()  # the update is non-linear so indices must be unique\n-                grad_indices = grad._indices()\n-                grad_values = grad._values()\n+                grad_indices = torch._indices(grad)", "path": "torch/optim/sparse_adam.py", "position": null, "original_position": 6, "commit_id": "1381c1410ea67add946aa8a99697bfb0872f1ac8", "original_commit_id": "701dd79132b8b30898f77c12d8fecc12cf651ed7", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "What is we put them as methods on `Tensor` from within `torch/tensor.py`? As in, we'd add:\r\n\r\n```\r\ndef _indices(self):\r\n    return torch._indices(self)\r\n```\r\nThat would preserve current users but keep the actual Tensor API clean from C++ side. I would still encourage you to come up with a deprecation strategy because calling an underscore method sounds/looks wrong either way, but that's up to you guys then. If there's any strong reason for keeping the method in C++ too we can make an exception for `_indices` and `_values`, but it sounds like a Python-only solution would work here?", "created_at": "2018-08-31T20:27:23Z", "updated_at": "2018-11-23T15:50:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/11152#discussion_r214467384", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11152", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214467384"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11152#discussion_r214467384"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11152"}}, "body_html": "<p>What is we put them as methods on <code>Tensor</code> from within <code>torch/tensor.py</code>? As in, we'd add:</p>\n<pre><code>def _indices(self):\n    return torch._indices(self)\n</code></pre>\n<p>That would preserve current users but keep the actual Tensor API clean from C++ side. I would still encourage you to come up with a deprecation strategy because calling an underscore method sounds/looks wrong either way, but that's up to you guys then. If there's any strong reason for keeping the method in C++ too we can make an exception for <code>_indices</code> and <code>_values</code>, but it sounds like a Python-only solution would work here?</p>", "body_text": "What is we put them as methods on Tensor from within torch/tensor.py? As in, we'd add:\ndef _indices(self):\n    return torch._indices(self)\n\nThat would preserve current users but keep the actual Tensor API clean from C++ side. I would still encourage you to come up with a deprecation strategy because calling an underscore method sounds/looks wrong either way, but that's up to you guys then. If there's any strong reason for keeping the method in C++ too we can make an exception for _indices and _values, but it sounds like a Python-only solution would work here?", "in_reply_to_id": 214441817}