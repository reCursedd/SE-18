{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214449885", "pull_request_review_id": 151518141, "id": 214449885, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ0OTg4NQ==", "diff_hunk": "@@ -66,8 +66,8 @@ def step(self, closure=None):\n                 state['step'] += 1\n \n                 grad = grad.coalesce()  # the update is non-linear so indices must be unique\n-                grad_indices = grad._indices()\n-                grad_values = grad._values()\n+                grad_indices = torch._indices(grad)", "path": "torch/optim/sparse_adam.py", "position": null, "original_position": 6, "commit_id": "1381c1410ea67add946aa8a99697bfb0872f1ac8", "original_commit_id": "701dd79132b8b30898f77c12d8fecc12cf651ed7", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I'd argue that we should keep them.  For two reasons:\r\n\r\n1. `_indices` and `_values` are really the properties/attributes of sparse tensors, so `torch._indices(tensor)` makes much less sense than `tensor._indices()`, at least to me. \r\n\r\n2. BC reasons as @zou3519 mentioned. Given how few sparse operations we support, many users of sparse tensors probably implemented their own sparse operations with `_indices` and `_values`.\r\n\r\nFWIW, I am preparing a patch that adds `get_values` and `get_indices` methods, and those should be the public APIs, but they have subtle differences with `_values` and `_indices`, which make them much less useful in implementing custom sparse operations.", "created_at": "2018-08-31T19:08:40Z", "updated_at": "2018-11-23T15:50:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/11152#discussion_r214449885", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11152", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214449885"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11152#discussion_r214449885"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11152"}}, "body_html": "<p>I'd argue that we should keep them.  For two reasons:</p>\n<ol>\n<li>\n<p><code>_indices</code> and <code>_values</code> are really the properties/attributes of sparse tensors, so <code>torch._indices(tensor)</code> makes much less sense than <code>tensor._indices()</code>, at least to me.</p>\n</li>\n<li>\n<p>BC reasons as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> mentioned. Given how few sparse operations we support, many users of sparse tensors probably implemented their own sparse operations with <code>_indices</code> and <code>_values</code>.</p>\n</li>\n</ol>\n<p>FWIW, I am preparing a patch that adds <code>get_values</code> and <code>get_indices</code> methods, and those should be the public APIs, but they have subtle differences with <code>_values</code> and <code>_indices</code>, which make them much less useful in implementing custom sparse operations.</p>", "body_text": "I'd argue that we should keep them.  For two reasons:\n\n\n_indices and _values are really the properties/attributes of sparse tensors, so torch._indices(tensor) makes much less sense than tensor._indices(), at least to me.\n\n\nBC reasons as @zou3519 mentioned. Given how few sparse operations we support, many users of sparse tensors probably implemented their own sparse operations with _indices and _values.\n\n\nFWIW, I am preparing a patch that adds get_values and get_indices methods, and those should be the public APIs, but they have subtle differences with _values and _indices, which make them much less useful in implementing custom sparse operations.", "in_reply_to_id": 214441817}