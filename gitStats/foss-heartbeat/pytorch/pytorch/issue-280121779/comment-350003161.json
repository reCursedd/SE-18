{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/350003161", "html_url": "https://github.com/pytorch/pytorch/issues/4071#issuecomment-350003161", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4071", "id": 350003161, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDAwMzE2MQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-07T15:35:26Z", "updated_at": "2017-12-07T16:31:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm not sure if this is related, but broadcasting with torch.stack + indexing seems to cause problems.</p>\n<p>Minimal example of broadcasting and torch.stack causing problems in a backward pass but not forward pass:</p>\n<pre><code>import torch\nfrom torch.autograd import Variable\nx = Variable(torch.Tensor([[3, 4, 2]]), requires_grad=True)\ny = torch.stack([x[0], Variable(torch.zeros(3, 1))], dim=1)\nout = y.sum()\nout.backward() # not okay\n&gt;&gt;&gt;\nRuntimeError: expand(torch.FloatTensor{[3, 1]}, size=[3]): the number of sizes provided (1) must be greater or equal to the number of dimensions in the tensor (2)\n</code></pre>\n<pre><code>import torch\nfrom torch.autograd import Variable\nx = Variable(torch.Tensor([[3, 4, 2]]), requires_grad=True)\ny = torch.stack([x[0], Variable(torch.zeros(3, 1))], dim=1)\nout = y.sum()\nout.backward() # no error\n</code></pre>", "body_text": "I'm not sure if this is related, but broadcasting with torch.stack + indexing seems to cause problems.\nMinimal example of broadcasting and torch.stack causing problems in a backward pass but not forward pass:\nimport torch\nfrom torch.autograd import Variable\nx = Variable(torch.Tensor([[3, 4, 2]]), requires_grad=True)\ny = torch.stack([x[0], Variable(torch.zeros(3, 1))], dim=1)\nout = y.sum()\nout.backward() # not okay\n>>>\nRuntimeError: expand(torch.FloatTensor{[3, 1]}, size=[3]): the number of sizes provided (1) must be greater or equal to the number of dimensions in the tensor (2)\n\nimport torch\nfrom torch.autograd import Variable\nx = Variable(torch.Tensor([[3, 4, 2]]), requires_grad=True)\ny = torch.stack([x[0], Variable(torch.zeros(3, 1))], dim=1)\nout = y.sum()\nout.backward() # no error", "body": "I'm not sure if this is related, but broadcasting with torch.stack + indexing seems to cause problems.\r\n\r\nMinimal example of broadcasting and torch.stack causing problems in a backward pass but not forward pass:\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nx = Variable(torch.Tensor([[3, 4, 2]]), requires_grad=True)\r\ny = torch.stack([x[0], Variable(torch.zeros(3, 1))], dim=1)\r\nout = y.sum()\r\nout.backward() # not okay\r\n>>>\r\nRuntimeError: expand(torch.FloatTensor{[3, 1]}, size=[3]): the number of sizes provided (1) must be greater or equal to the number of dimensions in the tensor (2)\r\n```\r\n\r\n```\r\nimport torch\r\nfrom torch.autograd import Variable\r\nx = Variable(torch.Tensor([[3, 4, 2]]), requires_grad=True)\r\ny = torch.stack([x[0], Variable(torch.zeros(3, 1))], dim=1)\r\nout = y.sum()\r\nout.backward() # no error\r\n```"}