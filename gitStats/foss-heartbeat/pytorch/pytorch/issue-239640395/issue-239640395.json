{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1950", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1950/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1950/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1950/events", "html_url": "https://github.com/pytorch/pytorch/issues/1950", "id": 239640395, "node_id": "MDU6SXNzdWUyMzk2NDAzOTU=", "number": 1950, "title": "Negative dimension behaviour in torch.stack", "user": {"login": "anibali", "id": 226707, "node_id": "MDQ6VXNlcjIyNjcwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/226707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anibali", "html_url": "https://github.com/anibali", "followers_url": "https://api.github.com/users/anibali/followers", "following_url": "https://api.github.com/users/anibali/following{/other_user}", "gists_url": "https://api.github.com/users/anibali/gists{/gist_id}", "starred_url": "https://api.github.com/users/anibali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anibali/subscriptions", "organizations_url": "https://api.github.com/users/anibali/orgs", "repos_url": "https://api.github.com/users/anibali/repos", "events_url": "https://api.github.com/users/anibali/events{/privacy}", "received_events_url": "https://api.github.com/users/anibali/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-29T23:41:46Z", "updated_at": "2017-07-13T20:29:31Z", "closed_at": "2017-07-13T20:29:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Support for using a negative dimension in <code>torch.stack</code> currently works as follows:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> dim <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>:\n    dim <span class=\"pl-k\">+=</span> sequence[<span class=\"pl-c1\">0</span>].dim()</pre></div>\n<p>This is not consistent with the behaviour of <code>torch.unsqueeze</code>, which uses <code>dim += input.dim() + 1</code>. The unsqueeze behaviour is better since it is possible to use negative indexing to insert a new dimension as the last dimension.</p>\n<h2>Example</h2>\n<p><code>torch.stack</code> with <code>dim=-1</code> adds a new dimension in the second-to-last position. This is confusing. It is not possible to use negative indexing to add a dimension in the last position (ie can't achieve a 3x2 result).</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.stack([a, b], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n\n <span class=\"pl-c1\">1</span>  <span class=\"pl-c1\">2</span>  <span class=\"pl-c1\">3</span>\n <span class=\"pl-c1\">4</span>  <span class=\"pl-c1\">5</span>  <span class=\"pl-c1\">6</span>\n[torch.FloatTensor of size <span class=\"pl-ii\">2x3</span>]</pre></div>\n<p>Contrast this to using <code>torch.unsqueeze</code> and <code>torch.cat</code> with <code>dim=-1</code>, which adds a new dimension in the last position:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b <span class=\"pl-k\">=</span> torch.Tensor([<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.cat([a.unsqueeze(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>), b.unsqueeze(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n\n <span class=\"pl-c1\">1</span>  <span class=\"pl-c1\">4</span>\n <span class=\"pl-c1\">2</span>  <span class=\"pl-c1\">5</span>\n <span class=\"pl-c1\">3</span>  <span class=\"pl-c1\">6</span>\n[torch.FloatTensor of size <span class=\"pl-ii\">3x2</span>]</pre></div>", "body_text": "Support for using a negative dimension in torch.stack currently works as follows:\nif dim < 0:\n    dim += sequence[0].dim()\nThis is not consistent with the behaviour of torch.unsqueeze, which uses dim += input.dim() + 1. The unsqueeze behaviour is better since it is possible to use negative indexing to insert a new dimension as the last dimension.\nExample\ntorch.stack with dim=-1 adds a new dimension in the second-to-last position. This is confusing. It is not possible to use negative indexing to add a dimension in the last position (ie can't achieve a 3x2 result).\n>>> a = torch.Tensor([1, 2, 3])\n>>> b = torch.Tensor([4, 5, 6])\n>>> torch.stack([a, b], -1)\n\n 1  2  3\n 4  5  6\n[torch.FloatTensor of size 2x3]\nContrast this to using torch.unsqueeze and torch.cat with dim=-1, which adds a new dimension in the last position:\n>>> a = torch.Tensor([1, 2, 3])\n>>> b = torch.Tensor([4, 5, 6])\n>>> torch.cat([a.unsqueeze(-1), b.unsqueeze(-1)], -1)\n\n 1  4\n 2  5\n 3  6\n[torch.FloatTensor of size 3x2]", "body": "Support for using a negative dimension in `torch.stack` currently works as follows:\r\n\r\n```python\r\nif dim < 0:\r\n    dim += sequence[0].dim()\r\n```\r\n\r\nThis is not consistent with the behaviour of `torch.unsqueeze`, which uses `dim += input.dim() + 1`. The unsqueeze behaviour is better since it is possible to use negative indexing to insert a new dimension as the last dimension.\r\n\r\n## Example\r\n\r\n`torch.stack` with `dim=-1` adds a new dimension in the second-to-last position. This is confusing. It is not possible to use negative indexing to add a dimension in the last position (ie can't achieve a 3x2 result).\r\n\r\n```python\r\n>>> a = torch.Tensor([1, 2, 3])\r\n>>> b = torch.Tensor([4, 5, 6])\r\n>>> torch.stack([a, b], -1)\r\n\r\n 1  2  3\r\n 4  5  6\r\n[torch.FloatTensor of size 2x3]\r\n```\r\n\r\nContrast this to using `torch.unsqueeze` and `torch.cat` with `dim=-1`, which adds a new dimension in the last position:\r\n\r\n```python\r\n>>> a = torch.Tensor([1, 2, 3])\r\n>>> b = torch.Tensor([4, 5, 6])\r\n>>> torch.cat([a.unsqueeze(-1), b.unsqueeze(-1)], -1)\r\n\r\n 1  4\r\n 2  5\r\n 3  6\r\n[torch.FloatTensor of size 3x2]\r\n```"}