{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/276833524", "html_url": "https://github.com/pytorch/pytorch/issues/670#issuecomment-276833524", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/670", "id": 276833524, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgzMzUyNA==", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-02T00:58:00Z", "updated_at": "2017-02-02T00:58:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I had assumed that a PyTorch backend for Keras would build only the module hierarchy (i.e., run <code>__init__</code>) and a lightweight graph structure that represents the Keras connectivity primitives during \"graph construction\" while running the actual <code>forward</code> methods only during \"graph execution\". But it sounds like this (which would require implementing a bunch of <code>Module</code> subclasses analogous to some of Torch's old Table modules, each of which describes a fixed graph in its <code>forward</code>) is unnecessary once lazy evaluation is available.</p>", "body_text": "I had assumed that a PyTorch backend for Keras would build only the module hierarchy (i.e., run __init__) and a lightweight graph structure that represents the Keras connectivity primitives during \"graph construction\" while running the actual forward methods only during \"graph execution\". But it sounds like this (which would require implementing a bunch of Module subclasses analogous to some of Torch's old Table modules, each of which describes a fixed graph in its forward) is unnecessary once lazy evaluation is available.", "body": "I had assumed that a PyTorch backend for Keras would build only the module hierarchy (i.e., run `__init__`) and a lightweight graph structure that represents the Keras connectivity primitives during \"graph construction\" while running the actual `forward` methods only during \"graph execution\". But it sounds like this (which would require implementing a bunch of `Module` subclasses analogous to some of Torch's old Table modules, each of which describes a fixed graph in its `forward`) is unnecessary once lazy evaluation is available."}