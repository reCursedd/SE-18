{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2812", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2812/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2812/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2812/events", "html_url": "https://github.com/pytorch/pytorch/issues/2812", "id": 259326942, "node_id": "MDU6SXNzdWUyNTkzMjY5NDI=", "number": 2812, "title": "torch.arange type", "user": {"login": "glample", "id": 8885556, "node_id": "MDQ6VXNlcjg4ODU1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8885556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glample", "html_url": "https://github.com/glample", "followers_url": "https://api.github.com/users/glample/followers", "following_url": "https://api.github.com/users/glample/following{/other_user}", "gists_url": "https://api.github.com/users/glample/gists{/gist_id}", "starred_url": "https://api.github.com/users/glample/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glample/subscriptions", "organizations_url": "https://api.github.com/users/glample/orgs", "repos_url": "https://api.github.com/users/glample/repos", "events_url": "https://api.github.com/users/glample/events{/privacy}", "received_events_url": "https://api.github.com/users/glample/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-20T22:58:35Z", "updated_at": "2018-04-27T19:12:34Z", "closed_at": "2018-04-27T19:12:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>torch.arange</code> has a different behavior than <code>np.arange</code><br>\n<code>torch.arange(0, 10)</code> returns a FloatTensor, but shouldn't it be a LongTensor?<br>\nAlso, <code>torch.arange(10)</code>, which I would expect to behave like <code>torch.arange(0, 10)</code>, fails, and returns:</p>\n<pre><code>TypeError: torch.arange received an invalid combination of arguments - got (float), but expected one of:\n * (float start, float end)\n * (float start, float end, float step)\n</code></pre>\n<p><code>np.arange</code> can also take float as input, and in that case will return a float array instead of a int64 array. Could we have something similar in pytorch? If inputs are int, return a LongTensor, if they are float, return a FloatTensor?</p>", "body_text": "torch.arange has a different behavior than np.arange\ntorch.arange(0, 10) returns a FloatTensor, but shouldn't it be a LongTensor?\nAlso, torch.arange(10), which I would expect to behave like torch.arange(0, 10), fails, and returns:\nTypeError: torch.arange received an invalid combination of arguments - got (float), but expected one of:\n * (float start, float end)\n * (float start, float end, float step)\n\nnp.arange can also take float as input, and in that case will return a float array instead of a int64 array. Could we have something similar in pytorch? If inputs are int, return a LongTensor, if they are float, return a FloatTensor?", "body": "`torch.arange` has a different behavior than `np.arange`\r\n`torch.arange(0, 10)` returns a FloatTensor, but shouldn't it be a LongTensor?\r\nAlso, `torch.arange(10)`, which I would expect to behave like `torch.arange(0, 10)`, fails, and returns:\r\n\r\n```\r\nTypeError: torch.arange received an invalid combination of arguments - got (float), but expected one of:\r\n * (float start, float end)\r\n * (float start, float end, float step)\r\n```\r\n\r\n`np.arange` can also take float as input, and in that case will return a float array instead of a int64 array. Could we have something similar in pytorch? If inputs are int, return a LongTensor, if they are float, return a FloatTensor?"}