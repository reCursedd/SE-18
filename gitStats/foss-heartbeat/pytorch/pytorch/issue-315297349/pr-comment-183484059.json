{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183484059", "pull_request_review_id": 114491225, "id": 183484059, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzQ4NDA1OQ==", "diff_hunk": "@@ -29,6 +29,20 @@ struct Parser {\n         List<Expr>(makeList(range, std::move(inputs))),\n         List<Attribute>(makeList(range, std::move(attributes))));\n   }\n+  // exp | expr, | expr, expr, ...\n+  TreeRef parseExpOrExpList(int end) {\n+    auto prefix = parseExp();\n+    if(L.cur().kind == ',') {\n+      std::vector<Expr> exprs = { prefix };\n+      while(L.cur().kind != end) {\n+        L.expect(',');\n+        exprs.push_back(parseExp());\n+      }\n+      auto list = List<Expr>::create(prefix.range(), exprs);\n+      prefix = ListLiteral::create(list.range(), list);\n+    }\n+    return prefix;\n+  }", "path": "torch/csrc/jit/script/parser.h", "position": 17, "original_position": 17, "commit_id": "7295cbc285ee34dae8facb6bc4b208fed49971cf", "original_commit_id": "7295cbc285ee34dae8facb6bc4b208fed49971cf", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "No. In the single-expression case it returns a single  `Expr`. In the multi-expression case it returns a `ListLiteral`. parseList always returns a `List<Expr>`", "created_at": "2018-04-23T17:55:18Z", "updated_at": "2018-11-23T15:43:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/6691#discussion_r183484059", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6691", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183484059"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6691#discussion_r183484059"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6691"}}, "body_html": "<p>No. In the single-expression case it returns a single  <code>Expr</code>. In the multi-expression case it returns a <code>ListLiteral</code>. parseList always returns a <code>List&lt;Expr&gt;</code></p>", "body_text": "No. In the single-expression case it returns a single  Expr. In the multi-expression case it returns a ListLiteral. parseList always returns a List<Expr>", "in_reply_to_id": 183462756}