{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/118332961", "pull_request_review_id": 40114828, "id": 118332961, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODMzMjk2MQ==", "diff_hunk": "@@ -1,71 +1,74 @@\n import torch\n \n from ..function import Function\n+from ..variable import Variable\n \n \n class Diag(Function):\n \n-    def __init__(self, diagonal_idx=0):\n-        super(Diag, self).__init__()\n-        self.diagonal_idx = diagonal_idx\n+    @staticmethod\n+    def forward(ctx, input, diagonal_idx=0):\n+        ctx.diagonal_idx = diagonal_idx\n+        return input.diag(ctx.diagonal_idx)\n \n-    def forward(self, input):\n-        return input.diag(self.diagonal_idx)\n-\n-    def backward(self, grad_output):\n-        return grad_output.diag(self.diagonal_idx)\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        return grad_output.diag(ctx.diagonal_idx), None\n \n \n class Tril(Function):\n \n-    def __init__(self, diagonal_idx=0):\n-        super(Tril, self).__init__()\n-        self.diagonal_idx = diagonal_idx\n-\n-    def forward(self, input):\n-        return input.tril(self.diagonal_idx)\n+    @staticmethod\n+    def forward(ctx, input, diagonal_idx=0):\n+        ctx.diagonal_idx = diagonal_idx\n+        return input.tril(ctx.diagonal_idx)\n \n-    def backward(self, grad_output):\n-        return grad_output.tril(self.diagonal_idx)\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        return grad_output.tril(ctx.diagonal_idx), None\n \n \n class Triu(Function):\n \n-    def __init__(self, diagonal_idx=0):\n-        super(Triu, self).__init__()\n-        self.diagonal_idx = diagonal_idx\n-\n-    def forward(self, input):\n-        return input.triu(self.diagonal_idx)\n+    @staticmethod\n+    def forward(ctx, input, diagnoal_idx=0):\n+        ctx.diagonal_idx = diagnoal_idx\n+        return input.triu(ctx.diagonal_idx)\n \n-    def backward(self, grad_output):\n-        return grad_output.triu(self.diagonal_idx)\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        return grad_output.triu(ctx.diagonal_idx), None\n \n \n class Trace(Function):\n \n-    def forward(self, input):\n-        self.isize = input.size()\n-        return input.new((input.trace(),))\n-\n-    def backward(self, grad_output):\n-        isize = self.isize\n-        grad_input = grad_output.new(isize).zero_()\n-        grad_input.view(-1)[::(isize[1] + 1)] = grad_output[0]\n+    @staticmethod\n+    def forward(ctx, input):\n+        ctx.isize = input.size()\n+        return input.new((input.trace(), ))\n+\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        isize = ctx.isize\n+        mask = grad_output.data.new(isize).zero_()\n+        mask.view(-1)[::(isize[1] + 1)] = 1\n+        mask = Variable(mask)\n+        grad_output_expand = grad_output.view(1, 1).expand(isize)\n+        grad_input = mask * grad_output_expand", "path": "torch/autograd/_functions/linalg.py", "position": null, "original_position": 89, "commit_id": "2546d592aee0f10cb73960e820cde532167e35c2", "original_commit_id": "ee4786630655578b251f7bb32a508d0a87df88f4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Wouldn't the old version work? I'm thinking of sth like that:\r\n```python\r\ngrad_input = Variable(grad_output.new(ctx.numel).zero_())\r\ngrad_input[::(ctx.isize[1] + 1)] = grad_output\r\nreturn grad_input.view(ctx.isize)\r\n```", "created_at": "2017-05-24T18:39:23Z", "updated_at": "2018-11-23T15:33:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/1638#discussion_r118332961", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1638", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/118332961"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1638#discussion_r118332961"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1638"}}, "body_html": "<p>Wouldn't the old version work? I'm thinking of sth like that:</p>\n<div class=\"highlight highlight-source-python\"><pre>grad_input <span class=\"pl-k\">=</span> Variable(grad_output.new(ctx.numel).zero_())\ngrad_input[::(ctx.isize[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)] <span class=\"pl-k\">=</span> grad_output\n<span class=\"pl-k\">return</span> grad_input.view(ctx.isize)</pre></div>", "body_text": "Wouldn't the old version work? I'm thinking of sth like that:\ngrad_input = Variable(grad_output.new(ctx.numel).zero_())\ngrad_input[::(ctx.isize[1] + 1)] = grad_output\nreturn grad_input.view(ctx.isize)"}