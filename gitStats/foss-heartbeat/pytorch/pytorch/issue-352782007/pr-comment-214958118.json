{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214958118", "pull_request_review_id": 152119435, "id": 214958118, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDk1ODExOA==", "diff_hunk": "@@ -22,7 +22,7 @@ namespace at {\n  * for you, given the underlying type supports it.\n  */\n template <class ConcreteType, class UnderlyingType>\n-class AT_CORE_API IdWrapper {", "path": "aten/src/ATen/core/IdWrapper.h", "position": 4, "original_position": 4, "commit_id": "1b64cc627e728b17bd9adf66014f1d6822dcd171", "original_commit_id": "db69c434500611a5d9b72e02eea98e603a085e20", "user": {"login": "orionr", "id": 79994, "node_id": "MDQ6VXNlcjc5OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/79994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orionr", "html_url": "https://github.com/orionr", "followers_url": "https://api.github.com/users/orionr/followers", "following_url": "https://api.github.com/users/orionr/following{/other_user}", "gists_url": "https://api.github.com/users/orionr/gists{/gist_id}", "starred_url": "https://api.github.com/users/orionr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orionr/subscriptions", "organizations_url": "https://api.github.com/users/orionr/orgs", "repos_url": "https://api.github.com/users/orionr/repos", "events_url": "https://api.github.com/users/orionr/events{/privacy}", "received_events_url": "https://api.github.com/users/orionr/received_events", "type": "User", "site_admin": false}, "body": "@xkszltl it's a good point. Templates plus DLL boundaries are complex. There are definitely cases where we should explicitely do CAFFE2_EXPORT in the cc/cpp file because we are providing instantiations of the template - I seem to recall some of this is in ArgumentHelper - but if the implementation is exclusively in the header you are right. I'll take a look at the PR you reference.", "created_at": "2018-09-04T15:19:24Z", "updated_at": "2018-11-23T15:50:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/10765#discussion_r214958118", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10765", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214958118"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10765#discussion_r214958118"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10765"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5203025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/xkszltl\">@xkszltl</a> it's a good point. Templates plus DLL boundaries are complex. There are definitely cases where we should explicitely do CAFFE2_EXPORT in the cc/cpp file because we are providing instantiations of the template - I seem to recall some of this is in ArgumentHelper - but if the implementation is exclusively in the header you are right. I'll take a look at the PR you reference.</p>", "body_text": "@xkszltl it's a good point. Templates plus DLL boundaries are complex. There are definitely cases where we should explicitely do CAFFE2_EXPORT in the cc/cpp file because we are providing instantiations of the template - I seem to recall some of this is in ArgumentHelper - but if the implementation is exclusively in the header you are right. I'll take a look at the PR you reference.", "in_reply_to_id": 213793248}