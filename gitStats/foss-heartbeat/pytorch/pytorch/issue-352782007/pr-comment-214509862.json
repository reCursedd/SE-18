{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214509862", "pull_request_review_id": 151589603, "id": 214509862, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUwOTg2Mg==", "diff_hunk": "@@ -22,7 +22,7 @@ namespace at {\n  * for you, given the underlying type supports it.\n  */\n template <class ConcreteType, class UnderlyingType>\n-class AT_CORE_API IdWrapper {", "path": "aten/src/ATen/core/IdWrapper.h", "position": 4, "original_position": 4, "commit_id": "1b64cc627e728b17bd9adf66014f1d6822dcd171", "original_commit_id": "db69c434500611a5d9b72e02eea98e603a085e20", "user": {"login": "xkszltl", "id": 5203025, "node_id": "MDQ6VXNlcjUyMDMwMjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5203025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xkszltl", "html_url": "https://github.com/xkszltl", "followers_url": "https://api.github.com/users/xkszltl/followers", "following_url": "https://api.github.com/users/xkszltl/following{/other_user}", "gists_url": "https://api.github.com/users/xkszltl/gists{/gist_id}", "starred_url": "https://api.github.com/users/xkszltl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xkszltl/subscriptions", "organizations_url": "https://api.github.com/users/xkszltl/orgs", "repos_url": "https://api.github.com/users/xkszltl/repos", "events_url": "https://api.github.com/users/xkszltl/events{/privacy}", "received_events_url": "https://api.github.com/users/xkszltl/received_events", "type": "User", "site_admin": false}, "body": "@orionr I agree. This should be removed.\r\n\r\nAlso, I noticed there're CAFFE2_API or CAFFE2_EXPORT in several places with template.\r\nI listed part of them in #11114 \r\n\r\nIs there any reason to use these macros for defined-in-header classes/functions?\r\nMy understanding is, if something is defined in header, each compilation unit gets their own copy directly so it'll never be on library boundary.\r\nIn fact, we're suppose to hide their visibility to avoid redefinition, rather than expose them.", "created_at": "2018-09-01T10:09:39Z", "updated_at": "2018-11-23T15:50:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/10765#discussion_r214509862", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10765", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214509862"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10765#discussion_r214509862"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10765"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=79994\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/orionr\">@orionr</a> I agree. This should be removed.</p>\n<p>Also, I noticed there're CAFFE2_API or CAFFE2_EXPORT in several places with template.<br>\nI listed part of them in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"355780201\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11114\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/11114/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/11114\">#11114</a></p>\n<p>Is there any reason to use these macros for defined-in-header classes/functions?<br>\nMy understanding is, if something is defined in header, each compilation unit gets their own copy directly so it'll never be on library boundary.<br>\nIn fact, we're suppose to hide their visibility to avoid redefinition, rather than expose them.</p>", "body_text": "@orionr I agree. This should be removed.\nAlso, I noticed there're CAFFE2_API or CAFFE2_EXPORT in several places with template.\nI listed part of them in #11114\nIs there any reason to use these macros for defined-in-header classes/functions?\nMy understanding is, if something is defined in header, each compilation unit gets their own copy directly so it'll never be on library boundary.\nIn fact, we're suppose to hide their visibility to avoid redefinition, rather than expose them.", "in_reply_to_id": 213793248}