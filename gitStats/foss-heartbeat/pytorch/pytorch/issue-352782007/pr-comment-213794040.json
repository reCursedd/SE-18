{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213794040", "pull_request_review_id": 150703857, "id": 213794040, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc5NDA0MA==", "diff_hunk": "@@ -401,43 +401,25 @@ inline bool operator!=(const TypeMeta& lhs, const TypeMeta& rhs) noexcept {\n // definition in third party dependent libraries. The proper way is to use\n // CAFFE2_EXPORT (which explicitly requires dllexport). Marking this as a\n // todo item when the unified build is finished.\n-#ifdef _MSC_VER\n-#define CAFFE_KNOWN_TYPE(T)                                               \\\n-  template <>                                                             \\\n-  AT_CORE_API TypeIdentifier TypeMeta::Id<T>() {                          \\\n-    static const TypeIdentifier type_id = TypeIdentifier::createTypeId(); \\\n-    static TypeNameRegisterer<T> registerer(type_id, #T);                 \\\n-    return type_id;                                                       \\\n-  }\n-#else // _MSC_VER\n #define CAFFE_KNOWN_TYPE(T)                                               \\\n   template <>                                                             \\\n   TypeIdentifier TypeMeta::Id<T>() {                                      \\\n     static const TypeIdentifier type_id = TypeIdentifier::createTypeId(); \\\n     static TypeNameRegisterer<T> registerer(type_id, #T);                 \\\n     return type_id;                                                       \\\n   }\n-#endif\n \n /**\n  * CAFFE_DECLARE_KNOWN_TYPE and CAFFE_DEFINE_KNOWN_TYPE are used\n  * to preallocate ids for types that are queried very often so that they\n  * can be resolved at compile time. Please use CAFFE_KNOWN_TYPE() instead\n  * for your own types to allocate dynamic ids for them.\n  */\n-#ifdef _MSC_VER", "path": "aten/src/ATen/core/typeid.h", "position": 68, "original_position": 65, "commit_id": "1b64cc627e728b17bd9adf66014f1d6822dcd171", "original_commit_id": "db69c434500611a5d9b72e02eea98e603a085e20", "user": {"login": "orionr", "id": 79994, "node_id": "MDQ6VXNlcjc5OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/79994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orionr", "html_url": "https://github.com/orionr", "followers_url": "https://api.github.com/users/orionr/followers", "following_url": "https://api.github.com/users/orionr/following{/other_user}", "gists_url": "https://api.github.com/users/orionr/gists{/gist_id}", "starred_url": "https://api.github.com/users/orionr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orionr/subscriptions", "organizations_url": "https://api.github.com/users/orionr/orgs", "repos_url": "https://api.github.com/users/orionr/repos", "events_url": "https://api.github.com/users/orionr/events{/privacy}", "received_events_url": "https://api.github.com/users/orionr/received_events", "type": "User", "site_admin": false}, "body": "Yup - inline shouldn't need the AT_CORE_API prefix.", "created_at": "2018-08-29T18:50:33Z", "updated_at": "2018-11-23T15:50:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/10765#discussion_r213794040", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10765", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213794040"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10765#discussion_r213794040"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10765"}}, "body_html": "<p>Yup - inline shouldn't need the AT_CORE_API prefix.</p>", "body_text": "Yup - inline shouldn't need the AT_CORE_API prefix."}