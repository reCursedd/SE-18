{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/274748908", "html_url": "https://github.com/pytorch/pytorch/issues/551#issuecomment-274748908", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/551", "id": 274748908, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDc0ODkwOA==", "user": {"login": "andreaskoepf", "id": 9976399, "node_id": "MDQ6VXNlcjk5NzYzOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9976399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreaskoepf", "html_url": "https://github.com/andreaskoepf", "followers_url": "https://api.github.com/users/andreaskoepf/followers", "following_url": "https://api.github.com/users/andreaskoepf/following{/other_user}", "gists_url": "https://api.github.com/users/andreaskoepf/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreaskoepf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreaskoepf/subscriptions", "organizations_url": "https://api.github.com/users/andreaskoepf/orgs", "repos_url": "https://api.github.com/users/andreaskoepf/repos", "events_url": "https://api.github.com/users/andreaskoepf/events{/privacy}", "received_events_url": "https://api.github.com/users/andreaskoepf/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-24T09:14:14Z", "updated_at": "2017-01-24T09:15:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To me these 2d modules are confusing e.g.<br>\n<a href=\"https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/legacy/nn/SpatialSoftMax.py\">SpatialSoftmax.py</a> and <a href=\"https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/legacy/nn/SoftMax.py\">Softmax.py</a> look identical. In the outer wrapper code the difference seems to be an argument check, e.g. input to the Softmax module has to be 2D and input to the Softmax2d module has to be 4d - but in the end they call the same function.</p>\n<p>In <code>torch.nn.functional</code> there are no '2d' versions of these functions but you can simply call<br>\n<code>torch.nn.functional.log_softmax</code> or <code>torch.nn.functional.softmax</code> with 1d,2d,3d,4d tensors.</p>\n<p>It took me a couple of minutes to understand this and I could imagine that it confuses also other users if they port a legacy model to the new function style and search for the corresponding 2d functions. Maybe it would be worth to add a hint in the documentation?</p>", "body_text": "To me these 2d modules are confusing e.g.\nSpatialSoftmax.py and Softmax.py look identical. In the outer wrapper code the difference seems to be an argument check, e.g. input to the Softmax module has to be 2D and input to the Softmax2d module has to be 4d - but in the end they call the same function.\nIn torch.nn.functional there are no '2d' versions of these functions but you can simply call\ntorch.nn.functional.log_softmax or torch.nn.functional.softmax with 1d,2d,3d,4d tensors.\nIt took me a couple of minutes to understand this and I could imagine that it confuses also other users if they port a legacy model to the new function style and search for the corresponding 2d functions. Maybe it would be worth to add a hint in the documentation?", "body": "To me these 2d modules are confusing e.g.\r\n[SpatialSoftmax.py](https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/legacy/nn/SpatialSoftMax.py) and [Softmax.py](https://github.com/pytorch/pytorch/blob/0f65c9267d5ec55584b0ec65acb5374c95af9c16/torch/legacy/nn/SoftMax.py) look identical. In the outer wrapper code the difference seems to be an argument check, e.g. input to the Softmax module has to be 2D and input to the Softmax2d module has to be 4d - but in the end they call the same function.\r\n\r\nIn `torch.nn.functional` there are no '2d' versions of these functions but you can simply call\r\n`torch.nn.functional.log_softmax` or `torch.nn.functional.softmax` with 1d,2d,3d,4d tensors.\r\n\r\nIt took me a couple of minutes to understand this and I could imagine that it confuses also other users if they port a legacy model to the new function style and search for the corresponding 2d functions. Maybe it would be worth to add a hint in the documentation?"}