{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/395791662", "html_url": "https://github.com/pytorch/pytorch/issues/8267#issuecomment-395791662", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8267", "id": 395791662, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTc5MTY2Mg==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-08T15:10:53Z", "updated_at": "2018-06-08T15:10:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Some good questions here.</p>\n<blockquote>\n<p>Then why is THCTensorMathReduce.cuh is installed in site-packages/torch where it looks like it is includable?</p>\n</blockquote>\n<p>I don't think I fully understand how this works.  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> does C++ extensions install different headers than pytorch or is THTensor.hpp not being installed with THCTensorMathReduce.cuh for some other reason (maybe the cmake is wrong)?  While I agree with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> that things at the TH/THC level are internal APIs, it doesn't make sense to me why one of these files is included and not the other?</p>\n<blockquote>\n<p>Will DeviceTensor and TypeUtils etc. be available via ATen, or are they simply going away?</p>\n</blockquote>\n<p>TypeUtils is definitely going away.  It can't work going forward (it is templatized on the Tensor type for which there will be only one) and there will be better APIs that replace it.  For DeviceTensor I haven't decided yet -- if someone could provide a writeup of what they find particularly useful about it, I can see about porting it to ATen.</p>\n<blockquote>\n<p>What are the steps you are taking to refactor out THC, what should <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7799218\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mcarilli\">@mcarilli</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15841449\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngimel\">@ngimel</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38511765\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mruberry\">@mruberry</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22205833\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/csarofeen\">@csarofeen</a> be aware of?</p>\n</blockquote>\n<p>The problem is we are in an in-between state.  the ATen API is public but limited; it doesn't have all the utility functions of TH/THC and you don't have direct control over the sizes/strides/dimensions, so you actually <em>can't</em> do some things without TH/THC.  That's what the work <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> and I are doing is attempting to address: ATen and TH/THC will be the same thing in that the API will look like ATen but you'll have direct control over sizes/strides/dimensions, and better public APIs.  But we aren't there yet.</p>\n<p>The major steps are roughly:</p>\n<p>Step 1.  There will only be a single THTensor and a single THCTensor type.  So that means things that templatize on the type of THTensor/THCTensor will not work.</p>\n<p>Step 2.  These (THTensor/THCTensor) types will eventually change to be the C10/A10 equivalent.  Basically, everything will look and behave like ATen, except you'll also have direct control over sizes/strides/dimensions that we don't provide at the ATen level today.</p>\n<p>Step 3.  Move any APIs that are publicly useful and stable in TH/THC out to ATen.  This is much easier once Step 1 and 2 are done because ideally it's just a namespace change, because the Tensor types/APIs are identical.</p>\n<blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7799218\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mcarilli\">@mcarilli</a> is working on revamping the Embedding backward kernels to make them much faster. Anything he should be aware of for this short-term work?</p>\n</blockquote>\n<p>Honestly I'd just discuss with us either here on or slack what you need.  As I said before, it may be possible to port DeviceTensor to ATen.  Alternatively, I don't think it's the worst thing (until we finish the work above), to use a limited set of TH/THC APIs with the understanding that they <em>will</em> break.  But maybe <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> has a better idea.</p>", "body_text": "Some good questions here.\n\nThen why is THCTensorMathReduce.cuh is installed in site-packages/torch where it looks like it is includable?\n\nI don't think I fully understand how this works.  @goldsborough does C++ extensions install different headers than pytorch or is THTensor.hpp not being installed with THCTensorMathReduce.cuh for some other reason (maybe the cmake is wrong)?  While I agree with @goldsborough that things at the TH/THC level are internal APIs, it doesn't make sense to me why one of these files is included and not the other?\n\nWill DeviceTensor and TypeUtils etc. be available via ATen, or are they simply going away?\n\nTypeUtils is definitely going away.  It can't work going forward (it is templatized on the Tensor type for which there will be only one) and there will be better APIs that replace it.  For DeviceTensor I haven't decided yet -- if someone could provide a writeup of what they find particularly useful about it, I can see about porting it to ATen.\n\nWhat are the steps you are taking to refactor out THC, what should @mcarilli @ngimel @mruberry and @csarofeen be aware of?\n\nThe problem is we are in an in-between state.  the ATen API is public but limited; it doesn't have all the utility functions of TH/THC and you don't have direct control over the sizes/strides/dimensions, so you actually can't do some things without TH/THC.  That's what the work @ezyang and I are doing is attempting to address: ATen and TH/THC will be the same thing in that the API will look like ATen but you'll have direct control over sizes/strides/dimensions, and better public APIs.  But we aren't there yet.\nThe major steps are roughly:\nStep 1.  There will only be a single THTensor and a single THCTensor type.  So that means things that templatize on the type of THTensor/THCTensor will not work.\nStep 2.  These (THTensor/THCTensor) types will eventually change to be the C10/A10 equivalent.  Basically, everything will look and behave like ATen, except you'll also have direct control over sizes/strides/dimensions that we don't provide at the ATen level today.\nStep 3.  Move any APIs that are publicly useful and stable in TH/THC out to ATen.  This is much easier once Step 1 and 2 are done because ideally it's just a namespace change, because the Tensor types/APIs are identical.\n\n@mcarilli is working on revamping the Embedding backward kernels to make them much faster. Anything he should be aware of for this short-term work?\n\nHonestly I'd just discuss with us either here on or slack what you need.  As I said before, it may be possible to port DeviceTensor to ATen.  Alternatively, I don't think it's the worst thing (until we finish the work above), to use a limited set of TH/THC APIs with the understanding that they will break.  But maybe @goldsborough has a better idea.", "body": "Some good questions here.\r\n\r\n> Then why is THCTensorMathReduce.cuh is installed in site-packages/torch where it looks like it is includable?\r\n\r\nI don't think I fully understand how this works.  @goldsborough does C++ extensions install different headers than pytorch or is THTensor.hpp not being installed with THCTensorMathReduce.cuh for some other reason (maybe the cmake is wrong)?  While I agree with @goldsborough that things at the TH/THC level are internal APIs, it doesn't make sense to me why one of these files is included and not the other?\r\n\r\n> Will DeviceTensor and TypeUtils etc. be available via ATen, or are they simply going away?\r\n\r\nTypeUtils is definitely going away.  It can't work going forward (it is templatized on the Tensor type for which there will be only one) and there will be better APIs that replace it.  For DeviceTensor I haven't decided yet -- if someone could provide a writeup of what they find particularly useful about it, I can see about porting it to ATen.\r\n\r\n> What are the steps you are taking to refactor out THC, what should @mcarilli @ngimel @mruberry and @csarofeen be aware of?\r\n\r\nThe problem is we are in an in-between state.  the ATen API is public but limited; it doesn't have all the utility functions of TH/THC and you don't have direct control over the sizes/strides/dimensions, so you actually _can't_ do some things without TH/THC.  That's what the work @ezyang and I are doing is attempting to address: ATen and TH/THC will be the same thing in that the API will look like ATen but you'll have direct control over sizes/strides/dimensions, and better public APIs.  But we aren't there yet.\r\n\r\nThe major steps are roughly:\r\n\r\nStep 1.  There will only be a single THTensor and a single THCTensor type.  So that means things that templatize on the type of THTensor/THCTensor will not work.\r\n\r\nStep 2.  These (THTensor/THCTensor) types will eventually change to be the C10/A10 equivalent.  Basically, everything will look and behave like ATen, except you'll also have direct control over sizes/strides/dimensions that we don't provide at the ATen level today.\r\n\r\nStep 3.  Move any APIs that are publicly useful and stable in TH/THC out to ATen.  This is much easier once Step 1 and 2 are done because ideally it's just a namespace change, because the Tensor types/APIs are identical.\r\n\r\n> @mcarilli is working on revamping the Embedding backward kernels to make them much faster. Anything he should be aware of for this short-term work?\r\n\r\nHonestly I'd just discuss with us either here on or slack what you need.  As I said before, it may be possible to port DeviceTensor to ATen.  Alternatively, I don't think it's the worst thing (until we finish the work above), to use a limited set of TH/THC APIs with the understanding that they _will_ break.  But maybe @goldsborough has a better idea."}