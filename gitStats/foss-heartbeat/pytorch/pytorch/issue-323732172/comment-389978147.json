{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389978147", "html_url": "https://github.com/pytorch/pytorch/issues/7620#issuecomment-389978147", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7620", "id": 389978147, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTk3ODE0Nw==", "user": {"login": "emilmelnikov", "id": 1649961, "node_id": "MDQ6VXNlcjE2NDk5NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1649961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilmelnikov", "html_url": "https://github.com/emilmelnikov", "followers_url": "https://api.github.com/users/emilmelnikov/followers", "following_url": "https://api.github.com/users/emilmelnikov/following{/other_user}", "gists_url": "https://api.github.com/users/emilmelnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilmelnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilmelnikov/subscriptions", "organizations_url": "https://api.github.com/users/emilmelnikov/orgs", "repos_url": "https://api.github.com/users/emilmelnikov/repos", "events_url": "https://api.github.com/users/emilmelnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/emilmelnikov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-17T19:16:00Z", "updated_at": "2018-05-17T19:16:00Z", "author_association": "NONE", "body_html": "<p>Another possible way is to create an <code>arguments</code> property/method that would return all arguments that define the Module:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Module</span>:\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">arguments</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> {}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Linear</span>:\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">arguments</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">dict</span>(\n            <span class=\"pl-v\">in_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.in_features,\n            <span class=\"pl-v\">out_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.out_features,\n            <span class=\"pl-v\">bias</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.bias <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>,\n        )</pre></div>\n<p>Then, solution to the problem becomes trivial:</p>\n<div class=\"highlight highlight-source-python\"><pre>model <span class=\"pl-k\">=</span> resnet18()\nmodel.fc <span class=\"pl-k\">=</span> Linear({<span class=\"pl-k\">**</span>model.fc.arguments, <span class=\"pl-k\">**</span><span class=\"pl-c1\">dict</span>(<span class=\"pl-v\">out_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)})</pre></div>\n<p>Moreover, I guess this property can be used in other places (e.g. generic <code>repr</code> implementations).</p>", "body_text": "Another possible way is to create an arguments property/method that would return all arguments that define the Module:\nclass Module:\n    @property\n    def arguments(self):\n        return {}\n\nclass Linear:\n    @property\n    def arguments(self):\n        return dict(\n            in_features=self.in_features,\n            out_features=self.out_features,\n            bias=self.bias is not None,\n        )\nThen, solution to the problem becomes trivial:\nmodel = resnet18()\nmodel.fc = Linear({**model.fc.arguments, **dict(out_features=10)})\nMoreover, I guess this property can be used in other places (e.g. generic repr implementations).", "body": "Another possible way is to create an `arguments` property/method that would return all arguments that define the Module:\r\n\r\n```python\r\nclass Module:\r\n    @property\r\n    def arguments(self):\r\n        return {}\r\n\r\nclass Linear:\r\n    @property\r\n    def arguments(self):\r\n        return dict(\r\n            in_features=self.in_features,\r\n            out_features=self.out_features,\r\n            bias=self.bias is not None,\r\n        )\r\n```\r\n\r\nThen, solution to the problem becomes trivial:\r\n\r\n```python\r\nmodel = resnet18()\r\nmodel.fc = Linear({**model.fc.arguments, **dict(out_features=10)})\r\n```\r\n\r\nMoreover, I guess this property can be used in other places (e.g. generic `repr` implementations)."}