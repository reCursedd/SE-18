{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390916074", "html_url": "https://github.com/pytorch/pytorch/issues/7620#issuecomment-390916074", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7620", "id": 390916074, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDkxNjA3NA==", "user": {"login": "emilmelnikov", "id": 1649961, "node_id": "MDQ6VXNlcjE2NDk5NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1649961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilmelnikov", "html_url": "https://github.com/emilmelnikov", "followers_url": "https://api.github.com/users/emilmelnikov/followers", "following_url": "https://api.github.com/users/emilmelnikov/following{/other_user}", "gists_url": "https://api.github.com/users/emilmelnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilmelnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilmelnikov/subscriptions", "organizations_url": "https://api.github.com/users/emilmelnikov/orgs", "repos_url": "https://api.github.com/users/emilmelnikov/repos", "events_url": "https://api.github.com/users/emilmelnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/emilmelnikov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-22T08:59:51Z", "updated_at": "2018-05-22T08:59:51Z", "author_association": "NONE", "body_html": "<p>There is an implementation strategy that seems to be consistent with the existing PyTorch design. What if we adopt the parameters/buffers/modules approach and assign arguments in the <code>Module.__setattr__</code>? We can either pick up everything that is not a proper parameter/buffer/module, or create a wrapper <code>Argument</code> type, piggybacking on the <code>Parameter</code> design.</p>", "body_text": "There is an implementation strategy that seems to be consistent with the existing PyTorch design. What if we adopt the parameters/buffers/modules approach and assign arguments in the Module.__setattr__? We can either pick up everything that is not a proper parameter/buffer/module, or create a wrapper Argument type, piggybacking on the Parameter design.", "body": "There is an implementation strategy that seems to be consistent with the existing PyTorch design. What if we adopt the parameters/buffers/modules approach and assign arguments in the `Module.__setattr__`? We can either pick up everything that is not a proper parameter/buffer/module, or create a wrapper `Argument` type, piggybacking on the `Parameter` design."}