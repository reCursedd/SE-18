{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116834079", "pull_request_review_id": 38415408, "id": 116834079, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjgzNDA3OQ==", "diff_hunk": "@@ -939,6 +939,156 @@ def test_arange(self):\n         self.assertEqual(r1, r2, 0)\n         self.assertEqual(r2, r3[:-1], 0)\n \n+    @staticmethod\n+    def _test_broadcast(self, cast):\n+        def select_broadcastable_dims():\n+            # select full dimensionality\n+            ndims = random.randint(1, 4)\n+            dims_full = []\n+            for _ in range(ndims):\n+                dims_full = dims_full + [random.randint(1, 8)]\n+\n+            # select actual dimensions for ops:\n+            # larger: full ndims, individual sizes may be reduced\n+            # smaller: possibly reduced ndims, sizes may be reduced\n+            smaller_ndims = random.randint(1, ndims)\n+            dims_small = []\n+            dims_large = []\n+            for i in range(ndims - 1, -1, -1):\n+                j = random.randint(1, 3)\n+                if j == 1:  # no reduced singleton dimension\n+                    ds = dims_full[i]\n+                    dl = dims_full[i]\n+                elif j == 2:  # larger may have reduced singleton dimension\n+                    ds = dims_full[i]\n+                    dl = 1 if len(dims_small) < smaller_ndims else dims_full[i]\n+                elif j == 3:  # smaller may have reduced singleton dimension\n+                    ds = 1\n+                    dl = dims_full[i]\n+                dims_large = [dl] + dims_large\n+                if len(dims_small) < smaller_ndims:\n+                    dims_small = [ds] + dims_small\n+            return (dims_small, dims_large, dims_full)\n+\n+\n+        # all out-of-place functions\n+        fns = [\n+            \"dist\", \"atan2\", \"pow\", \"lerp\", \"add\",\n+            \"sub\", \"mul\", \"div\", \"fmod\", \"remainder\"\n+        ]\n+        # functions with no torch. equivalent\n+        fns_no_torch = [\"sub\"]\n+        # functions with no inplace equivalent\n+        fns_no_inplace = [\"dist\"]\n+        # functions with fallback to equal nElem behavior\n+        fns_fallback = [\"add\", \"sub\", \"div\", \"mul\"]\n+\n+        for fn in fns:\n+            (dims_small, dims_large, dims_full) = select_broadcastable_dims()\n+            small = torch.randn(*dims_small).float()\n+            small = cast(small)\n+            large = torch.randn(*dims_large).float()\n+            large = cast(large)\n+            smallExpanded = small.expand(*dims_full)\n+            largeExpanded = large.expand(*dims_full)\n+            # run through tensor versions of functions\n+            # and verify fully expanded inputs give same results\n+            fntensor_large_expanded = getattr(largeExpanded, fn)\n+            fntensor_large_non_expanded = getattr(large, fn)\n+\n+            def tensorfn(myfn, t):\n+                return myfn(t) if fn != \"lerp\" else myfn(t, 0.5)\n+            r1 = tensorfn(fntensor_large_expanded, smallExpanded)\n+            r2 = tensorfn(fntensor_large_non_expanded, small)\n+            self.assertEqual(r1, r2)\n+            # other order\n+            fntensor_small_expanded = getattr(smallExpanded, fn)\n+            fntensor_small_non_expanded = getattr(small, fn)\n+            r1 = tensorfn(fntensor_small_expanded, largeExpanded)\n+            r2 = tensorfn(fntensor_small_non_expanded, large)\n+            self.assertEqual(r1, r2)\n+\n+            # now for torch. versions of functions\n+            if fn not in fns_no_torch:\n+                fntorch = getattr(torch, fn)\n+\n+                def torchfn(t1, t2):\n+                    return (fntorch(t1, t2) if fn != \"lerp\"\n+                            else fntorch(t1, t2, 0.5))\n+                r1 = torchfn(large, small)\n+                r2 = torchfn(largeExpanded, smallExpanded)\n+                self.assertEqual(r1, r2)\n+                # other order\n+                r1 = torchfn(small, large)\n+                r2 = torchfn(smallExpanded, largeExpanded)\n+                self.assertEqual(r1, r2)\n+\n+            # now for in place functions\n+            if fn not in fns_no_inplace:\n+                # in-place tensor is not broadcastable; test only guaranteed\n+                # to work by broadcasting other argument\n+                def tensorfn_inplace(t0, t1):\n+                    t0_fn = getattr(t0, fn + \"_\")\n+                    return t0_fn(t1) if fn != \"lerp\" else t0_fn(t1, 0.5)\n+                r1 = tensorfn_inplace(largeExpanded, smallExpanded)\n+                r2 = tensorfn_inplace(largeExpanded, small)\n+                self.assertEqual(r1, r2)\n+\n+                broadcastable = (dims_small == dims_full)\n+                if not broadcastable:\n+                    if (fn not in fns_fallback) or (fn in fns_fallback and small.numel() != largeExpanded.numel()):\n+                        self.assertRaises(RuntimeError, lambda: tensorfn_inplace(small, largeExpanded))\n+                    if (fn not in fns_fallback) or (fn in fns_fallback and small.numel() != large.numel()):\n+                        self.assertRaises(RuntimeError, lambda: tensorfn_inplace(small, large))\n+\n+    def test_broadcast(self):\n+        self._test_broadcast(self, lambda t: t)\n+\n+    @staticmethod\n+    def _test_broadcast_fallback(self, cast):\n+        fns_fallback = [\"add\", \"sub\", \"div\", \"mul\"]\n+        for fn in fns_fallback:\n+            # case 1: both broadcastable and nElems equal -- verify that we broadcast\n+            t0 = torch.randn(1, 4).float()\n+            t0 = cast(t0)\n+            t1 = torch.randn(4, 1).float()\n+            t1 = cast(t1)\n+            broadcastSize = torch.Size([4, 4])\n+            t0_fn = getattr(t0, fn)\n+            t1_fn = getattr(t1, fn)\n+\n+            def tensorfn(myfn, t):\n+                return myfn(t) if fn != \"lerp\" else myfn(t, 0.5)\n+            r0 = tensorfn(t0_fn, t1)\n+            r1 = tensorfn(t1_fn, t0)\n+            self.assertEqual(broadcastSize, r0.size())\n+            self.assertEqual(broadcastSize, r1.size())\n+\n+            # case 2: broadcastable and not nElemes equal -- tested by test_fallback\n+            # case 3: not broadcastable nElems equal -- verify we fallback\n+            t0 = torch.randn(1, 4).float()\n+            t1 = torch.randn(2, 2).float()\n+            t0_fn = getattr(t0, fn)\n+            t1_fn = getattr(t1, fn)\n+\n+            def verifyFallbackWarnings(w):\n+                self.assertEqual(len(w), 1)\n+                self.assertTrue(issubclass(w[0].category, UserWarning))\n+                self.assertTrue(\"Falling back\" in str(w[0].message))\n+            with warnings.catch_warnings(record=True) as w:\n+                r0 = tensorfn(t0_fn, t1)\n+                verifyFallbackWarnings(w)\n+            with warnings.catch_warnings(record=True) as w:\n+                r1 = tensorfn(t1_fn, t0)\n+                verifyFallbackWarnings(w)\n+            self.assertEqual(t0.size(), r0.size())\n+            self.assertEqual(t1.size(), r1.size())\n+\n+            # case 4: not broadcastable and not nEleme equal -- tested by test_fallback", "path": "test/test_torch.py", "position": null, "original_position": 149, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "4908bee76b96c29262e7d3999d1a6684899521c4", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "s/nEleme/nElem/", "created_at": "2017-05-16T19:22:02Z", "updated_at": "2018-11-23T15:33:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r116834079", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116834079"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r116834079"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>s/nEleme/nElem/</p>", "body_text": "s/nEleme/nElem/"}