{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119917392", "pull_request_review_id": 41834513, "id": 119917392, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTkxNzM5Mg==", "diff_hunk": "@@ -66,39 +66,120 @@ TH_API THLongStorage *THLongStorage_newInferSize(THLongStorage *size, ptrdiff_t\n   return copy;\n }\n \n-TH_API void THLongStorage_calculateExpandGeometry(long *tensorSizes, long *tensorStrides, long tensorDim, THLongStorage *sizes, long **esz, long **est) {\n-  ptrdiff_t ndim = THLongStorage_size(sizes);\n-  long numUnsqueezed = ndim - tensorDim;\n+TH_API int THLongStorage_inferSize2(THLongStorage *output, long *sizesA, long dimsA, long *sizesB, long dimsB, int raiseErrors) {\n+  THArgCheck(sizesA != NULL, 1, \"sizesA must not be null\");\n+  THArgCheck(sizesB != NULL, 2, \"sizesB must not be null\");\n+  THArgCheck(dimsA, 1, \"Can't expand empty tensor a\");\n+  THArgCheck(dimsB, 1, \"Can't expand empty tensor b\");\n+  ptrdiff_t ndim = dimsA > dimsB ? dimsA : dimsB;\n \n   long *expandedSizes = THAlloc(sizeof(long)*ndim);\n-  long *expandedStrides = THAlloc(sizeof(long)*ndim);\n \n-  for (long i = numUnsqueezed; i < ndim; ++i) {\n-    expandedSizes[i] = tensorSizes[i - numUnsqueezed];\n-    expandedStrides[i] = tensorStrides[i - numUnsqueezed];\n+  for (long i = ndim - 1; i >= 0; --i) {\n+    long offset = ndim - 1 - i;\n+    long dimA = dimsA - 1 - offset;\n+    long dimB = dimsB - 1 - offset;\n+    long sizeA = (dimA >= 0) ? sizesA[dimA] : 1;\n+    long sizeB = (dimB >= 0) ? sizesB[dimB] : 1;\n+    if (sizeA != sizeB) {\n+      if (sizeA == 1) {\n+        sizeA = sizeB;\n+      }\n+      else if (sizeB == 1) {\n+      }\n+      else {\n+        THFree(expandedSizes);\n+        if (raiseErrors) {\n+          THError(\"The size of tensor a (%ld) must match the size of tensor b (%ld) at \"\n+                  \"non-singleton dimension %ld.\", sizeA, sizeB, i);\n+        }\n+        return -1;\n+      }\n+    }\n+    expandedSizes[ i ] = sizeA;", "path": "torch/lib/TH/THStorage.c", "position": null, "original_position": 41, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "0fb1f36420a17612e870b8c5c1851e7e85912ba3", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "sure, will do.", "created_at": "2017-06-02T18:00:54Z", "updated_at": "2018-11-23T15:33:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119917392", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119917392"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119917392"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>sure, will do.</p>", "body_text": "sure, will do.", "in_reply_to_id": 119901945}