{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116833236", "pull_request_review_id": 38415408, "id": 116833236, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjgzMzIzNg==", "diff_hunk": "@@ -285,21 +285,80 @@ void THTensor_(resize5d)(THTensor *self, long size0, long size1, long size2, lon\n   THTensor_(resizeNd)(self, 5, size, NULL);\n }\n \n-THTensor* THTensor_(newExpand)(THTensor *tensor, THLongStorage *sizes) {\n-  THArgCheck(THLongStorage_size(sizes) >= THTensor_(nDimension)(tensor), 1, \"the number of sizes provided \\\n-      must be greater or equal to the number of dimensions in the tensor\");\n+THTensor* THTensor_(newExpand)(THTensor *tensor, THLongStorage *sizes, int raiseErrors) {\n+  THTensor *result = THTensor_(new)();\n+  THTensor_(expand)(result, tensor, sizes, raiseErrors);\n+  return result;\n+}\n+\n+int THTensor_(expand)(THTensor *r, THTensor *tensor, THLongStorage *sizes, int raiseErrors) {\n+  if (raiseErrors) {\n+    THArgCheck(THLongStorage_size(sizes) >= THTensor_(nDimension)(tensor), 1,\n+               \"the number of sizes provided must be greater or equal to the \"\n+               \"number of dimensions in the tensor\");\n+  }\n   THArgCheck(THTensor_(nDimension)(tensor) > 0, 0, \"can't expand an empty tensor\");\n \n   long *expandedSizes;\n   long *expandedStrides;\n-  THLongStorage_calculateExpandGeometry(tensor->size, tensor->stride, THTensor_(nDimension)(tensor), sizes, &expandedSizes, &expandedStrides);\n+  int ret =\n+    THLongStorage_inferExpandGeometry(tensor->size, tensor->stride, THTensor_(nDimension)(tensor), sizes, &expandedSizes, &expandedStrides, raiseErrors);\n+  if (ret != 0) {\n+    return ret;\n+  }\n+  THTensor_(setStorageNd)(r, THTensor_(storage)(tensor), THTensor_(storageOffset)(tensor), THLongStorage_size(sizes), expandedSizes, expandedStrides);\n+  THFree(expandedSizes);\n+  THFree(expandedStrides);\n \n-  THTensor *result = THTensor_(new)();\n-  THTensor_(setStorageNd)(result, THTensor_(storage)(tensor), THTensor_(storageOffset)(tensor), THLongStorage_size(sizes), expandedSizes, expandedStrides);\n+  return 0;\n+}\n+\n+int THTensor_(expand2)(THTensor *ra, THTensor *rb, THTensor *opa, THTensor *opb, int raiseErrors) {", "path": "torch/lib/TH/generic/THTensor.c", "position": null, "original_position": 38, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "c214dcf37f422df301477423198bf34fab88bf93", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Given two tensors, expand them so that they have identical dimensions and sizes, following broadcasting semantics.", "created_at": "2017-05-16T19:18:20Z", "updated_at": "2018-11-23T15:33:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r116833236", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116833236"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r116833236"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>Given two tensors, expand them so that they have identical dimensions and sizes, following broadcasting semantics.</p>", "body_text": "Given two tensors, expand them so that they have identical dimensions and sizes, following broadcasting semantics."}