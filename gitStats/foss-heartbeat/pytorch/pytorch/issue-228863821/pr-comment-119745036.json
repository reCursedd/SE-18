{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119745036", "pull_request_review_id": 41651043, "id": 119745036, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTc0NTAzNg==", "diff_hunk": "@@ -939,6 +944,385 @@ def test_arange(self):\n         self.assertEqual(r1, r2, 0)\n         self.assertEqual(r2, r3[:-1], 0)\n \n+    @staticmethod\n+    def _select_broadcastable_dims(self, dims_full=None):\n+        # select full dimensionality\n+        if dims_full is None:\n+            dims_full = []\n+            ndims = random.randint(1, 4)\n+            for _ in range(ndims):\n+                dims_full = dims_full + [random.randint(1, 8)]\n+        else:\n+            ndims = len(dims_full)\n+\n+        # select actual dimensions for ops:\n+        # larger: full ndims, individual sizes may be reduced\n+        # smaller: possibly reduced ndims, sizes may be reduced\n+        smaller_ndims = random.randint(1, ndims)\n+        dims_small = []\n+        dims_large = []\n+        for i in range(ndims - 1, -1, -1):\n+            j = random.randint(1, 3)\n+            if j == 1:  # no reduced singleton dimension\n+                ds = dims_full[i]\n+                dl = dims_full[i]\n+            elif j == 2:  # larger may have reduced singleton dimension\n+                ds = dims_full[i]\n+                dl = 1 if len(dims_small) < smaller_ndims else dims_full[i]\n+            elif j == 3:  # smaller may have reduced singleton dimension\n+                ds = 1\n+                dl = dims_full[i]\n+            dims_large = [dl] + dims_large\n+            if len(dims_small) < smaller_ndims:\n+                dims_small = [ds] + dims_small\n+        return (dims_small, dims_large, dims_full)\n+\n+    @staticmethod\n+    def _test_broadcast(self, cast):\n+\n+        # all functions\n+        fns = [\n+            \"dist\", \"atan2\", \"pow\", \"lerp\", \"add\",\n+            \"sub\", \"mul\", \"div\", \"fmod\", \"remainder\",\n+            \"eq\", \"ge\", \"gt\", \"le\", \"lt\", \"max\", \"min\", \"ne\",\n+            \"addcdiv\", \"addcmul\", \"masked_copy\", \"masked_fill\",\n+            \"map\", \"map2\", \"copy\"\n+        ]\n+        # functions with no torch. equivalent\n+        fns_no_torch = [\"sub\", \"masked_copy\", \"masked_fill\", \"map\", \"map2\", \"copy\"]\n+        # functions with no inplace equivalent\n+        fns_no_inplace = [\"dist\", \"max\", \"min\"]\n+        # functions with no inplace cuda implementation\n+        fns_no_inplace_cuda = [\"map\", \"map2\"]\n+        # functions with no out-of-place tensor version\n+        fns_no_out_place = [\"masked_copy\", \"masked_fill\", \"map\", \"map2\", \"copy\"]\n+        # functions with fallback to equal nElem behavior\n+        fns_fallback = [\"add\", \"sub\", \"div\", \"mul\", \"pow\", \"fmod\", \"remainder\",\n+                        \"eq\", \"ge\", \"gt\", \"le\", \"lt\", \"max\", \"min\", \"ne\",\n+                        \"addcdiv\", \"addcmul\", \"masked_copy\", \"masked_fill\",\n+                        \"map\", \"map2\", \"copy\"]\n+        # functions with three tensor arguments\n+        fns_3_args = [\"addcdiv\", \"addcmul\", \"map2\"]\n+\n+        for fn in fns:\n+            (dims_small, dims_large, dims_full) = TestTorch._select_broadcastable_dims(self)\n+            small = torch.randn(*dims_small).float()\n+            small = cast(small)\n+            large = torch.randn(*dims_large).float()\n+            large = cast(large)\n+            smallExpanded = small.expand(*dims_full)\n+            largeExpanded = large.expand(*dims_full)\n+            small2 = None\n+            small2Expanded = None\n+            if fn in fns_3_args:\n+                # create another smaller tensor\n+                (dims_small2, _, _) = TestTorch._select_broadcastable_dims(self, dims_full)\n+                small2 = torch.randn(*dims_small2).float()\n+                small2 = cast(small2)\n+                small2Expanded = small2.expand(*dims_full)\n+\n+            if fn not in fns_no_out_place:\n+                # run through tensor versions of functions\n+                # and verify fully expanded inputs give same results\n+                fntensor_large_expanded = getattr(largeExpanded, fn)\n+                fntensor_large_non_expanded = getattr(large, fn)\n+\n+                def tensorfn(myfn, t1, t2):\n+                    if fn == \"lerp\":\n+                        return myfn(t1, 0.5)\n+                    elif fn in fns_3_args:\n+                        return myfn(1, t1, t2)\n+                    else:\n+                        return myfn(t1)\n+                r1 = tensorfn(fntensor_large_expanded, smallExpanded, small2Expanded)\n+                r2 = tensorfn(fntensor_large_non_expanded, small, small2)\n+                self.assertEqual(r1, r2)\n+                # other order\n+                fntensor_small_expanded = getattr(smallExpanded, fn)\n+                fntensor_small_non_expanded = getattr(small, fn)\n+                r1 = tensorfn(fntensor_small_expanded, largeExpanded, small2Expanded)\n+                r2 = tensorfn(fntensor_small_non_expanded, large, small2)\n+                self.assertEqual(r1, r2)\n+                if fn in fns_3_args:\n+                    fntensor_small2_expanded = getattr(small2Expanded, fn)\n+                    fntensor_small2_non_expanded = getattr(small2, fn)\n+                    r1 = tensorfn(fntensor_small2_expanded, smallExpanded, largeExpanded)\n+                    r2 = tensorfn(fntensor_small2_non_expanded, small, large)\n+                    self.assertEqual(r1, r2)\n+                    r1 = tensorfn(fntensor_small2_expanded, largeExpanded, smallExpanded)\n+                    r2 = tensorfn(fntensor_small2_non_expanded, large, small)\n+                    self.assertEqual(r1, r2)", "path": "test/test_torch.py", "position": null, "original_position": 169, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "0fb1f36420a17612e870b8c5c1851e7e85912ba3", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "how about this instead of this whole block:\r\n```python\r\nexpanded = { large: largeExpanded, small: smallExpanded, small2: small2Expanded }\r\ndef apply_fn(myfn, t1, t2):\r\n    ...\r\n# test both orders\r\nfor first, second, third in [(large, small, small2), (small, large, small2), (small2, small, large)]:\r\n    if first is None: break  # ignore last iter when small2 is None\r\n    method = getattr(first, fn)\r\n    method_expanded = getattr(expanded[first], fn)\r\n    r1 = apply_fn(method, expanded[second], expanded[third])\r\n    r2 = apply_fn(method_expanded, second, third)\r\n    self.assertEqual\r\n```", "created_at": "2017-06-01T22:28:57Z", "updated_at": "2018-11-23T15:33:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119745036", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119745036"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119745036"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>how about this instead of this whole block:</p>\n<div class=\"highlight highlight-source-python\"><pre>expanded <span class=\"pl-k\">=</span> { large: largeExpanded, small: smallExpanded, small2: small2Expanded }\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">apply_fn</span>(<span class=\"pl-smi\">myfn</span>, <span class=\"pl-smi\">t1</span>, <span class=\"pl-smi\">t2</span>):\n    <span class=\"pl-c1\">...</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> test both orders</span>\n<span class=\"pl-k\">for</span> first, second, third <span class=\"pl-k\">in</span> [(large, small, small2), (small, large, small2), (small2, small, large)]:\n    <span class=\"pl-k\">if</span> first <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>: <span class=\"pl-k\">break</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> ignore last iter when small2 is None</span>\n    method <span class=\"pl-k\">=</span> <span class=\"pl-c1\">getattr</span>(first, fn)\n    method_expanded <span class=\"pl-k\">=</span> <span class=\"pl-c1\">getattr</span>(expanded[first], fn)\n    r1 <span class=\"pl-k\">=</span> apply_fn(method, expanded[second], expanded[third])\n    r2 <span class=\"pl-k\">=</span> apply_fn(method_expanded, second, third)\n    <span class=\"pl-c1\">self</span>.assertEqual</pre></div>", "body_text": "how about this instead of this whole block:\nexpanded = { large: largeExpanded, small: smallExpanded, small2: small2Expanded }\ndef apply_fn(myfn, t1, t2):\n    ...\n# test both orders\nfor first, second, third in [(large, small, small2), (small, large, small2), (small2, small, large)]:\n    if first is None: break  # ignore last iter when small2 is None\n    method = getattr(first, fn)\n    method_expanded = getattr(expanded[first], fn)\n    r1 = apply_fn(method, expanded[second], expanded[third])\n    r2 = apply_fn(method_expanded, second, third)\n    self.assertEqual"}