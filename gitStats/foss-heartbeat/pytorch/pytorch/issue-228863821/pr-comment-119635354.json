{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119635354", "pull_request_review_id": 41524200, "id": 119635354, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTYzNTM1NA==", "diff_hunk": "@@ -50,24 +51,88 @@ inline PyObject * THPCopyMethod(const THPCopyList& v, PyObject *self, PyObject *\n         Py_TYPE(async)->tp_name);\n   }\n \n-  if (!THPCopy(v, self, src, async == Py_True)) {\n+  if (!THPCopy(v, self, src, async == Py_True, false)) {\n+    return NULL;\n+  }\n+\n+  Py_INCREF(self);\n+  return self;\n+}\n+\n+inline PyObject * THPTensorCopyMethod(const THPCopyList& v, PyObject *self, PyObject *args, PyObject *kwargs)\n+{\n+  PyObject *src;\n+  PyObject *async = Py_False;\n+  PyObject *broadcast = Py_True;\n+  static char *kwlist[] = {\"source\", \"async\", \"broadcast\", NULL};\n+  if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"O|OO:copy_\", kwlist, &src, &async, &broadcast)) {\n+    return NULL;\n+  }\n+  if (!PyBool_Check(async)) {\n+    return PyErr_Format(PyExc_TypeError, \"copy_() expected bool for argument async (got '%s')\",\n+        Py_TYPE(async)->tp_name);\n+  }\n+  if (!PyBool_Check(broadcast)) {\n+    return PyErr_Format(PyExc_TypeError, \"copy_() expected bool for argument broadcast (got '%s')\",\n+        Py_TYPE(broadcast)->tp_name);\n+  }\n+\n+  if (!THPCopy(v, self, src, async == Py_True, broadcast == Py_True)) {\n     return NULL;\n   }\n \n   Py_INCREF(self);\n   return self;\n }\n \n+template <typename StorageDst, typename StorageSrc>\n+void THPInsertStorageCopyFunction(\n+  THPCopyList& copyList,\n+  void (*copyFunc)(LIBRARY_STATE_TYPE StorageDst* x, StorageSrc* z),\n+  bool async=false)\n+{\n+  auto wrapper = [copyFunc](PyObject* dst_, PyObject* src_, bool broadcast) {\n+    StorageDst* dst = THPTypeInfo<StorageDst>::cdata(dst_);\n+    StorageSrc* src = THPTypeInfo<StorageSrc>::cdata(src_);\n+\n+    PyThreadState *_save = NULL;\n+    try {\n+      Py_UNBLOCK_THREADS;\n+      copyFunc(LIBRARY_STATE dst, src);\n+      Py_BLOCK_THREADS;\n+    } catch (...) {\n+      if (_save) {\n+        Py_BLOCK_THREADS;\n+      }\n+      throw;\n+    }\n+  };\n+\n+  PyTypeObject* srcType = THPTypeInfo<StorageSrc>::pyType();\n+  copyList.push_back({ srcType, wrapper, async, false });\n+}\n+\n template <typename TensorDst, typename TensorSrc>\n-void THPInsertCopyFunction(\n+void THPInsertTensorCopyFunction(\n   THPCopyList& copyList,\n   void (*copyFunc)(LIBRARY_STATE_TYPE TensorDst* x, TensorSrc* z),\n-  bool async=false)\n+  bool async=false,\n+  bool broadcast=true)\n {\n-  auto wrapper = [copyFunc](PyObject* dst_, PyObject* src_) {\n+  auto wrapper = [copyFunc](PyObject* dst_, PyObject* src_, bool broadcast) {\n     TensorDst* dst = THPTypeInfo<TensorDst>::cdata(dst_);\n     TensorSrc* src = THPTypeInfo<TensorSrc>::cdata(src_);\n \n+    TensorSrc *src_save = src;", "path": "torch/csrc/copy_utils.h", "position": 130, "original_position": 130, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "6430b6e52ad0ee00a07d92a78e95be9fe9885472", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "This is supporting the \"broadcast\" parameter in tensor.copy_ at the python level.  Unlike other pointwise functions, there were a number of cases in e.g. gradcheck where the code is trying to do a 1-dimensional copy, and it was easier to just be able to turn off broadcasts in those cases.", "created_at": "2017-06-01T14:49:23Z", "updated_at": "2018-11-23T15:33:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119635354", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119635354"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119635354"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>This is supporting the \"broadcast\" parameter in tensor.copy_ at the python level.  Unlike other pointwise functions, there were a number of cases in e.g. gradcheck where the code is trying to do a 1-dimensional copy, and it was easier to just be able to turn off broadcasts in those cases.</p>", "body_text": "This is supporting the \"broadcast\" parameter in tensor.copy_ at the python level.  Unlike other pointwise functions, there were a number of cases in e.g. gradcheck where the code is trying to do a 1-dimensional copy, and it was easier to just be able to turn off broadcasts in those cases.", "in_reply_to_id": 119615012}