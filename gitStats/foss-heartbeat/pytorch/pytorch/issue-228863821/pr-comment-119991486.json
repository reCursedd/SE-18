{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119991486", "pull_request_review_id": 41893924, "id": 119991486, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTk5MTQ4Ng==", "diff_hunk": "@@ -939,6 +944,385 @@ def test_arange(self):\n         self.assertEqual(r1, r2, 0)\n         self.assertEqual(r2, r3[:-1], 0)\n \n+    @staticmethod\n+    def _select_broadcastable_dims(self, dims_full=None):\n+        # select full dimensionality\n+        if dims_full is None:\n+            dims_full = []\n+            ndims = random.randint(1, 4)\n+            for _ in range(ndims):\n+                dims_full = dims_full + [random.randint(1, 8)]\n+        else:\n+            ndims = len(dims_full)\n+\n+        # select actual dimensions for ops:\n+        # larger: full ndims, individual sizes may be reduced\n+        # smaller: possibly reduced ndims, sizes may be reduced\n+        smaller_ndims = random.randint(1, ndims)\n+        dims_small = []\n+        dims_large = []\n+        for i in range(ndims - 1, -1, -1):\n+            j = random.randint(1, 3)\n+            if j == 1:  # no reduced singleton dimension\n+                ds = dims_full[i]\n+                dl = dims_full[i]\n+            elif j == 2:  # larger may have reduced singleton dimension\n+                ds = dims_full[i]\n+                dl = 1 if len(dims_small) < smaller_ndims else dims_full[i]\n+            elif j == 3:  # smaller may have reduced singleton dimension\n+                ds = 1\n+                dl = dims_full[i]\n+            dims_large = [dl] + dims_large\n+            if len(dims_small) < smaller_ndims:\n+                dims_small = [ds] + dims_small\n+        return (dims_small, dims_large, dims_full)\n+\n+    @staticmethod\n+    def _test_broadcast(self, cast):\n+\n+        # all functions\n+        fns = [\n+            \"dist\", \"atan2\", \"pow\", \"lerp\", \"add\",\n+            \"sub\", \"mul\", \"div\", \"fmod\", \"remainder\",\n+            \"eq\", \"ge\", \"gt\", \"le\", \"lt\", \"max\", \"min\", \"ne\",\n+            \"addcdiv\", \"addcmul\", \"masked_copy\", \"masked_fill\",\n+            \"map\", \"map2\", \"copy\"\n+        ]\n+        # functions with no torch. equivalent\n+        fns_no_torch = [\"sub\", \"masked_copy\", \"masked_fill\", \"map\", \"map2\", \"copy\"]\n+        # functions with no inplace equivalent\n+        fns_no_inplace = [\"dist\", \"max\", \"min\"]\n+        # functions with no inplace cuda implementation\n+        fns_no_inplace_cuda = [\"map\", \"map2\"]\n+        # functions with no out-of-place tensor version\n+        fns_no_out_place = [\"masked_copy\", \"masked_fill\", \"map\", \"map2\", \"copy\"]\n+        # functions with fallback to equal nElem behavior\n+        fns_fallback = [\"add\", \"sub\", \"div\", \"mul\", \"pow\", \"fmod\", \"remainder\",\n+                        \"eq\", \"ge\", \"gt\", \"le\", \"lt\", \"max\", \"min\", \"ne\",\n+                        \"addcdiv\", \"addcmul\", \"masked_copy\", \"masked_fill\",\n+                        \"map\", \"map2\", \"copy\"]\n+        # functions with three tensor arguments\n+        fns_3_args = [\"addcdiv\", \"addcmul\", \"map2\"]\n+\n+        for fn in fns:\n+            (dims_small, dims_large, dims_full) = TestTorch._select_broadcastable_dims(self)\n+            small = torch.randn(*dims_small).float()\n+            small = cast(small)\n+            large = torch.randn(*dims_large).float()\n+            large = cast(large)\n+            smallExpanded = small.expand(*dims_full)\n+            largeExpanded = large.expand(*dims_full)\n+            small2 = None\n+            small2Expanded = None\n+            if fn in fns_3_args:\n+                # create another smaller tensor\n+                (dims_small2, _, _) = TestTorch._select_broadcastable_dims(self, dims_full)\n+                small2 = torch.randn(*dims_small2).float()\n+                small2 = cast(small2)\n+                small2Expanded = small2.expand(*dims_full)\n+\n+            if fn not in fns_no_out_place:", "path": "test/test_torch.py", "position": null, "original_position": 139, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "0fb1f36420a17612e870b8c5c1851e7e85912ba3", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "yes, good suggestion.   I was going to see if I could get rid of the exceptions (e.g. just add a max_), but the issue become large enough by itself.", "created_at": "2017-06-03T18:07:14Z", "updated_at": "2018-11-23T15:33:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119991486", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119991486"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119991486"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>yes, good suggestion.   I was going to see if I could get rid of the exceptions (e.g. just add a max_), but the issue become large enough by itself.</p>", "body_text": "yes, good suggestion.   I was going to see if I could get rid of the exceptions (e.g. just add a max_), but the issue become large enough by itself.", "in_reply_to_id": 119743810}