{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116832555", "pull_request_review_id": 38415408, "id": 116832555, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjgzMjU1NQ==", "diff_hunk": "@@ -66,39 +66,76 @@ TH_API THLongStorage *THLongStorage_newInferSize(THLongStorage *size, ptrdiff_t\n   return copy;\n }\n \n-TH_API void THLongStorage_calculateExpandGeometry(long *tensorSizes, long *tensorStrides, long tensorDim, THLongStorage *sizes, long **esz, long **est) {\n-  ptrdiff_t ndim = THLongStorage_size(sizes);\n-  long numUnsqueezed = ndim - tensorDim;\n+TH_API int THLongStorage_inferSize2(THLongStorage *output, long *sizesA, long dimsA, long *sizesB, long dimsB, int raiseErrors) {\n+  THArgCheck(sizesA != NULL, 1, \"sizesA must not be null\");\n+  THArgCheck(sizesB != NULL, 2, \"sizesB must not be null\");\n+  THArgCheck(dimsA, 1, \"Can't expand empty tensor a\");\n+  THArgCheck(dimsB, 1, \"Can't expand empty tensor b\");\n+  ptrdiff_t ndim = dimsA > dimsB ? dimsA : dimsB;\n \n   long *expandedSizes = THAlloc(sizeof(long)*ndim);\n-  long *expandedStrides = THAlloc(sizeof(long)*ndim);\n \n-  for (long i = numUnsqueezed; i < ndim; ++i) {\n-    expandedSizes[i] = tensorSizes[i - numUnsqueezed];\n-    expandedStrides[i] = tensorStrides[i - numUnsqueezed];\n+  for (long i = ndim - 1; i >= 0; --i) {\n+    long offset = ndim - 1 - i;\n+    long dimA = dimsA - 1 - offset;\n+    long dimB = dimsB - 1 - offset;\n+    long sizeA = (dimA >= 0) ? sizesA[dimA] : 1;\n+    long sizeB = (dimB >= 0) ? sizesB[dimB] : 1;\n+    if (sizeA != sizeB) {\n+      if (sizeA == 1) {\n+        sizeA = sizeB;\n+      }\n+      else if (sizeB == 1) {\n+      }\n+      else {\n+        THFree(expandedSizes);\n+        if (raiseErrors) {\n+          THError(\"The size of tensor a (%ld) must match the size of tensor b (%ld) at \"\n+                  \"non-singleton dimension %ld.\", sizeA, sizeB, i);\n+        }\n+        return -1;\n+      }\n+    }\n+    expandedSizes[ i ] = sizeA;\n   }\n+  THLongStorage_resize(output, ndim);\n+  memcpy(THLongStorage_data(output), expandedSizes, sizeof(long)*ndim);\n+  THFree(expandedSizes);\n+  return 0;\n+}\n \n-  for (long i = numUnsqueezed - 1; i > -1; --i) {\n-    expandedSizes[i] = 1;\n-    expandedStrides[i] = expandedSizes[i+1] * expandedStrides[i+1];\n-  }\n+TH_API int THLongStorage_inferExpandGeometry(long *tensorSizes, long *tensorStrides, long tensorDim, THLongStorage *sizes, long **esz, long **est, int raiseErrors) {", "path": "torch/lib/TH/THStorage.c", "position": null, "original_position": 53, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "c214dcf37f422df301477423198bf34fab88bf93", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Given an existing tensor with size tensorSizes, strides tensorStrides and dimension tensorDim, compute the new expanded size (saved to esz) and new necessary stride (saved to est) necessary to broadcast (expand) this tensor to sizes.", "created_at": "2017-05-16T19:15:25Z", "updated_at": "2018-11-23T15:33:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r116832555", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116832555"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r116832555"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>Given an existing tensor with size tensorSizes, strides tensorStrides and dimension tensorDim, compute the new expanded size (saved to esz) and new necessary stride (saved to est) necessary to broadcast (expand) this tensor to sizes.</p>", "body_text": "Given an existing tensor with size tensorSizes, strides tensorStrides and dimension tensorDim, compute the new expanded size (saved to esz) and new necessary stride (saved to est) necessary to broadcast (expand) this tensor to sizes."}