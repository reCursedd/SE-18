{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119910655", "pull_request_review_id": 41834513, "id": 119910655, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTkxMDY1NQ==", "diff_hunk": "@@ -0,0 +1,155 @@\n+#ifndef THP_EXPAND_UTILS_H\n+#define THP_EXPAND_UTILS_H\n+\n+#include <sstream>\n+#include <Python.h>\n+\n+template <typename ExpandType>\n+ExpandType *newForExpand(LIBRARY_STATE_TYPE_NOARGS);\n+\n+template <typename TensorType>\n+int expand(LIBRARY_STATE_TYPE TensorType *r, TensorType *tensor, THLongStorage *sizes, int raiseErrors);\n+\n+template <typename TensorType>\n+int expand2(LIBRARY_STATE_TYPE TensorType *r1, TensorType *r2,\n+            TensorType *e1, TensorType *e2, int raiseErrors);\n+\n+template <typename TensorType>\n+int expand3(LIBRARY_STATE_TYPE TensorType *r1, TensorType *r2, TensorType *r3,\n+            TensorType *e1, TensorType *e2, TensorType *e3, int raiseErrors);\n+\n+template <typename ExpandType, typename TensorType>\n+void check_fallback(ExpandType *to_expand, TensorType *tensor,\n+                    char *to_expand_name, char *tensor_name, bool fallback,\n+                    ptrdiff_t to_expand_nElem, ptrdiff_t tensor_nElem, int to_expand_err) {\n+  if (fallback && getBackCompatBroadcastWarn()) {\n+    bool same_shape = THSize_isSameSizeAs(tensor->size, tensor->nDimension,\n+        to_expand->size, to_expand->nDimension);\n+    if (!same_shape && to_expand_err == 0 && (tensor_nElem == to_expand_nElem) && fallback) {\n+      std::ostringstream warn;\n+      warn << tensor_name << \" and \" << to_expand_name << \" do not have the same shape, but are \"\n+           << \"broadcastable, and have the same number of elements.  Changing behavior in a backwards incompatible \"\n+           << \"manner to broadcasting rather than viewing as 1-dimensional.\";", "path": "torch/csrc/expand_utils.h", "position": null, "original_position": 32, "commit_id": "ca546930a8c9f31eab0a6fb79154ad4e985882e3", "original_commit_id": "0fb1f36420a17612e870b8c5c1851e7e85912ba3", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "We do two separate num elements checks and I'll try to make it clearer based on the names:\r\n1) Deprecated check\r\n    Case: Not broadcastable, same number of elements\r\n    Action: always give deprecated warning\r\n2) Backwards incompatible check:\r\n    Case: broadcastable, same number of elements\r\n   Action: only do a backwards incompatible warning if torch.utils.backcompat.broadcast.warning.enabled", "created_at": "2017-06-02T17:28:15Z", "updated_at": "2018-11-23T15:33:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119910655", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/119910655"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1563#discussion_r119910655"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1563"}}, "body_html": "<p>We do two separate num elements checks and I'll try to make it clearer based on the names:</p>\n<ol>\n<li>Deprecated check<br>\nCase: Not broadcastable, same number of elements<br>\nAction: always give deprecated warning</li>\n<li>Backwards incompatible check:<br>\nCase: broadcastable, same number of elements<br>\nAction: only do a backwards incompatible warning if torch.utils.backcompat.broadcast.warning.enabled</li>\n</ol>", "body_text": "We do two separate num elements checks and I'll try to make it clearer based on the names:\n\nDeprecated check\nCase: Not broadcastable, same number of elements\nAction: always give deprecated warning\nBackwards incompatible check:\nCase: broadcastable, same number of elements\nAction: only do a backwards incompatible warning if torch.utils.backcompat.broadcast.warning.enabled", "in_reply_to_id": 119900673}