{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398609183", "html_url": "https://github.com/pytorch/pytorch/issues/3805#issuecomment-398609183", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3805", "id": 398609183, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODYwOTE4Mw==", "user": {"login": "KrnTneja", "id": 15049793, "node_id": "MDQ6VXNlcjE1MDQ5Nzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/15049793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KrnTneja", "html_url": "https://github.com/KrnTneja", "followers_url": "https://api.github.com/users/KrnTneja/followers", "following_url": "https://api.github.com/users/KrnTneja/following{/other_user}", "gists_url": "https://api.github.com/users/KrnTneja/gists{/gist_id}", "starred_url": "https://api.github.com/users/KrnTneja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KrnTneja/subscriptions", "organizations_url": "https://api.github.com/users/KrnTneja/orgs", "repos_url": "https://api.github.com/users/KrnTneja/repos", "events_url": "https://api.github.com/users/KrnTneja/events{/privacy}", "received_events_url": "https://api.github.com/users/KrnTneja/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T03:00:58Z", "updated_at": "2018-06-20T03:00:58Z", "author_association": "NONE", "body_html": "<p>Same problem. Here is a quick script I used to solve the problem. Help for future visitors here! <g-emoji class=\"g-emoji\" alias=\"smile_cat\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f638.png\">\ud83d\ude38</g-emoji></p>\n<pre><code>import argparse\nimport torch\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--source\", type=str, required=True)\nparser.add_argument(\"--dest\", type=str, required=True)\n\nargs = parser.parse_args()\n\nmodel_state = torch.load(args.source)\nnew_model_state = {}\n\nfor key in model_state.keys():\n    new_model_state[key[7:]] = model_state[key]\n\ntorch.save(new_model_state, args.dest)\n</code></pre>\n<p>Run it as: <code>python remove_module.py --source &lt;source pickle file&gt; --dest &lt;destination pickle file&gt;</code></p>", "body_text": "Same problem. Here is a quick script I used to solve the problem. Help for future visitors here! \ud83d\ude38\nimport argparse\nimport torch\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--source\", type=str, required=True)\nparser.add_argument(\"--dest\", type=str, required=True)\n\nargs = parser.parse_args()\n\nmodel_state = torch.load(args.source)\nnew_model_state = {}\n\nfor key in model_state.keys():\n    new_model_state[key[7:]] = model_state[key]\n\ntorch.save(new_model_state, args.dest)\n\nRun it as: python remove_module.py --source <source pickle file> --dest <destination pickle file>", "body": "Same problem. Here is a quick script I used to solve the problem. Help for future visitors here! \ud83d\ude38 \r\n\r\n```\r\nimport argparse\r\nimport torch\r\n\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument(\"--source\", type=str, required=True)\r\nparser.add_argument(\"--dest\", type=str, required=True)\r\n\r\nargs = parser.parse_args()\r\n\r\nmodel_state = torch.load(args.source)\r\nnew_model_state = {}\r\n\r\nfor key in model_state.keys():\r\n    new_model_state[key[7:]] = model_state[key]\r\n\r\ntorch.save(new_model_state, args.dest)\r\n```\r\nRun it as: `python remove_module.py --source <source pickle file> --dest <destination pickle file>`"}