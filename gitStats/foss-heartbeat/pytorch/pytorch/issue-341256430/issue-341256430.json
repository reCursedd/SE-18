{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9448", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9448/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9448/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9448/events", "html_url": "https://github.com/pytorch/pytorch/pull/9448", "id": 341256430, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAxNDYzNDg3", "number": 9448, "title": "Fix l2 normalization when handling zero vector", "user": {"login": "bairdzhang", "id": 7044671, "node_id": "MDQ6VXNlcjcwNDQ2NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7044671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bairdzhang", "html_url": "https://github.com/bairdzhang", "followers_url": "https://api.github.com/users/bairdzhang/followers", "following_url": "https://api.github.com/users/bairdzhang/following{/other_user}", "gists_url": "https://api.github.com/users/bairdzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/bairdzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bairdzhang/subscriptions", "organizations_url": "https://api.github.com/users/bairdzhang/orgs", "repos_url": "https://api.github.com/users/bairdzhang/repos", "events_url": "https://api.github.com/users/bairdzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/bairdzhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-14T18:26:54Z", "updated_at": "2018-07-17T22:31:04Z", "closed_at": "2018-07-17T22:31:04Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9448", "html_url": "https://github.com/pytorch/pytorch/pull/9448", "diff_url": "https://github.com/pytorch/pytorch/pull/9448.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9448.patch"}, "body_html": "<p>Summary:<br>\nWhen the input vector is a zero vector, the previous GPU code will give Nan in backward. We fix this.</p>\n<p>Also I noticed that in the backward, it's important to use <code>if (row_norm &gt; kEps)</code> rather than <code>if (row_norm != 0)</code>, since row_norm may be something like 1e-10 when the input vector is a zero vector. For forward this is not an issue. I guess the reason is that in the input, <code>xVec / norm</code> will still yield zero even if norm is something like 1e-10 when the input vector is a zero vector.</p>\n<p>Differential Revision: D8849732</p>", "body_text": "Summary:\nWhen the input vector is a zero vector, the previous GPU code will give Nan in backward. We fix this.\nAlso I noticed that in the backward, it's important to use if (row_norm > kEps) rather than if (row_norm != 0), since row_norm may be something like 1e-10 when the input vector is a zero vector. For forward this is not an issue. I guess the reason is that in the input, xVec / norm will still yield zero even if norm is something like 1e-10 when the input vector is a zero vector.\nDifferential Revision: D8849732", "body": "Summary:\nWhen the input vector is a zero vector, the previous GPU code will give Nan in backward. We fix this.\n\nAlso I noticed that in the backward, it's important to use `if (row_norm > kEps)` rather than `if (row_norm != 0)`, since row_norm may be something like 1e-10 when the input vector is a zero vector. For forward this is not an issue. I guess the reason is that in the input, `xVec / norm` will still yield zero even if norm is something like 1e-10 when the input vector is a zero vector.\n\nDifferential Revision: D8849732\n"}