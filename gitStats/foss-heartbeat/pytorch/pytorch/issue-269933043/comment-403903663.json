{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/403903663", "html_url": "https://github.com/pytorch/pytorch/issues/3390#issuecomment-403903663", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3390", "id": 403903663, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzkwMzY2Mw==", "user": {"login": "FeepingCreature", "id": 540727, "node_id": "MDQ6VXNlcjU0MDcyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/540727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FeepingCreature", "html_url": "https://github.com/FeepingCreature", "followers_url": "https://api.github.com/users/FeepingCreature/followers", "following_url": "https://api.github.com/users/FeepingCreature/following{/other_user}", "gists_url": "https://api.github.com/users/FeepingCreature/gists{/gist_id}", "starred_url": "https://api.github.com/users/FeepingCreature/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FeepingCreature/subscriptions", "organizations_url": "https://api.github.com/users/FeepingCreature/orgs", "repos_url": "https://api.github.com/users/FeepingCreature/repos", "events_url": "https://api.github.com/users/FeepingCreature/events{/privacy}", "received_events_url": "https://api.github.com/users/FeepingCreature/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-10T17:29:39Z", "updated_at": "2018-07-10T17:36:47Z", "author_association": "NONE", "body_html": "<p><code>cudaMemcpyAsync</code> calls <code>clock_gettime</code> with <code>CLOCK_MONOTONIC_RAW</code>, which can be slow. Here's a small wrapper file to redirect it to <code>CLOCK_MONOTONIC_COARSE</code>; as far as I can tell, it works without issues and drops clock_gettime itself to ~1% CPU, though it doesn't seem to make much speed difference.</p>\n<pre><code>// redirect_gettime.c\n#include &lt;dlfcn.h&gt;\n#include &lt;time.h&gt;\n\nstatic int(*real_clock_gettime)(clockid_t, struct timespec *) = NULL;\n\nint clock_gettime(clockid_t clk_id, struct timespec *tp) {\n    if (real_clock_gettime == NULL) {\n        real_clock_gettime = dlsym(RTLD_NEXT, \"clock_gettime\");\n    }\n    if (clk_id == CLOCK_MONOTONIC_RAW) {\n        clk_id = CLOCK_MONOTONIC_COARSE;\n    }\n    return real_clock_gettime(clk_id, tp);\n}\n\ngcc -D_GNU_SOURCE -fPIC -shared  -o redirect_gettime.so redirect_gettime.c -ldl\nLD_PRELOAD=redirect_gettime.so\n</code></pre>", "body_text": "cudaMemcpyAsync calls clock_gettime with CLOCK_MONOTONIC_RAW, which can be slow. Here's a small wrapper file to redirect it to CLOCK_MONOTONIC_COARSE; as far as I can tell, it works without issues and drops clock_gettime itself to ~1% CPU, though it doesn't seem to make much speed difference.\n// redirect_gettime.c\n#include <dlfcn.h>\n#include <time.h>\n\nstatic int(*real_clock_gettime)(clockid_t, struct timespec *) = NULL;\n\nint clock_gettime(clockid_t clk_id, struct timespec *tp) {\n    if (real_clock_gettime == NULL) {\n        real_clock_gettime = dlsym(RTLD_NEXT, \"clock_gettime\");\n    }\n    if (clk_id == CLOCK_MONOTONIC_RAW) {\n        clk_id = CLOCK_MONOTONIC_COARSE;\n    }\n    return real_clock_gettime(clk_id, tp);\n}\n\ngcc -D_GNU_SOURCE -fPIC -shared  -o redirect_gettime.so redirect_gettime.c -ldl\nLD_PRELOAD=redirect_gettime.so", "body": "`cudaMemcpyAsync` calls `clock_gettime` with `CLOCK_MONOTONIC_RAW`, which can be slow. Here's a small wrapper file to redirect it to `CLOCK_MONOTONIC_COARSE`; as far as I can tell, it works without issues and drops clock_gettime itself to ~1% CPU, though it doesn't seem to make much speed difference.\r\n\r\n    // redirect_gettime.c\r\n    #include <dlfcn.h>\r\n    #include <time.h>\r\n\r\n    static int(*real_clock_gettime)(clockid_t, struct timespec *) = NULL;\r\n\r\n    int clock_gettime(clockid_t clk_id, struct timespec *tp) {\r\n        if (real_clock_gettime == NULL) {\r\n            real_clock_gettime = dlsym(RTLD_NEXT, \"clock_gettime\");\r\n        }\r\n        if (clk_id == CLOCK_MONOTONIC_RAW) {\r\n            clk_id = CLOCK_MONOTONIC_COARSE;\r\n        }\r\n        return real_clock_gettime(clk_id, tp);\r\n    }\r\n\r\n    gcc -D_GNU_SOURCE -fPIC -shared  -o redirect_gettime.so redirect_gettime.c -ldl\r\n    LD_PRELOAD=redirect_gettime.so"}