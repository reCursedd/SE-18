{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189090850", "pull_request_review_id": 121203599, "id": 189090850, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTA5MDg1MA==", "diff_hunk": "@@ -2343,6 +2343,23 @@ def make_prob_dist(shape, is_contiguous):\n     def test_multinomial(self):\n         self._test_multinomial(self, torch.FloatTensor)\n \n+    def test_multinomial_invalid_probs(self):", "path": "test/test_torch.py", "position": null, "original_position": 4, "commit_id": "70c7988ff86244f398da178f276613fce035dba0", "original_commit_id": "9303a67102ce7c19a244602aeff402d905b8cc6b", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "The following appears to work\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.multiprocessing as mp\r\n\r\ndef run():\r\n    x = torch.randn(1, 3).cuda()\r\n    t = torch.tensor([7]).cuda()\r\n    model = nn.NLLLoss().cuda()\r\n    out = model(x, t) # device assert triggered\r\n    print(out)\r\n\r\nif __name__ == '__main__':\r\n    mp.set_start_method('spawn')\r\n    p = mp.Process(target=run)\r\n    p.start()\r\n    p.join()\r\n\r\n    x = torch.randn(3, 3).cuda()\r\n    y = torch.randn(3, 3).cuda()\r\n    print(x + y) # works!!\r\n```", "created_at": "2018-05-17T20:28:49Z", "updated_at": "2018-11-23T15:44:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/7647#discussion_r189090850", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7647", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189090850"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7647#discussion_r189090850"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7647"}}, "body_html": "<p>The following appears to work</p>\n<pre><code>import torch\nimport torch.nn as nn\nimport torch.multiprocessing as mp\n\ndef run():\n    x = torch.randn(1, 3).cuda()\n    t = torch.tensor([7]).cuda()\n    model = nn.NLLLoss().cuda()\n    out = model(x, t) # device assert triggered\n    print(out)\n\nif __name__ == '__main__':\n    mp.set_start_method('spawn')\n    p = mp.Process(target=run)\n    p.start()\n    p.join()\n\n    x = torch.randn(3, 3).cuda()\n    y = torch.randn(3, 3).cuda()\n    print(x + y) # works!!\n</code></pre>", "body_text": "The following appears to work\nimport torch\nimport torch.nn as nn\nimport torch.multiprocessing as mp\n\ndef run():\n    x = torch.randn(1, 3).cuda()\n    t = torch.tensor([7]).cuda()\n    model = nn.NLLLoss().cuda()\n    out = model(x, t) # device assert triggered\n    print(out)\n\nif __name__ == '__main__':\n    mp.set_start_method('spawn')\n    p = mp.Process(target=run)\n    p.start()\n    p.join()\n\n    x = torch.randn(3, 3).cuda()\n    y = torch.randn(3, 3).cuda()\n    print(x + y) # works!!", "in_reply_to_id": 189057620}