{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/432324216", "html_url": "https://github.com/pytorch/pytorch/pull/12960#issuecomment-432324216", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12960", "id": 432324216, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjMyNDIxNg==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-23T16:37:27Z", "updated_at": "2018-10-23T16:37:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> that sounds a bit dramatic :) Let me give some more context on these two changes. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a>  and I actually sat together before meeting with some partners to discuss changes to the C++ dataloader (which MSFT wants to use), and how we can reconcile them with the Python dataloader. We want both to have the same features/functionality and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> is working on making the <code>size()</code> optional in Python too.</p>\n<ol>\n<li>\n<p>We want to support the use case of infinite stream datasets cleanly. Sure, you can always have <code>size()</code> be <code>INT_MAX</code>, but (1) this is not a clean API and (2) if you ever accidentally used the (default) <code>RandomSampler</code>, you'd have a bit of a memory problem. By making the concept of unsized datasets more \"first class\", we can verify, for example, that you don't try to create a <code>RandomSampler</code> from an unsized dataset.</p>\n</li>\n<li>\n<p>This change actually makes the C++ frontend dataloader more like Python, because you can now have indices other than <code>size_t</code>. In Python this all works through duck typing of course. So in C++ we allow this now too, which yields much greater flexibility.</p>\n</li>\n</ol>\n<p>I hope this clarifies things and let me know if you have more thoughts.</p>", "body_text": "@apaszke that sounds a bit dramatic :) Let me give some more context on these two changes. @SsnL, @soumith  and I actually sat together before meeting with some partners to discuss changes to the C++ dataloader (which MSFT wants to use), and how we can reconcile them with the Python dataloader. We want both to have the same features/functionality and @SsnL is working on making the size() optional in Python too.\n\n\nWe want to support the use case of infinite stream datasets cleanly. Sure, you can always have size() be INT_MAX, but (1) this is not a clean API and (2) if you ever accidentally used the (default) RandomSampler, you'd have a bit of a memory problem. By making the concept of unsized datasets more \"first class\", we can verify, for example, that you don't try to create a RandomSampler from an unsized dataset.\n\n\nThis change actually makes the C++ frontend dataloader more like Python, because you can now have indices other than size_t. In Python this all works through duck typing of course. So in C++ we allow this now too, which yields much greater flexibility.\n\n\nI hope this clarifies things and let me know if you have more thoughts.", "body": "@apaszke that sounds a bit dramatic :) Let me give some more context on these two changes. @SsnL, @soumith  and I actually sat together before meeting with some partners to discuss changes to the C++ dataloader (which MSFT wants to use), and how we can reconcile them with the Python dataloader. We want both to have the same features/functionality and @SsnL is working on making the `size()` optional in Python too.\r\n\r\n1. We want to support the use case of infinite stream datasets cleanly. Sure, you can always have `size()` be `INT_MAX`, but (1) this is not a clean API and (2) if you ever accidentally used the (default) `RandomSampler`, you'd have a bit of a memory problem. By making the concept of unsized datasets more \"first class\", we can verify, for example, that you don't try to create a `RandomSampler` from an unsized dataset.\r\n\r\n2. This change actually makes the C++ frontend dataloader more like Python, because you can now have indices other than `size_t`. In Python this all works through duck typing of course. So in C++ we allow this now too, which yields much greater flexibility.\r\n\r\nI hope this clarifies things and let me know if you have more thoughts."}