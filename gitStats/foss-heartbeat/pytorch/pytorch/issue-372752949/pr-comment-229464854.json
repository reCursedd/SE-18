{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229464854", "pull_request_review_id": 169969747, "id": 229464854, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ2NDg1NA==", "diff_hunk": "@@ -1,67 +1,43 @@\n #pragma once\n \n #include <torch/data/samplers/base.h>\n-#include <torch/serialize/archive.h>\n #include <torch/tensor.h>\n \n-#include \"c10/util/Optional.h\"\n-\n-#include <algorithm>\n #include <cstddef>\n-#include <random>\n #include <vector>\n \n+namespace torch {\n+namespace serialize {\n+class OutputArchive;\n+class InputArchive;\n+} // namespace serialize\n+} // namespace torch\n+\n namespace torch {\n namespace data {\n namespace samplers {\n \n /// A `Sampler` that returns indices sequentially.\n-class SequentialSampler : public Sampler {\n+class SequentialSampler : public Sampler<> {\n  public:\n   /// Creates a `SequentialSampler` that will return indices in the range\n   /// `0...size - 1`.\n-  explicit SequentialSampler(size_t size) : size_(size) {}\n+  explicit SequentialSampler(size_t size);\n \n   /// Resets the `SequentialSampler` to zero.\n-  void reset() override {\n-    index_ = 0;\n-  }\n+  void reset() override;\n \n   /// Returns the next batch of indices.\n-  optional<std::vector<size_t>> next(size_t batch_size) override {\n-    const auto remaining_indices = size_ - index_;\n-    if (remaining_indices == 0) {\n-      return nullopt;\n-    }\n-    std::vector<size_t> index_batch(std::min(batch_size, remaining_indices));\n-    for (auto& i : index_batch) {\n-      i = index_++;\n-    }\n-    return index_batch;\n-  }\n+  optional<std::vector<size_t>> next(size_t batch_size) override;\n \n   /// Serializes the `SequentialSampler` to the `archive`.\n-  void save(serialize::OutputArchive& archive) const override {\n-    archive.write(\n-        \"index\",\n-        torch::tensor(static_cast<int64_t>(index_), torch::kInt64),\n-        /*is_buffer=*/true);\n-  }\n+  void save(serialize::OutputArchive& archive) const override;\n \n   /// Deserializes the `SequentialSampler` from the `archive`.\n-  void load(serialize::InputArchive& archive) override {\n-    auto tensor = torch::empty(1, torch::kInt64);\n-    archive.read(\n-        \"index\",\n-        tensor,\n-        /*is_buffer=*/true);\n-    index_ = tensor.item<int64_t>();\n-  }\n+  void load(serialize::InputArchive& archive) override;\n \n   /// Returns the current index of the `SequentialSampler`.\n-  size_t index() const noexcept {\n-    return index_;\n-  }\n+  size_t index() const noexcept;", "path": "torch/csrc/api/include/torch/data/samplers/sequential.h", "position": 78, "original_position": 78, "commit_id": "ca8bf7cb1600b77f543744f5c0e5a5fd750be324", "original_commit_id": "bcf8a94cef28493b64a8ce603dcb30feb976a891", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I assume that both `RandomSampler` and `IndexSampler` methods were simply moved to `.cpp` files verbatim, is that correct?", "created_at": "2018-10-30T20:03:17Z", "updated_at": "2018-11-23T15:53:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/12960#discussion_r229464854", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12960", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/229464854"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12960#discussion_r229464854"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12960"}}, "body_html": "<p>I assume that both <code>RandomSampler</code> and <code>IndexSampler</code> methods were simply moved to <code>.cpp</code> files verbatim, is that correct?</p>", "body_text": "I assume that both RandomSampler and IndexSampler methods were simply moved to .cpp files verbatim, is that correct?"}