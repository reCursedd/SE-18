{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10729", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10729/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10729/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10729/events", "html_url": "https://github.com/pytorch/pytorch/issues/10729", "id": 352525724, "node_id": "MDU6SXNzdWUzNTI1MjU3MjQ=", "number": 10729, "title": "Gradient of clamp is nan for inf inputs", "user": {"login": "arvidfm", "id": 885076, "node_id": "MDQ6VXNlcjg4NTA3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/885076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arvidfm", "html_url": "https://github.com/arvidfm", "followers_url": "https://api.github.com/users/arvidfm/followers", "following_url": "https://api.github.com/users/arvidfm/following{/other_user}", "gists_url": "https://api.github.com/users/arvidfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/arvidfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arvidfm/subscriptions", "organizations_url": "https://api.github.com/users/arvidfm/orgs", "repos_url": "https://api.github.com/users/arvidfm/repos", "events_url": "https://api.github.com/users/arvidfm/events{/privacy}", "received_events_url": "https://api.github.com/users/arvidfm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-21T12:55:23Z", "updated_at": "2018-08-27T17:42:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>The gradient of <code>torch.clamp</code> when supplied with <code>inf</code> values is <code>nan</code>, even when the <code>max</code> parameter is specified with a finite value. Normally one would expect the gradient to be <code>0</code> for all values larger than <code>max</code>, including for <code>inf</code>.</p>\n<h2>Code example</h2>\n<p>I'm trying to implement the following piecewise function: <code>exp(x)</code> for <code>x &lt; 0</code>; <code>1</code> otherwise. A straightforward way to do this would be to use <code>torch.exp(x).clamp(max=1)</code>, but this does not work as expected:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">=</span> torch.FloatTensor([<span class=\"pl-k\">-</span><span class=\"pl-c1\">10</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">50</span>, <span class=\"pl-c1\">60</span>, <span class=\"pl-c1\">70</span>, <span class=\"pl-c1\">80</span>, <span class=\"pl-c1\">90</span>, <span class=\"pl-c1\">100</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x.requires_grad <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> y <span class=\"pl-k\">=</span> torch.exp(x)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> y\ntensor([<span class=\"pl-c1\">4.5400e-05</span>, <span class=\"pl-c1\">6.7379e-03</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.4841e+02</span>, <span class=\"pl-c1\">2.2026e+04</span>, <span class=\"pl-c1\">5.1847e+21</span>,\n        <span class=\"pl-c1\">1.1420e+26</span>, <span class=\"pl-c1\">2.5154e+30</span>, <span class=\"pl-c1\">5.5406e+34</span>,        inf,        inf],\n       <span class=\"pl-v\">grad_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">&lt;</span>ExpBackward<span class=\"pl-k\">&gt;</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z <span class=\"pl-k\">=</span> y.clamp(<span class=\"pl-v\">max</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z\ntensor([<span class=\"pl-c1\">4.5400e-05</span>, <span class=\"pl-c1\">6.7379e-03</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>,\n        <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>, <span class=\"pl-c1\">1.0000e+00</span>],\n       <span class=\"pl-v\">grad_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">&lt;</span>ClampMaxBackward<span class=\"pl-k\">&gt;</span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z.sum().backward()\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x.grad\ntensor([<span class=\"pl-c1\">0.0000</span>, <span class=\"pl-c1\">0.0067</span>, <span class=\"pl-c1\">1.0000</span>, <span class=\"pl-c1\">0.0000</span>, <span class=\"pl-c1\">0.0000</span>, <span class=\"pl-c1\">0.0000</span>, <span class=\"pl-c1\">0.0000</span>, <span class=\"pl-c1\">0.0000</span>, <span class=\"pl-c1\">0.0000</span>,\n           nan,    nan])</pre></div>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.1<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Arch Linux<br>\nGCC version: (GCC) 8.1.1 20180531<br>\nCMake version: Could not collect</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.2.148<br>\nGPU models and configuration: GPU 0: GeForce GT 730<br>\nNvidia driver version: 396.24<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/R2017a/bin/glnxa64/libcudnn.so.5.1.5</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.2)<br>\n[pip] numpydoc (0.8.0)<br>\n[pip] torch (0.4.1)<br>\n[pip] torchvision (0.2.1)<br>\n[conda] cuda80                    1.0                           0    soumith<br>\n[conda] pytorch                   0.4.1           py36_cuda8.0.61_cudnn7.1.2_1  [cuda80]  pytorch<br>\n[conda] torchvision               0.2.1                    py36_1    pytorch</p>", "body_text": "Issue description\nThe gradient of torch.clamp when supplied with inf values is nan, even when the max parameter is specified with a finite value. Normally one would expect the gradient to be 0 for all values larger than max, including for inf.\nCode example\nI'm trying to implement the following piecewise function: exp(x) for x < 0; 1 otherwise. A straightforward way to do this would be to use torch.exp(x).clamp(max=1), but this does not work as expected:\n>>> x = torch.FloatTensor([-10, -5, 0, 5, 10, 50, 60, 70, 80, 90, 100])\n>>> x.requires_grad = True\n>>> y = torch.exp(x)\n>>> y\ntensor([4.5400e-05, 6.7379e-03, 1.0000e+00, 1.4841e+02, 2.2026e+04, 5.1847e+21,\n        1.1420e+26, 2.5154e+30, 5.5406e+34,        inf,        inf],\n       grad_fn=<ExpBackward>)\n>>> z = y.clamp(max=1)\n>>> z\ntensor([4.5400e-05, 6.7379e-03, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,\n        1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00],\n       grad_fn=<ClampMaxBackward>)\n>>> z.sum().backward()\n>>> x.grad\ntensor([0.0000, 0.0067, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n           nan,    nan])\nSystem Info\nPyTorch version: 0.4.1\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Arch Linux\nGCC version: (GCC) 8.1.1 20180531\nCMake version: Could not collect\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.2.148\nGPU models and configuration: GPU 0: GeForce GT 730\nNvidia driver version: 396.24\ncuDNN version: Probably one of the following:\n/usr/local/R2017a/bin/glnxa64/libcudnn.so.5.1.5\nVersions of relevant libraries:\n[pip] numpy (1.14.2)\n[pip] numpydoc (0.8.0)\n[pip] torch (0.4.1)\n[pip] torchvision (0.2.1)\n[conda] cuda80                    1.0                           0    soumith\n[conda] pytorch                   0.4.1           py36_cuda8.0.61_cudnn7.1.2_1  [cuda80]  pytorch\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\n\r\nThe gradient of `torch.clamp` when supplied with `inf` values is `nan`, even when the `max` parameter is specified with a finite value. Normally one would expect the gradient to be `0` for all values larger than `max`, including for `inf`.\r\n\r\n## Code example\r\n\r\nI'm trying to implement the following piecewise function: `exp(x)` for `x < 0`; `1` otherwise. A straightforward way to do this would be to use `torch.exp(x).clamp(max=1)`, but this does not work as expected:\r\n\r\n```py\r\n>>> x = torch.FloatTensor([-10, -5, 0, 5, 10, 50, 60, 70, 80, 90, 100])\r\n>>> x.requires_grad = True\r\n>>> y = torch.exp(x)\r\n>>> y\r\ntensor([4.5400e-05, 6.7379e-03, 1.0000e+00, 1.4841e+02, 2.2026e+04, 5.1847e+21,\r\n        1.1420e+26, 2.5154e+30, 5.5406e+34,        inf,        inf],\r\n       grad_fn=<ExpBackward>)\r\n>>> z = y.clamp(max=1)\r\n>>> z\r\ntensor([4.5400e-05, 6.7379e-03, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00,\r\n        1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00],\r\n       grad_fn=<ClampMaxBackward>)\r\n>>> z.sum().backward()\r\n>>> x.grad\r\ntensor([0.0000, 0.0067, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\r\n           nan,    nan])\r\n```\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.4.1\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Arch Linux\r\nGCC version: (GCC) 8.1.1 20180531\r\nCMake version: Could not collect\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.2.148\r\nGPU models and configuration: GPU 0: GeForce GT 730\r\nNvidia driver version: 396.24\r\ncuDNN version: Probably one of the following:\r\n/usr/local/R2017a/bin/glnxa64/libcudnn.so.5.1.5\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.2)\r\n[pip] numpydoc (0.8.0)\r\n[pip] torch (0.4.1)\r\n[pip] torchvision (0.2.1)\r\n[conda] cuda80                    1.0                           0    soumith\r\n[conda] pytorch                   0.4.1           py36_cuda8.0.61_cudnn7.1.2_1  [cuda80]  pytorch\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n"}