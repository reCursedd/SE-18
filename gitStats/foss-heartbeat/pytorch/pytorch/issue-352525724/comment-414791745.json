{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/414791745", "html_url": "https://github.com/pytorch/pytorch/issues/10729#issuecomment-414791745", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10729", "id": 414791745, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDc5MTc0NQ==", "user": {"login": "sytrus-in-github", "id": 12224616, "node_id": "MDQ6VXNlcjEyMjI0NjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12224616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sytrus-in-github", "html_url": "https://github.com/sytrus-in-github", "followers_url": "https://api.github.com/users/sytrus-in-github/followers", "following_url": "https://api.github.com/users/sytrus-in-github/following{/other_user}", "gists_url": "https://api.github.com/users/sytrus-in-github/gists{/gist_id}", "starred_url": "https://api.github.com/users/sytrus-in-github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sytrus-in-github/subscriptions", "organizations_url": "https://api.github.com/users/sytrus-in-github/orgs", "repos_url": "https://api.github.com/users/sytrus-in-github/repos", "events_url": "https://api.github.com/users/sytrus-in-github/events{/privacy}", "received_events_url": "https://api.github.com/users/sytrus-in-github/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-21T19:21:28Z", "updated_at": "2018-08-22T12:44:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p><del>The case with <code>torch.where</code> seems somewhat more problematic, I would guess that there is somehow a multiplication with indicator function involved for both branches that causes a <code>0 * inf</code> in the backward process.</del><br>\nMy bad, your <code>where</code> follows the same <code>0 * inf</code> problem:  the non-chosen branch (positive value) yields 0 gradient, which is multiplied with the <code>inf</code> gradient generated by <code>exp(big_x)</code>.</p>", "body_text": "The case with torch.where seems somewhat more problematic, I would guess that there is somehow a multiplication with indicator function involved for both branches that causes a 0 * inf in the backward process.\nMy bad, your where follows the same 0 * inf problem:  the non-chosen branch (positive value) yields 0 gradient, which is multiplied with the inf gradient generated by exp(big_x).", "body": "~~The case with `torch.where` seems somewhat more problematic, I would guess that there is somehow a multiplication with indicator function involved for both branches that causes a `0 * inf` in the backward process.~~\r\nMy bad, your `where` follows the same `0 * inf` problem:  the non-chosen branch (positive value) yields 0 gradient, which is multiplied with the `inf` gradient generated by `exp(big_x)`."}