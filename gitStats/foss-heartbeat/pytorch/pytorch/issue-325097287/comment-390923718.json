{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/390923718", "html_url": "https://github.com/pytorch/pytorch/pull/7748#issuecomment-390923718", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7748", "id": 390923718, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDkyMzcxOA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-22T09:24:44Z", "updated_at": "2018-05-22T09:24:44Z", "author_association": "MEMBER", "body_html": "<p>We don't want to do that because that would cause too much coupling between autograd and JIT. <code>derivatives.yaml</code> certainly started out as a nice symbolic thing, but if you look into it today, it has a bunch of references to functions implicitly defined in the outer C++ scope into which the code will be pasted. Also it sometimes depend on attributes that are easy to codegen for autograd functions, but would need to be patched up for JIT nodes (looking up sizes, etc.).</p>\n<p>We don't want or have to support AD in full generality in the JIT, because it can handle black box nodes nicely at effectively no cost (we also have limited bandwidth as a team). It only prevents us from doing certain optimizations, but if there are no optimizations that can handle a particular op, or if it doesn't appear all that often, then why should we care?</p>", "body_text": "We don't want to do that because that would cause too much coupling between autograd and JIT. derivatives.yaml certainly started out as a nice symbolic thing, but if you look into it today, it has a bunch of references to functions implicitly defined in the outer C++ scope into which the code will be pasted. Also it sometimes depend on attributes that are easy to codegen for autograd functions, but would need to be patched up for JIT nodes (looking up sizes, etc.).\nWe don't want or have to support AD in full generality in the JIT, because it can handle black box nodes nicely at effectively no cost (we also have limited bandwidth as a team). It only prevents us from doing certain optimizations, but if there are no optimizations that can handle a particular op, or if it doesn't appear all that often, then why should we care?", "body": "We don't want to do that because that would cause too much coupling between autograd and JIT. `derivatives.yaml` certainly started out as a nice symbolic thing, but if you look into it today, it has a bunch of references to functions implicitly defined in the outer C++ scope into which the code will be pasted. Also it sometimes depend on attributes that are easy to codegen for autograd functions, but would need to be patched up for JIT nodes (looking up sizes, etc.).\r\n\r\nWe don't want or have to support AD in full generality in the JIT, because it can handle black box nodes nicely at effectively no cost (we also have limited bandwidth as a team). It only prevents us from doing certain optimizations, but if there are no optimizations that can handle a particular op, or if it doesn't appear all that often, then why should we care?"}