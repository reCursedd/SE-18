{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216376389", "pull_request_review_id": 153842969, "id": 216376389, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjM3NjM4OQ==", "diff_hunk": "@@ -278,6 +279,46 @@ def isinf(tensor):\n     return tensor.abs() == inf\n \n \n+def meshgrid(*tensors, **kwargs):\n+    r\"\"\"Take :math:`N` tensors, each of which can be either scalar or 1-dimensional\n+vector, and create :math:`N` N-dimensional grids, where the :math:`i`th grid is defined by\n+expanding the :math:`i`th input over dimensions defined by other inputs.\n+\n+\n+    Args:\n+        tensors (list of Tensor): list of scalars or 1 dimensional tensors. Scalars will be\n+        treated as tensors of size :math:`(1,)` automatically\n+\n+    Returns:\n+        seq (sequence of Tensors): If the input has :math:`k` tensors of size\n+        :math:`(N_1,), (N_2,), \\ldots , (N_k,)`, then the output would also has :math:`k` tensors,\n+        where all tensors are of size :math:`(N_1, N_2, \\ldots , N_k)`.\n+\n+    Example::\n+\n+        >>> x = torch.tensor([1, 2, 3])\n+        >>> y = torch.tensor([4, 5, 6])\n+        >>> grid_x, grid_y = torch.meshgrid(x, y)\n+        >>> grid_x\n+        tensor([[1, 1, 1],\n+                [2, 2, 2],\n+                [3, 3, 3]])\n+        >>> grid_y\n+        tensor([[4, 5, 6],\n+                [4, 5, 6],\n+                [4, 5, 6]])\n+    \"\"\"\n+    if kwargs:\n+        raise TypeError(\"meshgrid() got an unexpected keyword argument '%s'\" % (list(kwargs)[0],))\n+    if len(tensors) == 1 and isinstance(tensors[0], (list, tuple)):\n+        # the old interface of passing the operands as one list argument\n+        tensors = tensors[0]\n+    for tensor in tensors:", "path": "torch/functional.py", "position": null, "original_position": 46, "commit_id": "289a8c9b7def723b64b77dc32786252a9d35865b", "original_commit_id": "9ff018f80c7cab591f52f138f29a69973ad223d8", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "If any of these  is not a Tensor, our cpp arg parse will catch it, I think, and will give a more meaningful error message than this.", "created_at": "2018-09-10T15:54:35Z", "updated_at": "2018-11-23T15:50:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/11446#discussion_r216376389", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11446", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216376389"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11446#discussion_r216376389"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11446"}}, "body_html": "<p>If any of these  is not a Tensor, our cpp arg parse will catch it, I think, and will give a more meaningful error message than this.</p>", "body_text": "If any of these  is not a Tensor, our cpp arg parse will catch it, I think, and will give a more meaningful error message than this."}