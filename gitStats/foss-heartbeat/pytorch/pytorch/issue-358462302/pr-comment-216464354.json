{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216464354", "pull_request_review_id": 153952603, "id": 216464354, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQ2NDM1NA==", "diff_hunk": "@@ -278,6 +279,46 @@ def isinf(tensor):\n     return tensor.abs() == inf\n \n \n+def meshgrid(*tensors, **kwargs):\n+    r\"\"\"Take :math:`N` tensors, each of which can be either scalar or 1-dimensional\n+vector, and create :math:`N` N-dimensional grids, where the :math:`i`th grid is defined by\n+expanding the :math:`i`th input over dimensions defined by other inputs.\n+\n+\n+    Args:\n+        tensors (list of Tensor): list of scalars or 1 dimensional tensors. Scalars will be\n+        treated as tensors of size :math:`(1,)` automatically\n+\n+    Returns:\n+        seq (sequence of Tensors): If the input has :math:`k` tensors of size\n+        :math:`(N_1,), (N_2,), \\ldots , (N_k,)`, then the output would also has :math:`k` tensors,\n+        where all tensors are of size :math:`(N_1, N_2, \\ldots , N_k)`.\n+\n+    Example::\n+\n+        >>> x = torch.tensor([1, 2, 3])\n+        >>> y = torch.tensor([4, 5, 6])\n+        >>> grid_x, grid_y = torch.meshgrid(x, y)\n+        >>> grid_x\n+        tensor([[1, 1, 1],\n+                [2, 2, 2],\n+                [3, 3, 3]])\n+        >>> grid_y\n+        tensor([[4, 5, 6],\n+                [4, 5, 6],\n+                [4, 5, 6]])\n+    \"\"\"\n+    if kwargs:\n+        raise TypeError(\"meshgrid() got an unexpected keyword argument '%s'\" % (list(kwargs)[0],))\n+    if len(tensors) == 1 and isinstance(tensors[0], (list, tuple)):\n+        # the old interface of passing the operands as one list argument\n+        tensors = tensors[0]\n+    for tensor in tensors:", "path": "torch/functional.py", "position": null, "original_position": 46, "commit_id": "289a8c9b7def723b64b77dc32786252a9d35865b", "original_commit_id": "9ff018f80c7cab591f52f138f29a69973ad223d8", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Yes, @SsnL is right. I think if you remove it everything will be okay (check the error message though, please :) ); checking that the tensors should have the same (device, dtype) combination should happen in the C++ backend (feel free to do this in a followup PR or this one, @upriser7)", "created_at": "2018-09-10T20:38:37Z", "updated_at": "2018-11-23T15:50:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/11446#discussion_r216464354", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11446", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/216464354"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11446#discussion_r216464354"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11446"}}, "body_html": "<p>Yes, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> is right. I think if you remove it everything will be okay (check the error message though, please :) ); checking that the tensors should have the same (device, dtype) combination should happen in the C++ backend (feel free to do this in a followup PR or this one, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23163900\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/upriser7\">@upriser7</a>)</p>", "body_text": "Yes, @SsnL is right. I think if you remove it everything will be okay (check the error message though, please :) ); checking that the tensors should have the same (device, dtype) combination should happen in the C++ backend (feel free to do this in a followup PR or this one, @upriser7)", "in_reply_to_id": 216376389}