{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10069", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10069/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10069/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10069/events", "html_url": "https://github.com/pytorch/pytorch/issues/10069", "id": 346184922, "node_id": "MDU6SXNzdWUzNDYxODQ5MjI=", "number": 10069, "title": "dll load failed", "user": {"login": "vaibhavbhoir", "id": 30795242, "node_id": "MDQ6VXNlcjMwNzk1MjQy", "avatar_url": "https://avatars1.githubusercontent.com/u/30795242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaibhavbhoir", "html_url": "https://github.com/vaibhavbhoir", "followers_url": "https://api.github.com/users/vaibhavbhoir/followers", "following_url": "https://api.github.com/users/vaibhavbhoir/following{/other_user}", "gists_url": "https://api.github.com/users/vaibhavbhoir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaibhavbhoir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaibhavbhoir/subscriptions", "organizations_url": "https://api.github.com/users/vaibhavbhoir/orgs", "repos_url": "https://api.github.com/users/vaibhavbhoir/repos", "events_url": "https://api.github.com/users/vaibhavbhoir/events{/privacy}", "received_events_url": "https://api.github.com/users/vaibhavbhoir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-31T13:21:45Z", "updated_at": "2018-07-31T16:26:29Z", "closed_at": "2018-07-31T16:26:29Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>i installed pytorch using <strong>conda install -c peterjc123 pytorch=0.3.1</strong><br>\ni am using a amd gpu so is it because of cuda or something<br>\nplease help me out<br>\noutput:<br>\n[INFO   ] [Logger      ] Record log in C:\\Users\\DELL.kivy\\logs\\kivy_18-07-31_7.txt<br>\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-484b2f7, 20170513<br>\n[INFO   ] [Python      ] v3.6.1 |Continuum Analytics, Inc.| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]<br>\n[INFO   ] [Factory     ] 194 symbols loaded<br>\n[INFO   ] [Image       ] Providers: img_tex, img_dds, img_sdl2, img_pil, img_gif (img_ffpyplayer ignored)<br>\n[INFO   ] [Text        ] Provider: sdl2<br>\nTraceback (most recent call last):</p>\n<p>File \"\", line 17, in <br>\nfrom ai import Dqn</p>\n<p>File \"C:\\vaibhav\\Self_Driving_Car\\ai.py\", line 8, in <br>\nimport torch</p>\n<p>File \"C:\\Users\\DELL\\Anaconda3\\lib\\site-packages\\torch_<em>init</em>_.py\", line 76, in <br>\nfrom torch._C import *</p>\n<p>ImportError: DLL load failed: The specified module could not be found.<br>\n(<a href=\"https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\" rel=\"nofollow\">https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py</a>)<br>\n(or fill out the checklist below manually).</p>\n<h2>Code example</h2>\n<p>import numpy as np<br>\nfrom random import random, randint<br>\nimport matplotlib.pyplot as plt<br>\nimport time</p>\n<p>from kivy.app import App<br>\nfrom kivy.uix.widget import Widget<br>\nfrom kivy.uix.button import Button<br>\nfrom kivy.graphics import Color, Ellipse, Line<br>\nfrom kivy.config import Config<br>\nfrom kivy.properties import NumericProperty, ReferenceListProperty, ObjectProperty<br>\nfrom kivy.vector import Vector<br>\nfrom kivy.clock import Clock</p>\n<p>from ai import Dqn</p>\n<p>Config.set('input', 'mouse', 'mouse,multitouch_on_demand')</p>\n<p>last_x = 0<br>\nlast_y = 0<br>\nn_points = 0<br>\nlength = 0</p>\n<p>brain = Dqn(5,3,0.9)<br>\naction2rotation = [0,20,-20]<br>\nlast_reward = 0<br>\nscores = []</p>\n<p>first_update = True<br>\ndef init():<br>\nglobal sand<br>\nglobal goal_x<br>\nglobal goal_y<br>\nglobal first_update<br>\nsand = np.zeros((longueur,largeur))<br>\ngoal_x = 20<br>\ngoal_y = largeur - 20<br>\nfirst_update = False</p>\n<p>last_distance = 0</p>\n<p>class Car(Widget):</p>\n<pre><code>angle = NumericProperty(0)\nrotation = NumericProperty(0)\nvelocity_x = NumericProperty(0)\nvelocity_y = NumericProperty(0)\nvelocity = ReferenceListProperty(velocity_x, velocity_y)\nsensor1_x = NumericProperty(0)\nsensor1_y = NumericProperty(0)\nsensor1 = ReferenceListProperty(sensor1_x, sensor1_y)\nsensor2_x = NumericProperty(0)\nsensor2_y = NumericProperty(0)\nsensor2 = ReferenceListProperty(sensor2_x, sensor2_y)\nsensor3_x = NumericProperty(0)\nsensor3_y = NumericProperty(0)\nsensor3 = ReferenceListProperty(sensor3_x, sensor3_y)\nsignal1 = NumericProperty(0)\nsignal2 = NumericProperty(0)\nsignal3 = NumericProperty(0)\n\ndef move(self, rotation):\n    self.pos = Vector(*self.velocity) + self.pos\n    self.rotation = rotation\n    self.angle = self.angle + self.rotation\n    self.sensor1 = Vector(30, 0).rotate(self.angle) + self.pos\n    self.sensor2 = Vector(30, 0).rotate((self.angle+30)%360) + self.pos\n    self.sensor3 = Vector(30, 0).rotate((self.angle-30)%360) + self.pos\n    self.signal1 = int(np.sum(sand[int(self.sensor1_x)-10:int(self.sensor1_x)+10, int(self.sensor1_y)-10:int(self.sensor1_y)+10]))/400.\n    self.signal2 = int(np.sum(sand[int(self.sensor2_x)-10:int(self.sensor2_x)+10, int(self.sensor2_y)-10:int(self.sensor2_y)+10]))/400.\n    self.signal3 = int(np.sum(sand[int(self.sensor3_x)-10:int(self.sensor3_x)+10, int(self.sensor3_y)-10:int(self.sensor3_y)+10]))/400.\n    if self.sensor1_x&gt;longueur-10 or self.sensor1_x&lt;10 or self.sensor1_y&gt;largeur-10 or self.sensor1_y&lt;10:\n        self.signal1 = 1.\n    if self.sensor2_x&gt;longueur-10 or self.sensor2_x&lt;10 or self.sensor2_y&gt;largeur-10 or self.sensor2_y&lt;10:\n        self.signal2 = 1.\n    if self.sensor3_x&gt;longueur-10 or self.sensor3_x&lt;10 or self.sensor3_y&gt;largeur-10 or self.sensor3_y&lt;10:\n        self.signal3 = 1.\n</code></pre>\n<p>class Ball1(Widget):<br>\npass<br>\nclass Ball2(Widget):<br>\npass<br>\nclass Ball3(Widget):<br>\npass</p>\n<p>class Game(Widget):</p>\n<pre><code>car = ObjectProperty(None)\nball1 = ObjectProperty(None)\nball2 = ObjectProperty(None)\nball3 = ObjectProperty(None)\n\ndef serve_car(self):\n    self.car.center = self.center\n    self.car.velocity = Vector(6, 0)\n\ndef update(self, dt):\n\n    global brain\n    global last_reward\n    global scores\n    global last_distance\n    global goal_x\n    global goal_y\n    global longueur\n    global largeur\n\n    longueur = self.width\n    largeur = self.height\n    if first_update:\n        init()\n\n    xx = goal_x - self.car.x\n    yy = goal_y - self.car.y\n    orientation = Vector(*self.car.velocity).angle((xx,yy))/180.\n    last_signal = [self.car.signal1, self.car.signal2, self.car.signal3, orientation, -orientation]\n    action = brain.update(last_reward, last_signal)\n    scores.append(brain.score())\n    rotation = action2rotation[action]\n    self.car.move(rotation)\n    distance = np.sqrt((self.car.x - goal_x)**2 + (self.car.y - goal_y)**2)\n    self.ball1.pos = self.car.sensor1\n    self.ball2.pos = self.car.sensor2\n    self.ball3.pos = self.car.sensor3\n\n    if sand[int(self.car.x),int(self.car.y)] &gt; 0:\n        self.car.velocity = Vector(1, 0).rotate(self.car.angle)\n        last_reward = -1\n    else: # otherwise\n        self.car.velocity = Vector(6, 0).rotate(self.car.angle)\n        last_reward = -0.2\n        if distance &lt; last_distance:\n            last_reward = 0.1\n\n    if self.car.x &lt; 10:\n        self.car.x = 10\n        last_reward = -1\n    if self.car.x &gt; self.width - 10:\n        self.car.x = self.width - 10\n        last_reward = -1\n    if self.car.y &lt; 10:\n        self.car.y = 10\n        last_reward = -1\n    if self.car.y &gt; self.height - 10:\n        self.car.y = self.height - 10\n        last_reward = -1\n\n    if distance &lt; 100:\n        goal_x = self.width-goal_x\n        goal_y = self.height-goal_y\n    last_distance = distance\n</code></pre>\n<p>class MyPaintWidget(Widget):</p>\n<pre><code>def on_touch_down(self, touch):\n    global length, n_points, last_x, last_y\n    with self.canvas:\n        Color(0.8,0.7,0)\n        d = 10.\n        touch.ud['line'] = Line(points = (touch.x, touch.y), width = 10)\n        last_x = int(touch.x)\n        last_y = int(touch.y)\n        n_points = 0\n        length = 0\n        sand[int(touch.x),int(touch.y)] = 1\n\ndef on_touch_move(self, touch):\n    global length, n_points, last_x, last_y\n    if touch.button == 'left':\n        touch.ud['line'].points += [touch.x, touch.y]\n        x = int(touch.x)\n        y = int(touch.y)\n        length += np.sqrt(max((x - last_x)**2 + (y - last_y)**2, 2))\n        n_points += 1.\n        density = n_points/(length)\n        touch.ud['line'].width = int(20 * density + 1)\n        sand[int(touch.x) - 10 : int(touch.x) + 10, int(touch.y) - 10 : int(touch.y) + 10] = 1\n        last_x = x\n        last_y = y\n</code></pre>\n<p>class CarApp(App):</p>\n<pre><code>def build(self):\n    parent = Game()\n    parent.serve_car()\n    Clock.schedule_interval(parent.update, 1.0/60.0)\n    self.painter = MyPaintWidget()\n    clearbtn = Button(text = 'clear')\n    savebtn = Button(text = 'save', pos = (parent.width, 0))\n    loadbtn = Button(text = 'load', pos = (2 * parent.width, 0))\n    clearbtn.bind(on_release = self.clear_canvas)\n    savebtn.bind(on_release = self.save)\n    loadbtn.bind(on_release = self.load)\n    parent.add_widget(self.painter)\n    parent.add_widget(clearbtn)\n    parent.add_widget(savebtn)\n    parent.add_widget(loadbtn)\n    return parent\n\ndef clear_canvas(self, obj):\n    global sand\n    self.painter.canvas.clear()\n    sand = np.zeros((longueur,largeur))\n\ndef save(self, obj):\n    print(\"saving brain...\")\n    brain.save()\n    plt.plot(scores)\n    plt.show()\n\ndef load(self, obj):\n    print(\"loading last saved brain...\")\n    brain.load()\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':<br>\nCarApp().run()</p>\n<h2>System Info</h2>\n<p>#conda info</p>\n<pre><code> active environment : base\nactive env location : C:\\Users\\DELL\\Anaconda3\n        shell level : 1\n   user config file : C:\\Users\\DELL\\.condarc\n</code></pre>\n<p>populated config files :<br>\nconda version : 4.5.8<br>\nconda-build version : 3.10.5<br>\npython version : 3.6.1.final.0<br>\nbase environment : C:\\Users\\DELL\\Anaconda3  (writable)<br>\nchannel URLs : <a href=\"https://repo.anaconda.com/pkgs/main/win-64\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/main/win-64</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/main/noarch\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/main/noarch</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/free/win-64\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/free/win-64</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/free/noarch\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/free/noarch</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/r/win-64\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/r/win-64</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/r/noarch\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/r/noarch</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/pro/win-64\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/pro/win-64</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/pro/noarch\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/pro/noarch</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/msys2/win-64\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/msys2/win-64</a><br>\n<a href=\"https://repo.anaconda.com/pkgs/msys2/noarch\" rel=\"nofollow\">https://repo.anaconda.com/pkgs/msys2/noarch</a><br>\npackage cache : C:\\Users\\DELL\\Anaconda3\\pkgs<br>\nC:\\Users\\DELL\\AppData\\Local\\conda\\conda\\pkgs<br>\nenvs directories : C:\\Users\\DELL\\Anaconda3\\envs<br>\nC:\\Users\\DELL\\AppData\\Local\\conda\\conda\\envs<br>\nC:\\Users\\DELL.conda\\envs<br>\nplatform : win-64<br>\nuser-agent : conda/4.5.8 requests/2.18.4 CPython/3.6.1 Windows/10 Windows/10.0.17134<br>\nadministrator : True<br>\nnetrc file : None<br>\noffline mode : False</p>\n<ul>\n<li>PyTorch or Caffe2:0.3.1</li>\n<li>How you installed PyTorch (conda, pip, source):conda</li>\n<li>Build command you used (if compiling from source):</li>\n<li>OS:windows 10</li>\n<li>PyTorch version:0.3.1</li>\n<li>Python version:3.6.4</li>\n<li>CUDA/cuDNN version: none</li>\n<li>GPU models and configuration: amd Graphics Chipset:Radeon (TM) R7 M445, Memory Size:2048 MB, Memory Clock:1000 MHz, Memory Type:GDDR5</li>\n<li>GCC version (if compiling from source):</li>\n<li>CMake version:</li>\n<li>Versions of any other relevant libraries:</li>\n</ul>", "body_text": "Issue description\ni installed pytorch using conda install -c peterjc123 pytorch=0.3.1\ni am using a amd gpu so is it because of cuda or something\nplease help me out\noutput:\n[INFO   ] [Logger      ] Record log in C:\\Users\\DELL.kivy\\logs\\kivy_18-07-31_7.txt\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-484b2f7, 20170513\n[INFO   ] [Python      ] v3.6.1 |Continuum Analytics, Inc.| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]\n[INFO   ] [Factory     ] 194 symbols loaded\n[INFO   ] [Image       ] Providers: img_tex, img_dds, img_sdl2, img_pil, img_gif (img_ffpyplayer ignored)\n[INFO   ] [Text        ] Provider: sdl2\nTraceback (most recent call last):\nFile \"\", line 17, in \nfrom ai import Dqn\nFile \"C:\\vaibhav\\Self_Driving_Car\\ai.py\", line 8, in \nimport torch\nFile \"C:\\Users\\DELL\\Anaconda3\\lib\\site-packages\\torch_init_.py\", line 76, in \nfrom torch._C import *\nImportError: DLL load failed: The specified module could not be found.\n(https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py)\n(or fill out the checklist below manually).\nCode example\nimport numpy as np\nfrom random import random, randint\nimport matplotlib.pyplot as plt\nimport time\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.button import Button\nfrom kivy.graphics import Color, Ellipse, Line\nfrom kivy.config import Config\nfrom kivy.properties import NumericProperty, ReferenceListProperty, ObjectProperty\nfrom kivy.vector import Vector\nfrom kivy.clock import Clock\nfrom ai import Dqn\nConfig.set('input', 'mouse', 'mouse,multitouch_on_demand')\nlast_x = 0\nlast_y = 0\nn_points = 0\nlength = 0\nbrain = Dqn(5,3,0.9)\naction2rotation = [0,20,-20]\nlast_reward = 0\nscores = []\nfirst_update = True\ndef init():\nglobal sand\nglobal goal_x\nglobal goal_y\nglobal first_update\nsand = np.zeros((longueur,largeur))\ngoal_x = 20\ngoal_y = largeur - 20\nfirst_update = False\nlast_distance = 0\nclass Car(Widget):\nangle = NumericProperty(0)\nrotation = NumericProperty(0)\nvelocity_x = NumericProperty(0)\nvelocity_y = NumericProperty(0)\nvelocity = ReferenceListProperty(velocity_x, velocity_y)\nsensor1_x = NumericProperty(0)\nsensor1_y = NumericProperty(0)\nsensor1 = ReferenceListProperty(sensor1_x, sensor1_y)\nsensor2_x = NumericProperty(0)\nsensor2_y = NumericProperty(0)\nsensor2 = ReferenceListProperty(sensor2_x, sensor2_y)\nsensor3_x = NumericProperty(0)\nsensor3_y = NumericProperty(0)\nsensor3 = ReferenceListProperty(sensor3_x, sensor3_y)\nsignal1 = NumericProperty(0)\nsignal2 = NumericProperty(0)\nsignal3 = NumericProperty(0)\n\ndef move(self, rotation):\n    self.pos = Vector(*self.velocity) + self.pos\n    self.rotation = rotation\n    self.angle = self.angle + self.rotation\n    self.sensor1 = Vector(30, 0).rotate(self.angle) + self.pos\n    self.sensor2 = Vector(30, 0).rotate((self.angle+30)%360) + self.pos\n    self.sensor3 = Vector(30, 0).rotate((self.angle-30)%360) + self.pos\n    self.signal1 = int(np.sum(sand[int(self.sensor1_x)-10:int(self.sensor1_x)+10, int(self.sensor1_y)-10:int(self.sensor1_y)+10]))/400.\n    self.signal2 = int(np.sum(sand[int(self.sensor2_x)-10:int(self.sensor2_x)+10, int(self.sensor2_y)-10:int(self.sensor2_y)+10]))/400.\n    self.signal3 = int(np.sum(sand[int(self.sensor3_x)-10:int(self.sensor3_x)+10, int(self.sensor3_y)-10:int(self.sensor3_y)+10]))/400.\n    if self.sensor1_x>longueur-10 or self.sensor1_x<10 or self.sensor1_y>largeur-10 or self.sensor1_y<10:\n        self.signal1 = 1.\n    if self.sensor2_x>longueur-10 or self.sensor2_x<10 or self.sensor2_y>largeur-10 or self.sensor2_y<10:\n        self.signal2 = 1.\n    if self.sensor3_x>longueur-10 or self.sensor3_x<10 or self.sensor3_y>largeur-10 or self.sensor3_y<10:\n        self.signal3 = 1.\n\nclass Ball1(Widget):\npass\nclass Ball2(Widget):\npass\nclass Ball3(Widget):\npass\nclass Game(Widget):\ncar = ObjectProperty(None)\nball1 = ObjectProperty(None)\nball2 = ObjectProperty(None)\nball3 = ObjectProperty(None)\n\ndef serve_car(self):\n    self.car.center = self.center\n    self.car.velocity = Vector(6, 0)\n\ndef update(self, dt):\n\n    global brain\n    global last_reward\n    global scores\n    global last_distance\n    global goal_x\n    global goal_y\n    global longueur\n    global largeur\n\n    longueur = self.width\n    largeur = self.height\n    if first_update:\n        init()\n\n    xx = goal_x - self.car.x\n    yy = goal_y - self.car.y\n    orientation = Vector(*self.car.velocity).angle((xx,yy))/180.\n    last_signal = [self.car.signal1, self.car.signal2, self.car.signal3, orientation, -orientation]\n    action = brain.update(last_reward, last_signal)\n    scores.append(brain.score())\n    rotation = action2rotation[action]\n    self.car.move(rotation)\n    distance = np.sqrt((self.car.x - goal_x)**2 + (self.car.y - goal_y)**2)\n    self.ball1.pos = self.car.sensor1\n    self.ball2.pos = self.car.sensor2\n    self.ball3.pos = self.car.sensor3\n\n    if sand[int(self.car.x),int(self.car.y)] > 0:\n        self.car.velocity = Vector(1, 0).rotate(self.car.angle)\n        last_reward = -1\n    else: # otherwise\n        self.car.velocity = Vector(6, 0).rotate(self.car.angle)\n        last_reward = -0.2\n        if distance < last_distance:\n            last_reward = 0.1\n\n    if self.car.x < 10:\n        self.car.x = 10\n        last_reward = -1\n    if self.car.x > self.width - 10:\n        self.car.x = self.width - 10\n        last_reward = -1\n    if self.car.y < 10:\n        self.car.y = 10\n        last_reward = -1\n    if self.car.y > self.height - 10:\n        self.car.y = self.height - 10\n        last_reward = -1\n\n    if distance < 100:\n        goal_x = self.width-goal_x\n        goal_y = self.height-goal_y\n    last_distance = distance\n\nclass MyPaintWidget(Widget):\ndef on_touch_down(self, touch):\n    global length, n_points, last_x, last_y\n    with self.canvas:\n        Color(0.8,0.7,0)\n        d = 10.\n        touch.ud['line'] = Line(points = (touch.x, touch.y), width = 10)\n        last_x = int(touch.x)\n        last_y = int(touch.y)\n        n_points = 0\n        length = 0\n        sand[int(touch.x),int(touch.y)] = 1\n\ndef on_touch_move(self, touch):\n    global length, n_points, last_x, last_y\n    if touch.button == 'left':\n        touch.ud['line'].points += [touch.x, touch.y]\n        x = int(touch.x)\n        y = int(touch.y)\n        length += np.sqrt(max((x - last_x)**2 + (y - last_y)**2, 2))\n        n_points += 1.\n        density = n_points/(length)\n        touch.ud['line'].width = int(20 * density + 1)\n        sand[int(touch.x) - 10 : int(touch.x) + 10, int(touch.y) - 10 : int(touch.y) + 10] = 1\n        last_x = x\n        last_y = y\n\nclass CarApp(App):\ndef build(self):\n    parent = Game()\n    parent.serve_car()\n    Clock.schedule_interval(parent.update, 1.0/60.0)\n    self.painter = MyPaintWidget()\n    clearbtn = Button(text = 'clear')\n    savebtn = Button(text = 'save', pos = (parent.width, 0))\n    loadbtn = Button(text = 'load', pos = (2 * parent.width, 0))\n    clearbtn.bind(on_release = self.clear_canvas)\n    savebtn.bind(on_release = self.save)\n    loadbtn.bind(on_release = self.load)\n    parent.add_widget(self.painter)\n    parent.add_widget(clearbtn)\n    parent.add_widget(savebtn)\n    parent.add_widget(loadbtn)\n    return parent\n\ndef clear_canvas(self, obj):\n    global sand\n    self.painter.canvas.clear()\n    sand = np.zeros((longueur,largeur))\n\ndef save(self, obj):\n    print(\"saving brain...\")\n    brain.save()\n    plt.plot(scores)\n    plt.show()\n\ndef load(self, obj):\n    print(\"loading last saved brain...\")\n    brain.load()\n\nif name == 'main':\nCarApp().run()\nSystem Info\n#conda info\n active environment : base\nactive env location : C:\\Users\\DELL\\Anaconda3\n        shell level : 1\n   user config file : C:\\Users\\DELL\\.condarc\n\npopulated config files :\nconda version : 4.5.8\nconda-build version : 3.10.5\npython version : 3.6.1.final.0\nbase environment : C:\\Users\\DELL\\Anaconda3  (writable)\nchannel URLs : https://repo.anaconda.com/pkgs/main/win-64\nhttps://repo.anaconda.com/pkgs/main/noarch\nhttps://repo.anaconda.com/pkgs/free/win-64\nhttps://repo.anaconda.com/pkgs/free/noarch\nhttps://repo.anaconda.com/pkgs/r/win-64\nhttps://repo.anaconda.com/pkgs/r/noarch\nhttps://repo.anaconda.com/pkgs/pro/win-64\nhttps://repo.anaconda.com/pkgs/pro/noarch\nhttps://repo.anaconda.com/pkgs/msys2/win-64\nhttps://repo.anaconda.com/pkgs/msys2/noarch\npackage cache : C:\\Users\\DELL\\Anaconda3\\pkgs\nC:\\Users\\DELL\\AppData\\Local\\conda\\conda\\pkgs\nenvs directories : C:\\Users\\DELL\\Anaconda3\\envs\nC:\\Users\\DELL\\AppData\\Local\\conda\\conda\\envs\nC:\\Users\\DELL.conda\\envs\nplatform : win-64\nuser-agent : conda/4.5.8 requests/2.18.4 CPython/3.6.1 Windows/10 Windows/10.0.17134\nadministrator : True\nnetrc file : None\noffline mode : False\n\nPyTorch or Caffe2:0.3.1\nHow you installed PyTorch (conda, pip, source):conda\nBuild command you used (if compiling from source):\nOS:windows 10\nPyTorch version:0.3.1\nPython version:3.6.4\nCUDA/cuDNN version: none\nGPU models and configuration: amd Graphics Chipset:Radeon (TM) R7 M445, Memory Size:2048 MB, Memory Clock:1000 MHz, Memory Type:GDDR5\nGCC version (if compiling from source):\nCMake version:\nVersions of any other relevant libraries:", "body": "## Issue description\r\n\r\ni installed pytorch using **conda install -c peterjc123 pytorch=0.3.1**\r\ni am using a amd gpu so is it because of cuda or something\r\nplease help me out\r\noutput:\r\n[INFO   ] [Logger      ] Record log in C:\\Users\\DELL\\.kivy\\logs\\kivy_18-07-31_7.txt\r\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-484b2f7, 20170513\r\n[INFO   ] [Python      ] v3.6.1 |Continuum Analytics, Inc.| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]\r\n[INFO   ] [Factory     ] 194 symbols loaded\r\n[INFO   ] [Image       ] Providers: img_tex, img_dds, img_sdl2, img_pil, img_gif (img_ffpyplayer ignored)\r\n[INFO   ] [Text        ] Provider: sdl2\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-1-51d22e90efa3>\", line 17, in <module>\r\n    from ai import Dqn\r\n\r\n  File \"C:\\vaibhav\\Self_Driving_Car\\ai.py\", line 8, in <module>\r\n    import torch\r\n\r\n  File \"C:\\Users\\DELL\\Anaconda3\\lib\\site-packages\\torch\\__init__.py\", line 76, in <module>\r\n    from torch._C import *\r\n\r\nImportError: DLL load failed: The specified module could not be found.\r\n(https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py)\r\n(or fill out the checklist below manually).\r\n## Code example\r\nimport numpy as np\r\nfrom random import random, randint\r\nimport matplotlib.pyplot as plt\r\nimport time\r\n\r\nfrom kivy.app import App\r\nfrom kivy.uix.widget import Widget\r\nfrom kivy.uix.button import Button\r\nfrom kivy.graphics import Color, Ellipse, Line\r\nfrom kivy.config import Config\r\nfrom kivy.properties import NumericProperty, ReferenceListProperty, ObjectProperty\r\nfrom kivy.vector import Vector\r\nfrom kivy.clock import Clock\r\n\r\n\r\nfrom ai import Dqn\r\n\r\nConfig.set('input', 'mouse', 'mouse,multitouch_on_demand')\r\n\r\n\r\nlast_x = 0\r\nlast_y = 0\r\nn_points = 0\r\nlength = 0\r\n\r\n\r\nbrain = Dqn(5,3,0.9)\r\naction2rotation = [0,20,-20]\r\nlast_reward = 0\r\nscores = []\r\n\r\n\r\nfirst_update = True\r\ndef init():\r\n    global sand\r\n    global goal_x\r\n    global goal_y\r\n    global first_update\r\n    sand = np.zeros((longueur,largeur))\r\n    goal_x = 20\r\n    goal_y = largeur - 20\r\n    first_update = False\r\n\r\n\r\nlast_distance = 0\r\n\r\nclass Car(Widget):\r\n    \r\n    angle = NumericProperty(0)\r\n    rotation = NumericProperty(0)\r\n    velocity_x = NumericProperty(0)\r\n    velocity_y = NumericProperty(0)\r\n    velocity = ReferenceListProperty(velocity_x, velocity_y)\r\n    sensor1_x = NumericProperty(0)\r\n    sensor1_y = NumericProperty(0)\r\n    sensor1 = ReferenceListProperty(sensor1_x, sensor1_y)\r\n    sensor2_x = NumericProperty(0)\r\n    sensor2_y = NumericProperty(0)\r\n    sensor2 = ReferenceListProperty(sensor2_x, sensor2_y)\r\n    sensor3_x = NumericProperty(0)\r\n    sensor3_y = NumericProperty(0)\r\n    sensor3 = ReferenceListProperty(sensor3_x, sensor3_y)\r\n    signal1 = NumericProperty(0)\r\n    signal2 = NumericProperty(0)\r\n    signal3 = NumericProperty(0)\r\n\r\n    def move(self, rotation):\r\n        self.pos = Vector(*self.velocity) + self.pos\r\n        self.rotation = rotation\r\n        self.angle = self.angle + self.rotation\r\n        self.sensor1 = Vector(30, 0).rotate(self.angle) + self.pos\r\n        self.sensor2 = Vector(30, 0).rotate((self.angle+30)%360) + self.pos\r\n        self.sensor3 = Vector(30, 0).rotate((self.angle-30)%360) + self.pos\r\n        self.signal1 = int(np.sum(sand[int(self.sensor1_x)-10:int(self.sensor1_x)+10, int(self.sensor1_y)-10:int(self.sensor1_y)+10]))/400.\r\n        self.signal2 = int(np.sum(sand[int(self.sensor2_x)-10:int(self.sensor2_x)+10, int(self.sensor2_y)-10:int(self.sensor2_y)+10]))/400.\r\n        self.signal3 = int(np.sum(sand[int(self.sensor3_x)-10:int(self.sensor3_x)+10, int(self.sensor3_y)-10:int(self.sensor3_y)+10]))/400.\r\n        if self.sensor1_x>longueur-10 or self.sensor1_x<10 or self.sensor1_y>largeur-10 or self.sensor1_y<10:\r\n            self.signal1 = 1.\r\n        if self.sensor2_x>longueur-10 or self.sensor2_x<10 or self.sensor2_y>largeur-10 or self.sensor2_y<10:\r\n            self.signal2 = 1.\r\n        if self.sensor3_x>longueur-10 or self.sensor3_x<10 or self.sensor3_y>largeur-10 or self.sensor3_y<10:\r\n            self.signal3 = 1.\r\n\r\nclass Ball1(Widget):\r\n    pass\r\nclass Ball2(Widget):\r\n    pass\r\nclass Ball3(Widget):\r\n    pass\r\n\r\nclass Game(Widget):\r\n\r\n    car = ObjectProperty(None)\r\n    ball1 = ObjectProperty(None)\r\n    ball2 = ObjectProperty(None)\r\n    ball3 = ObjectProperty(None)\r\n\r\n    def serve_car(self):\r\n        self.car.center = self.center\r\n        self.car.velocity = Vector(6, 0)\r\n\r\n    def update(self, dt):\r\n\r\n        global brain\r\n        global last_reward\r\n        global scores\r\n        global last_distance\r\n        global goal_x\r\n        global goal_y\r\n        global longueur\r\n        global largeur\r\n\r\n        longueur = self.width\r\n        largeur = self.height\r\n        if first_update:\r\n            init()\r\n\r\n        xx = goal_x - self.car.x\r\n        yy = goal_y - self.car.y\r\n        orientation = Vector(*self.car.velocity).angle((xx,yy))/180.\r\n        last_signal = [self.car.signal1, self.car.signal2, self.car.signal3, orientation, -orientation]\r\n        action = brain.update(last_reward, last_signal)\r\n        scores.append(brain.score())\r\n        rotation = action2rotation[action]\r\n        self.car.move(rotation)\r\n        distance = np.sqrt((self.car.x - goal_x)**2 + (self.car.y - goal_y)**2)\r\n        self.ball1.pos = self.car.sensor1\r\n        self.ball2.pos = self.car.sensor2\r\n        self.ball3.pos = self.car.sensor3\r\n\r\n        if sand[int(self.car.x),int(self.car.y)] > 0:\r\n            self.car.velocity = Vector(1, 0).rotate(self.car.angle)\r\n            last_reward = -1\r\n        else: # otherwise\r\n            self.car.velocity = Vector(6, 0).rotate(self.car.angle)\r\n            last_reward = -0.2\r\n            if distance < last_distance:\r\n                last_reward = 0.1\r\n\r\n        if self.car.x < 10:\r\n            self.car.x = 10\r\n            last_reward = -1\r\n        if self.car.x > self.width - 10:\r\n            self.car.x = self.width - 10\r\n            last_reward = -1\r\n        if self.car.y < 10:\r\n            self.car.y = 10\r\n            last_reward = -1\r\n        if self.car.y > self.height - 10:\r\n            self.car.y = self.height - 10\r\n            last_reward = -1\r\n\r\n        if distance < 100:\r\n            goal_x = self.width-goal_x\r\n            goal_y = self.height-goal_y\r\n        last_distance = distance\r\n\r\n\r\n\r\nclass MyPaintWidget(Widget):\r\n\r\n    def on_touch_down(self, touch):\r\n        global length, n_points, last_x, last_y\r\n        with self.canvas:\r\n            Color(0.8,0.7,0)\r\n            d = 10.\r\n            touch.ud['line'] = Line(points = (touch.x, touch.y), width = 10)\r\n            last_x = int(touch.x)\r\n            last_y = int(touch.y)\r\n            n_points = 0\r\n            length = 0\r\n            sand[int(touch.x),int(touch.y)] = 1\r\n\r\n    def on_touch_move(self, touch):\r\n        global length, n_points, last_x, last_y\r\n        if touch.button == 'left':\r\n            touch.ud['line'].points += [touch.x, touch.y]\r\n            x = int(touch.x)\r\n            y = int(touch.y)\r\n            length += np.sqrt(max((x - last_x)**2 + (y - last_y)**2, 2))\r\n            n_points += 1.\r\n            density = n_points/(length)\r\n            touch.ud['line'].width = int(20 * density + 1)\r\n            sand[int(touch.x) - 10 : int(touch.x) + 10, int(touch.y) - 10 : int(touch.y) + 10] = 1\r\n            last_x = x\r\n            last_y = y\r\n\r\n\r\n\r\nclass CarApp(App):\r\n\r\n    def build(self):\r\n        parent = Game()\r\n        parent.serve_car()\r\n        Clock.schedule_interval(parent.update, 1.0/60.0)\r\n        self.painter = MyPaintWidget()\r\n        clearbtn = Button(text = 'clear')\r\n        savebtn = Button(text = 'save', pos = (parent.width, 0))\r\n        loadbtn = Button(text = 'load', pos = (2 * parent.width, 0))\r\n        clearbtn.bind(on_release = self.clear_canvas)\r\n        savebtn.bind(on_release = self.save)\r\n        loadbtn.bind(on_release = self.load)\r\n        parent.add_widget(self.painter)\r\n        parent.add_widget(clearbtn)\r\n        parent.add_widget(savebtn)\r\n        parent.add_widget(loadbtn)\r\n        return parent\r\n\r\n    def clear_canvas(self, obj):\r\n        global sand\r\n        self.painter.canvas.clear()\r\n        sand = np.zeros((longueur,largeur))\r\n\r\n    def save(self, obj):\r\n        print(\"saving brain...\")\r\n        brain.save()\r\n        plt.plot(scores)\r\n        plt.show()\r\n\r\n    def load(self, obj):\r\n        print(\"loading last saved brain...\")\r\n        brain.load()\r\n\r\nif __name__ == '__main__':\r\n    CarApp().run()\r\n\r\n\r\n## System Info\r\n\r\n#conda info\r\n\r\n     active environment : base\r\n    active env location : C:\\Users\\DELL\\Anaconda3\r\n            shell level : 1\r\n       user config file : C:\\Users\\DELL\\.condarc\r\n populated config files :\r\n          conda version : 4.5.8\r\n    conda-build version : 3.10.5\r\n         python version : 3.6.1.final.0\r\n       base environment : C:\\Users\\DELL\\Anaconda3  (writable)\r\n           channel URLs : https://repo.anaconda.com/pkgs/main/win-64\r\n                          https://repo.anaconda.com/pkgs/main/noarch\r\n                          https://repo.anaconda.com/pkgs/free/win-64\r\n                          https://repo.anaconda.com/pkgs/free/noarch\r\n                          https://repo.anaconda.com/pkgs/r/win-64\r\n                          https://repo.anaconda.com/pkgs/r/noarch\r\n                          https://repo.anaconda.com/pkgs/pro/win-64\r\n                          https://repo.anaconda.com/pkgs/pro/noarch\r\n                          https://repo.anaconda.com/pkgs/msys2/win-64\r\n                          https://repo.anaconda.com/pkgs/msys2/noarch\r\n          package cache : C:\\Users\\DELL\\Anaconda3\\pkgs\r\n                          C:\\Users\\DELL\\AppData\\Local\\conda\\conda\\pkgs\r\n       envs directories : C:\\Users\\DELL\\Anaconda3\\envs\r\n                          C:\\Users\\DELL\\AppData\\Local\\conda\\conda\\envs\r\n                          C:\\Users\\DELL\\.conda\\envs\r\n               platform : win-64\r\n             user-agent : conda/4.5.8 requests/2.18.4 CPython/3.6.1 Windows/10 Windows/10.0.17134\r\n          administrator : True\r\n             netrc file : None\r\n           offline mode : False\r\n\r\n- PyTorch or Caffe2:0.3.1\r\n- How you installed PyTorch (conda, pip, source):conda\r\n- Build command you used (if compiling from source):\r\n- OS:windows 10\r\n- PyTorch version:0.3.1\r\n- Python version:3.6.4\r\n- CUDA/cuDNN version: none\r\n- GPU models and configuration: amd Graphics Chipset:Radeon (TM) R7 M445, Memory Size:2048 MB, Memory Clock:1000 MHz, Memory Type:GDDR5\r\n- GCC version (if compiling from source):\r\n- CMake version:\r\n- Versions of any other relevant libraries:\r\n"}