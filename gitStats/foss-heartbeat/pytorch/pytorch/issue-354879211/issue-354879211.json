{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10966", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10966/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10966/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10966/events", "html_url": "https://github.com/pytorch/pytorch/pull/10966", "id": 354879211, "node_id": "MDExOlB1bGxSZXF1ZXN0MjExNTM4NDMw", "number": 10966, "title": "Virtualize all methods on Type.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-28T19:53:24Z", "updated_at": "2018-08-29T15:50:50Z", "closed_at": "2018-08-29T15:50:50Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10966", "html_url": "https://github.com/pytorch/pytorch/pull/10966", "diff_url": "https://github.com/pytorch/pytorch/pull/10966.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10966.patch"}, "body_html": "<p>Virtualize all methods on Type.</p>\n<p>Previously, we had a mixture of virtual and non-virtual methods on Type,<br>\nskipping virtual dispatch when we knew that dispatch could not matter.  This<br>\npatch removes this entirely, so we can treat Type as a purely virtual interface.<br>\nThis simplifies function_wrapper.py a fair amount.</p>\n<p>The underlying motivation for this change is to give us a way to generate<br>\nsubstantially the same Tensor header on mobile, without forcing the mobile<br>\nbuild to link against a ton of code it isn't interested in.  Instead,<br>\nmobile code that invokes the Type interface will go to a stub that<br>\nraises an error; kernels can then be slowly added on a case-by-case basis.</p>\n<p>A legitimate alternate plan would have been to ifdef Type so that it compiles<br>\ndifferently on mobile.  But this seemed hackier, so we went the \"make<br>\nType pure virtual\" plan instead.</p>\n<p>Differential Revision: D9545248</p>", "body_text": "Virtualize all methods on Type.\nPreviously, we had a mixture of virtual and non-virtual methods on Type,\nskipping virtual dispatch when we knew that dispatch could not matter.  This\npatch removes this entirely, so we can treat Type as a purely virtual interface.\nThis simplifies function_wrapper.py a fair amount.\nThe underlying motivation for this change is to give us a way to generate\nsubstantially the same Tensor header on mobile, without forcing the mobile\nbuild to link against a ton of code it isn't interested in.  Instead,\nmobile code that invokes the Type interface will go to a stub that\nraises an error; kernels can then be slowly added on a case-by-case basis.\nA legitimate alternate plan would have been to ifdef Type so that it compiles\ndifferently on mobile.  But this seemed hackier, so we went the \"make\nType pure virtual\" plan instead.\nDifferential Revision: D9545248", "body": "Virtualize all methods on Type.\n\nPreviously, we had a mixture of virtual and non-virtual methods on Type,\nskipping virtual dispatch when we knew that dispatch could not matter.  This\npatch removes this entirely, so we can treat Type as a purely virtual interface.\nThis simplifies function_wrapper.py a fair amount.\n\nThe underlying motivation for this change is to give us a way to generate\nsubstantially the same Tensor header on mobile, without forcing the mobile\nbuild to link against a ton of code it isn't interested in.  Instead,\nmobile code that invokes the Type interface will go to a stub that\nraises an error; kernels can then be slowly added on a case-by-case basis.\n\nA legitimate alternate plan would have been to ifdef Type so that it compiles\ndifferently on mobile.  But this seemed hackier, so we went the \"make\nType pure virtual\" plan instead.\n\nDifferential Revision: D9545248\n\n"}