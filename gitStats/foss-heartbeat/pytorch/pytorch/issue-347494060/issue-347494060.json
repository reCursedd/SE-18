{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10212", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10212/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10212/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10212/events", "html_url": "https://github.com/pytorch/pytorch/pull/10212", "id": 347494060, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA2MTA1NTY4", "number": 10212, "title": "[JIT]  Add tracing to custom op and simplify tracer overall ", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-03T18:26:51Z", "updated_at": "2018-11-23T15:48:55Z", "closed_at": "2018-08-07T20:55:29Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10212", "html_url": "https://github.com/pytorch/pytorch/pull/10212", "diff_url": "https://github.com/pytorch/pytorch/pull/10212.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10212.patch"}, "body_html": "<p>This PR adds tracing infrastructure for custom operators. It also simplifies the tracer overall, and changes the codegen to do more metaprogramming there instead of via C++ (which was necessary for the custom op tracing).</p>\n<p>To give an example of the tracer/metaprogramming change, what used to look like this in <code>VariableType.cpp</code>:</p>\n<pre><code>jit::tracer::PreTraceInfo trace_info;\n  if (jit::tracer::isTracing()) {\n    trace_info = jit::tracer::preRecordTrace(jit::aten::index_select, \"self\", self, \"dim\", dim, \"index\", index);\n  }\n</code></pre>\n<p>is now simply the inlined version of <code>preRecordTrace</code>, minus C++ metaprogramming:</p>\n<pre><code>torch::jit::Node* node = nullptr;\n  if (jit::tracer::isTracing()) {\n    auto&amp; graph = jit::tracer::getTracingState()-&gt;graph;\n    node = graph-&gt;create(jit::aten::index_select_out, /*outputs=*/0);\n    jit::tracer::recordSourceLocation(node);\n    jit::tracer::addInputs(node, \"result\", result);\n    jit::tracer::addInputs(node, \"self\", self);\n    jit::tracer::addInputs(node, \"dim\", dim);\n    jit::tracer::addInputs(node, \"index\", index);\n    graph-&gt;appendNode(node);\n  }\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "This PR adds tracing infrastructure for custom operators. It also simplifies the tracer overall, and changes the codegen to do more metaprogramming there instead of via C++ (which was necessary for the custom op tracing).\nTo give an example of the tracer/metaprogramming change, what used to look like this in VariableType.cpp:\njit::tracer::PreTraceInfo trace_info;\n  if (jit::tracer::isTracing()) {\n    trace_info = jit::tracer::preRecordTrace(jit::aten::index_select, \"self\", self, \"dim\", dim, \"index\", index);\n  }\n\nis now simply the inlined version of preRecordTrace, minus C++ metaprogramming:\ntorch::jit::Node* node = nullptr;\n  if (jit::tracer::isTracing()) {\n    auto& graph = jit::tracer::getTracingState()->graph;\n    node = graph->create(jit::aten::index_select_out, /*outputs=*/0);\n    jit::tracer::recordSourceLocation(node);\n    jit::tracer::addInputs(node, \"result\", result);\n    jit::tracer::addInputs(node, \"self\", self);\n    jit::tracer::addInputs(node, \"dim\", dim);\n    jit::tracer::addInputs(node, \"index\", index);\n    graph->appendNode(node);\n  }\n\n@zdevito @apaszke", "body": "This PR adds tracing infrastructure for custom operators. It also simplifies the tracer overall, and changes the codegen to do more metaprogramming there instead of via C++ (which was necessary for the custom op tracing).\r\n\r\nTo give an example of the tracer/metaprogramming change, what used to look like this in `VariableType.cpp`:\r\n\r\n```\r\njit::tracer::PreTraceInfo trace_info;\r\n  if (jit::tracer::isTracing()) {\r\n    trace_info = jit::tracer::preRecordTrace(jit::aten::index_select, \"self\", self, \"dim\", dim, \"index\", index);\r\n  }\r\n```\r\n\r\nis now simply the inlined version of `preRecordTrace`, minus C++ metaprogramming:\r\n\r\n```\r\ntorch::jit::Node* node = nullptr;\r\n  if (jit::tracer::isTracing()) {\r\n    auto& graph = jit::tracer::getTracingState()->graph;\r\n    node = graph->create(jit::aten::index_select_out, /*outputs=*/0);\r\n    jit::tracer::recordSourceLocation(node);\r\n    jit::tracer::addInputs(node, \"result\", result);\r\n    jit::tracer::addInputs(node, \"self\", self);\r\n    jit::tracer::addInputs(node, \"dim\", dim);\r\n    jit::tracer::addInputs(node, \"index\", index);\r\n    graph->appendNode(node);\r\n  }\r\n```\r\n\r\n@zdevito @apaszke "}