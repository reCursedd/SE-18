{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13491", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13491/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13491/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13491/events", "html_url": "https://github.com/pytorch/pytorch/issues/13491", "id": 376623148, "node_id": "MDU6SXNzdWUzNzY2MjMxNDg=", "number": 13491, "title": "Numerical ODE solvers", "user": {"login": "stefanwebb", "id": 4926302, "node_id": "MDQ6VXNlcjQ5MjYzMDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4926302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefanwebb", "html_url": "https://github.com/stefanwebb", "followers_url": "https://api.github.com/users/stefanwebb/followers", "following_url": "https://api.github.com/users/stefanwebb/following{/other_user}", "gists_url": "https://api.github.com/users/stefanwebb/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefanwebb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefanwebb/subscriptions", "organizations_url": "https://api.github.com/users/stefanwebb/orgs", "repos_url": "https://api.github.com/users/stefanwebb/repos", "events_url": "https://api.github.com/users/stefanwebb/events{/privacy}", "received_events_url": "https://api.github.com/users/stefanwebb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-02T00:38:16Z", "updated_at": "2018-11-15T18:53:36Z", "closed_at": "2018-11-15T18:53:35Z", "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> Feature</h2>\n<p>It would be useful to have a library of numerical ODE solvers that are compatible with PyTorch.</p>\n<h2>Motivation</h2>\n<p>Neural networks are increasingly being combined with ODEs. For example, when modelling ODEs that form part of a probabilistic model, or when defining a derivative with a neural network (neural ODEs).</p>\n<p>You may want to get a speedup by using the GPU with PyTorch for this, and it's useful to be able to differentiate through these algorithms too.</p>\n<h2>Pitch</h2>\n<p>I'm proposing to create a <code>torch.ode</code> module that contains half a dozen common ODE solvers. For instance, you could call <code>torch.ode.forward_euler(f, t0, tn, x0, n)</code> to calculate <code>n</code> points from <code>t0</code> to <code>tn</code> for the equation <code>dx/dt = f(t, x)</code></p>", "body_text": "\ud83d\ude80 Feature\nIt would be useful to have a library of numerical ODE solvers that are compatible with PyTorch.\nMotivation\nNeural networks are increasingly being combined with ODEs. For example, when modelling ODEs that form part of a probabilistic model, or when defining a derivative with a neural network (neural ODEs).\nYou may want to get a speedup by using the GPU with PyTorch for this, and it's useful to be able to differentiate through these algorithms too.\nPitch\nI'm proposing to create a torch.ode module that contains half a dozen common ODE solvers. For instance, you could call torch.ode.forward_euler(f, t0, tn, x0, n) to calculate n points from t0 to tn for the equation dx/dt = f(t, x)", "body": "## \ud83d\ude80 Feature\r\nIt would be useful to have a library of numerical ODE solvers that are compatible with PyTorch.\r\n\r\n## Motivation\r\nNeural networks are increasingly being combined with ODEs. For example, when modelling ODEs that form part of a probabilistic model, or when defining a derivative with a neural network (neural ODEs).\r\n\r\nYou may want to get a speedup by using the GPU with PyTorch for this, and it's useful to be able to differentiate through these algorithms too.\r\n\r\n## Pitch\r\nI'm proposing to create a `torch.ode` module that contains half a dozen common ODE solvers. For instance, you could call `torch.ode.forward_euler(f, t0, tn, x0, n)` to calculate `n` points from `t0` to `tn` for the equation `dx/dt = f(t, x)`\r\n"}