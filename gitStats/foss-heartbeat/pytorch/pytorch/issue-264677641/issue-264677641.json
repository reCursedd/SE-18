{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3075", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3075/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3075/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3075/events", "html_url": "https://github.com/pytorch/pytorch/issues/3075", "id": 264677641, "node_id": "MDU6SXNzdWUyNjQ2Nzc2NDE=", "number": 3075, "title": "[ONNX] ONNX broadcasting plan", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 693805995, "node_id": "MDU6TGFiZWw2OTM4MDU5OTU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/onnx", "name": "onnx", "color": "e99695", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-10-11T17:50:34Z", "updated_at": "2017-12-07T20:06:43Z", "closed_at": "2017-12-07T20:06:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>There's an ongoing discussion about broadcasting in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"263338872\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/onnx/onnx/issues/83\" data-hovercard-type=\"issue\" data-hovercard-url=\"/onnx/onnx/issues/83/hovercard\" href=\"https://github.com/onnx/onnx/issues/83\">onnx/onnx#83</a></p>\n<p>In the meantime, here is our plan for PyTorch:</p>\n<ol>\n<li>\n<p>In the short term, we are going to implement add by scalar using the <code>broadcast=1</code> attribute in ONNX. So for example, if we have x + 3, we export this as <code>Add[broadcast=1] x const_tensor</code>, where <code>const_tensor</code> is a 1-dimensional, 1 element tensor containing 3</p>\n</li>\n<li>\n<p>Longer term, if we get a <code>Broadcast</code> op in ONNX, we can drop the <code>broadcast=1</code> attribute, export a zero-dim tensor containing 3, and use the <code>Broadcast</code> operator to get the zero dim into a compatible shape. ()the onnx-caffe2 backend will handle translating this back into a broadcast=1 attribute.) One minor short term problem that must be overcome is we can't actually create zero-dim tensors yet, so we need to wait for scalars to become a thing or special case it in symbolic.</p>\n</li>\n</ol>", "body_text": "There's an ongoing discussion about broadcasting in onnx/onnx#83\nIn the meantime, here is our plan for PyTorch:\n\n\nIn the short term, we are going to implement add by scalar using the broadcast=1 attribute in ONNX. So for example, if we have x + 3, we export this as Add[broadcast=1] x const_tensor, where const_tensor is a 1-dimensional, 1 element tensor containing 3\n\n\nLonger term, if we get a Broadcast op in ONNX, we can drop the broadcast=1 attribute, export a zero-dim tensor containing 3, and use the Broadcast operator to get the zero dim into a compatible shape. ()the onnx-caffe2 backend will handle translating this back into a broadcast=1 attribute.) One minor short term problem that must be overcome is we can't actually create zero-dim tensors yet, so we need to wait for scalars to become a thing or special case it in symbolic.", "body": "There's an ongoing discussion about broadcasting in https://github.com/onnx/onnx/issues/83\r\n\r\nIn the meantime, here is our plan for PyTorch:\r\n\r\n1. In the short term, we are going to implement add by scalar using the `broadcast=1` attribute in ONNX. So for example, if we have x + 3, we export this as `Add[broadcast=1] x const_tensor`, where `const_tensor` is a 1-dimensional, 1 element tensor containing 3\r\n\r\n2. Longer term, if we get a `Broadcast` op in ONNX, we can drop the `broadcast=1` attribute, export a zero-dim tensor containing 3, and use the `Broadcast` operator to get the zero dim into a compatible shape. ()the onnx-caffe2 backend will handle translating this back into a broadcast=1 attribute.) One minor short term problem that must be overcome is we can't actually create zero-dim tensors yet, so we need to wait for scalars to become a thing or special case it in symbolic."}