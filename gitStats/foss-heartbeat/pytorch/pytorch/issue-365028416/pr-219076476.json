{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12180", "id": 219076476, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE5MDc2NDc2", "html_url": "https://github.com/pytorch/pytorch/pull/12180", "diff_url": "https://github.com/pytorch/pytorch/pull/12180.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12180.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12180", "number": 12180, "state": "closed", "locked": false, "title": "Make caffe2::Tensor::dims() return an IntList instead of a const vector&", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Stack:\n&nbsp;&nbsp;&nbsp;&nbsp;:black_circle:&nbsp; **#12180 Make caffe2::Tensor::dims() return an IntList instead of a const vector&**&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D10111759/)\n\nI had to fix a lot of call sites, because a lot of places assume that\nyou can actually get a const vector&, and if the internal representation\nof sizes in a tensor is NOT a vector, it's not possible to fulfill\nthis API contract.\n\nFramework changes:\n- I deleted TensorImpl::dims(); caffe2::Tensor::dims() just forwards to\n  sizes() now.\n- De-templatized SetDims; now it is an explicit list of ArrayRef and\n  variadic overloads.  This makes implicit conversions work again,\n  so I don't need to explicitly list the std::vector cases too.\n  - As a knock-on effect, this causes Reset() to accept at::IntList as well as\n    const std::vector<int64_t>&\n- Edited variadic overloads of SetDims to all forward to the underlying\n  arbitrary-dim implementation, reducing code duplication. (It's probably\n  marginally less efficient in the new world.)\n- Replace Tensor constructor accepting const std::vector<int64_t>& with at::IntList\n- Make MKLTensor accept ArrayRef along with vector in constructor and\n  Reset (unfortunately, no implicit conversions here, since it's templated on\n  index type.)\n- There are a few other places, like cudnn, where I changed functions\n  that previously took const std::vector<int64_t>& to take at::IntList\n  instead.\n\nClassification of call site changes:\n- 'const std::vector<int64_t>& x_dims = x.dims()' ==>\n  'at::IntList x_dims = x.dims()'\n- 'std::vector<int64_t> x_dims = x.dims()' ==>\n  'std::vector<int64_t> x_dims = x.dims().vec()' (we need a copy!)\n  Usually this is because we're about to mutably modify the vector\n  to compute some new dimension.  However, it also very commonly occurs in the\n  form: 'x_dims_ = x.dims()' because we frequently cache sizes in operators.\n- Instead of constructing std::vector<int64_t>{blah, blah}, construct an\n  at::IntList directly\n\nArrayRef changes:\n- cbegin()/cend() iterators, they operate the same aas begin()/end() because\n  everything on ArrayRef is const.\n- Moved operator<< into ArrayRef.h, so that it's always available when\n  working with ArrayRef.  I also templated it, so it now works on an\n  ArrayRef of any type.\n- Add operator== overload for ArrayRef, and also add variants to permit\n  comparison of ArrayRef with std::vector, a very common operation.\n  (The non-templated version of operator== can get these automatically\n  via implicit conversion, but with templates C++ refuses to do\n  any explicit conversions.)\n\nI'm planning to audit all dims() call sites to make sure they don't\nexpect 'auto x = t.dims()' to give you an x whose lifetime can validly\noutlive the tensor.\n\nI opted not to do a dims() to sizes() rename, because dims() also matches\nthe protobufs accessor.  Bad news!\n\nDifferential Revision: [D10111759](https://our.internmc.facebook.com/intern/diff/D10111759/)", "created_at": "2018-09-28T20:24:19Z", "updated_at": "2018-10-05T22:59:15Z", "closed_at": "2018-10-05T22:59:15Z", "merged_at": null, "merge_commit_sha": "c6c513598467135ebdc8347df496e86aeb668431", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12180/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12180/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12180/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/1544f1e4ac763e39726056a17cf9fc1ab2bdb27a", "head": {"label": "pytorch:export-D10111759", "ref": "export-D10111759", "sha": "1544f1e4ac763e39726056a17cf9fc1ab2bdb27a", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "5cb2b2358c3fa7b720a215e8845a167487a6410b", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12180"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12180"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/12180"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/12180/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12180/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12180/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/1544f1e4ac763e39726056a17cf9fc1ab2bdb27a"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Stack:<br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"black_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26ab.png\">\u26ab\ufe0f</g-emoji>\u00a0 <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"365028416\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12180\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12180/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12180\">#12180</a> Make caffe2::Tensor::dims() return an IntList instead of a const vector&amp;</strong>\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D10111759/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a></p>\n<p>I had to fix a lot of call sites, because a lot of places assume that<br>\nyou can actually get a const vector&amp;, and if the internal representation<br>\nof sizes in a tensor is NOT a vector, it's not possible to fulfill<br>\nthis API contract.</p>\n<p>Framework changes:</p>\n<ul>\n<li>I deleted TensorImpl::dims(); caffe2::Tensor::dims() just forwards to<br>\nsizes() now.</li>\n<li>De-templatized SetDims; now it is an explicit list of ArrayRef and<br>\nvariadic overloads.  This makes implicit conversions work again,<br>\nso I don't need to explicitly list the std::vector cases too.\n<ul>\n<li>As a knock-on effect, this causes Reset() to accept at::IntList as well as<br>\nconst std::vector&lt;int64_t&gt;&amp;</li>\n</ul>\n</li>\n<li>Edited variadic overloads of SetDims to all forward to the underlying<br>\narbitrary-dim implementation, reducing code duplication. (It's probably<br>\nmarginally less efficient in the new world.)</li>\n<li>Replace Tensor constructor accepting const std::vector&lt;int64_t&gt;&amp; with at::IntList</li>\n<li>Make MKLTensor accept ArrayRef along with vector in constructor and<br>\nReset (unfortunately, no implicit conversions here, since it's templated on<br>\nindex type.)</li>\n<li>There are a few other places, like cudnn, where I changed functions<br>\nthat previously took const std::vector&lt;int64_t&gt;&amp; to take at::IntList<br>\ninstead.</li>\n</ul>\n<p>Classification of call site changes:</p>\n<ul>\n<li>'const std::vector&lt;int64_t&gt;&amp; x_dims = x.dims()' ==&gt;<br>\n'at::IntList x_dims = x.dims()'</li>\n<li>'std::vector&lt;int64_t&gt; x_dims = x.dims()' ==&gt;<br>\n'std::vector&lt;int64_t&gt; x_dims = x.dims().vec()' (we need a copy!)<br>\nUsually this is because we're about to mutably modify the vector<br>\nto compute some new dimension.  However, it also very commonly occurs in the<br>\nform: 'x_dims_ = x.dims()' because we frequently cache sizes in operators.</li>\n<li>Instead of constructing std::vector&lt;int64_t&gt;{blah, blah}, construct an<br>\nat::IntList directly</li>\n</ul>\n<p>ArrayRef changes:</p>\n<ul>\n<li>cbegin()/cend() iterators, they operate the same aas begin()/end() because<br>\neverything on ArrayRef is const.</li>\n<li>Moved operator&lt;&lt; into ArrayRef.h, so that it's always available when<br>\nworking with ArrayRef.  I also templated it, so it now works on an<br>\nArrayRef of any type.</li>\n<li>Add operator== overload for ArrayRef, and also add variants to permit<br>\ncomparison of ArrayRef with std::vector, a very common operation.<br>\n(The non-templated version of operator== can get these automatically<br>\nvia implicit conversion, but with templates C++ refuses to do<br>\nany explicit conversions.)</li>\n</ul>\n<p>I'm planning to audit all dims() call sites to make sure they don't<br>\nexpect 'auto x = t.dims()' to give you an x whose lifetime can validly<br>\noutlive the tensor.</p>\n<p>I opted not to do a dims() to sizes() rename, because dims() also matches<br>\nthe protobufs accessor.  Bad news!</p>\n<p>Differential Revision: <a href=\"https://our.internmc.facebook.com/intern/diff/D10111759/\" rel=\"nofollow\">D10111759</a></p>", "body_text": "Stack:\n\u00a0\u00a0\u00a0\u00a0\u26ab\ufe0f\u00a0 #12180 Make caffe2::Tensor::dims() return an IntList instead of a const vector&\u00a0\u00a0\ud83d\udc9b\nI had to fix a lot of call sites, because a lot of places assume that\nyou can actually get a const vector&, and if the internal representation\nof sizes in a tensor is NOT a vector, it's not possible to fulfill\nthis API contract.\nFramework changes:\n\nI deleted TensorImpl::dims(); caffe2::Tensor::dims() just forwards to\nsizes() now.\nDe-templatized SetDims; now it is an explicit list of ArrayRef and\nvariadic overloads.  This makes implicit conversions work again,\nso I don't need to explicitly list the std::vector cases too.\n\nAs a knock-on effect, this causes Reset() to accept at::IntList as well as\nconst std::vector<int64_t>&\n\n\nEdited variadic overloads of SetDims to all forward to the underlying\narbitrary-dim implementation, reducing code duplication. (It's probably\nmarginally less efficient in the new world.)\nReplace Tensor constructor accepting const std::vector<int64_t>& with at::IntList\nMake MKLTensor accept ArrayRef along with vector in constructor and\nReset (unfortunately, no implicit conversions here, since it's templated on\nindex type.)\nThere are a few other places, like cudnn, where I changed functions\nthat previously took const std::vector<int64_t>& to take at::IntList\ninstead.\n\nClassification of call site changes:\n\n'const std::vector<int64_t>& x_dims = x.dims()' ==>\n'at::IntList x_dims = x.dims()'\n'std::vector<int64_t> x_dims = x.dims()' ==>\n'std::vector<int64_t> x_dims = x.dims().vec()' (we need a copy!)\nUsually this is because we're about to mutably modify the vector\nto compute some new dimension.  However, it also very commonly occurs in the\nform: 'x_dims_ = x.dims()' because we frequently cache sizes in operators.\nInstead of constructing std::vector<int64_t>{blah, blah}, construct an\nat::IntList directly\n\nArrayRef changes:\n\ncbegin()/cend() iterators, they operate the same aas begin()/end() because\neverything on ArrayRef is const.\nMoved operator<< into ArrayRef.h, so that it's always available when\nworking with ArrayRef.  I also templated it, so it now works on an\nArrayRef of any type.\nAdd operator== overload for ArrayRef, and also add variants to permit\ncomparison of ArrayRef with std::vector, a very common operation.\n(The non-templated version of operator== can get these automatically\nvia implicit conversion, but with templates C++ refuses to do\nany explicit conversions.)\n\nI'm planning to audit all dims() call sites to make sure they don't\nexpect 'auto x = t.dims()' to give you an x whose lifetime can validly\noutlive the tensor.\nI opted not to do a dims() to sizes() rename, because dims() also matches\nthe protobufs accessor.  Bad news!\nDifferential Revision: D10111759", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 1, "review_comments": 0, "maintainer_can_modify": false, "commits": 11, "additions": 361, "deletions": 298, "changed_files": 110}