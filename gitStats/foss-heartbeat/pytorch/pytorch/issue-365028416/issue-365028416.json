{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12180", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12180/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12180/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12180/events", "html_url": "https://github.com/pytorch/pytorch/pull/12180", "id": 365028416, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE5MDc2NDc2", "number": 12180, "title": "Make caffe2::Tensor::dims() return an IntList instead of a const vector&", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-28T20:24:19Z", "updated_at": "2018-10-05T22:59:15Z", "closed_at": "2018-10-05T22:59:15Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12180", "html_url": "https://github.com/pytorch/pytorch/pull/12180", "diff_url": "https://github.com/pytorch/pytorch/pull/12180.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12180.patch"}, "body_html": "<p>Stack:<br>\n\u00a0\u00a0\u00a0\u00a0<g-emoji class=\"g-emoji\" alias=\"black_circle\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/26ab.png\">\u26ab\ufe0f</g-emoji>\u00a0 <strong><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"365028416\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/12180\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/12180/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/12180\">#12180</a> Make caffe2::Tensor::dims() return an IntList instead of a const vector&amp;</strong>\u00a0\u00a0<a href=\"https://our.internmc.facebook.com/intern/diff/D10111759/\" rel=\"nofollow\"><g-emoji class=\"g-emoji\" alias=\"yellow_heart\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f49b.png\">\ud83d\udc9b</g-emoji></a></p>\n<p>I had to fix a lot of call sites, because a lot of places assume that<br>\nyou can actually get a const vector&amp;, and if the internal representation<br>\nof sizes in a tensor is NOT a vector, it's not possible to fulfill<br>\nthis API contract.</p>\n<p>Framework changes:</p>\n<ul>\n<li>I deleted TensorImpl::dims(); caffe2::Tensor::dims() just forwards to<br>\nsizes() now.</li>\n<li>De-templatized SetDims; now it is an explicit list of ArrayRef and<br>\nvariadic overloads.  This makes implicit conversions work again,<br>\nso I don't need to explicitly list the std::vector cases too.\n<ul>\n<li>As a knock-on effect, this causes Reset() to accept at::IntList as well as<br>\nconst std::vector&lt;int64_t&gt;&amp;</li>\n</ul>\n</li>\n<li>Edited variadic overloads of SetDims to all forward to the underlying<br>\narbitrary-dim implementation, reducing code duplication. (It's probably<br>\nmarginally less efficient in the new world.)</li>\n<li>Replace Tensor constructor accepting const std::vector&lt;int64_t&gt;&amp; with at::IntList</li>\n<li>Make MKLTensor accept ArrayRef along with vector in constructor and<br>\nReset (unfortunately, no implicit conversions here, since it's templated on<br>\nindex type.)</li>\n<li>There are a few other places, like cudnn, where I changed functions<br>\nthat previously took const std::vector&lt;int64_t&gt;&amp; to take at::IntList<br>\ninstead.</li>\n</ul>\n<p>Classification of call site changes:</p>\n<ul>\n<li>'const std::vector&lt;int64_t&gt;&amp; x_dims = x.dims()' ==&gt;<br>\n'at::IntList x_dims = x.dims()'</li>\n<li>'std::vector&lt;int64_t&gt; x_dims = x.dims()' ==&gt;<br>\n'std::vector&lt;int64_t&gt; x_dims = x.dims().vec()' (we need a copy!)<br>\nUsually this is because we're about to mutably modify the vector<br>\nto compute some new dimension.  However, it also very commonly occurs in the<br>\nform: 'x_dims_ = x.dims()' because we frequently cache sizes in operators.</li>\n<li>Instead of constructing std::vector&lt;int64_t&gt;{blah, blah}, construct an<br>\nat::IntList directly</li>\n</ul>\n<p>ArrayRef changes:</p>\n<ul>\n<li>cbegin()/cend() iterators, they operate the same aas begin()/end() because<br>\neverything on ArrayRef is const.</li>\n<li>Moved operator&lt;&lt; into ArrayRef.h, so that it's always available when<br>\nworking with ArrayRef.  I also templated it, so it now works on an<br>\nArrayRef of any type.</li>\n<li>Add operator== overload for ArrayRef, and also add variants to permit<br>\ncomparison of ArrayRef with std::vector, a very common operation.<br>\n(The non-templated version of operator== can get these automatically<br>\nvia implicit conversion, but with templates C++ refuses to do<br>\nany explicit conversions.)</li>\n</ul>\n<p>I'm planning to audit all dims() call sites to make sure they don't<br>\nexpect 'auto x = t.dims()' to give you an x whose lifetime can validly<br>\noutlive the tensor.</p>\n<p>I opted not to do a dims() to sizes() rename, because dims() also matches<br>\nthe protobufs accessor.  Bad news!</p>\n<p>Differential Revision: <a href=\"https://our.internmc.facebook.com/intern/diff/D10111759/\" rel=\"nofollow\">D10111759</a></p>", "body_text": "Stack:\n\u00a0\u00a0\u00a0\u00a0\u26ab\ufe0f\u00a0 #12180 Make caffe2::Tensor::dims() return an IntList instead of a const vector&\u00a0\u00a0\ud83d\udc9b\nI had to fix a lot of call sites, because a lot of places assume that\nyou can actually get a const vector&, and if the internal representation\nof sizes in a tensor is NOT a vector, it's not possible to fulfill\nthis API contract.\nFramework changes:\n\nI deleted TensorImpl::dims(); caffe2::Tensor::dims() just forwards to\nsizes() now.\nDe-templatized SetDims; now it is an explicit list of ArrayRef and\nvariadic overloads.  This makes implicit conversions work again,\nso I don't need to explicitly list the std::vector cases too.\n\nAs a knock-on effect, this causes Reset() to accept at::IntList as well as\nconst std::vector<int64_t>&\n\n\nEdited variadic overloads of SetDims to all forward to the underlying\narbitrary-dim implementation, reducing code duplication. (It's probably\nmarginally less efficient in the new world.)\nReplace Tensor constructor accepting const std::vector<int64_t>& with at::IntList\nMake MKLTensor accept ArrayRef along with vector in constructor and\nReset (unfortunately, no implicit conversions here, since it's templated on\nindex type.)\nThere are a few other places, like cudnn, where I changed functions\nthat previously took const std::vector<int64_t>& to take at::IntList\ninstead.\n\nClassification of call site changes:\n\n'const std::vector<int64_t>& x_dims = x.dims()' ==>\n'at::IntList x_dims = x.dims()'\n'std::vector<int64_t> x_dims = x.dims()' ==>\n'std::vector<int64_t> x_dims = x.dims().vec()' (we need a copy!)\nUsually this is because we're about to mutably modify the vector\nto compute some new dimension.  However, it also very commonly occurs in the\nform: 'x_dims_ = x.dims()' because we frequently cache sizes in operators.\nInstead of constructing std::vector<int64_t>{blah, blah}, construct an\nat::IntList directly\n\nArrayRef changes:\n\ncbegin()/cend() iterators, they operate the same aas begin()/end() because\neverything on ArrayRef is const.\nMoved operator<< into ArrayRef.h, so that it's always available when\nworking with ArrayRef.  I also templated it, so it now works on an\nArrayRef of any type.\nAdd operator== overload for ArrayRef, and also add variants to permit\ncomparison of ArrayRef with std::vector, a very common operation.\n(The non-templated version of operator== can get these automatically\nvia implicit conversion, but with templates C++ refuses to do\nany explicit conversions.)\n\nI'm planning to audit all dims() call sites to make sure they don't\nexpect 'auto x = t.dims()' to give you an x whose lifetime can validly\noutlive the tensor.\nI opted not to do a dims() to sizes() rename, because dims() also matches\nthe protobufs accessor.  Bad news!\nDifferential Revision: D10111759", "body": "Stack:\n&nbsp;&nbsp;&nbsp;&nbsp;:black_circle:&nbsp; **#12180 Make caffe2::Tensor::dims() return an IntList instead of a const vector&**&nbsp;&nbsp;[:yellow_heart:](https://our.internmc.facebook.com/intern/diff/D10111759/)\n\nI had to fix a lot of call sites, because a lot of places assume that\nyou can actually get a const vector&, and if the internal representation\nof sizes in a tensor is NOT a vector, it's not possible to fulfill\nthis API contract.\n\nFramework changes:\n- I deleted TensorImpl::dims(); caffe2::Tensor::dims() just forwards to\n  sizes() now.\n- De-templatized SetDims; now it is an explicit list of ArrayRef and\n  variadic overloads.  This makes implicit conversions work again,\n  so I don't need to explicitly list the std::vector cases too.\n  - As a knock-on effect, this causes Reset() to accept at::IntList as well as\n    const std::vector<int64_t>&\n- Edited variadic overloads of SetDims to all forward to the underlying\n  arbitrary-dim implementation, reducing code duplication. (It's probably\n  marginally less efficient in the new world.)\n- Replace Tensor constructor accepting const std::vector<int64_t>& with at::IntList\n- Make MKLTensor accept ArrayRef along with vector in constructor and\n  Reset (unfortunately, no implicit conversions here, since it's templated on\n  index type.)\n- There are a few other places, like cudnn, where I changed functions\n  that previously took const std::vector<int64_t>& to take at::IntList\n  instead.\n\nClassification of call site changes:\n- 'const std::vector<int64_t>& x_dims = x.dims()' ==>\n  'at::IntList x_dims = x.dims()'\n- 'std::vector<int64_t> x_dims = x.dims()' ==>\n  'std::vector<int64_t> x_dims = x.dims().vec()' (we need a copy!)\n  Usually this is because we're about to mutably modify the vector\n  to compute some new dimension.  However, it also very commonly occurs in the\n  form: 'x_dims_ = x.dims()' because we frequently cache sizes in operators.\n- Instead of constructing std::vector<int64_t>{blah, blah}, construct an\n  at::IntList directly\n\nArrayRef changes:\n- cbegin()/cend() iterators, they operate the same aas begin()/end() because\n  everything on ArrayRef is const.\n- Moved operator<< into ArrayRef.h, so that it's always available when\n  working with ArrayRef.  I also templated it, so it now works on an\n  ArrayRef of any type.\n- Add operator== overload for ArrayRef, and also add variants to permit\n  comparison of ArrayRef with std::vector, a very common operation.\n  (The non-templated version of operator== can get these automatically\n  via implicit conversion, but with templates C++ refuses to do\n  any explicit conversions.)\n\nI'm planning to audit all dims() call sites to make sure they don't\nexpect 'auto x = t.dims()' to give you an x whose lifetime can validly\noutlive the tensor.\n\nI opted not to do a dims() to sizes() rename, because dims() also matches\nthe protobufs accessor.  Bad news!\n\nDifferential Revision: [D10111759](https://our.internmc.facebook.com/intern/diff/D10111759/)"}