{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11480", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11480/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11480/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11480/events", "html_url": "https://github.com/pytorch/pytorch/issues/11480", "id": 358780944, "node_id": "MDU6SXNzdWUzNTg3ODA5NDQ=", "number": 11480, "title": "[jit] CUDA module submodules and parameters are not being registered correctly after export/import", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-10T20:26:26Z", "updated_at": "2018-09-26T16:09:32Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Repro:</p>\n<pre><code>import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nimport tempfile\nimport os\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\n        self.conv2_drop = nn.Dropout2d()\n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n\n    def forward(self, x):\n        x = F.relu(F.max_pool2d(self.conv1(x), 2))\n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(-1, 320)\n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\ndef save_load_ge(ge):\n    f = tempfile.NamedTemporaryFile(delete=False)\n    try:\n        f.close()\n        ge.save(f.name)\n        imported = torch.jit.load(f.name)\n    finally:\n        os.unlink(f.name)\n    return imported\n\n\ndevice = 'cuda'\nmodule = Net().to(device).eval()\ninputs_cuda = [torch.rand(5, 1, 28, 28, device='cuda')]\ninputs_cpu = [torch.rand(5, 1, 28, 28, device='cpu')]\nge = torch.jit.trace(module, inputs)\n\n# Test .cpu(), .cuda() on ge\nprint('Test .cpu(), .cuda() on ScriptModule')\nge_cpu = ge.cpu()\nge_cpu(*inputs_cpu)\nge_cuda = ge_cpu.cuda()\nge_cuda(*inputs_cuda)\n\n# Test .cpu(), .cuda() on ge after export/import\nprint('Test .cpu(), .cuda() after export/import')\nge = save_load_ge(ge)\nge_cuda = ge.cuda()\nge_cuda(*inputs_cuda)  # FAIL, still expecting CPU tensor\n</code></pre>", "body_text": "Repro:\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nimport tempfile\nimport os\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\n        self.conv2_drop = nn.Dropout2d()\n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n\n    def forward(self, x):\n        x = F.relu(F.max_pool2d(self.conv1(x), 2))\n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(-1, 320)\n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\ndef save_load_ge(ge):\n    f = tempfile.NamedTemporaryFile(delete=False)\n    try:\n        f.close()\n        ge.save(f.name)\n        imported = torch.jit.load(f.name)\n    finally:\n        os.unlink(f.name)\n    return imported\n\n\ndevice = 'cuda'\nmodule = Net().to(device).eval()\ninputs_cuda = [torch.rand(5, 1, 28, 28, device='cuda')]\ninputs_cpu = [torch.rand(5, 1, 28, 28, device='cpu')]\nge = torch.jit.trace(module, inputs)\n\n# Test .cpu(), .cuda() on ge\nprint('Test .cpu(), .cuda() on ScriptModule')\nge_cpu = ge.cpu()\nge_cpu(*inputs_cpu)\nge_cuda = ge_cpu.cuda()\nge_cuda(*inputs_cuda)\n\n# Test .cpu(), .cuda() on ge after export/import\nprint('Test .cpu(), .cuda() after export/import')\nge = save_load_ge(ge)\nge_cuda = ge.cuda()\nge_cuda(*inputs_cuda)  # FAIL, still expecting CPU tensor", "body": "Repro:\r\n```\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\n\r\nimport tempfile\r\nimport os\r\n\r\nclass Net(nn.Module):\r\n    def __init__(self):\r\n        super(Net, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\r\n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\r\n        self.conv2_drop = nn.Dropout2d()\r\n        self.fc1 = nn.Linear(320, 50)\r\n        self.fc2 = nn.Linear(50, 10)\r\n\r\n    def forward(self, x):\r\n        x = F.relu(F.max_pool2d(self.conv1(x), 2))\r\n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\r\n        x = x.view(-1, 320)\r\n        x = F.relu(self.fc1(x))\r\n        x = F.dropout(x, training=self.training)\r\n        x = self.fc2(x)\r\n        return F.log_softmax(x, dim=1)\r\n\r\ndef save_load_ge(ge):\r\n    f = tempfile.NamedTemporaryFile(delete=False)\r\n    try:\r\n        f.close()\r\n        ge.save(f.name)\r\n        imported = torch.jit.load(f.name)\r\n    finally:\r\n        os.unlink(f.name)\r\n    return imported\r\n\r\n\r\ndevice = 'cuda'\r\nmodule = Net().to(device).eval()\r\ninputs_cuda = [torch.rand(5, 1, 28, 28, device='cuda')]\r\ninputs_cpu = [torch.rand(5, 1, 28, 28, device='cpu')]\r\nge = torch.jit.trace(module, inputs)\r\n\r\n# Test .cpu(), .cuda() on ge\r\nprint('Test .cpu(), .cuda() on ScriptModule')\r\nge_cpu = ge.cpu()\r\nge_cpu(*inputs_cpu)\r\nge_cuda = ge_cpu.cuda()\r\nge_cuda(*inputs_cuda)\r\n\r\n# Test .cpu(), .cuda() on ge after export/import\r\nprint('Test .cpu(), .cuda() after export/import')\r\nge = save_load_ge(ge)\r\nge_cuda = ge.cuda()\r\nge_cuda(*inputs_cuda)  # FAIL, still expecting CPU tensor\r\n```"}