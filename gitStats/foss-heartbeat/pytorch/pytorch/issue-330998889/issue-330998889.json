{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8320", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8320/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8320/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8320/events", "html_url": "https://github.com/pytorch/pytorch/pull/8320", "id": 330998889, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkzODQ0MzAy", "number": 8320, "title": "[WIP] Use decorators to check CUDA feature availability in CI test", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-10T20:13:46Z", "updated_at": "2018-07-10T16:50:07Z", "closed_at": "2018-07-10T16:50:07Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8320", "html_url": "https://github.com/pytorch/pytorch/pull/8320", "diff_url": "https://github.com/pytorch/pytorch/pull/8320.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8320.patch"}, "body_html": "<p>To avoid CUDA OOM error on Windows, we need to use <code>__name__ == '__main__'</code> to protect the import of flags from <code>common_cuda.py</code>. However, the <code>unittest.skipIf</code> decorators expect the <code>TEST_CUDA</code> and other flags to be available regardless of whether it's in <code>__name__ == '__main__'</code>.</p>\n<p>The current solution is to have new decorators that perform lazy evaluation and check the flags only when we are in <code>__name__ == '__main__'</code>.</p>", "body_text": "To avoid CUDA OOM error on Windows, we need to use __name__ == '__main__' to protect the import of flags from common_cuda.py. However, the unittest.skipIf decorators expect the TEST_CUDA and other flags to be available regardless of whether it's in __name__ == '__main__'.\nThe current solution is to have new decorators that perform lazy evaluation and check the flags only when we are in __name__ == '__main__'.", "body": "To avoid CUDA OOM error on Windows, we need to use `__name__ == '__main__'` to protect the import of flags from `common_cuda.py`. However, the `unittest.skipIf` decorators expect the `TEST_CUDA` and other flags to be available regardless of whether it's in `__name__ == '__main__'`.\r\n\r\nThe current solution is to have new decorators that perform lazy evaluation and check the flags only when we are in `__name__ == '__main__'`."}