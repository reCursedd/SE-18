{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202242312", "pull_request_review_id": 136904274, "id": 202242312, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjI0MjMxMg==", "diff_hunk": "@@ -338,19 +338,57 @@ include_directories(SYSTEM ${EIGEN3_INCLUDE_DIR})\n \n # ---[ Python + Numpy\n if(BUILD_PYTHON)\n-  # Put the currently-activated python version at the front of\n-  # Python_ADDITIONAL_VERSIONS so that it is found first. Otherwise there may\n-  # be mismatches between Python executables and libraries used at different\n-  # stages of build time and at runtime\n-  execute_process(\n-    COMMAND \"python\" -c \"import sys; sys.stdout.write('%s.%s' % (sys.version_info.major, sys.version_info.minor))\"\n-    RESULT_VARIABLE _exitcode\n-    OUTPUT_VARIABLE _py_version)\n-  set(Python_ADDITIONAL_VERSIONS)\n-  if(${_exitcode} EQUAL 0)\n-    list(APPEND Python_ADDITIONAL_VERSIONS \"${_py_version}\")\n+  # If not given a Python installation, then use the current active Python\n+  if(NOT DEFINED PYTHON_EXECUTABLE)\n+    execute_process(\n+      COMMAND \"which\" \"python\" RESULT_VARIABLE _exitcode OUTPUT_VARIABLE _py_exe)\n+    if(${_exitcode} EQUAL 0)\n+      string(STRIP ${_py_exe} PYTHON_EXECUTABLE)\n+      message(STATUS \"Setting Python to ${PYTHON_EXECUTABLE}\")\n+    endif()\n+  endif()\n+\n+  # Check that Python works\n+  if(DEFINED PYTHON_EXECUTABLE)\n+    execute_process(\n+        COMMAND \"${PYTHON_EXECUTABLE}\" \"--version\"\n+        RESULT_VARIABLE _exitcode)\n+    if(NOT ${_exitcode} EQUAL 0)\n+      message(FATAL_ERROR \"The Python executable ${PYTHON_EXECUTABLE} cannot be run. Make sure that it is an absolute path.\")\n+    endif()\n   endif()\n-  list(APPEND Python_ADDITIONAL_VERSIONS 3.6 3.5 2.8 2.7 2.6)\n+\n+  # Seed PYTHON_INCLUDE_DIR and PYTHON_LIBRARY to be consistent with the\n+  # executable that we already found (if we didn't actually find an executable\n+  # then these will just use \"python\", but at least they'll be consistent with\n+  # each other).\n+  if(NOT DEFINED PYTHON_INCLUDE_DIR)\n+    # distutils.sysconfig, if it's installed, is more accurate than sysconfig,\n+    # which sometimes outputs directories that do not exist\n+    pycmd_no_exit(_py_inc _exitcode \"from distutils import sysconfig; print(sysconfig.get_python_inc())\")\n+    if(\"${_exitcode}\" EQUAL 0 AND IS_DIRECTORY \"${_py_inc}\")\n+      SET(PYTHON_INCLUDE_DIR \"${_py_inc}\")\n+      message(STATUS \"Setting Python's include dir to ${_py_inc} from distutils.sysconfig\")\n+    else()\n+      pycmd_no_exit(_py_inc _exitcode \"from sysconfig import get_paths; print(get_paths()['include'])\")\n+      if(\"${_exitcode}\" EQUAL 0 AND IS_DIRECTORY \"${_py_inc}\")\n+        SET(PYTHON_INCLUDE_DIR \"${_py_inc}\")\n+        message(STATUS \"Setting Python's include dir to ${_py_inc} from sysconfig\")\n+      endif()\n+    endif()\n+  endif(NOT DEFINED PYTHON_INCLUDE_DIR)\n+\n+  if(NOT DEFINED PYTHON_LIBRARY)\n+    pycmd_no_exit(_py_lib _exitcode \"from sysconfig import get_paths; print(get_paths()['stdlib'])\")\n+    if(\"${_exitcode}\" EQUAL 0 AND EXISTS \"${_py_lib}\" AND EXISTS \"${_py_lib}\")\n+      SET(PYTHON_LIBRARY \"${_py_lib}\")\n+      message(STATUS \"Setting Python's library to ${_py_lib}\")\n+    endif()\n+  endif(NOT DEFINED PYTHON_LIBRARY)\n+\n+  # These should fill in the rest of the variables, like versions, but resepct", "path": "cmake/Dependencies.cmake", "position": 64, "original_position": 64, "commit_id": "4b92fc33e19ce628be38ca1a938b456d8be0f1d7", "original_commit_id": "4b92fc33e19ce628be38ca1a938b456d8be0f1d7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "respect", "created_at": "2018-07-13T04:43:50Z", "updated_at": "2018-11-23T15:47:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/9361#discussion_r202242312", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9361", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202242312"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9361#discussion_r202242312"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9361"}}, "body_html": "<p>respect</p>", "body_text": "respect"}