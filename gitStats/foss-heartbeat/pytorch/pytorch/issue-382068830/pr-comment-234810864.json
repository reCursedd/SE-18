{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234810864", "pull_request_review_id": 176533307, "id": 234810864, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgxMDg2NA==", "diff_hunk": "@@ -292,8 +292,10 @@ using SizeType = uint64_t;\n #define SYSCHECK(expr)                                        \\\n   {                                                           \\\n     errno = 0;                                                \\\n-    auto ___output = (expr);                                  \\\n-    (void)___output;                                          \\\n+    while (errno != EINTR) {                                  \\", "path": "torch/lib/c10d/Utils.hpp", "position": null, "original_position": 6, "commit_id": "f9f2f89832cd4f9daac80a4941179e812700952a", "original_commit_id": "133d18097e7439c4812acabba71fc87989b71759", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "body": "Unlimited retry on EINTR is the way to go... A syscall may be interrupted many times especially if it is long running (e.g. think of `poll` without timeout to signal some rare event). I found a Python PEP that changed Python to do this at the lowest syscall wrapper level, see https://www.python.org/dev/peps/pep-0475/#implementation. The difference between Python and here is that in Python you need to check for Python-side exceptions in the signal handlers before retrying the system call. We don't have an equivalent to that and rely on Python shutting down to tear down all C++ side.", "created_at": "2018-11-19T22:45:46Z", "updated_at": "2018-11-23T15:55:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/14180#discussion_r234810864", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14180", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234810864"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14180#discussion_r234810864"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14180"}}, "body_html": "<p>Unlimited retry on EINTR is the way to go... A syscall may be interrupted many times especially if it is long running (e.g. think of <code>poll</code> without timeout to signal some rare event). I found a Python PEP that changed Python to do this at the lowest syscall wrapper level, see <a href=\"https://www.python.org/dev/peps/pep-0475/#implementation\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0475/#implementation</a>. The difference between Python and here is that in Python you need to check for Python-side exceptions in the signal handlers before retrying the system call. We don't have an equivalent to that and rely on Python shutting down to tear down all C++ side.</p>", "body_text": "Unlimited retry on EINTR is the way to go... A syscall may be interrupted many times especially if it is long running (e.g. think of poll without timeout to signal some rare event). I found a Python PEP that changed Python to do this at the lowest syscall wrapper level, see https://www.python.org/dev/peps/pep-0475/#implementation. The difference between Python and here is that in Python you need to check for Python-side exceptions in the signal handlers before retrying the system call. We don't have an equivalent to that and rely on Python shutting down to tear down all C++ side.", "in_reply_to_id": 234503503}