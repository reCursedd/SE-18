{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143002756", "pull_request_review_id": 67448540, "id": 143002756, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzAwMjc1Ng==", "diff_hunk": "@@ -23,6 +23,12 @@ bool micropb_encode<double, nullptr>(pb_ostream_t *stream, double* arg) {\n   return pb_encode_fixed64(stream, static_cast<void*>(arg));\n }\n \n+template <>\n+bool micropb_encode<Dimension, nullptr>(pb_ostream_t *stream, Dimension* arg) {", "path": "torch/csrc/onnx/onnx.cpp", "position": 5, "original_position": 5, "commit_id": "6d67743d67ea3a892c296f8df9afe4f75d9cec2e", "original_commit_id": "647b63b7ca5699a4c32cb1c39e09a7392c6f0561", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "When I wrote `micropb_encode`, the original intent was that it covered exactly \"native\" protobuf types; anything non-standard would get a `MicroProto` class. Was there something that made adding `Dimension` here much more convenient? Curious.", "created_at": "2017-10-05T17:24:24Z", "updated_at": "2018-11-23T15:35:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/2989#discussion_r143002756", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2989", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143002756"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2989#discussion_r143002756"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2989"}}, "body_html": "<p>When I wrote <code>micropb_encode</code>, the original intent was that it covered exactly \"native\" protobuf types; anything non-standard would get a <code>MicroProto</code> class. Was there something that made adding <code>Dimension</code> here much more convenient? Curious.</p>", "body_text": "When I wrote micropb_encode, the original intent was that it covered exactly \"native\" protobuf types; anything non-standard would get a MicroProto class. Was there something that made adding Dimension here much more convenient? Curious."}