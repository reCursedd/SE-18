{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3073", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3073/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3073/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3073/events", "html_url": "https://github.com/pytorch/pytorch/issues/3073", "id": 264661330, "node_id": "MDU6SXNzdWUyNjQ2NjEzMzA=", "number": 3073, "title": "Triangular system solver using BLAS", "user": {"login": "juancamilog", "id": 2013726, "node_id": "MDQ6VXNlcjIwMTM3MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2013726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juancamilog", "html_url": "https://github.com/juancamilog", "followers_url": "https://api.github.com/users/juancamilog/followers", "following_url": "https://api.github.com/users/juancamilog/following{/other_user}", "gists_url": "https://api.github.com/users/juancamilog/gists{/gist_id}", "starred_url": "https://api.github.com/users/juancamilog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juancamilog/subscriptions", "organizations_url": "https://api.github.com/users/juancamilog/orgs", "repos_url": "https://api.github.com/users/juancamilog/repos", "events_url": "https://api.github.com/users/juancamilog/events{/privacy}", "received_events_url": "https://api.github.com/users/juancamilog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-10-11T16:54:48Z", "updated_at": "2018-04-17T13:27:33Z", "closed_at": "2018-04-17T13:27:33Z", "author_association": "NONE", "body_html": "<p>CUDA does not implement the trtrs function for the triangular solver operation. However, through CUBLAS, it provides the trsm and trsv functions, which appear to do exactly the same as trtrs.</p>\n<p>As far as I can tell, common CPU BLAS implementations provide the trsm and trsv functions (e.g. OpenBLAS and MKL). MAGMA also provides an implementation of both.</p>\n<p>This feature would allow for faster computation of the backward function for Cholesky factorization (potrf). both on CPU and GPU. <a href=\"https://github.com/pytorch/pytorch/blob/14d8c034245708c0c9fb792a955223241ddaee78/torch/autograd/_functions/linalg.py#L143\">The current implementation</a> uses a solver for general matrices, which requires computing an LU factorization (done internally in gesv). Using the triangular system solver, the factorization step is no longer required.</p>\n<p>Cholesky factorization and triangular system solve operations are commonplace in Bayesian machine learning methods, when dealing with Gaussian distributions.</p>", "body_text": "CUDA does not implement the trtrs function for the triangular solver operation. However, through CUBLAS, it provides the trsm and trsv functions, which appear to do exactly the same as trtrs.\nAs far as I can tell, common CPU BLAS implementations provide the trsm and trsv functions (e.g. OpenBLAS and MKL). MAGMA also provides an implementation of both.\nThis feature would allow for faster computation of the backward function for Cholesky factorization (potrf). both on CPU and GPU. The current implementation uses a solver for general matrices, which requires computing an LU factorization (done internally in gesv). Using the triangular system solver, the factorization step is no longer required.\nCholesky factorization and triangular system solve operations are commonplace in Bayesian machine learning methods, when dealing with Gaussian distributions.", "body": "CUDA does not implement the trtrs function for the triangular solver operation. However, through CUBLAS, it provides the trsm and trsv functions, which appear to do exactly the same as trtrs.\r\n\r\nAs far as I can tell, common CPU BLAS implementations provide the trsm and trsv functions (e.g. OpenBLAS and MKL). MAGMA also provides an implementation of both.\r\n\r\nThis feature would allow for faster computation of the backward function for Cholesky factorization (potrf). both on CPU and GPU. [The current implementation](https://github.com/pytorch/pytorch/blob/14d8c034245708c0c9fb792a955223241ddaee78/torch/autograd/_functions/linalg.py#L143) uses a solver for general matrices, which requires computing an LU factorization (done internally in gesv). Using the triangular system solver, the factorization step is no longer required.\r\n\r\nCholesky factorization and triangular system solve operations are commonplace in Bayesian machine learning methods, when dealing with Gaussian distributions."}