{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/350084431", "html_url": "https://github.com/pytorch/pytorch/issues/3073#issuecomment-350084431", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3073", "id": 350084431, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA4NDQzMQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-07T20:26:53Z", "updated_at": "2017-12-07T20:26:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Actually, together with many other linalg methods, both CPU and GPU <code>potrf</code> now all directly using LAPACK/MAGMA native <code>potrf</code> implementation:</p>\n<p>CPU: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/14d8c034245708c0c9fb792a955223241ddaee78/torch/lib/TH/generic/THTensorLapack.c#L590-L612\">pytorch/torch/lib/TH/generic/THTensorLapack.c</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 590 to 612\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/14d8c034245708c0c9fb792a955223241ddaee78\">14d8c03</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L590\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"590\"></td>\n          <td id=\"LC590\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">void</span> <span class=\"pl-en\">THTensor_</span>(potrf)(THTensor *ra_, THTensor *a, <span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span> *uplo) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L591\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"591\"></td>\n          <td id=\"LC591\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L592\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"592\"></td>\n          <td id=\"LC592\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (a == <span class=\"pl-c1\">NULL</span>) a = ra_; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L593\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"593\"></td>\n          <td id=\"LC593\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THArgCheck</span>(a-&gt;<span class=\"pl-smi\">nDimension</span> == <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A should be 2 dimensional<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L594\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"594\"></td>\n          <td id=\"LC594\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THArgCheck</span>(a-&gt;<span class=\"pl-smi\">size</span>[<span class=\"pl-c1\">0</span>] == a-&gt;<span class=\"pl-smi\">size</span>[<span class=\"pl-c1\">1</span>], <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A should be square<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L595\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"595\"></td>\n          <td id=\"LC595\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L596\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"596\"></td>\n          <td id=\"LC596\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">int</span> n, lda, info; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L597\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"597\"></td>\n          <td id=\"LC597\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   THTensor *ra__ = <span class=\"pl-c1\">NULL</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L598\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"598\"></td>\n          <td id=\"LC598\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L599\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"599\"></td>\n          <td id=\"LC599\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   ra__ = <span class=\"pl-c1\">THTensor_</span>(cloneColumnMajor)(ra_, a); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L600\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"600\"></td>\n          <td id=\"LC600\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L601\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"601\"></td>\n          <td id=\"LC601\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   n = ra__-&gt;<span class=\"pl-smi\">size</span>[<span class=\"pl-c1\">0</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L602\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"602\"></td>\n          <td id=\"LC602\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   lda = n; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L603\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"603\"></td>\n          <td id=\"LC603\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L604\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"604\"></td>\n          <td id=\"LC604\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Run Factorization <span class=\"pl-c\">*/</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L605\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"605\"></td>\n          <td id=\"LC605\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THLapack_</span>(potrf)(uplo[<span class=\"pl-c1\">0</span>], n, <span class=\"pl-c1\">THTensor_</span>(data)(ra__), lda, &amp;info); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L606\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"606\"></td>\n          <td id=\"LC606\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THLapackCheckWithCleanup</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Lapack Error in <span class=\"pl-c1\">%s</span> : the leading minor of order <span class=\"pl-c1\">%d</span> is not positive definite<span class=\"pl-pds\">\"</span></span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L607\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"607\"></td>\n          <td id=\"LC607\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                            <span class=\"pl-c1\">THCleanup</span>(<span class=\"pl-c1\">THTensor_</span>(<span class=\"pl-c1\">free</span>)(ra__);), </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L608\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"608\"></td>\n          <td id=\"LC608\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>potrf<span class=\"pl-pds\">\"</span></span>, info, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L609\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"609\"></td>\n          <td id=\"LC609\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L610\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"610\"></td>\n          <td id=\"LC610\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THTensor_</span>(clearUpLoTriangle)(ra__, uplo); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L611\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"611\"></td>\n          <td id=\"LC611\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THTensor_</span>(freeCopyTo)(ra__, ra_); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L612\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"612\"></td>\n          <td id=\"LC612\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nGPU: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/14d8c034245708c0c9fb792a955223241ddaee78/torch/lib/THC/generic/THCTensorMathMagma.cu#L519-L552\">pytorch/torch/lib/THC/generic/THCTensorMathMagma.cu</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 519 to 552\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/14d8c034245708c0c9fb792a955223241ddaee78\">14d8c03</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L519\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"519\"></td>\n          <td id=\"LC519\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> THC_API <span class=\"pl-k\">void</span> <span class=\"pl-en\">THCTensor_</span>(potrf)(THCState *state, THCTensor *ra_, THCTensor *a, <span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span> *uplo) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L520\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"520\"></td>\n          <td id=\"LC520\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L521\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"521\"></td>\n          <td id=\"LC521\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">ifdef</span> USE_MAGMA </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L522\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"522\"></td>\n          <td id=\"LC522\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THArgCheck</span>(a-&gt;<span class=\"pl-smi\">nDimension</span> == <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A should be 2 dimensional<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L523\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"523\"></td>\n          <td id=\"LC523\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THArgCheck</span>(a-&gt;<span class=\"pl-smi\">size</span>[<span class=\"pl-c1\">0</span>] == a-&gt;<span class=\"pl-smi\">size</span>[<span class=\"pl-c1\">1</span>], <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A should be square<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L524\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"524\"></td>\n          <td id=\"LC524\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L525\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"525\"></td>\n          <td id=\"LC525\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">int</span> n = a-&gt;<span class=\"pl-smi\">size</span>[<span class=\"pl-c1\">0</span>]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L526\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"526\"></td>\n          <td id=\"LC526\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">magma_uplo_t</span> ul = uplo[<span class=\"pl-c1\">0</span>] == <span class=\"pl-s\"><span class=\"pl-pds\">'</span>U<span class=\"pl-pds\">'</span></span> ?  MagmaUpper : MagmaLower; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L527\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"527\"></td>\n          <td id=\"LC527\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L528\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"528\"></td>\n          <td id=\"LC528\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   THCTensor *input = <span class=\"pl-c1\">THCTensor_</span>(newColumnMajor)(state, ra_, a); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L529\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"529\"></td>\n          <td id=\"LC529\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   real *input_data = <span class=\"pl-c1\">THCTensor_</span>(data)(state, input); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L530\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"530\"></td>\n          <td id=\"LC530\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L531\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"531\"></td>\n          <td id=\"LC531\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">int</span> info; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L532\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"532\"></td>\n          <td id=\"LC532\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">if</span> defined(THC_REAL_IS_FLOAT) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L533\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"533\"></td>\n          <td id=\"LC533\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">magma_spotrf_gpu</span>(ul, n, input_data, n, &amp;info); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L534\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"534\"></td>\n          <td id=\"LC534\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">else</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L535\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"535\"></td>\n          <td id=\"LC535\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">magma_dpotrf_gpu</span>(ul, n, input_data, n, &amp;info); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L536\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"536\"></td>\n          <td id=\"LC536\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">endif</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L537\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"537\"></td>\n          <td id=\"LC537\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L538\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"538\"></td>\n          <td id=\"LC538\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> check error value</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L539\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"539\"></td>\n          <td id=\"LC539\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (info &gt; <span class=\"pl-c1\">0</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L540\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"540\"></td>\n          <td id=\"LC540\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">THError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MAGMA potrf : A(%d,%d) is 0, A cannot be factorized<span class=\"pl-pds\">\"</span></span>, info, info); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L541\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"541\"></td>\n          <td id=\"LC541\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (info &lt; <span class=\"pl-c1\">0</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L542\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"542\"></td>\n          <td id=\"LC542\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">THError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MAGMA potrf : Argument %d : illegal value<span class=\"pl-pds\">\"</span></span>, -info); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L543\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"543\"></td>\n          <td id=\"LC543\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L544\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"544\"></td>\n          <td id=\"LC544\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (uplo[<span class=\"pl-c1\">0</span>] == <span class=\"pl-s\"><span class=\"pl-pds\">'</span>U<span class=\"pl-pds\">'</span></span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L545\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"545\"></td>\n          <td id=\"LC545\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">THCTensor_</span>(triu)(state, ra_, input, <span class=\"pl-c1\">0</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L546\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"546\"></td>\n          <td id=\"LC546\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } <span class=\"pl-k\">else</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L547\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"547\"></td>\n          <td id=\"LC547\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">THCTensor_</span>(tril)(state, ra_, input, <span class=\"pl-c1\">0</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L548\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"548\"></td>\n          <td id=\"LC548\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L549\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"549\"></td>\n          <td id=\"LC549\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THCTensor_</span>(<span class=\"pl-c1\">free</span>)(state, input); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L550\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"550\"></td>\n          <td id=\"LC550\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">else</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L551\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"551\"></td>\n          <td id=\"LC551\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">THError</span>(<span class=\"pl-c1\">NoMagma</span>(potrf)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L552\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"552\"></td>\n          <td id=\"LC552\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">endif</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "Actually, together with many other linalg methods, both CPU and GPU potrf now all directly using LAPACK/MAGMA native potrf implementation:\nCPU: \n  \n    \n      pytorch/torch/lib/TH/generic/THTensorLapack.c\n    \n    \n        Lines 590 to 612\n      in\n      14d8c03\n    \n    \n    \n    \n\n        \n          \n           void THTensor_(potrf)(THTensor *ra_, THTensor *a, const char *uplo) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             if (a == NULL) a = ra_; \n        \n\n        \n          \n             THArgCheck(a->nDimension == 2, 1, \"A should be 2 dimensional\"); \n        \n\n        \n          \n             THArgCheck(a->size[0] == a->size[1], 1, \"A should be square\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n             int n, lda, info; \n        \n\n        \n          \n             THTensor *ra__ = NULL; \n        \n\n        \n          \n            \n        \n\n        \n          \n             ra__ = THTensor_(cloneColumnMajor)(ra_, a); \n        \n\n        \n          \n            \n        \n\n        \n          \n             n = ra__->size[0]; \n        \n\n        \n          \n             lda = n; \n        \n\n        \n          \n            \n        \n\n        \n          \n             /* Run Factorization */ \n        \n\n        \n          \n             THLapack_(potrf)(uplo[0], n, THTensor_(data)(ra__), lda, &info); \n        \n\n        \n          \n             THLapackCheckWithCleanup(\"Lapack Error in %s : the leading minor of order %d is not positive definite\", \n        \n\n        \n          \n                                      THCleanup(THTensor_(free)(ra__);), \n        \n\n        \n          \n                                      \"potrf\", info, \"\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n             THTensor_(clearUpLoTriangle)(ra__, uplo); \n        \n\n        \n          \n             THTensor_(freeCopyTo)(ra__, ra_); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nGPU: \n  \n    \n      pytorch/torch/lib/THC/generic/THCTensorMathMagma.cu\n    \n    \n        Lines 519 to 552\n      in\n      14d8c03\n    \n    \n    \n    \n\n        \n          \n           THC_API void THCTensor_(potrf)(THCState *state, THCTensor *ra_, THCTensor *a, const char *uplo) \n        \n\n        \n          \n           { \n        \n\n        \n          \n           #ifdef USE_MAGMA \n        \n\n        \n          \n             THArgCheck(a->nDimension == 2, 2, \"A should be 2 dimensional\"); \n        \n\n        \n          \n             THArgCheck(a->size[0] == a->size[1], 2, \"A should be square\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n             int n = a->size[0]; \n        \n\n        \n          \n             magma_uplo_t ul = uplo[0] == 'U' ?  MagmaUpper : MagmaLower; \n        \n\n        \n          \n            \n        \n\n        \n          \n             THCTensor *input = THCTensor_(newColumnMajor)(state, ra_, a); \n        \n\n        \n          \n             real *input_data = THCTensor_(data)(state, input); \n        \n\n        \n          \n            \n        \n\n        \n          \n             int info; \n        \n\n        \n          \n           #if defined(THC_REAL_IS_FLOAT) \n        \n\n        \n          \n             magma_spotrf_gpu(ul, n, input_data, n, &info); \n        \n\n        \n          \n           #else \n        \n\n        \n          \n             magma_dpotrf_gpu(ul, n, input_data, n, &info); \n        \n\n        \n          \n           #endif \n        \n\n        \n          \n            \n        \n\n        \n          \n             // check error value \n        \n\n        \n          \n             if (info > 0) \n        \n\n        \n          \n               THError(\"MAGMA potrf : A(%d,%d) is 0, A cannot be factorized\", info, info); \n        \n\n        \n          \n             else if (info < 0) \n        \n\n        \n          \n               THError(\"MAGMA potrf : Argument %d : illegal value\", -info); \n        \n\n        \n          \n            \n        \n\n        \n          \n             if (uplo[0] == 'U') { \n        \n\n        \n          \n               THCTensor_(triu)(state, ra_, input, 0); \n        \n\n        \n          \n             } else { \n        \n\n        \n          \n               THCTensor_(tril)(state, ra_, input, 0); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             THCTensor_(free)(state, input); \n        \n\n        \n          \n           #else \n        \n\n        \n          \n             THError(NoMagma(potrf)); \n        \n\n        \n          \n           #endif", "body": "Actually, together with many other linalg methods, both CPU and GPU `potrf` now all directly using LAPACK/MAGMA native `potrf` implementation:\r\n\r\nCPU: https://github.com/pytorch/pytorch/blob/14d8c034245708c0c9fb792a955223241ddaee78/torch/lib/TH/generic/THTensorLapack.c#L590-L612\r\nGPU: https://github.com/pytorch/pytorch/blob/14d8c034245708c0c9fb792a955223241ddaee78/torch/lib/THC/generic/THCTensorMathMagma.cu#L519-L552"}