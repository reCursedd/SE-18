{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1603", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1603/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1603/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1603/events", "html_url": "https://github.com/pytorch/pytorch/pull/1603", "id": 230186800, "node_id": "MDExOlB1bGxSZXF1ZXN0MTIxNjQyNDg1", "number": 1603, "title": "Fast transposed copy", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-20T23:55:17Z", "updated_at": "2018-11-23T15:33:31Z", "closed_at": "2017-05-25T20:07:17Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1603", "html_url": "https://github.com/pytorch/pytorch/pull/1603", "diff_url": "https://github.com/pytorch/pytorch/pull/1603.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1603.patch"}, "body_html": "<p>Write a blocked copy for the special case of transposed copy. This can be generalized to probably almost any src and dst that each have a stride-1 dimension... but that requires more work. This is probably the most common case and it's easy.</p>\n<p>On my machine I saw a 10x speedup.</p>\n<pre><code>import torch\nfrom timeit import default_timer as timer\n\nt = torch.FloatTensor(1000000, 1000).zero_()\nprint(timer() - start)\n\nt.t().contiguous() # will trigger the fast kernel\n\nstart = timer()\ns = t.view(t.size(0), t.size(1), 1).transpose(0, 1).contiguous() # will trigger the slow kernel\nprint(timer() - start)\n</code></pre>\n<p>5.508859225985361<br>\n47.43368865197408</p>\n<p>P.S. I did no experimentation to pick an optimal BLOCK_SZ, there may be a better value.</p>", "body_text": "Write a blocked copy for the special case of transposed copy. This can be generalized to probably almost any src and dst that each have a stride-1 dimension... but that requires more work. This is probably the most common case and it's easy.\nOn my machine I saw a 10x speedup.\nimport torch\nfrom timeit import default_timer as timer\n\nt = torch.FloatTensor(1000000, 1000).zero_()\nprint(timer() - start)\n\nt.t().contiguous() # will trigger the fast kernel\n\nstart = timer()\ns = t.view(t.size(0), t.size(1), 1).transpose(0, 1).contiguous() # will trigger the slow kernel\nprint(timer() - start)\n\n5.508859225985361\n47.43368865197408\nP.S. I did no experimentation to pick an optimal BLOCK_SZ, there may be a better value.", "body": "Write a blocked copy for the special case of transposed copy. This can be generalized to probably almost any src and dst that each have a stride-1 dimension... but that requires more work. This is probably the most common case and it's easy.\r\n\r\nOn my machine I saw a 10x speedup.\r\n\r\n```\r\nimport torch\r\nfrom timeit import default_timer as timer\r\n\r\nt = torch.FloatTensor(1000000, 1000).zero_()\r\nprint(timer() - start)\r\n\r\nt.t().contiguous() # will trigger the fast kernel\r\n\r\nstart = timer()\r\ns = t.view(t.size(0), t.size(1), 1).transpose(0, 1).contiguous() # will trigger the slow kernel\r\nprint(timer() - start)\r\n```\r\n5.508859225985361\r\n47.43368865197408\r\n\r\nP.S. I did no experimentation to pick an optimal BLOCK_SZ, there may be a better value."}