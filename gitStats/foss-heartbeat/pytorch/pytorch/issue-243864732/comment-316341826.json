{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/316341826", "html_url": "https://github.com/pytorch/pytorch/issues/2147#issuecomment-316341826", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2147", "id": 316341826, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjM0MTgyNg==", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-19T10:24:46Z", "updated_at": "2017-07-19T10:24:46Z", "author_association": "MEMBER", "body_html": "<p>@YujieDengJames The issue I referenced is exactly what you are asking for.<br>\nInstead of summing the elements on the mini-batch, having the ability of returning each one of them separately. Something like</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">mse_loss</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>, <span class=\"pl-smi\">size_average</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-smi\">per_element</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    loss_per_element <span class=\"pl-k\">=</span> (x <span class=\"pl-k\">-</span> y) <span class=\"pl-k\">**</span> <span class=\"pl-c1\">2</span>\n    <span class=\"pl-k\">if</span> per_element:\n        <span class=\"pl-k\">return</span> loss_per_element\n    <span class=\"pl-k\">if</span> size_average:\n        <span class=\"pl-k\">return</span> loss_per_element.mean()\n    <span class=\"pl-k\">return</span> loss_per_element.sum()</pre></div>", "body_text": "@YujieDengJames The issue I referenced is exactly what you are asking for.\nInstead of summing the elements on the mini-batch, having the ability of returning each one of them separately. Something like\ndef mse_loss(x, y, size_average=False, per_element=False):\n    loss_per_element = (x - y) ** 2\n    if per_element:\n        return loss_per_element\n    if size_average:\n        return loss_per_element.mean()\n    return loss_per_element.sum()", "body": "@YujieDengJames The issue I referenced is exactly what you are asking for.\r\nInstead of summing the elements on the mini-batch, having the ability of returning each one of them separately. Something like\r\n```python\r\ndef mse_loss(x, y, size_average=False, per_element=False):\r\n    loss_per_element = (x - y) ** 2\r\n    if per_element:\r\n        return loss_per_element\r\n    if size_average:\r\n        return loss_per_element.mean()\r\n    return loss_per_element.sum()\r\n```"}