{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13219", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13219/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13219/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13219/events", "html_url": "https://github.com/pytorch/pytorch/issues/13219", "id": 374711198, "node_id": "MDU6SXNzdWUzNzQ3MTExOTg=", "number": 13219, "title": "RuntimeError: CuDNN error: CUDNN_STATUS_MAPPING_ERROR", "user": {"login": "shiyinw", "id": 23162601, "node_id": "MDQ6VXNlcjIzMTYyNjAx", "avatar_url": "https://avatars1.githubusercontent.com/u/23162601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shiyinw", "html_url": "https://github.com/shiyinw", "followers_url": "https://api.github.com/users/shiyinw/followers", "following_url": "https://api.github.com/users/shiyinw/following{/other_user}", "gists_url": "https://api.github.com/users/shiyinw/gists{/gist_id}", "starred_url": "https://api.github.com/users/shiyinw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shiyinw/subscriptions", "organizations_url": "https://api.github.com/users/shiyinw/orgs", "repos_url": "https://api.github.com/users/shiyinw/repos", "events_url": "https://api.github.com/users/shiyinw/events{/privacy}", "received_events_url": "https://api.github.com/users/shiyinw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-28T02:53:19Z", "updated_at": "2018-11-03T02:11:25Z", "closed_at": "2018-11-03T02:11:25Z", "author_association": "NONE", "body_html": "<p>I am running Stanford CS231n demo code on Tesla P40 AWS.</p>\n<pre><code>import copy\ngpu_dtype = torch.cuda.FloatTensor\n\nfixed_model_gpu = copy.deepcopy(fixed_model_base).type(gpu_dtype)\n\nx_gpu = torch.randn(64, 3, 32, 32).type(gpu_dtype)\nx_var_gpu = Variable(x.type(gpu_dtype)) # Construct a PyTorch Variable out of your input data\nans = fixed_model_gpu(x_var_gpu)        # Feed it through the model! \n\n# Check to make sure what comes out of your model\n# is the right dimensionality... this should be True\n# if you've done everything correctly\nnp.array_equal(np.array(ans.size()), np.array([64, 10]))\n</code></pre>\n<hr>\n<p>RuntimeError                              Traceback (most recent call last)<br>\n in <br>\n6 x_gpu = torch.randn(64, 3, 32, 32).type(gpu_dtype)<br>\n7 x_var_gpu = Variable(x.type(gpu_dtype)) # Construct a PyTorch Variable out of your input data<br>\n----&gt; 8 ans = fixed_model_gpu(x_var_gpu)        # Feed it through the model!<br>\n9<br>\n10 # Check to make sure what comes out of your model</p>\n<p>~/.local/lib/python3.5/site-packages/torch/nn/modules/module.py in <strong>call</strong>(self, *input, **kwargs)<br>\n475             result = self._slow_forward(*input, **kwargs)<br>\n476         else:<br>\n--&gt; 477             result = self.forward(*input, **kwargs)<br>\n478         for hook in self._forward_hooks.values():<br>\n479             hook_result = hook(self, input, result)</p>\n<p>~/.local/lib/python3.5/site-packages/torch/nn/modules/container.py in forward(self, input)<br>\n89     def forward(self, input):<br>\n90         for module in self._modules.values():<br>\n---&gt; 91             input = module(input)<br>\n92         return input<br>\n93</p>\n<p>~/.local/lib/python3.5/site-packages/torch/nn/modules/module.py in <strong>call</strong>(self, *input, **kwargs)<br>\n475             result = self._slow_forward(*input, **kwargs)<br>\n476         else:<br>\n--&gt; 477             result = self.forward(*input, **kwargs)<br>\n478         for hook in self._forward_hooks.values():<br>\n479             hook_result = hook(self, input, result)</p>\n<p>~/.local/lib/python3.5/site-packages/torch/nn/modules/conv.py in forward(self, input)<br>\n299     def forward(self, input):<br>\n300         return F.conv2d(input, self.weight, self.bias, self.stride,<br>\n--&gt; 301                         self.padding, self.dilation, self.groups)<br>\n302<br>\n303</p>\n<p>RuntimeError: CuDNN error: CUDNN_STATUS_MAPPING_ERROR</p>", "body_text": "I am running Stanford CS231n demo code on Tesla P40 AWS.\nimport copy\ngpu_dtype = torch.cuda.FloatTensor\n\nfixed_model_gpu = copy.deepcopy(fixed_model_base).type(gpu_dtype)\n\nx_gpu = torch.randn(64, 3, 32, 32).type(gpu_dtype)\nx_var_gpu = Variable(x.type(gpu_dtype)) # Construct a PyTorch Variable out of your input data\nans = fixed_model_gpu(x_var_gpu)        # Feed it through the model! \n\n# Check to make sure what comes out of your model\n# is the right dimensionality... this should be True\n# if you've done everything correctly\nnp.array_equal(np.array(ans.size()), np.array([64, 10]))\n\n\nRuntimeError                              Traceback (most recent call last)\n in \n6 x_gpu = torch.randn(64, 3, 32, 32).type(gpu_dtype)\n7 x_var_gpu = Variable(x.type(gpu_dtype)) # Construct a PyTorch Variable out of your input data\n----> 8 ans = fixed_model_gpu(x_var_gpu)        # Feed it through the model!\n9\n10 # Check to make sure what comes out of your model\n~/.local/lib/python3.5/site-packages/torch/nn/modules/module.py in call(self, *input, **kwargs)\n475             result = self._slow_forward(*input, **kwargs)\n476         else:\n--> 477             result = self.forward(*input, **kwargs)\n478         for hook in self._forward_hooks.values():\n479             hook_result = hook(self, input, result)\n~/.local/lib/python3.5/site-packages/torch/nn/modules/container.py in forward(self, input)\n89     def forward(self, input):\n90         for module in self._modules.values():\n---> 91             input = module(input)\n92         return input\n93\n~/.local/lib/python3.5/site-packages/torch/nn/modules/module.py in call(self, *input, **kwargs)\n475             result = self._slow_forward(*input, **kwargs)\n476         else:\n--> 477             result = self.forward(*input, **kwargs)\n478         for hook in self._forward_hooks.values():\n479             hook_result = hook(self, input, result)\n~/.local/lib/python3.5/site-packages/torch/nn/modules/conv.py in forward(self, input)\n299     def forward(self, input):\n300         return F.conv2d(input, self.weight, self.bias, self.stride,\n--> 301                         self.padding, self.dilation, self.groups)\n302\n303\nRuntimeError: CuDNN error: CUDNN_STATUS_MAPPING_ERROR", "body": "I am running Stanford CS231n demo code on Tesla P40 AWS.\r\n\r\n```\r\nimport copy\r\ngpu_dtype = torch.cuda.FloatTensor\r\n\r\nfixed_model_gpu = copy.deepcopy(fixed_model_base).type(gpu_dtype)\r\n\r\nx_gpu = torch.randn(64, 3, 32, 32).type(gpu_dtype)\r\nx_var_gpu = Variable(x.type(gpu_dtype)) # Construct a PyTorch Variable out of your input data\r\nans = fixed_model_gpu(x_var_gpu)        # Feed it through the model! \r\n\r\n# Check to make sure what comes out of your model\r\n# is the right dimensionality... this should be True\r\n# if you've done everything correctly\r\nnp.array_equal(np.array(ans.size()), np.array([64, 10]))\r\n```\r\n\r\n\r\n\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-26-6c4deb3bc2c2> in <module>\r\n      6 x_gpu = torch.randn(64, 3, 32, 32).type(gpu_dtype)\r\n      7 x_var_gpu = Variable(x.type(gpu_dtype)) # Construct a PyTorch Variable out of your input data\r\n----> 8 ans = fixed_model_gpu(x_var_gpu)        # Feed it through the model!\r\n      9 \r\n     10 # Check to make sure what comes out of your model\r\n\r\n~/.local/lib/python3.5/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    475             result = self._slow_forward(*input, **kwargs)\r\n    476         else:\r\n--> 477             result = self.forward(*input, **kwargs)\r\n    478         for hook in self._forward_hooks.values():\r\n    479             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.5/site-packages/torch/nn/modules/container.py in forward(self, input)\r\n     89     def forward(self, input):\r\n     90         for module in self._modules.values():\r\n---> 91             input = module(input)\r\n     92         return input\r\n     93 \r\n\r\n~/.local/lib/python3.5/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    475             result = self._slow_forward(*input, **kwargs)\r\n    476         else:\r\n--> 477             result = self.forward(*input, **kwargs)\r\n    478         for hook in self._forward_hooks.values():\r\n    479             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.5/site-packages/torch/nn/modules/conv.py in forward(self, input)\r\n    299     def forward(self, input):\r\n    300         return F.conv2d(input, self.weight, self.bias, self.stride,\r\n--> 301                         self.padding, self.dilation, self.groups)\r\n    302 \r\n    303 \r\n\r\nRuntimeError: CuDNN error: CUDNN_STATUS_MAPPING_ERROR\r\n"}