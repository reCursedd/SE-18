{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11359", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11359/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11359/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11359/events", "html_url": "https://github.com/pytorch/pytorch/pull/11359", "id": 357891032, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEzNzk1OTky", "number": 11359, "title": "optimize masked_fill on CPU", "user": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-07T01:57:53Z", "updated_at": "2018-11-23T15:50:44Z", "closed_at": "2018-09-09T07:26:44Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11359", "html_url": "https://github.com/pytorch/pytorch/pull/11359", "diff_url": "https://github.com/pytorch/pytorch/pull/11359.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11359.patch"}, "body_html": "<p>This PR parallels <code>masked_fill</code> on CPU, currently it runs in sequential on CPU.</p>\n<p>the following script is used to benchmark and verify this PR. On Xeon skylake 8180 (2 sockets * 28 cores),<br>\nit runs <code>4.20</code> sec without the PR and <code>0.11</code> sec with the PR.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> random\n<span class=\"pl-k\">from</span> time <span class=\"pl-k\">import</span> time\n\nsize <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1000</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1000</span>\ncount <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_masked_fill</span>():\n    dst <span class=\"pl-k\">=</span> torch.randn(size)\n    dst_ <span class=\"pl-k\">=</span> dst.clone()\n    mask <span class=\"pl-k\">=</span> torch.rand(size).mul(<span class=\"pl-c1\">2</span>).floor().byte()\n    val <span class=\"pl-k\">=</span> random.random()\n\n    tstart <span class=\"pl-k\">=</span> time()\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(count):\n        dst.masked_fill_(mask, val)\n    tend <span class=\"pl-k\">=</span> time()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>masked_fill_: <span class=\"pl-c1\">%f</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> (tend<span class=\"pl-k\">-</span>tstart))\n\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(size):\n        <span class=\"pl-k\">if</span> mask[i]:\n            <span class=\"pl-k\">if</span> dst[i] <span class=\"pl-k\">!=</span> val:\n                <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fail<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-k\">else</span>:\n            <span class=\"pl-k\">if</span> dst[i] <span class=\"pl-k\">!=</span> dst_[i]:\n                <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fail1<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_masked_fill: PASS<span class=\"pl-pds\">\"</span></span>)\n\ntest_masked_fill()</pre></div>", "body_text": "This PR parallels masked_fill on CPU, currently it runs in sequential on CPU.\nthe following script is used to benchmark and verify this PR. On Xeon skylake 8180 (2 sockets * 28 cores),\nit runs 4.20 sec without the PR and 0.11 sec with the PR.\nimport torch\nimport random\nfrom time import time\n\nsize = 10 * 1000 * 1000\ncount = 100\n\ndef test_masked_fill():\n    dst = torch.randn(size)\n    dst_ = dst.clone()\n    mask = torch.rand(size).mul(2).floor().byte()\n    val = random.random()\n\n    tstart = time()\n    for i in range(count):\n        dst.masked_fill_(mask, val)\n    tend = time()\n    print(\"masked_fill_: %f\" % (tend-tstart))\n\n    for i in range(size):\n        if mask[i]:\n            if dst[i] != val:\n                print(\"fail\")\n        else:\n            if dst[i] != dst_[i]:\n                print(\"fail1\")\n    print(\"test_masked_fill: PASS\")\n\ntest_masked_fill()", "body": "This PR parallels `masked_fill` on CPU, currently it runs in sequential on CPU.\r\n\r\nthe following script is used to benchmark and verify this PR. On Xeon skylake 8180 (2 sockets * 28 cores), \r\n it runs `4.20` sec without the PR and `0.11` sec with the PR.\r\n\r\n```python\r\nimport torch\r\nimport random\r\nfrom time import time\r\n\r\nsize = 10 * 1000 * 1000\r\ncount = 100\r\n\r\ndef test_masked_fill():\r\n    dst = torch.randn(size)\r\n    dst_ = dst.clone()\r\n    mask = torch.rand(size).mul(2).floor().byte()\r\n    val = random.random()\r\n\r\n    tstart = time()\r\n    for i in range(count):\r\n        dst.masked_fill_(mask, val)\r\n    tend = time()\r\n    print(\"masked_fill_: %f\" % (tend-tstart))\r\n\r\n    for i in range(size):\r\n        if mask[i]:\r\n            if dst[i] != val:\r\n                print(\"fail\")\r\n        else:\r\n            if dst[i] != dst_[i]:\r\n                print(\"fail1\")\r\n    print(\"test_masked_fill: PASS\")\r\n\r\ntest_masked_fill()\r\n```"}