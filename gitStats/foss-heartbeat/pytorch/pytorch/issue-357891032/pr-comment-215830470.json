{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215830470", "pull_request_review_id": 153185290, "id": 215830470, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTgzMDQ3MA==", "diff_hunk": "@@ -29,17 +29,37 @@ void THTensor_(zero)(THTensor *r_)\n \n void THTensor_(maskedFill)(THTensor *tensor, THByteTensor *mask, scalar_t value)\n {\n-  TH_TENSOR_APPLY2(scalar_t, tensor, unsigned char, mask,\n-                   if (*mask_data > 1)\n-                   {\n-                     THFree(mask_counter);\n-                     THFree(tensor_counter);\n-                     THError(\"Mask tensor can take 0 and 1 values only\");\n-                   }\n-                   else if (*mask_data == 1)\n-                   {\n-                     *tensor_data = value;\n-                   });\n+  int serial_path = 0;\n+#ifdef _OPENMP\n+  int inOMP = omp_in_parallel();\n+  if (inOMP) {\n+    serial_path = 1;\n+  } else {\n+    int64_t tensor_size = THTensor_(nElement)(tensor);\n+    int tensor_contig = THTensor_(isContiguous)(tensor);\n+    int mask_contig = THTensor_(isContiguous)(mask);\n+    TH_TENSOR_APPLY2_OMP(tensor_size, tensor_contig, mask_contig,\n+      scalar_t, tensor, unsigned char, mask,\n+      if (*mask_data > 1) {\n+        THError(\"Mask tensor can take 0 and 1 values only\");\n+      } else if (*mask_data == 1) {\n+        *tensor_data = value;\n+      },\n+      TH_OMP_OVERHEAD_THRESHOLD);\n+  }\n+#else\n+  serial_path = 1;\n+#endif", "path": "aten/src/TH/generic/THTensorEvenMoreMath.cpp", "position": null, "original_position": 35, "commit_id": "abde655ad2f96b896760dfe35a95f50237330930", "original_commit_id": "95df2f47ebac469c85db36d55b1e65570d5d8e9e", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Is the `serial_path` variable really needed? It seems to me that this function could have easily been structured like this:\r\n```cpp\r\n#ifdef _OPENMP\r\nif (!omp_in_parallel()) {\r\n  ...\r\n  TH_TENSOR_APPLY2_OMP(...)\r\n  return;\r\n}\r\n#endif\r\n... // serial path code\r\n```", "created_at": "2018-09-07T02:30:45Z", "updated_at": "2018-11-23T15:50:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/11359#discussion_r215830470", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11359", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/215830470"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11359#discussion_r215830470"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11359"}}, "body_html": "<p>Is the <code>serial_path</code> variable really needed? It seems to me that this function could have easily been structured like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">ifdef</span> _OPENMP\n<span class=\"pl-k\">if</span> (!omp_in_parallel()) {\n  ...\n  <span class=\"pl-c1\">TH_TENSOR_APPLY2_OMP</span>(...)\n  <span class=\"pl-k\">return</span>;\n}\n#<span class=\"pl-k\">endif</span>\n... <span class=\"pl-c\"><span class=\"pl-c\">//</span> serial path code</span></pre></div>", "body_text": "Is the serial_path variable really needed? It seems to me that this function could have easily been structured like this:\n#ifdef _OPENMP\nif (!omp_in_parallel()) {\n  ...\n  TH_TENSOR_APPLY2_OMP(...)\n  return;\n}\n#endif\n... // serial path code"}