{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171513934", "pull_request_review_id": 100376540, "id": 171513934, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTUxMzkzNA==", "diff_hunk": "@@ -0,0 +1,165 @@\n+#pragma once\n+#include <cstddef>\n+#include <cstdint>\n+#include <cstring>\n+#include <iostream>\n+#include <x86intrin.h>\n+\n+constexpr size_t _THRESHOLD = 32768;\n+\n+template <typename T> class vec256 {\n+public:\n+  T values[32 / sizeof(T)]; // Mimics AVX behavior\n+  // fill gets rid of uninitialized warning, but might be slower\n+  vec256<T>() { fill(0); }\n+  inline void load(const T *ptr) { memcpy(values, ptr, 32); };\n+  inline void store(T *ptr) { memcpy(ptr, values, 32); }\n+  inline void fill(const T val) { memset(values, val, 32); };\n+  inline void zero() { fill(0); }\n+  inline size_t size() { return 32 / sizeof(T); }\n+  inline void operator+=(const vec256<T> &b) {\n+    for (size_t i = 0; i < size(); i++) {\n+      values[i] += b.values[i];\n+    }\n+  }\n+  inline void operator=(const vec256<T> &b) { memcpy(values, b.values, 32); }\n+};\n+\n+template <typename T>\n+vec256<T> operator+(const vec256<T> &a, const vec256<T> &b) {\n+  vec256<T> c = vec256<T>();\n+  for (size_t i = 0; i < c.size(); i++) {\n+    c.values[i] = a.values[i] + b.values[i];\n+  }\n+  return c;\n+}\n+\n+#if defined(CPU_KERNEL_AVX) || defined(CPU_KERNEL_AVX2)\n+template <> class vec256<float> {\n+public:\n+  __m256 values;\n+  vec256<float>() {}\n+  inline void load(const float *ptr) { values = _mm256_loadu_ps(ptr); }\n+  inline void store(float *ptr) { _mm256_storeu_ps(ptr, values); }\n+  inline void fill(const float val) { values = _mm256_set1_ps(val); }\n+  inline void zero() { values = _mm256_set1_ps(0); }\n+  inline size_t size() { return 32 / sizeof(float); }\n+  inline void operator+=(const vec256<float> &b) {\n+    values = _mm256_add_ps(values, b.values);\n+  }\n+  inline void operator=(const vec256<float> &b) { values = b.values; }\n+};\n+\n+template <> class vec256<double> {\n+public:\n+  __m256d values;\n+  vec256<double>() {}\n+  inline void load(const double *ptr) { values = _mm256_loadu_pd(ptr); }\n+  inline void store(double *ptr) { _mm256_storeu_pd(ptr, values); }\n+  inline void fill(const double val) { values = _mm256_set1_pd(val); }\n+  inline void zero() { values = _mm256_set1_pd(0); }\n+  inline size_t size() { return 32 / sizeof(double); }\n+  inline void operator+=(const vec256<double> &b) {\n+    values = _mm256_add_pd(values, b.values);\n+  }\n+  inline void operator=(const vec256<double> &b) { values = b.values; }\n+};\n+\n+template <>\n+vec256<float> inline operator+(const vec256<float> &a, const vec256<float> &b) {\n+  vec256<float> c = vec256<float>();\n+  c.values = _mm256_add_ps(a.values, b.values);\n+  return c;\n+}\n+\n+template <>\n+vec256<double> inline operator+(const vec256<double> &a,\n+                                const vec256<double> &b) {\n+  vec256<double> c = vec256<double>();\n+  c.values = _mm256_add_pd(a.values, b.values);\n+  return c;", "path": "aten/src/ATen/native/cpu/vec256.h", "position": null, "original_position": 80, "commit_id": "92e4e0671ee0326a1744e3b3b2c3c57694eae39d", "original_commit_id": "06ba5c4d25a59834104b22aa83f02566f5db7760", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "These would be simpler if we allowed implicit `__mm256d` conversions to `vec256<double>` (and similarly for `float`).", "created_at": "2018-03-01T10:16:13Z", "updated_at": "2018-11-23T15:40:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/5481#discussion_r171513934", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5481", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/171513934"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5481#discussion_r171513934"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5481"}}, "body_html": "<p>These would be simpler if we allowed implicit <code>__mm256d</code> conversions to <code>vec256&lt;double&gt;</code> (and similarly for <code>float</code>).</p>", "body_text": "These would be simpler if we allowed implicit __mm256d conversions to vec256<double> (and similarly for float)."}