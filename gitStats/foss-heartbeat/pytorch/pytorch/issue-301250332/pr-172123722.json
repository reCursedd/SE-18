{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5481", "id": 172123722, "node_id": "MDExOlB1bGxSZXF1ZXN0MTcyMTIzNzIy", "html_url": "https://github.com/pytorch/pytorch/pull/5481", "diff_url": "https://github.com/pytorch/pytorch/pull/5481.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5481.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5481", "number": 5481, "state": "closed", "locked": false, "title": "ATen ReduceOps", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "body": "This diff adds vectorization to ATen. It uses intel intrinsics to build a general vec256 class, that represents types of 256bit width. These can then be treated like regular variables. Using those it implements torch.sum() for the contiguous case. It uses Intel TBB for multithreading, which allows workstealing and chunks the reduction operations based on a experimentally chosen value (_THRESHOLD). It uses cpuinfo to pick the right code depending on the host's capabilities.\r\n\r\nThe kernels are implemented under native/cpu. Each .cpp file is compiled with -avx, -avx2 and no additional flags. A macro is used to append AVX, AVX2 or NONE to the function name. The header then needs to define the functions three times, one for each capability. This could be improved by either changing the cmake file a bit or possibly generating source code using a Python script etc.\r\n\r\nFor the non-contiguous case this defaults to the current implementation within TH. For CUDA is entirely defaults to the implementation within THC.\r\n\r\nThere probably needs to be a bit of a debate around the design decisions here, the additional dependencies, parallelization strategy, clarity, etc. The numerical results also diverge from numpy with larger tensors, which is expected since we're summing, for example, 8 numbers and then adding the result to the running sum, instead of each number one by one. But there might be something to be said about accumulating into a double for floats or the degree of divergence, the behavior with respect to CUDA, etc.\r\n\r\nI wrote a [small Python script]( https://github.com/cpuhrsch/benchmark/blob/sumall/benchmarks/sum_bench.py) to compare the results with numpy numerically as well as on timing. I ran this script to create timings both on master and this branch.\r\n\r\nHere is the command for 1 core\r\n`OMP_NUM_THREAD=1 taskset -c 0 python sum_bench.py --enable_numpy 200`\r\n\r\nHere is the command for all cores\r\n`python sum_bench.py --enable_numpy 200`\r\n\r\nHere are the results of each:\r\n\r\n[Master, 1 core](https://paste.fedoraproject.org/paste/Nho9JzHpPVK9av8a6mByjQ)\r\n\r\n[This branch, 1 core](https://paste.fedoraproject.org/paste/6xLHkYvcVJx9z~5MoHxN4w)\r\n\r\n[Master, all cores](https://paste.fedoraproject.org/paste/5l3V1d5zGqvJcMXIUteMRw)\r\n\r\n[This branch, all cores](https://paste.fedoraproject.org/paste/J4RuDU-0Drz0aZwtphQwEA)\r\n\r\nTo test the command is\r\n`python sum_bench.py --test 200`\r\n\r\n[This branch, test results](https://paste.fedoraproject.org/paste/kTEoUC~oWgXA6XWMAfNfNw)\r\n\r\nFor this test we look at the average absolute value of the differences. This does not take into account the relative magnitude of the numbers. The numbers are sampled from a standard normal distribution. \r\n\r\nIn terms of performance this diff should bring PyTorch on par with Numpy and usually exceed it by 1.5 to 2x.\r\n\r\n\r\n", "created_at": "2018-03-01T01:53:28Z", "updated_at": "2018-11-23T15:40:38Z", "closed_at": "2018-03-12T19:19:12Z", "merged_at": "2018-03-12T19:19:12Z", "merge_commit_sha": "310c3735b9eb97f30cee743b773e5bb054989edc", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5481/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5481/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5481/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/92e4e0671ee0326a1744e3b3b2c3c57694eae39d", "head": {"label": "cpuhrsch:sumvec", "ref": "sumvec", "sha": "92e4e0671ee0326a1744e3b3b2c3c57694eae39d", "user": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "repo": {"id": 118517346, "node_id": "MDEwOlJlcG9zaXRvcnkxMTg1MTczNDY=", "name": "pytorch", "full_name": "cpuhrsch/pytorch", "private": false, "owner": {"login": "cpuhrsch", "id": 1716488, "node_id": "MDQ6VXNlcjE3MTY0ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1716488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpuhrsch", "html_url": "https://github.com/cpuhrsch", "followers_url": "https://api.github.com/users/cpuhrsch/followers", "following_url": "https://api.github.com/users/cpuhrsch/following{/other_user}", "gists_url": "https://api.github.com/users/cpuhrsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpuhrsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpuhrsch/subscriptions", "organizations_url": "https://api.github.com/users/cpuhrsch/orgs", "repos_url": "https://api.github.com/users/cpuhrsch/repos", "events_url": "https://api.github.com/users/cpuhrsch/events{/privacy}", "received_events_url": "https://api.github.com/users/cpuhrsch/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/cpuhrsch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/cpuhrsch/pytorch", "forks_url": "https://api.github.com/repos/cpuhrsch/pytorch/forks", "keys_url": "https://api.github.com/repos/cpuhrsch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/cpuhrsch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/cpuhrsch/pytorch/teams", "hooks_url": "https://api.github.com/repos/cpuhrsch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/cpuhrsch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/cpuhrsch/pytorch/events", "assignees_url": "https://api.github.com/repos/cpuhrsch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/cpuhrsch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/cpuhrsch/pytorch/tags", "blobs_url": "https://api.github.com/repos/cpuhrsch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/cpuhrsch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/cpuhrsch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/cpuhrsch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/cpuhrsch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/cpuhrsch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/cpuhrsch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/cpuhrsch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/cpuhrsch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/cpuhrsch/pytorch/subscription", "commits_url": "https://api.github.com/repos/cpuhrsch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/cpuhrsch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/cpuhrsch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/cpuhrsch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/cpuhrsch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/cpuhrsch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/cpuhrsch/pytorch/merges", "archive_url": "https://api.github.com/repos/cpuhrsch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/cpuhrsch/pytorch/downloads", "issues_url": "https://api.github.com/repos/cpuhrsch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/cpuhrsch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/cpuhrsch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/cpuhrsch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/cpuhrsch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/cpuhrsch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/cpuhrsch/pytorch/deployments", "created_at": "2018-01-22T21:26:11Z", "updated_at": "2018-05-14T16:24:59Z", "pushed_at": "2018-10-08T23:51:22Z", "git_url": "git://github.com/cpuhrsch/pytorch.git", "ssh_url": "git@github.com:cpuhrsch/pytorch.git", "clone_url": "https://github.com/cpuhrsch/pytorch.git", "svn_url": "https://github.com/cpuhrsch/pytorch", "homepage": "http://pytorch.org", "size": 79525, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "dc4984ef10ca86ce1e1096b9a71be53264f3e923", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T12:35:43Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21589, "watchers_count": 21589, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5153, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5153, "open_issues": 2196, "watchers": 21589, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5481"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5481"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/5481"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/5481/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5481/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5481/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/92e4e0671ee0326a1744e3b3b2c3c57694eae39d"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>This diff adds vectorization to ATen. It uses intel intrinsics to build a general vec256 class, that represents types of 256bit width. These can then be treated like regular variables. Using those it implements torch.sum() for the contiguous case. It uses Intel TBB for multithreading, which allows workstealing and chunks the reduction operations based on a experimentally chosen value (_THRESHOLD). It uses cpuinfo to pick the right code depending on the host's capabilities.</p>\n<p>The kernels are implemented under native/cpu. Each .cpp file is compiled with -avx, -avx2 and no additional flags. A macro is used to append AVX, AVX2 or NONE to the function name. The header then needs to define the functions three times, one for each capability. This could be improved by either changing the cmake file a bit or possibly generating source code using a Python script etc.</p>\n<p>For the non-contiguous case this defaults to the current implementation within TH. For CUDA is entirely defaults to the implementation within THC.</p>\n<p>There probably needs to be a bit of a debate around the design decisions here, the additional dependencies, parallelization strategy, clarity, etc. The numerical results also diverge from numpy with larger tensors, which is expected since we're summing, for example, 8 numbers and then adding the result to the running sum, instead of each number one by one. But there might be something to be said about accumulating into a double for floats or the degree of divergence, the behavior with respect to CUDA, etc.</p>\n<p>I wrote a <a href=\"https://github.com/cpuhrsch/benchmark/blob/sumall/benchmarks/sum_bench.py\">small Python script</a> to compare the results with numpy numerically as well as on timing. I ran this script to create timings both on master and this branch.</p>\n<p>Here is the command for 1 core<br>\n<code>OMP_NUM_THREAD=1 taskset -c 0 python sum_bench.py --enable_numpy 200</code></p>\n<p>Here is the command for all cores<br>\n<code>python sum_bench.py --enable_numpy 200</code></p>\n<p>Here are the results of each:</p>\n<p><a href=\"https://paste.fedoraproject.org/paste/Nho9JzHpPVK9av8a6mByjQ\" rel=\"nofollow\">Master, 1 core</a></p>\n<p><a href=\"https://paste.fedoraproject.org/paste/6xLHkYvcVJx9z~5MoHxN4w\" rel=\"nofollow\">This branch, 1 core</a></p>\n<p><a href=\"https://paste.fedoraproject.org/paste/5l3V1d5zGqvJcMXIUteMRw\" rel=\"nofollow\">Master, all cores</a></p>\n<p><a href=\"https://paste.fedoraproject.org/paste/J4RuDU-0Drz0aZwtphQwEA\" rel=\"nofollow\">This branch, all cores</a></p>\n<p>To test the command is<br>\n<code>python sum_bench.py --test 200</code></p>\n<p><a href=\"https://paste.fedoraproject.org/paste/kTEoUC~oWgXA6XWMAfNfNw\" rel=\"nofollow\">This branch, test results</a></p>\n<p>For this test we look at the average absolute value of the differences. This does not take into account the relative magnitude of the numbers. The numbers are sampled from a standard normal distribution.</p>\n<p>In terms of performance this diff should bring PyTorch on par with Numpy and usually exceed it by 1.5 to 2x.</p>", "body_text": "This diff adds vectorization to ATen. It uses intel intrinsics to build a general vec256 class, that represents types of 256bit width. These can then be treated like regular variables. Using those it implements torch.sum() for the contiguous case. It uses Intel TBB for multithreading, which allows workstealing and chunks the reduction operations based on a experimentally chosen value (_THRESHOLD). It uses cpuinfo to pick the right code depending on the host's capabilities.\nThe kernels are implemented under native/cpu. Each .cpp file is compiled with -avx, -avx2 and no additional flags. A macro is used to append AVX, AVX2 or NONE to the function name. The header then needs to define the functions three times, one for each capability. This could be improved by either changing the cmake file a bit or possibly generating source code using a Python script etc.\nFor the non-contiguous case this defaults to the current implementation within TH. For CUDA is entirely defaults to the implementation within THC.\nThere probably needs to be a bit of a debate around the design decisions here, the additional dependencies, parallelization strategy, clarity, etc. The numerical results also diverge from numpy with larger tensors, which is expected since we're summing, for example, 8 numbers and then adding the result to the running sum, instead of each number one by one. But there might be something to be said about accumulating into a double for floats or the degree of divergence, the behavior with respect to CUDA, etc.\nI wrote a small Python script to compare the results with numpy numerically as well as on timing. I ran this script to create timings both on master and this branch.\nHere is the command for 1 core\nOMP_NUM_THREAD=1 taskset -c 0 python sum_bench.py --enable_numpy 200\nHere is the command for all cores\npython sum_bench.py --enable_numpy 200\nHere are the results of each:\nMaster, 1 core\nThis branch, 1 core\nMaster, all cores\nThis branch, all cores\nTo test the command is\npython sum_bench.py --test 200\nThis branch, test results\nFor this test we look at the average absolute value of the differences. This does not take into account the relative magnitude of the numbers. The numbers are sampled from a standard normal distribution.\nIn terms of performance this diff should bring PyTorch on par with Numpy and usually exceed it by 1.5 to 2x.", "merged": true, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "comments": 24, "review_comments": 26, "maintainer_can_modify": false, "commits": 1, "additions": 1210, "deletions": 7, "changed_files": 21}