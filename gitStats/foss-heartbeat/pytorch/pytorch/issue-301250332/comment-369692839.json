{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/369692839", "html_url": "https://github.com/pytorch/pytorch/pull/5481#issuecomment-369692839", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5481", "id": 369692839, "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTY5MjgzOQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-01T18:54:36Z", "updated_at": "2018-03-01T18:54:36Z", "author_association": "MEMBER", "body_html": "<p>I think we will want to prefer Intel TBB over OpenMP in the future. For simple loops there isn't much difference, but it really shines as things start to get more complex:</p>\n<ol>\n<li>You have much better control over the number of threads. OpenMP only has one thread pool. If you try to limit the number of threads in a specific kernel, it will destroy threads from the global thread pool, which can kill performance.</li>\n<li>Nested parallelism works way better. With OpenMP we're ending up with guards to prevent parallel loops within parallel loops. This works much better with task based parallelism.</li>\n<li>There's a bunch of useful algorithms like <code>parallel_sort</code></li>\n<li>There's a bunch of useful concurrent containers like <code>concurrent_hash_map</code></li>\n</ol>\n<p>The TBB library is pretty good: cross-platform, Apache 2 licensed, and I think there's a CMake for it floating around somewhere. OpenMP doesn't seem to work with the clang version shipped on Mac OS (or on my FB devserver).</p>", "body_text": "I think we will want to prefer Intel TBB over OpenMP in the future. For simple loops there isn't much difference, but it really shines as things start to get more complex:\n\nYou have much better control over the number of threads. OpenMP only has one thread pool. If you try to limit the number of threads in a specific kernel, it will destroy threads from the global thread pool, which can kill performance.\nNested parallelism works way better. With OpenMP we're ending up with guards to prevent parallel loops within parallel loops. This works much better with task based parallelism.\nThere's a bunch of useful algorithms like parallel_sort\nThere's a bunch of useful concurrent containers like concurrent_hash_map\n\nThe TBB library is pretty good: cross-platform, Apache 2 licensed, and I think there's a CMake for it floating around somewhere. OpenMP doesn't seem to work with the clang version shipped on Mac OS (or on my FB devserver).", "body": "I think we will want to prefer Intel TBB over OpenMP in the future. For simple loops there isn't much difference, but it really shines as things start to get more complex:\r\n\r\n1. You have much better control over the number of threads. OpenMP only has one thread pool. If you try to limit the number of threads in a specific kernel, it will destroy threads from the global thread pool, which can kill performance.\r\n2. Nested parallelism works way better. With OpenMP we're ending up with guards to prevent parallel loops within parallel loops. This works much better with task based parallelism.\r\n3. There's a bunch of useful algorithms like `parallel_sort`\r\n4. There's a bunch of useful concurrent containers like `concurrent_hash_map`\r\n\r\nThe TBB library is pretty good: cross-platform, Apache 2 licensed, and I think there's a CMake for it floating around somewhere. OpenMP doesn't seem to work with the clang version shipped on Mac OS (or on my FB devserver)."}