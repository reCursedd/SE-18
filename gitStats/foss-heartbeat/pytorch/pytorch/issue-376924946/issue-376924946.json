{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13518", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13518/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13518/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13518/events", "html_url": "https://github.com/pytorch/pytorch/pull/13518", "id": 376924946, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4MDI1ODI2", "number": 13518, "title": "Add torch.multiprocessing.spawn helper", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-02T18:39:32Z", "updated_at": "2018-11-23T15:54:22Z", "closed_at": "2018-11-06T22:10:09Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13518", "html_url": "https://github.com/pytorch/pytorch/pull/13518", "diff_url": "https://github.com/pytorch/pytorch/pull/13518.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13518.patch"}, "body_html": "<p>This helper addresses a common pattern where one spawns N processes to<br>\nwork on some common task (e.g. parallel preprocessing or multiple<br>\ntraining loops).</p>\n<p>A straightforward approach is to use the multiprocessing API directly<br>\nand then consecutively call join on the resulting processes.</p>\n<p>This pattern breaks down in the face of errors. If one of the<br>\nprocesses terminates with an exception or via some signal, and it is<br>\nnot the first process that was launched, the join call on the first<br>\nprocess won't be affected. This helper seeks to solve this by waiting<br>\non termination from any of the spawned processes. When any process<br>\nterminates with a non-zero exit status, it terminates the remaining<br>\nprocesses, and raises an exception in the parent process. If the<br>\nprocess terminated with an exception, it is propagated to the parent.<br>\nIf the process terminated via a signal (e.g. SIGINT, SIGSEGV), this is<br>\nmentioned in the exception as well.</p>\n<p>Requires Python &gt;= 3.4.</p>", "body_text": "This helper addresses a common pattern where one spawns N processes to\nwork on some common task (e.g. parallel preprocessing or multiple\ntraining loops).\nA straightforward approach is to use the multiprocessing API directly\nand then consecutively call join on the resulting processes.\nThis pattern breaks down in the face of errors. If one of the\nprocesses terminates with an exception or via some signal, and it is\nnot the first process that was launched, the join call on the first\nprocess won't be affected. This helper seeks to solve this by waiting\non termination from any of the spawned processes. When any process\nterminates with a non-zero exit status, it terminates the remaining\nprocesses, and raises an exception in the parent process. If the\nprocess terminated with an exception, it is propagated to the parent.\nIf the process terminated via a signal (e.g. SIGINT, SIGSEGV), this is\nmentioned in the exception as well.\nRequires Python >= 3.4.", "body": "This helper addresses a common pattern where one spawns N processes to\r\nwork on some common task (e.g. parallel preprocessing or multiple\r\ntraining loops).\r\n\r\nA straightforward approach is to use the multiprocessing API directly\r\nand then consecutively call join on the resulting processes.\r\n\r\nThis pattern breaks down in the face of errors. If one of the\r\nprocesses terminates with an exception or via some signal, and it is\r\nnot the first process that was launched, the join call on the first\r\nprocess won't be affected. This helper seeks to solve this by waiting\r\non termination from any of the spawned processes. When any process\r\nterminates with a non-zero exit status, it terminates the remaining\r\nprocesses, and raises an exception in the parent process. If the\r\nprocess terminated with an exception, it is propagated to the parent.\r\nIf the process terminated via a signal (e.g. SIGINT, SIGSEGV), this is\r\nmentioned in the exception as well.\r\n\r\nRequires Python >= 3.4.\r\n\r\n"}