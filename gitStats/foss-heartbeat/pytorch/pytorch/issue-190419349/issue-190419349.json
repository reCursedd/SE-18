{"url": "https://api.github.com/repos/pytorch/pytorch/issues/238", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/238/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/238/events", "html_url": "https://github.com/pytorch/pytorch/issues/238", "id": 190419349, "node_id": "MDU6SXNzdWUxOTA0MTkzNDk=", "number": 238, "title": "CrossEntropyLoss on CPU is leaking", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2016-11-18T20:54:02Z", "updated_at": "2016-11-21T20:32:23Z", "closed_at": "2016-11-21T20:32:23Z", "author_association": "MEMBER", "body_html": "<p>running the imagenet example will slow leak memory</p>\n<ul>\n<li>gc.collect() does not help</li>\n<li>dataparallel is not the issue, even single-GPU job has the leak</li>\n</ul>\n<p>This is the snippet that will leak:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> epoch <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(args.nEpochs):\n    <span class=\"pl-k\">for</span> i, data <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(train_loader, <span class=\"pl-c1\">0</span>):\n        <span class=\"pl-c1\">input</span>, label <span class=\"pl-k\">=</span> data\n        <span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> Variable(<span class=\"pl-c1\">input</span>)\n        label <span class=\"pl-k\">=</span> Variable(label)\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">closure</span>():\n            output <span class=\"pl-k\">=</span> model(<span class=\"pl-c1\">input</span>)\n            loss <span class=\"pl-k\">=</span> criterion(output, label)\n            optimizer.zero_grad()\n            loss.backward()\n        optimizer.step(closure)\n        <span class=\"pl-c1\">print</span>(i)</pre></div>\n<p>This wont leak:</p>\n<pre><code>for epoch in range(args.nEpochs):\n    for i, data in enumerate(train_loader, 0):\n        input, label = data\n        input = Variable(input.cuda())\n        label = Variable(label.cuda())\n        def closure():\n            output = model(input)\n            loss = criterion(output, label)\n            optimizer.zero_grad()\n            loss.backward()\n        optimizer.step(closure)\n        print(i)\n</code></pre>", "body_text": "running the imagenet example will slow leak memory\n\ngc.collect() does not help\ndataparallel is not the issue, even single-GPU job has the leak\n\nThis is the snippet that will leak:\nfor epoch in range(args.nEpochs):\n    for i, data in enumerate(train_loader, 0):\n        input, label = data\n        input = Variable(input)\n        label = Variable(label)\n        def closure():\n            output = model(input)\n            loss = criterion(output, label)\n            optimizer.zero_grad()\n            loss.backward()\n        optimizer.step(closure)\n        print(i)\nThis wont leak:\nfor epoch in range(args.nEpochs):\n    for i, data in enumerate(train_loader, 0):\n        input, label = data\n        input = Variable(input.cuda())\n        label = Variable(label.cuda())\n        def closure():\n            output = model(input)\n            loss = criterion(output, label)\n            optimizer.zero_grad()\n            loss.backward()\n        optimizer.step(closure)\n        print(i)", "body": "running the imagenet example will slow leak memory\r\n\r\n- gc.collect() does not help\r\n- dataparallel is not the issue, even single-GPU job has the leak\r\n\r\nThis is the snippet that will leak:\r\n```python\r\nfor epoch in range(args.nEpochs):\r\n    for i, data in enumerate(train_loader, 0):\r\n        input, label = data\r\n        input = Variable(input)\r\n        label = Variable(label)\r\n        def closure():\r\n            output = model(input)\r\n            loss = criterion(output, label)\r\n            optimizer.zero_grad()\r\n            loss.backward()\r\n        optimizer.step(closure)\r\n        print(i)\r\n```\r\n\r\nThis wont leak:\r\n```\r\nfor epoch in range(args.nEpochs):\r\n    for i, data in enumerate(train_loader, 0):\r\n        input, label = data\r\n        input = Variable(input.cuda())\r\n        label = Variable(label.cuda())\r\n        def closure():\r\n            output = model(input)\r\n            loss = criterion(output, label)\r\n            optimizer.zero_grad()\r\n            loss.backward()\r\n        optimizer.step(closure)\r\n        print(i)\r\n```"}