{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163340509", "pull_request_review_id": 90938574, "id": 163340509, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM0MDUwOQ==", "diff_hunk": "@@ -536,6 +539,74 @@ void testADFormulas() {\n   }\n }\n \n+autograd::Variable var(at::Type & t, at::IntList sizes, bool requires_grad) {\n+  return autograd::make_variable(t.rand(sizes), requires_grad);\n+}\n+autograd::Variable undef() {\n+  return autograd::Variable();\n+}\n+\n+int device(const autograd::Variable & v) {\n+  return v.type().is_cuda() ? v.get_device() : -1;\n+}\n+\n+bool isEqual(at::IntList lhs, at::IntList rhs) {\n+  return lhs.size() == rhs.size() && std::equal(lhs.begin(), lhs.end(), rhs.begin());\n+}\n+\n+bool isEqual(const TensorInfo & ti, const autograd::Variable & v) {\n+  if(!ti.defined())\n+    return ti.defined() == v.defined();\n+  return\n+    ti.device() == device(v) &&\n+    ti.requires_grad() == v.requires_grad() &&\n+    ti.type() == v.type().scalarType() &&\n+    isEqual(ti.sizes(), v.sizes()) &&\n+    isEqual(ti.strides(), v.strides());\n+}\n+\n+void argumentSpecTest() {\n+  auto & CF = at::CPU(at::kFloat);\n+  auto & CD = at::CPU(at::kDouble);\n+  auto & GF = at::CUDA(at::kFloat);\n+  auto & GD = at::CUDA(at::kDouble);\n+\n+  autograd::variable_list list =  { var(CF, {1}, true), var(CD, {1, 2}, false) , var(GF, {}, true), var(GD, {4,5,6}, false), undef()};\n+  // make sure we have some non-standard strides\n+  list[1].transpose_(0, 1);\n+\n+  // same list but different backing values\n+  autograd::variable_list list2 = { var(CF, {1}, true), var(CD, {1, 2}, false) , var(GF, {}, true), var(GD, {4,5,6}, false), undef()};\n+  list2[1].transpose_(0, 1);\n+\n+\n+  ArgumentSpec a(false, list);\n+  ArgumentSpec b(false, list);\n+  JIT_ASSERT(a.hashCode() == b.hashCode());\n+\n+  JIT_ASSERT(a == b);\n+  JIT_ASSERT(ArgumentSpec(false, list2) == a);\n+  for(size_t i = 0; i < list.size(); ++i) {\n+    JIT_ASSERT(isEqual(a.tensorInfo(i), list[i]));\n+  }\n+  ArgumentSpec no_grad(/*nograd=*/true, list);\n+  JIT_ASSERT(!(no_grad == a));", "path": "torch/csrc/jit/test_jit.cpp", "position": null, "original_position": 65, "commit_id": "8c94a8bc0d4b5c4d066abd86087622fd6e0ed726", "original_commit_id": "4cda5572438f0aacf324b4b8d8b439647b1506b2", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "C++ generates so many default methods... Why can't it generate this one :)", "created_at": "2018-01-23T18:50:51Z", "updated_at": "2018-11-23T15:38:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163340509", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4794", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163340509"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163340509"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4794"}}, "body_html": "<p>C++ generates so many default methods... Why can't it generate this one :)</p>", "body_text": "C++ generates so many default methods... Why can't it generate this one :)", "in_reply_to_id": 163190007}