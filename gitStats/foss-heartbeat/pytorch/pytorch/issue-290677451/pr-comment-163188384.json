{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163188384", "pull_request_review_id": 90756700, "id": 163188384, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzE4ODM4NA==", "diff_hunk": "@@ -0,0 +1,180 @@\n+#include <Python.h>\n+#include <iostream>\n+#include <vector>\n+#include \"torch/csrc/autograd/variable.h\"\n+#include \"torch/csrc/utils/hash.h\"\n+\n+namespace torch { namespace jit {\n+\n+// GraphExecutor creates specializations of Graphs for different dimensionalitities\n+// and types of inputs.\n+\n+// ArgumentSpec represents one particular specialization.\n+// It is designed so that it can be created, hashed, and compared quickly\n+// since it is used along the hot-path of the JIT to check if the code\n+// we have created is valid for the given inputs.\n+\n+// TensorInfoPOD is only used internally in ArgumentSpec\n+// API users should use TensorInfo\n+struct TensorInfoPOD {\n+  // total size is 64-bit\n+  unsigned int type : 8;\n+  unsigned int defined : 1;\n+  unsigned int requires_grad : 1;\n+  int device : 22;\n+  uint32_t total_dims; // all TensorInfoPODs are in ArgumentSpec's tensor_info() array.\n+                       // total_dims is the total number of dimensions seen so far\n+                       // in all previous members of tensor_info(), including this tensor\n+                       // 2*total_dims becomes the offset into the sizes_strides list\n+                       // for the _next_ tensor in the tensor_info array\n+                       // for tensor 0, the offset is always 0\n+};\n+static_assert(sizeof(TensorInfoPOD) == sizeof(int64_t),\n+  \"TensorInfoPOD must be 64-bit struct for ArgumentSpec encoding to work\");\n+\n+struct TensorInfo;\n+\n+struct ArgumentSpec {\n+  ArgumentSpec(bool nograd, ArrayRef<autograd::Variable> tensors)\n+  :  hash_code(0), ntensors(tensors.size()) {\n+    // the first allocation creates enough data for 5-dim tensors\n+    data.reserve((1 + 5*2)*ntensors);\n+    // insert 0-filled data for the TensorInfoPOD structs\n+    data.insert(data.begin(), ntensors, 0);\n+    // and reinterpret our data array as these structs\n+    TensorInfoPOD * pods = reinterpret_cast<TensorInfoPOD*>(data.data());\n+    int total_dims = 0;\n+    for(size_t i = 0; i < ntensors; i++) {\n+      const auto & t = tensors[i];\n+      auto & pod = pods[i];\n+      pod.defined = t.defined();\n+      if(t.defined()) {\n+        pod.type = static_cast<unsigned int>(t.type().scalarType());\n+        pod.device = (!t.type().is_cuda()) ? -1 : t.get_device();\n+        pod.requires_grad = !nograd && t.requires_grad();\n+        total_dims += t.ndimension();\n+        auto sizes = t.sizes();\n+        data.insert(data.end(), sizes.begin(), sizes.end());\n+        auto strides = t.strides();\n+        data.insert(data.end(), strides.begin(), strides.end());\n+      }\n+      // each POD has a running tally of all dimensions including its own\n+      pod.total_dims = total_dims;\n+    }\n+    // we precompute the hash_code to minimize the time inside of hash\n+    // table operations where we may need to hold a compiler cache lock.\n+    hash_code = hash_combine(0, ntensors);\n+    for(auto d : data) {\n+      hash_code = hash_combine(hash_code, d);\n+    }\n+  }\n+\n+  // equality is fast: check ntensors, and then check the raw array data,\n+  // there are no size/stride indirections\n+  bool operator==(const ArgumentSpec & spec) const {\n+    return ntensors == spec.ntensors && data == spec.data;\n+  }\n+  friend struct TensorInfo;\n+  TensorInfo tensorInfo(size_t i) const;\n+  size_t size() const {\n+    return ntensors;\n+  }\n+  size_t hashCode() const {\n+    return hash_code;\n+  }\n+\n+private:\n+  ArrayRef<TensorInfoPOD> tensor_info() const {\n+    return ArrayRef<TensorInfoPOD>(reinterpret_cast<const TensorInfoPOD*>(data.data()), ntensors);\n+  }\n+  // the start of the sizes_strides information, which comes after the TensorInfoPOD list.\n+  const int64_t* sizes_strides() const {\n+    return data.data() + ntensors;\n+  }\n+  size_t hash_code; // precomputed on construction\n+  uint32_t ntensors;\n+  // layout is ntensors of TensorPOD (each 64-bit) followed by their size and stride info\n+  // for 3 tensors: [t0POD][t1POD][t2POD][t0 sizes][t0 strides][t1 sizes][t1 strides][t0 sizes][t1 strides]", "path": "torch/csrc/jit/argument_spec.h", "position": null, "original_position": 97, "commit_id": "8c94a8bc0d4b5c4d066abd86087622fd6e0ed726", "original_commit_id": "4cda5572438f0aacf324b4b8d8b439647b1506b2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Did you mean to write `[t2 sizes][t2 strides]` at the end?", "created_at": "2018-01-23T09:43:02Z", "updated_at": "2018-11-23T15:38:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163188384", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4794", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163188384"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163188384"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4794"}}, "body_html": "<p>Did you mean to write <code>[t2 sizes][t2 strides]</code> at the end?</p>", "body_text": "Did you mean to write [t2 sizes][t2 strides] at the end?"}