{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163190787", "pull_request_review_id": 90761527, "id": 163190787, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzE5MDc4Nw==", "diff_hunk": "@@ -0,0 +1,180 @@\n+#include <Python.h>\n+#include <iostream>\n+#include <vector>\n+#include \"torch/csrc/autograd/variable.h\"\n+#include \"torch/csrc/utils/hash.h\"\n+\n+namespace torch { namespace jit {\n+\n+// GraphExecutor creates specializations of Graphs for different dimensionalitities\n+// and types of inputs.\n+\n+// ArgumentSpec represents one particular specialization.\n+// It is designed so that it can be created, hashed, and compared quickly\n+// since it is used along the hot-path of the JIT to check if the code\n+// we have created is valid for the given inputs.\n+\n+// TensorInfoPOD is only used internally in ArgumentSpec\n+// API users should use TensorInfo\n+struct TensorInfoPOD {\n+  // total size is 64-bit\n+  unsigned int type : 8;\n+  unsigned int defined : 1;\n+  unsigned int requires_grad : 1;\n+  int device : 22;", "path": "torch/csrc/jit/argument_spec.h", "position": null, "original_position": 24, "commit_id": "8c94a8bc0d4b5c4d066abd86087622fd6e0ed726", "original_commit_id": "4cda5572438f0aacf324b4b8d8b439647b1506b2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Aaaand there you go:\r\n> Whether char, short, int, long, and long long bit fields that aren't explicitly signed or unsigned are signed or unsigned. For example, `int b:3`; may have the range of values `0..7` or `-4..3`. (until C++14)\r\n", "created_at": "2018-01-23T09:51:58Z", "updated_at": "2018-11-23T15:38:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163190787", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4794", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163190787"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163190787"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4794"}}, "body_html": "<p>Aaaand there you go:</p>\n<blockquote>\n<p>Whether char, short, int, long, and long long bit fields that aren't explicitly signed or unsigned are signed or unsigned. For example, <code>int b:3</code>; may have the range of values <code>0..7</code> or <code>-4..3</code>. (until C++14)</p>\n</blockquote>", "body_text": "Aaaand there you go:\n\nWhether char, short, int, long, and long long bit fields that aren't explicitly signed or unsigned are signed or unsigned. For example, int b:3; may have the range of values 0..7 or -4..3. (until C++14)", "in_reply_to_id": 163188021}