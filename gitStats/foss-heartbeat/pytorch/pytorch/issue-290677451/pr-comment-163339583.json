{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163339583", "pull_request_review_id": 90937528, "id": 163339583, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzMzOTU4Mw==", "diff_hunk": "@@ -0,0 +1,180 @@\n+#include <Python.h>\n+#include <iostream>\n+#include <vector>\n+#include \"torch/csrc/autograd/variable.h\"\n+#include \"torch/csrc/utils/hash.h\"\n+\n+namespace torch { namespace jit {\n+\n+// GraphExecutor creates specializations of Graphs for different dimensionalitities\n+// and types of inputs.\n+\n+// ArgumentSpec represents one particular specialization.\n+// It is designed so that it can be created, hashed, and compared quickly\n+// since it is used along the hot-path of the JIT to check if the code\n+// we have created is valid for the given inputs.\n+\n+// TensorInfoPOD is only used internally in ArgumentSpec\n+// API users should use TensorInfo\n+struct TensorInfoPOD {\n+  // total size is 64-bit\n+  unsigned int type : 8;\n+  unsigned int defined : 1;\n+  unsigned int requires_grad : 1;\n+  int device : 22;\n+  uint32_t total_dims; // all TensorInfoPODs are in ArgumentSpec's tensor_info() array.\n+                       // total_dims is the total number of dimensions seen so far\n+                       // in all previous members of tensor_info(), including this tensor\n+                       // 2*total_dims becomes the offset into the sizes_strides list\n+                       // for the _next_ tensor in the tensor_info array\n+                       // for tensor 0, the offset is always 0\n+};\n+static_assert(sizeof(TensorInfoPOD) == sizeof(int64_t),\n+  \"TensorInfoPOD must be 64-bit struct for ArgumentSpec encoding to work\");\n+\n+struct TensorInfo;\n+\n+struct ArgumentSpec {\n+  ArgumentSpec(bool nograd, ArrayRef<autograd::Variable> tensors)\n+  :  hash_code(0), ntensors(tensors.size()) {\n+    // the first allocation creates enough data for 5-dim tensors\n+    data.reserve((1 + 5*2)*ntensors);\n+    // insert 0-filled data for the TensorInfoPOD structs\n+    data.insert(data.begin(), ntensors, 0);\n+    // and reinterpret our data array as these structs\n+    TensorInfoPOD * pods = reinterpret_cast<TensorInfoPOD*>(data.data());", "path": "torch/csrc/jit/argument_spec.h", "position": null, "original_position": 45, "commit_id": "8c94a8bc0d4b5c4d066abd86087622fd6e0ed726", "original_commit_id": "4cda5572438f0aacf324b4b8d8b439647b1506b2", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Heh, yeah -- I will try making data into a union type so this is kosher.", "created_at": "2018-01-23T18:47:42Z", "updated_at": "2018-11-23T15:38:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163339583", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4794", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163339583"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4794#discussion_r163339583"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4794"}}, "body_html": "<p>Heh, yeah -- I will try making data into a union type so this is kosher.</p>", "body_text": "Heh, yeah -- I will try making data into a union type so this is kosher.", "in_reply_to_id": 163187744}