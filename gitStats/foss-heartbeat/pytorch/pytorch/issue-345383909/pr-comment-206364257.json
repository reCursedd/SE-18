{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206364257", "pull_request_review_id": 141765828, "id": 206364257, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjM2NDI1Nw==", "diff_hunk": "@@ -0,0 +1,780 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/detail/CUDAHooksInterface.h\"\n+#include \"ATen/native/GridSampler.h\"\n+\n+#ifdef _OPENMP\n+#include <omp.h>\n+#endif\n+\n+namespace at { namespace native {\n+\n+using at::native::detail::GridSamplerInterpolation;\n+using at::native::detail::GridSamplerPadding;\n+\n+namespace {\n+  static inline int64_t clip_coordinates(int64_t in, int64_t clip_limit) {\n+    return std::min(clip_limit - 1, std::max(in, static_cast<int64_t>(0)));\n+  }\n+\n+  static inline bool within_bounds_2d(int64_t h, int64_t w, int64_t H, int64_t W) {\n+    return h >= 0 && h < H && w >= 0 && w < W;\n+  }\n+\n+  static inline bool within_bounds_3d(int64_t d, int64_t h, int64_t w, int64_t D, int64_t H, int64_t W) {\n+    return d >= 0 && d < D && h >= 0 && h < H && w >= 0 && w < W;\n+  }\n+\n+  template<typename scalar_t>\n+  static inline void safe_add_2d(scalar_t *data, int64_t h, int64_t w,\n+                                 int64_t sH, int64_t sW, int64_t H, int64_t W,\n+                                 scalar_t delta) {\n+    if (h >= 0 && h < H && w >= 0 && w < W) {\n+      data[h * sH + w * sW] += delta;\n+    }\n+  }\n+\n+  template<typename scalar_t>\n+  static inline void safe_add_3d(scalar_t *data, int64_t d, int64_t h, int64_t w,\n+                                 int64_t sD, int64_t sH, int64_t sW,\n+                                 int64_t D, int64_t H, int64_t W,\n+                                 scalar_t delta) {\n+    if (d >=0 && d < D && h >= 0 && h < H && w >= 0 && w < W) {\n+      data[d * sD + h * sH + w * sW] += delta;\n+    }\n+  }\n+\n+  template<typename scalar_t>\n+  Tensor grid_sampler2d_cpu_impl(const Tensor& input, const Tensor& grid,\n+                                 GridSamplerInterpolation interpolation_mode,\n+                                 GridSamplerPadding padding_mode) {\n+    int64_t N = input.size(0);\n+    int64_t C = input.size(1);\n+    int64_t inp_H = input.size(2);\n+    int64_t inp_W = input.size(3);\n+    int64_t out_H = grid.size(1);\n+    int64_t out_W = grid.size(2);\n+    auto output = at::empty({N, C, out_H, out_W}, input.options());\n+    int64_t inp_sN = input.stride(0);\n+    int64_t inp_sC = input.stride(1);\n+    int64_t inp_sH = input.stride(2);\n+    int64_t inp_sW = input.stride(3);\n+    int64_t grid_sN = grid.stride(0);\n+    int64_t grid_sH = grid.stride(1);\n+    int64_t grid_sW = grid.stride(2);\n+    int64_t grid_sCoor = grid.stride(3);\n+    int64_t out_sN = output.stride(0);\n+    int64_t out_sC = output.stride(1);\n+    int64_t out_sH = output.stride(2);\n+    int64_t out_sW = output.stride(3);\n+    scalar_t *inp_ptr = input.data<scalar_t>();\n+    scalar_t *out_ptr = output.data<scalar_t>();\n+    scalar_t *grid_ptr = grid.data<scalar_t>();\n+    // loop over each output pixel\n+    #ifdef _OPENMP\n+    #pragma omp parallel for\n+    #endif\n+    for (int64_t n = 0; n < N; ++n) {\n+      scalar_t *grid_ptr_N = grid_ptr + n * grid_sN;\n+      scalar_t *inp_ptr_N = inp_ptr + n * inp_sN;\n+      for (int64_t h = 0; h < out_H; ++h) {\n+        for (int64_t w = 0; w < out_W; ++w) {\n+          // get the corresponding input x, y co-ordinates from grid\n+          scalar_t ix = grid_ptr_N[h * grid_sH + w * grid_sW];\n+          scalar_t iy = grid_ptr_N[h * grid_sH + w * grid_sW + grid_sCoor];\n+\n+          // normalize ix, iy from [-1, 1] to [0, inp_W-1] & [0, inp_H-1]\n+          ix = ((ix + 1) / 2) * (inp_W - 1);\n+          iy = ((iy + 1) / 2) * (inp_H - 1);\n+\n+          // get NE, NW, SE, SW pixel values from (x, y)\n+          int64_t ix_nw = static_cast<int64_t>(std::floor(ix));\n+          int64_t iy_nw = static_cast<int64_t>(std::floor(iy));\n+          int64_t ix_ne = ix_nw + 1;\n+          int64_t iy_ne = iy_nw;\n+          int64_t ix_sw = ix_nw;\n+          int64_t iy_sw = iy_nw + 1;\n+          int64_t ix_se = ix_nw + 1;\n+          int64_t iy_se = iy_nw + 1;\n+\n+          // get surfaces to each neighbor:\n+          scalar_t nw = (ix_se - ix)    * (iy_se - iy);\n+          scalar_t ne = (ix    - ix_sw) * (iy_sw - iy);\n+          scalar_t sw = (ix_ne - ix)    * (iy    - iy_ne);\n+          scalar_t se = (ix    - ix_nw) * (iy    - iy_nw);\n+\n+          if (padding_mode == GridSamplerPadding::Border) {\n+            // clip coordinates to image borders\n+            ix_nw = clip_coordinates(ix_nw, inp_W);\n+            iy_nw = clip_coordinates(iy_nw, inp_H);\n+            ix_ne = clip_coordinates(ix_ne, inp_W);\n+            iy_ne = clip_coordinates(iy_ne, inp_H);\n+            ix_sw = clip_coordinates(ix_sw, inp_W);\n+            iy_sw = clip_coordinates(iy_sw, inp_H);\n+            ix_se = clip_coordinates(ix_se, inp_W);\n+            iy_se = clip_coordinates(iy_se, inp_H);\n+          }\n+\n+          // calculate bilinear weighted pixel value and set output pixel\n+          scalar_t *out_ptr_NCHW = out_ptr + n * out_sN + h * out_sH + w * out_sW;\n+          scalar_t *inp_ptr_NC = inp_ptr_N;\n+          for (int c = 0; c < C; ++c, out_ptr_NCHW += out_sC, inp_ptr_NC += inp_sC) {\n+            //   (c, iy_nw, ix_nw) * nw + (c, iy_ne, ix_ne) * ne\n+            // + (c, iy_sw, ix_sw) * sw + (c, iy_se, ix_se) * se\n+            *out_ptr_NCHW = static_cast<scalar_t>(0);\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_nw, ix_nw, inp_H, inp_W)) {\n+              *out_ptr_NCHW += inp_ptr_NC[iy_nw * inp_sH + ix_nw * inp_sW] * nw;\n+            }\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_ne, ix_ne, inp_H, inp_W)) {\n+              *out_ptr_NCHW += inp_ptr_NC[iy_ne * inp_sH + ix_ne * inp_sW] * ne;\n+            }\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_sw, ix_sw, inp_H, inp_W)) {\n+              *out_ptr_NCHW += inp_ptr_NC[iy_sw * inp_sH + ix_sw * inp_sW] * sw;\n+            }\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_se, ix_se, inp_H, inp_W)) {\n+              *out_ptr_NCHW += inp_ptr_NC[iy_se * inp_sH + ix_se * inp_sW] * se;\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return output;\n+  }\n+\n+  template<typename scalar_t>\n+  Tensor grid_sampler3d_cpu_impl(const Tensor& input, const Tensor& grid,\n+                                 GridSamplerInterpolation interpolation_mode,\n+                                 GridSamplerPadding padding_mode) {\n+    int64_t N = input.size(0);\n+    int64_t C = input.size(1);\n+    int64_t inp_D = input.size(2);\n+    int64_t inp_H = input.size(3);\n+    int64_t inp_W = input.size(4);\n+    int64_t out_D = grid.size(1);\n+    int64_t out_H = grid.size(2);\n+    int64_t out_W = grid.size(3);\n+    auto output = at::empty({N, C, out_D, out_H, out_W}, input.options());\n+    int64_t inp_sN = input.stride(0);\n+    int64_t inp_sC = input.stride(1);\n+    int64_t inp_sD = input.stride(2);\n+    int64_t inp_sH = input.stride(3);\n+    int64_t inp_sW = input.stride(4);\n+    int64_t grid_sN = grid.stride(0);\n+    int64_t grid_sD = grid.stride(1);\n+    int64_t grid_sH = grid.stride(2);\n+    int64_t grid_sW = grid.stride(3);\n+    int64_t grid_sCoor = grid.stride(4);\n+    int64_t out_sN = output.stride(0);\n+    int64_t out_sC = output.stride(1);\n+    int64_t out_sD = output.stride(2);\n+    int64_t out_sH = output.stride(3);\n+    int64_t out_sW = output.stride(4);\n+    scalar_t *inp_ptr = input.data<scalar_t>();\n+    scalar_t *out_ptr = output.data<scalar_t>();\n+    scalar_t *grid_ptr = grid.data<scalar_t>();\n+    // loop over each output pixel\n+    #ifdef _OPENMP\n+    #pragma omp parallel for\n+    #endif\n+    for (int64_t n = 0; n < N; ++n) {\n+      scalar_t *grid_ptr_N = grid_ptr + n * grid_sN;\n+      scalar_t *inp_ptr_N = inp_ptr + n * inp_sN;\n+      for (int64_t d = 0; d < out_D; ++d) {\n+        for (int64_t h = 0; h < out_H; ++h) {\n+          for (int64_t w = 0; w < out_W; ++w) {\n+            // get the corresponding input x, y, z co-ordinates from grid\n+            scalar_t *grid_ptr_NDHW = grid_ptr_N + d * grid_sD + h * grid_sH + w * grid_sW;\n+            scalar_t ix = *grid_ptr_NDHW;\n+            scalar_t iy = grid_ptr_NDHW[grid_sCoor];\n+            scalar_t iz = grid_ptr_NDHW[2 * grid_sCoor];\n+\n+            // normalize ix, iy, iz from [-1, 1] to [0, inp_W-1] & [0, inp_H-1] & [0, inp_D-1]\n+            ix = ((ix + 1) / 2) * (inp_W - 1);\n+            iy = ((iy + 1) / 2) * (inp_H - 1);\n+            iz = ((iz + 1) / 2) * (inp_D - 1);\n+\n+            // get corner pixel values from (x, y, z)\n+            // for 4d, we used north-east-south-west\n+            // for 5d, we add top-bottom\n+            int64_t ix_tnw = static_cast<int64_t>(std::floor(ix));\n+            int64_t iy_tnw = static_cast<int64_t>(std::floor(iy));\n+            int64_t iz_tnw = static_cast<int64_t>(std::floor(iz));\n+\n+            int64_t ix_tne = ix_tnw + 1;\n+            int64_t iy_tne = iy_tnw;\n+            int64_t iz_tne = iz_tnw;\n+\n+            int64_t ix_tsw = ix_tnw;\n+            int64_t iy_tsw = iy_tnw + 1;\n+            int64_t iz_tsw = iz_tnw;\n+\n+            int64_t ix_tse = ix_tnw + 1;\n+            int64_t iy_tse = iy_tnw + 1;\n+            int64_t iz_tse = iz_tnw;\n+\n+            int64_t ix_bnw = ix_tnw;\n+            int64_t iy_bnw = iy_tnw;\n+            int64_t iz_bnw = iz_tnw + 1;\n+\n+            int64_t ix_bne = ix_tnw + 1;\n+            int64_t iy_bne = iy_tnw;\n+            int64_t iz_bne = iz_tnw + 1;\n+\n+            int64_t ix_bsw = ix_tnw;\n+            int64_t iy_bsw = iy_tnw + 1;\n+            int64_t iz_bsw = iz_tnw + 1;\n+\n+            int64_t ix_bse = ix_tnw + 1;\n+            int64_t iy_bse = iy_tnw + 1;\n+            int64_t iz_bse = iz_tnw + 1;\n+\n+            // get surfaces to each neighbor:\n+            scalar_t tnw = (ix_bse - ix)    * (iy_bse - iy)    * (iz_bse - iz);\n+            scalar_t tne = (ix    - ix_bsw) * (iy_bsw - iy)    * (iz_bsw - iz);\n+            scalar_t tsw = (ix_bne - ix)    * (iy    - iy_bne) * (iz_bne - iz);\n+            scalar_t tse = (ix    - ix_bnw) * (iy    - iy_bnw) * (iz_bnw - iz);\n+            scalar_t bnw = (ix_tse - ix)    * (iy_tse - iy)    * (iz - iz_tse);\n+            scalar_t bne = (ix    - ix_tsw) * (iy_tsw - iy)    * (iz - iz_tsw);\n+            scalar_t bsw = (ix_tne - ix)    * (iy    - iy_tne) * (iz - iz_tne);\n+            scalar_t bse = (ix    - ix_tnw) * (iy    - iy_tnw) * (iz - iz_tnw);\n+\n+            if (padding_mode == GridSamplerPadding::Border) {\n+              // clip coordinates to image borders\n+              ix_tnw = clip_coordinates(ix_tnw, inp_W);\n+              iy_tnw = clip_coordinates(iy_tnw, inp_H);\n+              iz_tnw = clip_coordinates(iz_tnw, inp_D);\n+              ix_tne = clip_coordinates(ix_tne, inp_W);\n+              iy_tne = clip_coordinates(iy_tne, inp_H);\n+              iz_tne = clip_coordinates(iz_tne, inp_D);\n+              ix_tsw = clip_coordinates(ix_tsw, inp_W);\n+              iy_tsw = clip_coordinates(iy_tsw, inp_H);\n+              iz_tsw = clip_coordinates(iz_tsw, inp_D);\n+              ix_tse = clip_coordinates(ix_tse, inp_W);\n+              iy_tse = clip_coordinates(iy_tse, inp_H);\n+              iz_tse = clip_coordinates(iz_tse, inp_D);\n+              ix_bnw = clip_coordinates(ix_bnw, inp_W);\n+              iy_bnw = clip_coordinates(iy_bnw, inp_H);\n+              iz_bnw = clip_coordinates(iz_bnw, inp_D);\n+              ix_bne = clip_coordinates(ix_bne, inp_W);\n+              iy_bne = clip_coordinates(iy_bne, inp_H);\n+              iz_bne = clip_coordinates(iz_bne, inp_D);\n+              ix_bsw = clip_coordinates(ix_bsw, inp_W);\n+              iy_bsw = clip_coordinates(iy_bsw, inp_H);\n+              iz_bsw = clip_coordinates(iz_bsw, inp_D);\n+              ix_bse = clip_coordinates(ix_bse, inp_W);\n+              iy_bse = clip_coordinates(iy_bse, inp_H);\n+              iz_bse = clip_coordinates(iz_bse, inp_D);\n+            }\n+\n+            // calculate bilinear weighted pixel value and set output pixel\n+            scalar_t *out_ptr_NCDHW = out_ptr + n * out_sN + d * out_sD + h * out_sH + w * out_sW;\n+            scalar_t *inp_ptr_NC = inp_ptr_N;\n+            for (int c = 0; c < C; ++c, out_ptr_NCDHW += out_sC, inp_ptr_NC += inp_sC) {\n+              //   (c, iz_tnw, iy_tnw, ix_tnw) * tnw + (c, iz_tne, iy_tne, ix_tne) * tne\n+              // + (c, iz_tsw, iy_tsw, ix_tsw) * tsw + (c, iz_tse, iy_tse, ix_tse) * tse\n+              // + (c, iz_bnw, iy_bnw, ix_bnw) * bnw + (c, iz_bne, iy_bne, ix_bne) * bne\n+              // + (c, iz_bsw, iy_bsw, ix_bsw) * bsw + (c, iz_bse, iy_bse, ix_bse) * bse\n+              *out_ptr_NCDHW = static_cast<scalar_t>(0);\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_tnw, iy_tnw, ix_tnw, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_tnw * inp_sD + iy_tnw * inp_sH + ix_tnw * inp_sW] * tnw;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_tne, iy_tne, ix_tne, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_tne * inp_sD + iy_tne * inp_sH + ix_tne * inp_sW] * tne;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_tsw, iy_tsw, ix_tsw, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_tsw * inp_sD + iy_tsw * inp_sH + ix_tsw * inp_sW] * tsw;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_tse, iy_tse, ix_tse, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_tse * inp_sD + iy_tse * inp_sH + ix_tse * inp_sW] * tse;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_bnw, iy_bnw, ix_bnw, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_bnw * inp_sD + iy_bnw * inp_sH + ix_bnw * inp_sW] * bnw;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_bne, iy_bne, ix_bne, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_bne * inp_sD + iy_bne * inp_sH + ix_bne * inp_sW] * bne;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_bsw, iy_bsw, ix_bsw, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_bsw * inp_sD + iy_bsw * inp_sH + ix_bsw * inp_sW] * bsw;\n+              }\n+              if (padding_mode != GridSamplerPadding::Zeros || within_bounds_3d(iz_bse, iy_bse, ix_bse, inp_D, inp_H, inp_W)) {\n+                *out_ptr_NCDHW += inp_ptr_NC[iz_bse * inp_sD + iy_bse * inp_sH + ix_bse * inp_sW] * bse;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return output;\n+  }\n+\n+  template<typename scalar_t>\n+  std::tuple<Tensor, Tensor>\n+  grid_sampler2d_backward_cpu_impl(const Tensor& grad_output,\n+                                   const Tensor& input, const Tensor& grid,\n+                                   GridSamplerInterpolation interpolation_mode,\n+                                   GridSamplerPadding padding_mode) {\n+    auto grad_input = at::zeros_like(input);\n+    auto grad_grid = at::empty_like(grid);\n+    int64_t N = input.size(0);\n+    int64_t C = input.size(1);\n+    int64_t inp_H = input.size(2);\n+    int64_t inp_W = input.size(3);\n+    int64_t out_H = grid.size(1);\n+    int64_t out_W = grid.size(2);\n+    int64_t inp_sN = input.stride(0);\n+    int64_t inp_sC = input.stride(1);\n+    int64_t inp_sH = input.stride(2);\n+    int64_t inp_sW = input.stride(3);\n+    int64_t grid_sN = grid.stride(0);\n+    int64_t grid_sH = grid.stride(1);\n+    int64_t grid_sW = grid.stride(2);\n+    int64_t grid_sCoor = grid.stride(3);\n+    int64_t gOut_sN = grad_output.stride(0);\n+    int64_t gOut_sC = grad_output.stride(1);\n+    int64_t gOut_sH = grad_output.stride(2);\n+    int64_t gOut_sW = grad_output.stride(3);\n+    int64_t gInp_sN = grad_input.stride(0);\n+    int64_t gInp_sC = grad_input.stride(1);\n+    int64_t gInp_sH = grad_input.stride(2);\n+    int64_t gInp_sW = grad_input.stride(3);\n+    int64_t gGrid_sN = grad_grid.stride(0);\n+    int64_t gGrid_sW = grad_grid.stride(2);\n+    scalar_t *inp_ptr = input.data<scalar_t>();\n+    scalar_t *grid_ptr = grid.data<scalar_t>();\n+    scalar_t *gOut_ptr = grad_output.data<scalar_t>();\n+    scalar_t *gInp_ptr = grad_input.data<scalar_t>();\n+    scalar_t *gGrid_ptr = grad_grid.data<scalar_t>();\n+    // loop over each output pixel\n+    #ifdef _OPENMP\n+    #pragma omp parallel for\n+    #endif\n+    for (int64_t n = 0; n < N; ++n) {\n+      scalar_t *grid_ptr_N = grid_ptr + n * grid_sN;\n+      scalar_t *inp_ptr_N = inp_ptr + n * inp_sN;\n+      scalar_t *gGrid_ptr_NHW = gGrid_ptr + n * gGrid_sN;\n+      for (int64_t h = 0; h < out_H; ++h) {\n+        for (int64_t w = 0; w < out_W; ++w, gGrid_ptr_NHW += gGrid_sW /* grad_grid is contiguous */ ) {\n+          // get the corresponding input x, y co-ordinates from grid\n+          scalar_t ix = grid_ptr_N[h * grid_sH + w * grid_sW];\n+          scalar_t iy = grid_ptr_N[h * grid_sH + w * grid_sW + grid_sCoor];\n+\n+          // normalize ix, iy from [-1, 1] to [0, inp_W-1] & [0, inp_H-1]\n+          ix = ((ix + 1) / 2) * (inp_W - 1);\n+          iy = ((iy + 1) / 2) * (inp_H - 1);\n+\n+          // get NE, NW, SE, SW pixel values from (x, y)\n+          int64_t ix_nw = static_cast<int64_t>(std::floor(ix));\n+          int64_t iy_nw = static_cast<int64_t>(std::floor(iy));\n+          int64_t ix_ne = ix_nw + 1;\n+          int64_t iy_ne = iy_nw;\n+          int64_t ix_sw = ix_nw;\n+          int64_t iy_sw = iy_nw + 1;\n+          int64_t ix_se = ix_nw + 1;\n+          int64_t iy_se = iy_nw + 1;\n+\n+          // get surfaces to each neighbor:\n+          scalar_t nw = (ix_se - ix)    * (iy_se - iy);\n+          scalar_t ne = (ix    - ix_sw) * (iy_sw - iy);\n+          scalar_t sw = (ix_ne - ix)    * (iy    - iy_ne);\n+          scalar_t se = (ix    - ix_nw) * (iy    - iy_nw);\n+\n+          int64_t ix_nw_cl, iy_nw_cl, ix_ne_cl, iy_ne_cl, ix_sw_cl, iy_sw_cl, ix_se_cl, iy_se_cl;\n+\n+          if (padding_mode == GridSamplerPadding::Border) {\n+            // get clipped NE, NW, SE, SW pixel values from (x, y)\n+            ix_nw_cl = clip_coordinates(ix_nw, inp_W);\n+            iy_nw_cl = clip_coordinates(iy_nw, inp_H);\n+            ix_ne_cl = clip_coordinates(ix_ne, inp_W);\n+            iy_ne_cl = clip_coordinates(iy_ne, inp_H);\n+            ix_sw_cl = clip_coordinates(ix_sw, inp_W);\n+            iy_sw_cl = clip_coordinates(iy_sw, inp_H);\n+            ix_se_cl = clip_coordinates(ix_se, inp_W);\n+            iy_se_cl = clip_coordinates(iy_se, inp_H);\n+          } else {\n+            ix_nw_cl = ix_nw;\n+            iy_nw_cl = iy_nw;\n+            ix_ne_cl = ix_ne;\n+            iy_ne_cl = iy_ne;\n+            ix_sw_cl = ix_sw;\n+            iy_sw_cl = iy_sw;\n+            ix_se_cl = ix_se;\n+            iy_se_cl = iy_se;\n+          }\n+\n+          scalar_t gix = static_cast<scalar_t>(0), giy = static_cast<scalar_t>(0);\n+          scalar_t *gOut_ptr_NCHW = gOut_ptr + n * gOut_sN + h * gOut_sH + w * gOut_sW;\n+          scalar_t *gInp_ptr_NC = gInp_ptr + n * gInp_sN;\n+          scalar_t *inp_ptr_NC = inp_ptr_N;\n+          // calculate bilinear weighted pixel value and set output pixel\n+          for (int c = 0; c < C; ++c, gOut_ptr_NCHW += gOut_sC, gInp_ptr_NC += gInp_sC, inp_ptr_NC += inp_sC) {\n+            scalar_t gOut = *gOut_ptr_NCHW;\n+\n+            // calculate and set grad_input\n+            safe_add_2d(gInp_ptr_NC, iy_nw_cl, ix_nw_cl, gInp_sH, gInp_sW, inp_H, inp_W, nw * gOut);\n+            safe_add_2d(gInp_ptr_NC, iy_ne_cl, ix_ne_cl, gInp_sH, gInp_sW, inp_H, inp_W, ne * gOut);\n+            safe_add_2d(gInp_ptr_NC, iy_sw_cl, ix_sw_cl, gInp_sH, gInp_sW, inp_H, inp_W, sw * gOut);\n+            safe_add_2d(gInp_ptr_NC, iy_se_cl, ix_se_cl, gInp_sH, gInp_sW, inp_H, inp_W, se * gOut);\n+\n+            // calculate grad_grid\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_nw_cl, ix_nw_cl, inp_H, inp_W)) {\n+              scalar_t nw_val = inp_ptr_NC[iy_nw_cl * inp_sH + ix_nw_cl * inp_sW];\n+              gix -= nw_val * (iy_se - iy) * gOut;\n+              giy -= nw_val * (ix_se - ix) * gOut;\n+            }\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_ne_cl, ix_ne_cl, inp_H, inp_W)) {\n+              scalar_t ne_val = inp_ptr_NC[iy_ne_cl * inp_sH + ix_ne_cl * inp_sW];\n+              gix += ne_val * (iy_sw - iy) * gOut;\n+              giy -= ne_val * (ix - ix_sw) * gOut;\n+            }\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_sw_cl, ix_sw_cl, inp_H, inp_W)) {\n+              scalar_t sw_val = inp_ptr_NC[iy_sw_cl * inp_sH + ix_sw_cl * inp_sW];\n+              gix -= sw_val * (iy - iy_ne) * gOut;\n+              giy += sw_val * (ix_ne - ix) * gOut;\n+            }\n+            if (padding_mode != GridSamplerPadding::Zeros || within_bounds_2d(iy_se_cl, ix_se_cl, inp_H, inp_W)) {\n+              scalar_t se_val = inp_ptr_NC[iy_se_cl * inp_sH + ix_se_cl * inp_sW];\n+              gix += se_val * (iy - iy_nw) * gOut;\n+              giy += se_val * (ix - ix_nw) * gOut;\n+            }\n+          }\n+\n+          // un-normalize grad_grid values back to [-1, 1] constraints\n+          gix = gix * (inp_W - 1) / 2;\n+          giy = giy * (inp_H - 1) / 2;\n+\n+          // assuming grad_grid is contiguous\n+          gGrid_ptr_NHW[0] = gix;", "path": "aten/src/ATen/native/GridSampler.cpp", "position": 446, "original_position": 446, "commit_id": "7acb794792a691f5ebd29a6b634f917536353723", "original_commit_id": "50e624fe8ccd9545cc2bb7d0ce88a6121ac4178a", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "THNN version does an addition,  but each `grad_grid` index is only processed once. So assign is more efficient.", "created_at": "2018-07-31T00:36:17Z", "updated_at": "2018-11-23T15:48:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/9961#discussion_r206364257", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9961", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206364257"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9961#discussion_r206364257"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9961"}}, "body_html": "<p>THNN version does an addition,  but each <code>grad_grid</code> index is only processed once. So assign is more efficient.</p>", "body_text": "THNN version does an addition,  but each grad_grid index is only processed once. So assign is more efficient."}