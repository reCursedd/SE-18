{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206285036", "pull_request_review_id": 141671743, "id": 206285036, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjI4NTAzNg==", "diff_hunk": "@@ -4832,52 +4832,52 @@ def test_grid_sample(self):\n         def test_cpu_against_cuda(N, C, H, W, padding_mode):\n             def test_shape(N, C, IH, IW, H, W, padding_mode):\n \n-                input_cpu = Variable(torch.randn(C, N, IH, IW).transpose(0, 1), requires_grad=True)\n-                grid_cpu = Variable(torch.randn(H, N, W, 2).transpose(0, 1), requires_grad=True)\n+                input_cpu = torch.randn(C, N, IH, IW).transpose(0, 1).requires_grad_()\n+                grid_cpu = torch.randn(H, N, W, 2).transpose(0, 1).requires_grad_()\n                 out_cpu = F.grid_sample(input_cpu, grid_cpu, padding_mode=padding_mode)\n                 self.assertTrue(out_cpu.size() == torch.Size([N, C, H, W]))\n \n-                input_cuda = Variable(input_cpu.data.transpose(0, 1).cuda().transpose(0, 1), requires_grad=True)\n-                grid_cuda = Variable(grid_cpu.data.transpose(0, 1).cuda().transpose(0, 1), requires_grad=True)\n+                input_cuda = input_cpu.detach().transpose(0, 1).cuda().transpose(0, 1).requires_grad_()\n+                grid_cuda = grid_cpu.detach().transpose(0, 1).cuda().transpose(0, 1).requires_grad_()\n                 out_cuda = F.grid_sample(input_cuda, grid_cuda, padding_mode=padding_mode)\n                 self.assertEqual(out_cpu, out_cuda)\n \n-                gradients = out_cpu.data.new(out_cpu.size()).normal_()\n+                gradients = torch.randn_like(out_cpu)\n                 out_cpu.backward(gradients)\n                 out_cuda.backward(gradients.cuda())\n                 self.assertEqual(input_cpu.grad, input_cuda.grad)\n                 self.assertEqual(grid_cpu.grad, grid_cuda.grad, prec=5e-5)\n \n                 # check that zero-dimensional input strides don't error out\n-                base_input = torch.randn(C, IH, IW)\n-                input_cpu = Variable(base_input.expand(input_cuda.size()), requires_grad=True)\n+                base_input = torch.randn(N, C, 1, IW)\n+                input_cpu = base_input.expand_as(input_cuda).requires_grad_()\n                 grid_cpu = torch.randn(N, H, W, 2, requires_grad=True)\n                 out_cpu = F.grid_sample(input_cpu, grid_cpu, padding_mode=padding_mode)\n \n-                input_cuda = Variable(base_input.cuda().expand(input_cuda.size()), requires_grad=True)\n-                grid_cuda = Variable(grid_cpu.data.cuda(), requires_grad=True)\n+                input_cuda = base_input.cuda().expand_as(input_cuda).requires_grad_()\n+                grid_cuda = grid_cpu.detach().cuda().requires_grad_()\n                 out_cuda = F.grid_sample(input_cuda, grid_cuda, padding_mode=padding_mode)\n                 self.assertEqual(out_cpu, out_cuda)\n \n             # test same size output\n             test_shape(N, C, H, W, H, W, padding_mode)\n \n             # test larger output\n-            N = random.randint(1, 8)\n-            C = random.randint(1, 8)\n-            IH = random.randint(1, 8)\n-            IW = random.randint(1, 8)\n+            N = random.randint(2, 8)", "path": "test/test_nn.py", "position": 48, "original_position": 48, "commit_id": "7acb794792a691f5ebd29a6b634f917536353723", "original_commit_id": "50e624fe8ccd9545cc2bb7d0ce88a6121ac4178a", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "I bumped the min size here so the test are more interesting.", "created_at": "2018-07-30T18:59:12Z", "updated_at": "2018-11-23T15:48:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/9961#discussion_r206285036", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9961", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206285036"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9961#discussion_r206285036"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9961"}}, "body_html": "<p>I bumped the min size here so the test are more interesting.</p>", "body_text": "I bumped the min size here so the test are more interesting."}