{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175035370", "pull_request_review_id": 104498573, "id": 175035370, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTAzNTM3MA==", "diff_hunk": "@@ -811,17 +821,29 @@ def forward(self, x):\n                               target[rank * len(gpu_subset):(rank + 1) * len(gpu_subset)].cuda(gpu_subset[0]),\n                               loss)\n \n-        for layer_gpu, layer_DDP in zip(model_gpu.modules(), model_DDP.module.modules()):\n-            if isinstance(layer_gpu, nn.Linear):\n-                self.assertEqual(layer_gpu.weight.grad, layer_DDP.weight.grad)\n+        assert_equal_model(model_gpu, model_DDP)\n \n-        # Run SGD and second iteration to shake out errors\n-        optimizer.step()\n-        self._test_DDP_helper(model_DDP,\n-                              input_cpu,\n+        # Update weights and run a second iteration to shake out errors\n+        model_step(model_gpu)\n+        model_step(model_DDP.module)\n+\n+        # Shuffle the input so that DDP input is different from the first iteration\n+        input_cpu = input_cpu[torch.randperm(batch_size)]\n+\n+        # Run the second iteration for single gpu\n+        self._test_DDP_helper(model_gpu,\n+                              input_cpu.cuda(gpu_subset[0]),\n                               target.cuda(gpu_subset[0]),\n                               loss)\n \n+        # Run the second iteration for DDP\n+        self._test_DDP_helper(model_DDP,\n+                              input_cpu[rank * len(gpu_subset):(rank + 1) * len(gpu_subset)],\n+                              target[rank * len(gpu_subset):(rank + 1) * len(gpu_subset)].cuda(gpu_subset[0]),\n+                              loss)\n+\n+        assert_equal_model(model_gpu, model_DDP)", "path": "test/test_distributed.py", "position": null, "original_position": 60, "commit_id": "ab3832af65779a69071fde292d2360179da83f86", "original_commit_id": "1c269775036b831d1677fc3465f10b6675d37251", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Would it be possible to fold the two iterations into a for loop? They look almost the same:\r\n```python\r\nfor i in range(2):\r\n    for model in [model_gpu, model_DDP]:\r\n        self._test_DDP_helper(model, ...)\r\n        model_step(model)\r\n    assert_equal_model(model_gpu, model_DDP)\r\n    input_cpu = input_cpu[torch.randperm(batch_size)]\r\n```", "created_at": "2018-03-16T09:30:49Z", "updated_at": "2018-11-23T15:40:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/5830#discussion_r175035370", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5830", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175035370"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5830#discussion_r175035370"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5830"}}, "body_html": "<p>Would it be possible to fold the two iterations into a for loop? They look almost the same:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2</span>):\n    <span class=\"pl-k\">for</span> model <span class=\"pl-k\">in</span> [model_gpu, model_DDP]:\n        <span class=\"pl-c1\">self</span>._test_DDP_helper(model, <span class=\"pl-c1\">...</span>)\n        model_step(model)\n    assert_equal_model(model_gpu, model_DDP)\n    input_cpu <span class=\"pl-k\">=</span> input_cpu[torch.randperm(batch_size)]</pre></div>", "body_text": "Would it be possible to fold the two iterations into a for loop? They look almost the same:\nfor i in range(2):\n    for model in [model_gpu, model_DDP]:\n        self._test_DDP_helper(model, ...)\n        model_step(model)\n    assert_equal_model(model_gpu, model_DDP)\n    input_cpu = input_cpu[torch.randperm(batch_size)]"}