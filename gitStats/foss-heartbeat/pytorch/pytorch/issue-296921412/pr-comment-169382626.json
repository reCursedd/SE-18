{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169382626", "pull_request_review_id": 97887273, "id": 169382626, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTM4MjYyNg==", "diff_hunk": "@@ -281,14 +279,27 @@ def __init__(self, *args, **kwargs):\n         self.check_gradgrad = kwargs.get('check_gradgrad', True)\n \n     def _do_extra_tests(self, test_case, module, input, target):\n-        if self.check_gradgrad:\n-            params = tuple(x for x in module.parameters())\n-            if not isinstance(input, tuple):\n-                _assertGradAndGradgradChecks(test_case, lambda x, y, *args, **kw: module(x, y),\n-                                             (input, target) + params)\n-            else:\n-                _assertGradAndGradgradChecks(test_case, lambda x, y, z, *args, **kw: module(x, y, z),\n-                                             input + (target,) + params)\n+        if not self.check_gradgrad:\n+            return\n+\n+        test_case.assertFalse(target.requires_grad)\n+\n+        params = tuple(x for x in module.parameters())\n+        if not isinstance(input, tuple):\n+            inputs = (input,) + params\n+\n+            def apply_fn(input, *params):\n+                return module(input, target)\n+        else:\n+            inputs = input + params\n+\n+            def apply_fn(input1, input2, *params):\n+                return module(input1, input2, target)\n+\n+        # We don't pass `target` as part of inputs because we don't currently", "path": "test/test_nn.py", "position": null, "original_position": 146, "commit_id": "e22441c7d8edd20473033ec8d50e657604b33d02", "original_commit_id": "f5497fa01ab1319e9fc5523e18957a3b97baf27a", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: add a TODO", "created_at": "2018-02-20T16:43:43Z", "updated_at": "2018-11-23T15:39:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/5225#discussion_r169382626", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5225", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/169382626"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5225#discussion_r169382626"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5225"}}, "body_html": "<p>nit: add a TODO</p>", "body_text": "nit: add a TODO"}