{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170320015", "pull_request_review_id": 98995897, "id": 170320015, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDMyMDAxNQ==", "diff_hunk": "@@ -0,0 +1,274 @@\n+#include \"python_tensor.h\"\n+\n+#include <structmember.h>\n+#include <mutex>\n+#include <pybind11/pybind11.h>\n+#include <sstream>\n+\n+#include \"torch/csrc/assertions.h\"\n+#include \"torch/csrc/Exceptions.h\"\n+#include \"torch/csrc/autograd/variable.h\"\n+#include \"torch/csrc/autograd/python_variable.h\"\n+#include \"torch/csrc/autograd/generated/VariableType.h\"\n+#include \"torch/csrc/utils/python_strings.h\"\n+#include \"torch/csrc/utils/tensor_new.h\"\n+#include \"torch/csrc/utils/tensor_types.h\"\n+\n+namespace torch { namespace tensor {\n+\n+using namespace at;\n+using namespace torch::autograd;\n+\n+struct PyTensorType {\n+  PyTypeObject py_type;\n+  at::Type* aten_type;\n+  bool is_cuda;\n+  bool is_sparse;\n+  bool is_default;\n+  char name[64];\n+};\n+\n+static_assert(std::is_standard_layout<PyTensorType>::value, \"PyTensorType must be standard layout\");\n+\n+static PyTensorType* default_tensor_type;\n+static std::once_flag init_cuda_flag;\n+\n+static void py_bind_tensor_types(const std::vector<PyTensorType>& tensor_types);\n+\n+static PyObject* Tensor_new(PyTypeObject *type, PyObject *args, PyObject *kwargs) {\n+  HANDLE_TH_ERRORS\n+  auto& tensor_type = *((PyTensorType*)type);\n+  if (!tensor_type.aten_type) {\n+    throw TypeError(\"type %s not available\", tensor_type.name);\n+  }\n+  if (tensor_type.is_cuda) {\n+    std::call_once(init_cuda_flag, []() {\n+      pybind11::module::import(\"torch.cuda\").attr(\"init\")();\n+    });\n+  }\n+  return THPVariable_Wrap(torch::utils::legacy_tensor_ctor(*tensor_type.aten_type, args, kwargs));\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static PyObject* Tensor_instancecheck(PyTensorType* self, PyObject* arg) {\n+  HANDLE_TH_ERRORS\n+  if (THPVariable_Check(arg)) {\n+    if (self->is_default) {\n+      Py_RETURN_TRUE;\n+    }", "path": "torch/csrc/tensor/python_tensor.cpp", "position": null, "original_position": 58, "commit_id": "e22441c7d8edd20473033ec8d50e657604b33d02", "original_commit_id": "051272b55bb033b09413888e250ebe9c44443461", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "yes, exactly. (It's also the default type returned by functions like torch.ones, torch.zeros)", "created_at": "2018-02-23T17:52:27Z", "updated_at": "2018-11-23T15:39:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170320015", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5225", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170320015"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170320015"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5225"}}, "body_html": "<p>yes, exactly. (It's also the default type returned by functions like torch.ones, torch.zeros)</p>", "body_text": "yes, exactly. (It's also the default type returned by functions like torch.ones, torch.zeros)", "in_reply_to_id": 170207114}