{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170319237", "pull_request_review_id": 98994947, "id": 170319237, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDMxOTIzNw==", "diff_hunk": "@@ -1299,11 +1299,11 @@ def emit_body(env, option):\n                 body.append(CodeTemplate(return_tensor).substitute(\n                     env, wrapped_tensor=wrapped_tensor, maybe_scalar=maybe_scalar))\n             # return the same underlying Tensor type for both real and accreal; this ensures\n-            # e.g. x.sum(0) and x.sum() return the same type.\n+            # e.g. x.sum(0) and x.sum() return the same type. We explicitly cast to the\n+            # ScalarType before constructing the scalarTensor to avoid overflow checking.", "path": "aten/src/ATen/function_wrapper.py", "position": 6, "original_position": 6, "commit_id": "e22441c7d8edd20473033ec8d50e657604b33d02", "original_commit_id": "051272b55bb033b09413888e250ebe9c44443461", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Mostly because some tests blindly call `x.sum()` on ByteTensors and trigger the check. This isn't great, but it matches the existing behavior of `sum(dim=0)`. Longer term I'd like to:\r\n\r\n1) accept an optional dtype when calling sum()\r\n2) probably default to a sufficiently large type (e.g. int64_t for ByteTensor)\r\n3) handle mixed precision operations, at least with scalars, so that things like x / x.sum() don't break", "created_at": "2018-02-23T17:49:19Z", "updated_at": "2018-11-23T15:39:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170319237", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5225", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170319237"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170319237"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5225"}}, "body_html": "<p>Mostly because some tests blindly call <code>x.sum()</code> on ByteTensors and trigger the check. This isn't great, but it matches the existing behavior of <code>sum(dim=0)</code>. Longer term I'd like to:</p>\n<ol>\n<li>accept an optional dtype when calling sum()</li>\n<li>probably default to a sufficiently large type (e.g. int64_t for ByteTensor)</li>\n<li>handle mixed precision operations, at least with scalars, so that things like x / x.sum() don't break</li>\n</ol>", "body_text": "Mostly because some tests blindly call x.sum() on ByteTensors and trigger the check. This isn't great, but it matches the existing behavior of sum(dim=0). Longer term I'd like to:\n\naccept an optional dtype when calling sum()\nprobably default to a sufficiently large type (e.g. int64_t for ByteTensor)\nhandle mixed precision operations, at least with scalars, so that things like x / x.sum() don't break", "in_reply_to_id": 170185788}