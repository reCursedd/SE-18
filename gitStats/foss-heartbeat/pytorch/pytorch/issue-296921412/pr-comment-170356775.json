{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170356775", "pull_request_review_id": 99039041, "id": 170356775, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDM1Njc3NQ==", "diff_hunk": "@@ -277,31 +277,34 @@ def _vector_str(self):\n         ident = ' '\n     if self.numel() < PRINT_OPTS.threshold:\n         return (strt +\n-                '\\n'.join(ident + fmt.format(val / scale) for val in self) +\n+                '\\n'.join(ident + fmt.format(val.item() / scale) for val in self) +\n                 '\\n')\n     else:\n         return (strt +\n-                '\\n'.join(ident + fmt.format(val / scale) for val in self[:n]) +\n+                '\\n'.join(ident + fmt.format(val.item() / scale) for val in self[:n]) +\n                 '\\n' + (ident + dotfmt.format(u\"\\u22EE\")) +\n-                '\\n'.join(ident + fmt.format(val / scale) for val in self[-n:]) +\n+                '\\n'.join(ident + fmt.format(val.item() / scale) for val in self[-n:]) +\n                 '\\n')\n \n \n def _str(self, include_footer=True):\n-    if self.ndimension() == 0:\n+    empty = self.numel() == 0\n+    dim = self.dim()\n+\n+    if empty:\n         strt = ''\n-    elif self.ndimension() == 1:\n+    elif dim == 0:\n+        strt = _vector_str(self.unsqueeze(0))\n+    elif dim == 1:\n         strt = _vector_str(self)\n-    elif self.ndimension() == 2:\n+    elif dim == 2:\n         strt = _matrix_str(self)\n     else:\n         strt = _tensor_str(self)\n \n     if include_footer:\n-        size_str = 'x'.join(str(size) for size in self.size())\n-        size_str_prefix = 'of size ' if self.ndimension() > 0 else 'with no dimension'\n+        size_str = '({})'.format(','.join(str(size) for size in self.shape))", "path": "torch/_tensor_str.py", "position": null, "original_position": 72, "commit_id": "e22441c7d8edd20473033ec8d50e657604b33d02", "original_commit_id": "5670cadc6d42a86a8a9267253ddd2c6f400cfa9e", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I'm fine with str(tuple(self.shape)); the suggested code doesn't have spaces between elements and it seemed nicer to be more compact but I don't have a strong preference.", "created_at": "2018-02-23T20:15:37Z", "updated_at": "2018-11-23T15:39:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170356775", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5225", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170356775"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170356775"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5225"}}, "body_html": "<p>I'm fine with str(tuple(self.shape)); the suggested code doesn't have spaces between elements and it seemed nicer to be more compact but I don't have a strong preference.</p>", "body_text": "I'm fine with str(tuple(self.shape)); the suggested code doesn't have spaces between elements and it seemed nicer to be more compact but I don't have a strong preference.", "in_reply_to_id": 170094446}