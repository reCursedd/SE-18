{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170105895", "pull_request_review_id": 98739677, "id": 170105895, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDEwNTg5NQ==", "diff_hunk": "@@ -154,8 +153,10 @@ static Tensor legacy_sparse_tensor_ctor(const Type& type, PyObject* args, PyObje\n     auto cdata = reinterpret_cast<void*>(r.toInt64(0));\n     return type.unsafeTensorFromTH(cdata, true);\n   } else if (r.idx == 3) {\n+    AutoGPU auto_gpu(r.toInt64(2));", "path": "torch/csrc/utils/tensor_new.cpp", "position": 12, "original_position": 12, "commit_id": "e22441c7d8edd20473033ec8d50e657604b33d02", "original_commit_id": "5670cadc6d42a86a8a9267253ddd2c6f400cfa9e", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "are we sure this is right?  We don't have a device on the equivalent non-sparse functions because it creates an alias which doesn't make sense if the device is different.  I guess it could be different with sparse, although I would expect there is an assumption that tensor.device() == tensor._indices.device() == tensor._values.device(), and I'm not sure what would happen in this case.\r\n\r\nMaybe just get rid of the device parameter?", "created_at": "2018-02-22T21:55:49Z", "updated_at": "2018-11-23T15:39:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170105895", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5225", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170105895"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5225#discussion_r170105895"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5225"}}, "body_html": "<p>are we sure this is right?  We don't have a device on the equivalent non-sparse functions because it creates an alias which doesn't make sense if the device is different.  I guess it could be different with sparse, although I would expect there is an assumption that tensor.device() == tensor._indices.device() == tensor._values.device(), and I'm not sure what would happen in this case.</p>\n<p>Maybe just get rid of the device parameter?</p>", "body_text": "are we sure this is right?  We don't have a device on the equivalent non-sparse functions because it creates an alias which doesn't make sense if the device is different.  I guess it could be different with sparse, although I would expect there is an assumption that tensor.device() == tensor._indices.device() == tensor._values.device(), and I'm not sure what would happen in this case.\nMaybe just get rid of the device parameter?"}