{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/295981169", "html_url": "https://github.com/pytorch/pytorch/issues/1311#issuecomment-295981169", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1311", "id": 295981169, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTk4MTE2OQ==", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-21T00:14:16Z", "updated_at": "2017-04-21T00:14:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ah, ok, this is a common situation with an existing (but undocumented) best practice. You want to conduct only one <code>.backward</code>, but you have several stochastic nodes. So you can take the stochastic nodes, call <code>.reinforce</code> on each of them, then add/concat/otherwise combine them (I use <code>sum(list_of_stochastic_nodes)</code> and backpropagate from <code>var = 0 * sum(list_of_stoch_nodes); var.backward()</code>. If you also have a non-RL loss, you can add this <code>0*</code> term to the loss before calling <code>.backward</code>.</p>", "body_text": "Ah, ok, this is a common situation with an existing (but undocumented) best practice. You want to conduct only one .backward, but you have several stochastic nodes. So you can take the stochastic nodes, call .reinforce on each of them, then add/concat/otherwise combine them (I use sum(list_of_stochastic_nodes) and backpropagate from var = 0 * sum(list_of_stoch_nodes); var.backward(). If you also have a non-RL loss, you can add this 0* term to the loss before calling .backward.", "body": "Ah, ok, this is a common situation with an existing (but undocumented) best practice. You want to conduct only one `.backward`, but you have several stochastic nodes. So you can take the stochastic nodes, call `.reinforce` on each of them, then add/concat/otherwise combine them (I use `sum(list_of_stochastic_nodes)` and backpropagate from `var = 0 * sum(list_of_stoch_nodes); var.backward()`. If you also have a non-RL loss, you can add this `0*` term to the loss before calling `.backward`."}