{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10824", "id": 210541384, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEwNTQxMzg0", "html_url": "https://github.com/pytorch/pytorch/pull/10824", "diff_url": "https://github.com/pytorch/pytorch/pull/10824.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10824.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10824", "number": 10824, "state": "closed", "locked": false, "title": "Change Tensor/TensorImpl to use c10::intrusive_ptr", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Summary:\r\nPull Request resolved: https://github.com/pytorch/pytorch/pull/10824\r\n\r\nAPI additions:\r\n- Tensor(c10::intrusive_ptr<TensorImpl,UndefinedTensor>&&)\r\n- Tensor(const c10::intrusive_ptr<TensorImpl,UndefinedTensor>&)\r\n- Tensor::operator=(Tensor&&) && (for completeness sake)\r\n- TensorBase::unsafeGetTensorImpl()\r\n- TensorBase::unsafeReleaseTensorImpl()\r\n- TensorBase::getIntrusivePtr()\r\n- TensorImpl::type_id()\r\n- Tensor::set_data()\r\n- Tensor::is_same(Tensor)\r\n- Tensor::use_count()\r\n- Tensor::type_id()\r\n- Tensor::scalar_type()\r\n- WeakTensor::is_same(WeakTensor)\r\n- intrusive_ptr::weak_use_count()\r\n- weak_intrusive_ptr::weak_use_count()\r\n- c10::raw::intrusive_ptr::{incref,decref,make_weak}\r\n- c10::raw::weak_intrusive_ptr::{incref,decref,lock}\r\n\r\nAPI changes:\r\n- Tensor::pImpl is no longer public (and now named tensor_impl_)\r\n    - Most methods accessed this way are now accessible on Tensor\r\n      maybe_zero_dim() and set_wrapped_number() being prominent exceptions\r\n      (they are now accessed through unsafeGetTensorImpl())\r\n- Type is no longer friend of Tensor\r\n- TensorBase::reset(TensorImpl*) is deleted\r\n- TensorBase::reset(TensorImpl*, bool should_retain) is deleted\r\n- TensorBase::swap(TensorBaseImpl&) is deleted; use std::swap instead\r\n- TensorBase::get() is deleted; use unsafeGetTensorImpl() instead\r\n- TensorBase::detach() is deleted; use unsafeReleaseTensorImpl() instead\r\n- TensorBase::retain() is deleted; use _raw_incref() instead\r\n- TensorBase::release() is deleted; use _raw_decref() instead\r\n- WeakTensor lost most of its methods (it no longer inherits from\r\n  TensorBase)\r\n- TensorImpl::storage() is now a const method\r\n- Tensor(TensorBase) constructor removed, instead\r\n  we go through getIntrusivePtr().  I'm not sure about\r\n  this change; I happened to have accidentally removed the\r\n  TensorBase constructor and decided to fix call sites,\r\n  but I could go the other way.\r\n- detail::set_data() is deleted; use Tensor::set_data() instead\r\n- c10::raw_intrusive_ptr_target removed; use the functions in c10::raw instead.\r\n  (The reason for this change, is that it is invalid to cast an intrusive_ptr_target*\r\n  to a raw_intrusive_ptr_target* to take advantage of the methods. But there is\r\n  no reason the incref/decref methods shouldn't also work on intrusive_ptr_target;\r\n  it is primarily an API consideration. We can be more standards compliant by\r\n  keeping them as functions, which are universally applicable.)\r\n- intrusive_ptr::reclaim() and weak_intrusive_ptr::reclaim() now work on\r\n  pointers of the NullType. (This counts as a bug fix, because the documentation\r\n  specified that pointers produced by release() are valid to reclaim(), and\r\n  a release() on a null intrusive_ptr produces the NullType::singleton())\r\n\r\nBug fixes:\r\n- Dispatch code for mutable references incorrectly returned\r\n  a reference to a value argument (which would immediately\r\n  go out of scope).  They now correctly return a tensor by\r\n  value.\r\n- intrusive_ptr copy/move assignment did not work correctly when\r\n  an object was assigned to itself. We now check for this case and\r\n  no-op if so. (This bug manifested itself as a Tensor mysteriously\r\n  becoming an UndefinedTensor after lines of code like\r\n  'x = x.mul_(y)'\r\n\r\nOther changes:\r\n- The checked cast functions in Utils.h have now been\r\n  renamed and detemplatized into checked unwrap functions.\r\n- Added type_id() and scalar_type() methods to Tensor\r\n- pImpl is no longer public\r\n- Documented what the && overloads are doing\r\n- All occurrences of 'new TensorImpl' (and similar spellings, like 'new THTensor')\r\n  have been expunged. This is NO LONGER a valid way to create a new\r\n  tensor, and if you do this, upon your first incref, you will catch an ASSERT\r\n  failure saying that only tensors created by intrusive_ptr::release() are valid\r\n  to reclaim(). Use c10::make_intrusive instead in this situation.\r\n- IValue is adjusted to use intrusive_ptr instead of Retainable, and all\r\n  other sub-classes of Retainable were modified to use intrusive_ptr.\r\n  When doing this, I had to make the constructors of sub-classes like\r\n  ConstantList public, so that c10::make_intrusive could invoke them.  Fortunately,\r\n  if you incorrectly stack allocate a ConstantList, and then try to get an\r\n  intrusive_ptr to it, it will fail, as stack allocated ConstantLists have refcount 0.\r\n- IValue very narrowly sidesteps the problem of handling NullType, as it\r\n  considers intrusive_ptr<TensorImpl> identical to intrusive_ptr<TensorImpl, UndefinedTensor>\r\n  which is not always true. This was always the case, but there's now a comment\r\n  explaining what's going on.\r\n\r\nSome MSVC bugs were uncovered during the preparation of this patch.\r\nThey are documented as comments in the code.\r\n\r\nDifferential Revision: D9481140", "created_at": "2018-08-23T18:47:31Z", "updated_at": "2018-11-23T15:50:05Z", "closed_at": "2018-08-27T23:12:03Z", "merged_at": null, "merge_commit_sha": "f16ce98923577fd01c34574cb469c1f5f526fb9e", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10824/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10824/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10824/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/d0d160a5f5d5784bcc7111819ae20f9947b2a4e0", "head": {"label": "ezyang:export-D9481140", "ref": "export-D9481140", "sha": "d0d160a5f5d5784bcc7111819ae20f9947b2a4e0", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "repo": {"id": 101798885, "node_id": "MDEwOlJlcG9zaXRvcnkxMDE3OTg4ODU=", "name": "pytorch", "full_name": "ezyang/pytorch", "private": false, "owner": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/ezyang/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/ezyang/pytorch", "forks_url": "https://api.github.com/repos/ezyang/pytorch/forks", "keys_url": "https://api.github.com/repos/ezyang/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/ezyang/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/ezyang/pytorch/teams", "hooks_url": "https://api.github.com/repos/ezyang/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/ezyang/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/ezyang/pytorch/events", "assignees_url": "https://api.github.com/repos/ezyang/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/ezyang/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/ezyang/pytorch/tags", "blobs_url": "https://api.github.com/repos/ezyang/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/ezyang/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/ezyang/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/ezyang/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/ezyang/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/ezyang/pytorch/languages", "stargazers_url": "https://api.github.com/repos/ezyang/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/ezyang/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/ezyang/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/ezyang/pytorch/subscription", "commits_url": "https://api.github.com/repos/ezyang/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/ezyang/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/ezyang/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/ezyang/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/ezyang/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/ezyang/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/ezyang/pytorch/merges", "archive_url": "https://api.github.com/repos/ezyang/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/ezyang/pytorch/downloads", "issues_url": "https://api.github.com/repos/ezyang/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/ezyang/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/ezyang/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/ezyang/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/ezyang/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/ezyang/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/ezyang/pytorch/deployments", "created_at": "2017-08-29T19:28:39Z", "updated_at": "2018-10-29T15:06:40Z", "pushed_at": "2018-11-21T22:30:09Z", "git_url": "git://github.com/ezyang/pytorch.git", "ssh_url": "git@github.com:ezyang/pytorch.git", "clone_url": "https://github.com/ezyang/pytorch.git", "svn_url": "https://github.com/ezyang/pytorch", "homepage": "http://pytorch.org", "size": 88254, "stargazers_count": 1, "watchers_count": 1, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 2, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 2, "watchers": 1, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "67f6f930a8a4ffb1561b4146644493531d0b6009", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10824"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10824"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/10824"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/10824/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10824/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10824/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/d0d160a5f5d5784bcc7111819ae20f9947b2a4e0"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Summary:<br>\nPull Request <span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes pull request #10824.\">resolved</span>: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"353507053\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/10824\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/10824/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/10824\">#10824</a></p>\n<p>API additions:</p>\n<ul>\n<li>Tensor(c10::intrusive_ptr&lt;TensorImpl,UndefinedTensor&gt;&amp;&amp;)</li>\n<li>Tensor(const c10::intrusive_ptr&lt;TensorImpl,UndefinedTensor&gt;&amp;)</li>\n<li>Tensor::operator=(Tensor&amp;&amp;) &amp;&amp; (for completeness sake)</li>\n<li>TensorBase::unsafeGetTensorImpl()</li>\n<li>TensorBase::unsafeReleaseTensorImpl()</li>\n<li>TensorBase::getIntrusivePtr()</li>\n<li>TensorImpl::type_id()</li>\n<li>Tensor::set_data()</li>\n<li>Tensor::is_same(Tensor)</li>\n<li>Tensor::use_count()</li>\n<li>Tensor::type_id()</li>\n<li>Tensor::scalar_type()</li>\n<li>WeakTensor::is_same(WeakTensor)</li>\n<li>intrusive_ptr::weak_use_count()</li>\n<li>weak_intrusive_ptr::weak_use_count()</li>\n<li>c10::raw::intrusive_ptr::{incref,decref,make_weak}</li>\n<li>c10::raw::weak_intrusive_ptr::{incref,decref,lock}</li>\n</ul>\n<p>API changes:</p>\n<ul>\n<li>Tensor::pImpl is no longer public (and now named tensor_impl_)\n<ul>\n<li>Most methods accessed this way are now accessible on Tensor<br>\nmaybe_zero_dim() and set_wrapped_number() being prominent exceptions<br>\n(they are now accessed through unsafeGetTensorImpl())</li>\n</ul>\n</li>\n<li>Type is no longer friend of Tensor</li>\n<li>TensorBase::reset(TensorImpl*) is deleted</li>\n<li>TensorBase::reset(TensorImpl*, bool should_retain) is deleted</li>\n<li>TensorBase::swap(TensorBaseImpl&amp;) is deleted; use std::swap instead</li>\n<li>TensorBase::get() is deleted; use unsafeGetTensorImpl() instead</li>\n<li>TensorBase::detach() is deleted; use unsafeReleaseTensorImpl() instead</li>\n<li>TensorBase::retain() is deleted; use _raw_incref() instead</li>\n<li>TensorBase::release() is deleted; use _raw_decref() instead</li>\n<li>WeakTensor lost most of its methods (it no longer inherits from<br>\nTensorBase)</li>\n<li>TensorImpl::storage() is now a const method</li>\n<li>Tensor(TensorBase) constructor removed, instead<br>\nwe go through getIntrusivePtr().  I'm not sure about<br>\nthis change; I happened to have accidentally removed the<br>\nTensorBase constructor and decided to fix call sites,<br>\nbut I could go the other way.</li>\n<li>detail::set_data() is deleted; use Tensor::set_data() instead</li>\n<li>c10::raw_intrusive_ptr_target removed; use the functions in c10::raw instead.<br>\n(The reason for this change, is that it is invalid to cast an intrusive_ptr_target*<br>\nto a raw_intrusive_ptr_target* to take advantage of the methods. But there is<br>\nno reason the incref/decref methods shouldn't also work on intrusive_ptr_target;<br>\nit is primarily an API consideration. We can be more standards compliant by<br>\nkeeping them as functions, which are universally applicable.)</li>\n<li>intrusive_ptr::reclaim() and weak_intrusive_ptr::reclaim() now work on<br>\npointers of the NullType. (This counts as a bug fix, because the documentation<br>\nspecified that pointers produced by release() are valid to reclaim(), and<br>\na release() on a null intrusive_ptr produces the NullType::singleton())</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Dispatch code for mutable references incorrectly returned<br>\na reference to a value argument (which would immediately<br>\ngo out of scope).  They now correctly return a tensor by<br>\nvalue.</li>\n<li>intrusive_ptr copy/move assignment did not work correctly when<br>\nan object was assigned to itself. We now check for this case and<br>\nno-op if so. (This bug manifested itself as a Tensor mysteriously<br>\nbecoming an UndefinedTensor after lines of code like<br>\n'x = x.mul_(y)'</li>\n</ul>\n<p>Other changes:</p>\n<ul>\n<li>The checked cast functions in Utils.h have now been<br>\nrenamed and detemplatized into checked unwrap functions.</li>\n<li>Added type_id() and scalar_type() methods to Tensor</li>\n<li>pImpl is no longer public</li>\n<li>Documented what the &amp;&amp; overloads are doing</li>\n<li>All occurrences of 'new TensorImpl' (and similar spellings, like 'new THTensor')<br>\nhave been expunged. This is NO LONGER a valid way to create a new<br>\ntensor, and if you do this, upon your first incref, you will catch an ASSERT<br>\nfailure saying that only tensors created by intrusive_ptr::release() are valid<br>\nto reclaim(). Use c10::make_intrusive instead in this situation.</li>\n<li>IValue is adjusted to use intrusive_ptr instead of Retainable, and all<br>\nother sub-classes of Retainable were modified to use intrusive_ptr.<br>\nWhen doing this, I had to make the constructors of sub-classes like<br>\nConstantList public, so that c10::make_intrusive could invoke them.  Fortunately,<br>\nif you incorrectly stack allocate a ConstantList, and then try to get an<br>\nintrusive_ptr to it, it will fail, as stack allocated ConstantLists have refcount 0.</li>\n<li>IValue very narrowly sidesteps the problem of handling NullType, as it<br>\nconsiders intrusive_ptr identical to intrusive_ptr&lt;TensorImpl, UndefinedTensor&gt;<br>\nwhich is not always true. This was always the case, but there's now a comment<br>\nexplaining what's going on.</li>\n</ul>\n<p>Some MSVC bugs were uncovered during the preparation of this patch.<br>\nThey are documented as comments in the code.</p>\n<p>Differential Revision: D9481140</p>", "body_text": "Summary:\nPull Request resolved: #10824\nAPI additions:\n\nTensor(c10::intrusive_ptr<TensorImpl,UndefinedTensor>&&)\nTensor(const c10::intrusive_ptr<TensorImpl,UndefinedTensor>&)\nTensor::operator=(Tensor&&) && (for completeness sake)\nTensorBase::unsafeGetTensorImpl()\nTensorBase::unsafeReleaseTensorImpl()\nTensorBase::getIntrusivePtr()\nTensorImpl::type_id()\nTensor::set_data()\nTensor::is_same(Tensor)\nTensor::use_count()\nTensor::type_id()\nTensor::scalar_type()\nWeakTensor::is_same(WeakTensor)\nintrusive_ptr::weak_use_count()\nweak_intrusive_ptr::weak_use_count()\nc10::raw::intrusive_ptr::{incref,decref,make_weak}\nc10::raw::weak_intrusive_ptr::{incref,decref,lock}\n\nAPI changes:\n\nTensor::pImpl is no longer public (and now named tensor_impl_)\n\nMost methods accessed this way are now accessible on Tensor\nmaybe_zero_dim() and set_wrapped_number() being prominent exceptions\n(they are now accessed through unsafeGetTensorImpl())\n\n\nType is no longer friend of Tensor\nTensorBase::reset(TensorImpl*) is deleted\nTensorBase::reset(TensorImpl*, bool should_retain) is deleted\nTensorBase::swap(TensorBaseImpl&) is deleted; use std::swap instead\nTensorBase::get() is deleted; use unsafeGetTensorImpl() instead\nTensorBase::detach() is deleted; use unsafeReleaseTensorImpl() instead\nTensorBase::retain() is deleted; use _raw_incref() instead\nTensorBase::release() is deleted; use _raw_decref() instead\nWeakTensor lost most of its methods (it no longer inherits from\nTensorBase)\nTensorImpl::storage() is now a const method\nTensor(TensorBase) constructor removed, instead\nwe go through getIntrusivePtr().  I'm not sure about\nthis change; I happened to have accidentally removed the\nTensorBase constructor and decided to fix call sites,\nbut I could go the other way.\ndetail::set_data() is deleted; use Tensor::set_data() instead\nc10::raw_intrusive_ptr_target removed; use the functions in c10::raw instead.\n(The reason for this change, is that it is invalid to cast an intrusive_ptr_target*\nto a raw_intrusive_ptr_target* to take advantage of the methods. But there is\nno reason the incref/decref methods shouldn't also work on intrusive_ptr_target;\nit is primarily an API consideration. We can be more standards compliant by\nkeeping them as functions, which are universally applicable.)\nintrusive_ptr::reclaim() and weak_intrusive_ptr::reclaim() now work on\npointers of the NullType. (This counts as a bug fix, because the documentation\nspecified that pointers produced by release() are valid to reclaim(), and\na release() on a null intrusive_ptr produces the NullType::singleton())\n\nBug fixes:\n\nDispatch code for mutable references incorrectly returned\na reference to a value argument (which would immediately\ngo out of scope).  They now correctly return a tensor by\nvalue.\nintrusive_ptr copy/move assignment did not work correctly when\nan object was assigned to itself. We now check for this case and\nno-op if so. (This bug manifested itself as a Tensor mysteriously\nbecoming an UndefinedTensor after lines of code like\n'x = x.mul_(y)'\n\nOther changes:\n\nThe checked cast functions in Utils.h have now been\nrenamed and detemplatized into checked unwrap functions.\nAdded type_id() and scalar_type() methods to Tensor\npImpl is no longer public\nDocumented what the && overloads are doing\nAll occurrences of 'new TensorImpl' (and similar spellings, like 'new THTensor')\nhave been expunged. This is NO LONGER a valid way to create a new\ntensor, and if you do this, upon your first incref, you will catch an ASSERT\nfailure saying that only tensors created by intrusive_ptr::release() are valid\nto reclaim(). Use c10::make_intrusive instead in this situation.\nIValue is adjusted to use intrusive_ptr instead of Retainable, and all\nother sub-classes of Retainable were modified to use intrusive_ptr.\nWhen doing this, I had to make the constructors of sub-classes like\nConstantList public, so that c10::make_intrusive could invoke them.  Fortunately,\nif you incorrectly stack allocate a ConstantList, and then try to get an\nintrusive_ptr to it, it will fail, as stack allocated ConstantLists have refcount 0.\nIValue very narrowly sidesteps the problem of handling NullType, as it\nconsiders intrusive_ptr identical to intrusive_ptr<TensorImpl, UndefinedTensor>\nwhich is not always true. This was always the case, but there's now a comment\nexplaining what's going on.\n\nSome MSVC bugs were uncovered during the preparation of this patch.\nThey are documented as comments in the code.\nDifferential Revision: D9481140", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 1, "review_comments": 19, "maintainer_can_modify": false, "commits": 1, "additions": 495, "deletions": 552, "changed_files": 44}