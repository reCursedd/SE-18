{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212683182", "pull_request_review_id": 149371795, "id": 212683182, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjY4MzE4Mg==", "diff_hunk": "@@ -91,11 +91,7 @@ Storage ${Type}::storageWithAllocator(int64_t size, Allocator* allocator) const\n     return Storage(ScalarType::${ScalarName}, size, allocator);\n }\n Tensor ${Type}::unsafeTensorFromTH(void * th_pointer, bool retain) const {\n-  TensorImpl* pimpl = (TensorImpl*)(th_pointer);\n-  if (retain) {\n-    pimpl->retain();\n-  }\n-  return Tensor(pimpl, false);\n+  return Tensor(static_cast<TensorImpl*>(th_pointer), retain);", "path": "aten/src/ATen/templates/TypeDerived.cpp", "position": 9, "original_position": 9, "commit_id": "d0d160a5f5d5784bcc7111819ae20f9947b2a4e0", "original_commit_id": "7b00a9dace84566b95811ebc988566c866d36b54", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "It's OK, because the `intrusive_ptr` codepath no-ops in this case. (It's a little hard to see, but we incref by reclaiming a pointer, and then making a copy of the `intrusive_ptr`. Reclaiming UndefinedTensor* used to be illegal but I relaxed the assert in `intrusive_ptr`, and copies of `intrusive_ptr`, when an `UndefinedTensor` is pointed at, are just no-ops, as you would expect.)", "created_at": "2018-08-24T16:26:51Z", "updated_at": "2018-11-23T15:49:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/10824#discussion_r212683182", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10824", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212683182"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10824#discussion_r212683182"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10824"}}, "body_html": "<p>It's OK, because the <code>intrusive_ptr</code> codepath no-ops in this case. (It's a little hard to see, but we incref by reclaiming a pointer, and then making a copy of the <code>intrusive_ptr</code>. Reclaiming UndefinedTensor* used to be illegal but I relaxed the assert in <code>intrusive_ptr</code>, and copies of <code>intrusive_ptr</code>, when an <code>UndefinedTensor</code> is pointed at, are just no-ops, as you would expect.)</p>", "body_text": "It's OK, because the intrusive_ptr codepath no-ops in this case. (It's a little hard to see, but we incref by reclaiming a pointer, and then making a copy of the intrusive_ptr. Reclaiming UndefinedTensor* used to be illegal but I relaxed the assert in intrusive_ptr, and copies of intrusive_ptr, when an UndefinedTensor is pointed at, are just no-ops, as you would expect.)", "in_reply_to_id": 212676601}