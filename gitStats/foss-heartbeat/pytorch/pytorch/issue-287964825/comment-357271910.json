{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357271910", "html_url": "https://github.com/pytorch/pytorch/issues/4620#issuecomment-357271910", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4620", "id": 357271910, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzI3MTkxMA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-12T15:40:47Z", "updated_at": "2018-01-12T15:40:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It becomes backprop-able because an <code>nn.Linear</code> participates in the the computation. Its parameter requires gradient, so the autograd engine can execute in your second example.</p>\n<p>I don't think <code>torch.normal</code> should be backprop-able as it is a sampling function. IMO, there is a fundamental difference between:</p>\n<ol>\n<li>sampling using mu and sigma as distn parameter, and</li>\n<li>training mu and sigma using randomly sampled data, i.e. N(0, 1).</li>\n</ol>\n<p>But I do agree that this is confusing.</p>", "body_text": "It becomes backprop-able because an nn.Linear participates in the the computation. Its parameter requires gradient, so the autograd engine can execute in your second example.\nI don't think torch.normal should be backprop-able as it is a sampling function. IMO, there is a fundamental difference between:\n\nsampling using mu and sigma as distn parameter, and\ntraining mu and sigma using randomly sampled data, i.e. N(0, 1).\n\nBut I do agree that this is confusing.", "body": "It becomes backprop-able because an `nn.Linear` participates in the the computation. Its parameter requires gradient, so the autograd engine can execute in your second example. \r\n\r\nI don't think `torch.normal` should be backprop-able as it is a sampling function. IMO, there is a fundamental difference between:\r\n1. sampling using mu and sigma as distn parameter, and\r\n2. training mu and sigma using randomly sampled data, i.e. N(0, 1).\r\n\r\nBut I do agree that this is confusing."}