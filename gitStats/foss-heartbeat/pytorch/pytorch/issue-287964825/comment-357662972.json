{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357662972", "html_url": "https://github.com/pytorch/pytorch/issues/4620#issuecomment-357662972", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4620", "id": 357662972, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzY2Mjk3Mg==", "user": {"login": "talesa", "id": 6434262, "node_id": "MDQ6VXNlcjY0MzQyNjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6434262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talesa", "html_url": "https://github.com/talesa", "followers_url": "https://api.github.com/users/talesa/followers", "following_url": "https://api.github.com/users/talesa/following{/other_user}", "gists_url": "https://api.github.com/users/talesa/gists{/gist_id}", "starred_url": "https://api.github.com/users/talesa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talesa/subscriptions", "organizations_url": "https://api.github.com/users/talesa/orgs", "repos_url": "https://api.github.com/users/talesa/repos", "events_url": "https://api.github.com/users/talesa/events{/privacy}", "received_events_url": "https://api.github.com/users/talesa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-15T11:57:58Z", "updated_at": "2018-01-15T11:57:58Z", "author_association": "NONE", "body_html": "<p>The following code doesn't cause an error because <code>var_requiring_grad.requires_grad = True</code> implies <code>loss.requires_grad = True</code> and hence you can call <code>loss.backward()</code></p>\n<pre><code>mu = Variable(torch.Tensor([1]), requires_grad=True)\nsigma = Variable(torch.Tensor([1]), requires_grad=True)\nx = torch.normal(mu, sigma)\n\nvar_requiring_grad = Variable(torch.Tensor([1]), requires_grad=True)\nloss = torch.pow(x, 2) + var_requiring_grad\nloss.backward()\n</code></pre>", "body_text": "The following code doesn't cause an error because var_requiring_grad.requires_grad = True implies loss.requires_grad = True and hence you can call loss.backward()\nmu = Variable(torch.Tensor([1]), requires_grad=True)\nsigma = Variable(torch.Tensor([1]), requires_grad=True)\nx = torch.normal(mu, sigma)\n\nvar_requiring_grad = Variable(torch.Tensor([1]), requires_grad=True)\nloss = torch.pow(x, 2) + var_requiring_grad\nloss.backward()", "body": "The following code doesn't cause an error because `var_requiring_grad.requires_grad = True` implies `loss.requires_grad = True` and hence you can call `loss.backward()`\r\n```\r\nmu = Variable(torch.Tensor([1]), requires_grad=True)\r\nsigma = Variable(torch.Tensor([1]), requires_grad=True)\r\nx = torch.normal(mu, sigma)\r\n\r\nvar_requiring_grad = Variable(torch.Tensor([1]), requires_grad=True)\r\nloss = torch.pow(x, 2) + var_requiring_grad\r\nloss.backward()\r\n```"}