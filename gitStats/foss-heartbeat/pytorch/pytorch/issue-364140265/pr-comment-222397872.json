{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222397872", "pull_request_review_id": 161275631, "id": 222397872, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjM5Nzg3Mg==", "diff_hunk": "@@ -132,54 +130,54 @@ struct CAFFE2_API TensorOptions {\n   }\n \n   /// Returns the device of the `TensorOptions`.\n-  const Device& device() const noexcept {\n-    return device_;\n-  }\n+  Device device() const noexcept;\n+\n+  optional<Device> device_opt() const noexcept { return device_; }", "path": "aten/src/ATen/core/TensorOptions.h", "position": null, "original_position": 43, "commit_id": "21981725ed9e3cdaeb2381af8519c613e55f3641", "original_commit_id": "f9b439b6ecb9c8d1e4a1fa86ef700469b87356ec", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This situation is actually kind of confusing. In `optional.h` I see:\r\n\r\n```\r\n  constexpr optional(const optional& rhs) noexcept : ref(rhs.ref) {}\r\n```\r\n\r\nBut in the standard https://en.cppreference.com/w/cpp/utility/optional/optional the copy constructor is not marked as noexcept (and it's true: you could only guarantee it's noexcept if the type in question had a no-except copy constructor).\r\n\r\nBut even if the sub-constructor is not no-except, *we* happen to know that all of these types have noexcept copy constructors. So it should be safe anyway.\r\n\r\nI did some more reading about `noexcept` and I guess it should be OK here. We certainly don't expect this to be throwing exceptions.", "created_at": "2018-10-03T17:28:37Z", "updated_at": "2018-11-23T15:52:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12103#discussion_r222397872", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12103", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222397872"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12103#discussion_r222397872"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12103"}}, "body_html": "<p>This situation is actually kind of confusing. In <code>optional.h</code> I see:</p>\n<pre><code>  constexpr optional(const optional&amp; rhs) noexcept : ref(rhs.ref) {}\n</code></pre>\n<p>But in the standard <a href=\"https://en.cppreference.com/w/cpp/utility/optional/optional\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/utility/optional/optional</a> the copy constructor is not marked as noexcept (and it's true: you could only guarantee it's noexcept if the type in question had a no-except copy constructor).</p>\n<p>But even if the sub-constructor is not no-except, <em>we</em> happen to know that all of these types have noexcept copy constructors. So it should be safe anyway.</p>\n<p>I did some more reading about <code>noexcept</code> and I guess it should be OK here. We certainly don't expect this to be throwing exceptions.</p>", "body_text": "This situation is actually kind of confusing. In optional.h I see:\n  constexpr optional(const optional& rhs) noexcept : ref(rhs.ref) {}\n\nBut in the standard https://en.cppreference.com/w/cpp/utility/optional/optional the copy constructor is not marked as noexcept (and it's true: you could only guarantee it's noexcept if the type in question had a no-except copy constructor).\nBut even if the sub-constructor is not no-except, we happen to know that all of these types have noexcept copy constructors. So it should be safe anyway.\nI did some more reading about noexcept and I guess it should be OK here. We certainly don't expect this to be throwing exceptions.", "in_reply_to_id": 221475797}