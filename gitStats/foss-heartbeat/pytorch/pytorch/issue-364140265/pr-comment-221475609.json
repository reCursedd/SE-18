{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221475609", "pull_request_review_id": 160130624, "id": 221475609, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQ3NTYwOQ==", "diff_hunk": "@@ -9,28 +9,53 @@\n \n namespace at {\n \n-// In the CAFFE2_FB_LIMITED_MOBILE_CAPABILITY build setting,\n-// thread_local is not supported.  In that case, we don't provide\n-// an OptionsGuard; and force you to pass around options manually.\n-#if !AT_MOBILE && !defined(CAFFE2_FB_LIMITED_MOBILE_CAPABILITY)\n-\n /// A wrapper over a thread local TensorOptions instance.\n+/// INVARIANT: all fields are NOT nullopt\n struct DefaultTensorOptions {\n-  /// Returns the current thread local default options.\n-  /// Defined in OptionsGuard.cpp because we can't use optional in headers, due\n-  /// to Windows and other compilers.\n-  /// TODO: The inability to use optional in headers is no longer true\n-  CAFFE2_API static TensorOptions& get();\n+  DefaultTensorOptions() {}\n+  DefaultTensorOptions(const DefaultTensorOptions&) = default;\n+  DefaultTensorOptions& operator=(const DefaultTensorOptions&) = default;\n+  DefaultTensorOptions(DefaultTensorOptions&&) = default;\n+  DefaultTensorOptions& operator=(DefaultTensorOptions&&) = default;\n+\n+  ScalarType dtype()    const { return dtype_; }\n+  Device device()       const { return device_; }\n+  Layout layout()       const { return layout_; }\n+  bool requires_grad()  const { return requires_grad_; }\n+  bool is_variable()    const { return is_variable_; }\n+\n+  DefaultTensorOptions& apply(const TensorOptions& options) {", "path": "aten/src/ATen/core/OptionsGuard.h", "position": null, "original_position": 29, "commit_id": "21981725ed9e3cdaeb2381af8519c613e55f3641", "original_commit_id": "f9b439b6ecb9c8d1e4a1fa86ef700469b87356ec", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I feel like `merge` would be a more intuitive name for this?", "created_at": "2018-09-30T22:15:31Z", "updated_at": "2018-11-23T15:52:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/12103#discussion_r221475609", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12103", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/221475609"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12103#discussion_r221475609"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12103"}}, "body_html": "<p>I feel like <code>merge</code> would be a more intuitive name for this?</p>", "body_text": "I feel like merge would be a more intuitive name for this?"}