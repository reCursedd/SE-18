{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222395471", "pull_request_review_id": 161272566, "id": 222395471, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjM5NTQ3MQ==", "diff_hunk": "@@ -9,28 +9,53 @@\n \n namespace at {\n \n-// In the CAFFE2_FB_LIMITED_MOBILE_CAPABILITY build setting,\n-// thread_local is not supported.  In that case, we don't provide\n-// an OptionsGuard; and force you to pass around options manually.\n-#if !AT_MOBILE && !defined(CAFFE2_FB_LIMITED_MOBILE_CAPABILITY)\n-\n /// A wrapper over a thread local TensorOptions instance.\n+/// INVARIANT: all fields are NOT nullopt\n struct DefaultTensorOptions {\n-  /// Returns the current thread local default options.\n-  /// Defined in OptionsGuard.cpp because we can't use optional in headers, due\n-  /// to Windows and other compilers.\n-  /// TODO: The inability to use optional in headers is no longer true\n-  CAFFE2_API static TensorOptions& get();\n+  DefaultTensorOptions() {}\n+  DefaultTensorOptions(const DefaultTensorOptions&) = default;\n+  DefaultTensorOptions& operator=(const DefaultTensorOptions&) = default;\n+  DefaultTensorOptions(DefaultTensorOptions&&) = default;\n+  DefaultTensorOptions& operator=(DefaultTensorOptions&&) = default;\n+\n+  ScalarType dtype()    const { return dtype_; }", "path": "aten/src/ATen/core/OptionsGuard.h", "position": null, "original_position": 23, "commit_id": "21981725ed9e3cdaeb2381af8519c613e55f3641", "original_commit_id": "f9b439b6ecb9c8d1e4a1fa86ef700469b87356ec", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Because I'm a luddite that has never used clang-format before :>", "created_at": "2018-10-03T17:21:29Z", "updated_at": "2018-11-23T15:52:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/12103#discussion_r222395471", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12103", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/222395471"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12103#discussion_r222395471"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12103"}}, "body_html": "<p>Because I'm a luddite that has never used clang-format before :&gt;</p>", "body_text": "Because I'm a luddite that has never used clang-format before :>", "in_reply_to_id": 221475514}