{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337311387", "html_url": "https://github.com/pytorch/pytorch/pull/3148#issuecomment-337311387", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3148", "id": 337311387, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzMxMTM4Nw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-17T17:45:57Z", "updated_at": "2017-10-17T17:49:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Is there a centralized place for cudnn bindings? I can't seem to find it.</p>\n<p>Maybe we can change it here? <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/43c944acbd5140bedfd2c7ea9fbeb4669e06b94f/torch/csrc/cudnn/Types.cpp#L47-L59\">pytorch/torch/csrc/cudnn/Types.cpp</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 47 to 59\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/43c944acbd5140bedfd2c7ea9fbeb4669e06b94f\">43c944a</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">void</span> <span class=\"pl-en\">_THVoidTensor_assertContiguous</span>(THVoidTensor *tensor, <span class=\"pl-k\">const</span> std::string&amp; name) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">static</span> <span class=\"pl-k\">const</span> std::string error_str = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cuDNN requires contiguous <span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L50\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"50\"></td>\n          <td id=\"LC50\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> Contiguity check</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L51\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"51\"></td>\n          <td id=\"LC51\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">long</span> <span class=\"pl-k\">long</span> expectedStride = <span class=\"pl-c1\">1</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L52\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"52\"></td>\n          <td id=\"LC52\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i = tensor-&gt;<span class=\"pl-smi\">nDimension</span>-<span class=\"pl-c1\">1</span>; i &gt;= <span class=\"pl-c1\">0</span>; --i) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L53\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"53\"></td>\n          <td id=\"LC53\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> (tensor-&gt;<span class=\"pl-smi\">size</span>[i] != <span class=\"pl-c1\">1</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L54\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"54\"></td>\n          <td id=\"LC54\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">if</span> (tensor-&gt;<span class=\"pl-smi\">stride</span>[i] != expectedStride) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">throw</span> <span class=\"pl-smi\">std::invalid_argument</span>(error_str + name); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       expectedStride *= tensor-&gt;<span class=\"pl-smi\">size</span>[i]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "Is there a centralized place for cudnn bindings? I can't seem to find it.\nMaybe we can change it here? \n  \n    \n      pytorch/torch/csrc/cudnn/Types.cpp\n    \n    \n        Lines 47 to 59\n      in\n      43c944a\n    \n    \n    \n    \n\n        \n          \n           void _THVoidTensor_assertContiguous(THVoidTensor *tensor, const std::string& name) \n        \n\n        \n          \n           { \n        \n\n        \n          \n             static const std::string error_str = \"cuDNN requires contiguous \"; \n        \n\n        \n          \n             // Contiguity check \n        \n\n        \n          \n             long long expectedStride = 1; \n        \n\n        \n          \n             for (int i = tensor->nDimension-1; i >= 0; --i) { \n        \n\n        \n          \n               if (tensor->size[i] != 1) { \n        \n\n        \n          \n                 if (tensor->stride[i] != expectedStride) \n        \n\n        \n          \n                   throw std::invalid_argument(error_str + name); \n        \n\n        \n          \n                 expectedStride *= tensor->size[i]; \n        \n\n        \n          \n               } \n        \n\n        \n          \n             } \n        \n\n        \n          \n           }", "body": "Is there a centralized place for cudnn bindings? I can't seem to find it.\r\n\r\nMaybe we can change it here? https://github.com/pytorch/pytorch/blob/43c944acbd5140bedfd2c7ea9fbeb4669e06b94f/torch/csrc/cudnn/Types.cpp#L47-L59"}