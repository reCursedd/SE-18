{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/288735797", "html_url": "https://github.com/pytorch/pytorch/pull/1074#issuecomment-288735797", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1074", "id": 288735797, "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODczNTc5Nw==", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-23T14:26:51Z", "updated_at": "2017-03-23T14:30:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a>  I see, but it is somehow confusing when people use the example code to convert to their project when they generate dataset themselves by using Numpy, it often gives runtime error when one is not aware of the reason is from the label data type is <code>np.float32</code>. Because this data type also has <code>__module__</code> to be <code>\"numpy\"</code> which falls into wrong category in if-else cases. We want it to fall into</p>\n<pre><code>elif isinstance(batch[0], float):\n        return torch.DoubleTensor(batch)\n</code></pre>\n<p>which is the right case for labels</p>\n<p>Is there some workaround you suggest ? Both not to import numpy, and avoid this problem</p>", "body_text": "@soumith  I see, but it is somehow confusing when people use the example code to convert to their project when they generate dataset themselves by using Numpy, it often gives runtime error when one is not aware of the reason is from the label data type is np.float32. Because this data type also has __module__ to be \"numpy\" which falls into wrong category in if-else cases. We want it to fall into\nelif isinstance(batch[0], float):\n        return torch.DoubleTensor(batch)\n\nwhich is the right case for labels\nIs there some workaround you suggest ? Both not to import numpy, and avoid this problem", "body": "@soumith  I see, but it is somehow confusing when people use the example code to convert to their project when they generate dataset themselves by using Numpy, it often gives runtime error when one is not aware of the reason is from the label data type is `np.float32`. Because this data type also has `__module__` to be `\"numpy\"` which falls into wrong category in if-else cases. We want it to fall into \r\n```\r\nelif isinstance(batch[0], float):\r\n        return torch.DoubleTensor(batch)\r\n```\r\nwhich is the right case for labels\r\n\r\nIs there some workaround you suggest ? Both not to import numpy, and avoid this problem"}