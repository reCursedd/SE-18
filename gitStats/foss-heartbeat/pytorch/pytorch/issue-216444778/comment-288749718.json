{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/288749718", "html_url": "https://github.com/pytorch/pytorch/pull/1074#issuecomment-288749718", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1074", "id": 288749718, "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODc0OTcxOA==", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-23T15:08:52Z", "updated_at": "2017-03-23T15:10:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>\n<pre><code>label = np.ones([10])\nimage = np.ones([10, 3, 32, 32])\nprint(type(label[0]).__module__ == 'numpy')\nprint(type(image[0]).__module__ == 'numpy')\nprint(type(label[0]).__name__ == 'ndarray')\nprint(type(image[0]).__name__ == 'ndarray')\n</code></pre>\n<p>gives</p>\n<pre><code>True\nTrue\nFalse\nTrue\n</code></pre>\n<p>Which is exactly the result we want, by using <code>__name__</code>, it manages to fall labels, that were generated with Numpy float data type,  into correct if-else case.</p>", "body_text": "@apaszke\nlabel = np.ones([10])\nimage = np.ones([10, 3, 32, 32])\nprint(type(label[0]).__module__ == 'numpy')\nprint(type(image[0]).__module__ == 'numpy')\nprint(type(label[0]).__name__ == 'ndarray')\nprint(type(image[0]).__name__ == 'ndarray')\n\ngives\nTrue\nTrue\nFalse\nTrue\n\nWhich is exactly the result we want, by using __name__, it manages to fall labels, that were generated with Numpy float data type,  into correct if-else case.", "body": "@apaszke \r\n\r\n```\r\nlabel = np.ones([10])\r\nimage = np.ones([10, 3, 32, 32])\r\nprint(type(label[0]).__module__ == 'numpy')\r\nprint(type(image[0]).__module__ == 'numpy')\r\nprint(type(label[0]).__name__ == 'ndarray')\r\nprint(type(image[0]).__name__ == 'ndarray')\r\n```\r\ngives \r\n```\r\nTrue\r\nTrue\r\nFalse\r\nTrue\r\n```\r\n\r\nWhich is exactly the result we want, by using `__name__`, it manages to fall labels, that were generated with Numpy float data type,  into correct if-else case."}