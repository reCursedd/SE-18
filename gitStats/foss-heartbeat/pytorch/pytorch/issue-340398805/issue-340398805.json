{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9356", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9356/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9356/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9356/events", "html_url": "https://github.com/pytorch/pytorch/issues/9356", "id": 340398805, "node_id": "MDU6SXNzdWUzNDAzOTg4MDU=", "number": 9356, "title": "RuntimeError: cuda runtime error (8) : invalid device function at /opt/conda/conda-bld/pytorch_1518243271935/work/torch/lib/THCUNN/generic/Threshold.cu:34", "user": {"login": "mavenzer", "id": 24300927, "node_id": "MDQ6VXNlcjI0MzAwOTI3", "avatar_url": "https://avatars2.githubusercontent.com/u/24300927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mavenzer", "html_url": "https://github.com/mavenzer", "followers_url": "https://api.github.com/users/mavenzer/followers", "following_url": "https://api.github.com/users/mavenzer/following{/other_user}", "gists_url": "https://api.github.com/users/mavenzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/mavenzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mavenzer/subscriptions", "organizations_url": "https://api.github.com/users/mavenzer/orgs", "repos_url": "https://api.github.com/users/mavenzer/repos", "events_url": "https://api.github.com/users/mavenzer/events{/privacy}", "received_events_url": "https://api.github.com/users/mavenzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-11T20:47:06Z", "updated_at": "2018-07-13T01:40:10Z", "closed_at": "2018-07-13T01:40:10Z", "author_association": "NONE", "body_html": "<p><a href=\"https://discuss.pytorch.org/\" rel=\"nofollow\">forums</a>.</p>\n<p>If you are submitting a bug report, please fill in the following details.<br>\nI am using linux machine with ubuntu in it .<br>\nUbuntu Version 16.04 lts<br>\nNVIDIA  930mx<br>\nNvidia driver version :  384.184</p>\n<h2>Issue description</h2>\n<p>RuntimeError: cuda runtime error (8) : invalid device function at /opt/conda/conda-bld/pytorch_1518243271935/work/torch/lib/THCUNN/generic/Threshold.cu:34<br>\nProvide a short description.</p>\n<h2>Code example</h2>\n<p>This code is is for the segnet , for detection of Vessel in retina.</p>\n<pre><code>iterations = 100\ntrainLoss = []\ntestLoss = []\nstart = time.time()\n\nfor epoch in range(iterations):\n    epochStart = time.time()\n    runningLoss = 0   \n    net.train(True) # For training\n    for data in trainLoader:\n        inputs,labels = data\n        # Wrap them in Variable\n        if use_gpu:\n            inputs, labels = Variable(inputs.cuda()), \\\n                Variable(labels.long().cuda())\n        else:\n            inputs, labels = Variable(inputs), Variable(labels.long())      \n \n        \n        # Feed-forward input data through the network\n        outputs = net(inputs)\n        # Compute loss/error\n        loss = criterion(F.log_softmax(outputs), labels)      \n        # Initialize gradients to zero\n        optimizer.zero_grad()                  \n        # Backpropagate loss and compute gradients\n        loss.backward()\n        # Update the network parameters\n        optimizer.step()\n        # Accumulate loss per batch\n        runningLoss += loss.data[0]          \n    avgTrainLoss = runningLoss/600.0    \n    trainLoss.append(avgTrainLoss)\n  \n    \n    # Evaluating performance on test set for each epoch\n    net.train(False) # For testing\n    test_runningLoss = 0    \n    for data in testLoader:\n        inputs,labels = data\n        # Wrap them in Variable\n        if use_gpu:\n            inputs, labels = Variable(inputs.cuda()), \\\n                Variable(labels.long().cuda())\n        else:\n            inputs, labels = Variable(inputs), Variable(labels.long())         \n        outputs = net(inputs)       \n         # Compute loss/error\n        loss = criterion(F.log_softmax(outputs), labels)      \n        # Accumulate loss per batch\n        test_runningLoss += loss.data[0] \n        \n    avgTestLoss = test_runningLoss/20.0    \n    testLoss.append(avgTestLoss)\n        \n    # Plotting Loss vs Epochs\n    fig1 = plt.figure(1)        \n    plt.plot(range(epoch+1),trainLoss,'r--',label='train')        \n    plt.plot(range(epoch+1),testLoss,'g--',label='test')        \n    if epoch==0:\n        plt.legend(loc='upper left')\n        plt.xlabel('Epochs')\n        plt.ylabel('Loss')   \n      \n    \n    epochEnd = time.time()-epochStart\n    print('At Iteration: {:.0f} /{:.0f}  ;  Training Loss: {:.6f}; Time consumed: {:.0f}m {:.0f}s '\\\n          .format(epoch + 1,iterations,avgTrainLoss,epochEnd//60,epochEnd%60))\n    print('At Iteration: {:.0f} /{:.0f}  ;  Testing Loss: {:.6f} ; Time consumed: {:.0f}m {:.0f}s '\\\n          .format(epoch + 1,iterations,avgTestLoss,epochEnd//60,epochEnd%60))\nend = time.time()-start\nprint('Training completed in {:.0f}m {:.0f}s'.format(end//60,end%60))\n</code></pre>\n<p>Please try to provide a minimal example to repro the bug.<br>\nError messages and stack traces are also helpful.</p>\n<h2>System Info</h2>\n<p>Please copy and paste the output from our<br>\n<a href=\"https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\" rel=\"nofollow\">environment collection script</a><br>\n(or fill out the checklist below manually).</p>\n<p>You can get the script and run it with:</p>\n<pre><code>wget https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\n# For security purposes, please check the contents of collect_env.py before running it.\npython collect_env.py\n</code></pre>\n<ul>\n<li>\n<p>PyTorch or Caffe2:</p>\n</li>\n<li>\n<p>How you installed PyTorch (conda, pip, source): conda</p>\n</li>\n<li>\n<p>Build command you used (if compiling from source):</p>\n</li>\n<li>\n<p>OS:  Ubuntu 16.04</p>\n</li>\n<li>\n<p>PyTorch version: 0.3.1u</p>\n</li>\n<li>\n<p>Python version: 3.6</p>\n</li>\n<li>\n<p>CUDA/cuDNN version:7.5<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/24300927/42598377-a3d0db30-8579-11e8-9db3-886d6a9e498c.png\"><img src=\"https://user-images.githubusercontent.com/24300927/42598377-a3d0db30-8579-11e8-9db3-886d6a9e498c.png\" alt=\"issue_pytorch\" style=\"max-width:100%;\"></a></p>\n</li>\n<li>\n<p>GPU models and configuration:</p>\n</li>\n<li>\n<p>GCC version (if compiling from source):</p>\n</li>\n<li>\n<p>CMake version:</p>\n</li>\n<li>\n<p>Versions of any other relevant libraries:</p>\n</li>\n</ul>", "body_text": "forums.\nIf you are submitting a bug report, please fill in the following details.\nI am using linux machine with ubuntu in it .\nUbuntu Version 16.04 lts\nNVIDIA  930mx\nNvidia driver version :  384.184\nIssue description\nRuntimeError: cuda runtime error (8) : invalid device function at /opt/conda/conda-bld/pytorch_1518243271935/work/torch/lib/THCUNN/generic/Threshold.cu:34\nProvide a short description.\nCode example\nThis code is is for the segnet , for detection of Vessel in retina.\niterations = 100\ntrainLoss = []\ntestLoss = []\nstart = time.time()\n\nfor epoch in range(iterations):\n    epochStart = time.time()\n    runningLoss = 0   \n    net.train(True) # For training\n    for data in trainLoader:\n        inputs,labels = data\n        # Wrap them in Variable\n        if use_gpu:\n            inputs, labels = Variable(inputs.cuda()), \\\n                Variable(labels.long().cuda())\n        else:\n            inputs, labels = Variable(inputs), Variable(labels.long())      \n \n        \n        # Feed-forward input data through the network\n        outputs = net(inputs)\n        # Compute loss/error\n        loss = criterion(F.log_softmax(outputs), labels)      \n        # Initialize gradients to zero\n        optimizer.zero_grad()                  \n        # Backpropagate loss and compute gradients\n        loss.backward()\n        # Update the network parameters\n        optimizer.step()\n        # Accumulate loss per batch\n        runningLoss += loss.data[0]          \n    avgTrainLoss = runningLoss/600.0    \n    trainLoss.append(avgTrainLoss)\n  \n    \n    # Evaluating performance on test set for each epoch\n    net.train(False) # For testing\n    test_runningLoss = 0    \n    for data in testLoader:\n        inputs,labels = data\n        # Wrap them in Variable\n        if use_gpu:\n            inputs, labels = Variable(inputs.cuda()), \\\n                Variable(labels.long().cuda())\n        else:\n            inputs, labels = Variable(inputs), Variable(labels.long())         \n        outputs = net(inputs)       \n         # Compute loss/error\n        loss = criterion(F.log_softmax(outputs), labels)      \n        # Accumulate loss per batch\n        test_runningLoss += loss.data[0] \n        \n    avgTestLoss = test_runningLoss/20.0    \n    testLoss.append(avgTestLoss)\n        \n    # Plotting Loss vs Epochs\n    fig1 = plt.figure(1)        \n    plt.plot(range(epoch+1),trainLoss,'r--',label='train')        \n    plt.plot(range(epoch+1),testLoss,'g--',label='test')        \n    if epoch==0:\n        plt.legend(loc='upper left')\n        plt.xlabel('Epochs')\n        plt.ylabel('Loss')   \n      \n    \n    epochEnd = time.time()-epochStart\n    print('At Iteration: {:.0f} /{:.0f}  ;  Training Loss: {:.6f}; Time consumed: {:.0f}m {:.0f}s '\\\n          .format(epoch + 1,iterations,avgTrainLoss,epochEnd//60,epochEnd%60))\n    print('At Iteration: {:.0f} /{:.0f}  ;  Testing Loss: {:.6f} ; Time consumed: {:.0f}m {:.0f}s '\\\n          .format(epoch + 1,iterations,avgTestLoss,epochEnd//60,epochEnd%60))\nend = time.time()-start\nprint('Training completed in {:.0f}m {:.0f}s'.format(end//60,end%60))\n\nPlease try to provide a minimal example to repro the bug.\nError messages and stack traces are also helpful.\nSystem Info\nPlease copy and paste the output from our\nenvironment collection script\n(or fill out the checklist below manually).\nYou can get the script and run it with:\nwget https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\n# For security purposes, please check the contents of collect_env.py before running it.\npython collect_env.py\n\n\n\nPyTorch or Caffe2:\n\n\nHow you installed PyTorch (conda, pip, source): conda\n\n\nBuild command you used (if compiling from source):\n\n\nOS:  Ubuntu 16.04\n\n\nPyTorch version: 0.3.1u\n\n\nPython version: 3.6\n\n\nCUDA/cuDNN version:7.5\n\n\n\nGPU models and configuration:\n\n\nGCC version (if compiling from source):\n\n\nCMake version:\n\n\nVersions of any other relevant libraries:", "body": "[forums](https://discuss.pytorch.org/).\r\n\r\nIf you are submitting a bug report, please fill in the following details.\r\nI am using linux machine with ubuntu in it . \r\nUbuntu Version 16.04 lts\r\nNVIDIA  930mx\r\nNvidia driver version :  384.184\r\n\r\n## Issue description\r\nRuntimeError: cuda runtime error (8) : invalid device function at /opt/conda/conda-bld/pytorch_1518243271935/work/torch/lib/THCUNN/generic/Threshold.cu:34\r\nProvide a short description.\r\n\r\n## Code example\r\n This code is is for the segnet , for detection of Vessel in retina.\r\n```\r\niterations = 100\r\ntrainLoss = []\r\ntestLoss = []\r\nstart = time.time()\r\n\r\nfor epoch in range(iterations):\r\n    epochStart = time.time()\r\n    runningLoss = 0   \r\n    net.train(True) # For training\r\n    for data in trainLoader:\r\n        inputs,labels = data\r\n        # Wrap them in Variable\r\n        if use_gpu:\r\n            inputs, labels = Variable(inputs.cuda()), \\\r\n                Variable(labels.long().cuda())\r\n        else:\r\n            inputs, labels = Variable(inputs), Variable(labels.long())      \r\n \r\n        \r\n        # Feed-forward input data through the network\r\n        outputs = net(inputs)\r\n        # Compute loss/error\r\n        loss = criterion(F.log_softmax(outputs), labels)      \r\n        # Initialize gradients to zero\r\n        optimizer.zero_grad()                  \r\n        # Backpropagate loss and compute gradients\r\n        loss.backward()\r\n        # Update the network parameters\r\n        optimizer.step()\r\n        # Accumulate loss per batch\r\n        runningLoss += loss.data[0]          \r\n    avgTrainLoss = runningLoss/600.0    \r\n    trainLoss.append(avgTrainLoss)\r\n  \r\n    \r\n    # Evaluating performance on test set for each epoch\r\n    net.train(False) # For testing\r\n    test_runningLoss = 0    \r\n    for data in testLoader:\r\n        inputs,labels = data\r\n        # Wrap them in Variable\r\n        if use_gpu:\r\n            inputs, labels = Variable(inputs.cuda()), \\\r\n                Variable(labels.long().cuda())\r\n        else:\r\n            inputs, labels = Variable(inputs), Variable(labels.long())         \r\n        outputs = net(inputs)       \r\n         # Compute loss/error\r\n        loss = criterion(F.log_softmax(outputs), labels)      \r\n        # Accumulate loss per batch\r\n        test_runningLoss += loss.data[0] \r\n        \r\n    avgTestLoss = test_runningLoss/20.0    \r\n    testLoss.append(avgTestLoss)\r\n        \r\n    # Plotting Loss vs Epochs\r\n    fig1 = plt.figure(1)        \r\n    plt.plot(range(epoch+1),trainLoss,'r--',label='train')        \r\n    plt.plot(range(epoch+1),testLoss,'g--',label='test')        \r\n    if epoch==0:\r\n        plt.legend(loc='upper left')\r\n        plt.xlabel('Epochs')\r\n        plt.ylabel('Loss')   \r\n      \r\n    \r\n    epochEnd = time.time()-epochStart\r\n    print('At Iteration: {:.0f} /{:.0f}  ;  Training Loss: {:.6f}; Time consumed: {:.0f}m {:.0f}s '\\\r\n          .format(epoch + 1,iterations,avgTrainLoss,epochEnd//60,epochEnd%60))\r\n    print('At Iteration: {:.0f} /{:.0f}  ;  Testing Loss: {:.6f} ; Time consumed: {:.0f}m {:.0f}s '\\\r\n          .format(epoch + 1,iterations,avgTestLoss,epochEnd//60,epochEnd%60))\r\nend = time.time()-start\r\nprint('Training completed in {:.0f}m {:.0f}s'.format(end//60,end%60))\r\n```\r\nPlease try to provide a minimal example to repro the bug.\r\nError messages and stack traces are also helpful.\r\n\r\n## System Info\r\nPlease copy and paste the output from our\r\n[environment collection script](https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py)\r\n(or fill out the checklist below manually).\r\n\r\nYou can get the script and run it with:\r\n```\r\nwget https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py\r\n# For security purposes, please check the contents of collect_env.py before running it.\r\npython collect_env.py\r\n```\r\n\r\n- PyTorch or Caffe2:\r\n- How you installed PyTorch (conda, pip, source): conda\r\n- Build command you used (if compiling from source):\r\n- OS:  Ubuntu 16.04\r\n- PyTorch version: 0.3.1u\r\n- Python version: 3.6\r\n- CUDA/cuDNN version:7.5\r\n![issue_pytorch](https://user-images.githubusercontent.com/24300927/42598377-a3d0db30-8579-11e8-9db3-886d6a9e498c.png)\r\n\r\n- GPU models and configuration:\r\n- GCC version (if compiling from source):\r\n- CMake version:\r\n- Versions of any other relevant libraries:\r\n"}