{"url": "https://api.github.com/repos/pytorch/pytorch/issues/639", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/639/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/639/events", "html_url": "https://github.com/pytorch/pytorch/issues/639", "id": 203984784, "node_id": "MDU6SXNzdWUyMDM5ODQ3ODQ=", "number": 639, "title": "Gumbel noise", "user": {"login": "eliabruni", "id": 490453, "node_id": "MDQ6VXNlcjQ5MDQ1Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/490453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliabruni", "html_url": "https://github.com/eliabruni", "followers_url": "https://api.github.com/users/eliabruni/followers", "following_url": "https://api.github.com/users/eliabruni/following{/other_user}", "gists_url": "https://api.github.com/users/eliabruni/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliabruni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliabruni/subscriptions", "organizations_url": "https://api.github.com/users/eliabruni/orgs", "repos_url": "https://api.github.com/users/eliabruni/repos", "events_url": "https://api.github.com/users/eliabruni/events{/privacy}", "received_events_url": "https://api.github.com/users/eliabruni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-30T11:26:17Z", "updated_at": "2017-05-21T07:11:13Z", "closed_at": "2017-01-30T11:40:22Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I've been trying to add Gumbel noise as in <a href=\"https://github.com/Kaixhin/Autoencoders/blob/master/models/CatVAE.lua#L24\">here</a>, but no success.<br>\nLooks like several modules are still missing (e.g., basic variable functions such as nn.Uniform()), or am I wrong? How would you implement in pytorch e.g. the following rows:</p>\n<pre lang=\"--\" data-meta=\"Create noise \u03b5 sample module\"><code>  local noiseModule = nn.Sequential()\n  noiseModule:add(nn.Uniform(0, 1)) -- Sample from U(0, 1)\n  -- Transform uniform sample to Gumbel sample\n  noiseModule:add(nn.AddConstant(1e-9, true)) -- Improve numerical stability\n  noiseModule:add(nn.Log())\n  noiseModule:add(nn.MulConstant(-1, true))\n  noiseModule:add(nn.AddConstant(1e-9, true)) -- Improve numerical stability\n  noiseModule:add(nn.Log())\n  noiseModule:add(nn.MulConstant(-1, true))\n  \n  -- Create sampler q(z) = G(z) = softmax((log(\u03c0) + \u03b5)/\u03c4) (reparametrization trick)\n  local sampler = nn.Sequential()\n  local samplerInternal = nn.ConcatTable()\n  samplerInternal:add(nn.Identity()) -- Unnormalised log probabilities log(\u03c0)\n  samplerInternal:add(noiseModule) -- Create noise \u03b5\n  sampler:add(samplerInternal)\n  sampler:add(nn.CAddTable())\n  self.temperature = nn.MulConstant(1 / self.tau, true) -- Temperature \u03c4 for softmax\n  sampler:add(self.temperature)\n  sampler:add(nn.View(-1, self.k)) -- Resize to work over k\n  sampler:add(nn.SoftMax())\n  sampler:add(nn.View(-1, self.N * self.k)) -- Resize back\n</code></pre>", "body_text": "Hi,\nI've been trying to add Gumbel noise as in here, but no success.\nLooks like several modules are still missing (e.g., basic variable functions such as nn.Uniform()), or am I wrong? How would you implement in pytorch e.g. the following rows:\n  local noiseModule = nn.Sequential()\n  noiseModule:add(nn.Uniform(0, 1)) -- Sample from U(0, 1)\n  -- Transform uniform sample to Gumbel sample\n  noiseModule:add(nn.AddConstant(1e-9, true)) -- Improve numerical stability\n  noiseModule:add(nn.Log())\n  noiseModule:add(nn.MulConstant(-1, true))\n  noiseModule:add(nn.AddConstant(1e-9, true)) -- Improve numerical stability\n  noiseModule:add(nn.Log())\n  noiseModule:add(nn.MulConstant(-1, true))\n  \n  -- Create sampler q(z) = G(z) = softmax((log(\u03c0) + \u03b5)/\u03c4) (reparametrization trick)\n  local sampler = nn.Sequential()\n  local samplerInternal = nn.ConcatTable()\n  samplerInternal:add(nn.Identity()) -- Unnormalised log probabilities log(\u03c0)\n  samplerInternal:add(noiseModule) -- Create noise \u03b5\n  sampler:add(samplerInternal)\n  sampler:add(nn.CAddTable())\n  self.temperature = nn.MulConstant(1 / self.tau, true) -- Temperature \u03c4 for softmax\n  sampler:add(self.temperature)\n  sampler:add(nn.View(-1, self.k)) -- Resize to work over k\n  sampler:add(nn.SoftMax())\n  sampler:add(nn.View(-1, self.N * self.k)) -- Resize back", "body": "Hi,\r\n\r\nI've been trying to add Gumbel noise as in [here](https://github.com/Kaixhin/Autoencoders/blob/master/models/CatVAE.lua#L24), but no success.\r\nLooks like several modules are still missing (e.g., basic variable functions such as nn.Uniform()), or am I wrong? How would you implement in pytorch e.g. the following rows:\r\n\r\n```  -- Create noise \u03b5 sample module\r\n  local noiseModule = nn.Sequential()\r\n  noiseModule:add(nn.Uniform(0, 1)) -- Sample from U(0, 1)\r\n  -- Transform uniform sample to Gumbel sample\r\n  noiseModule:add(nn.AddConstant(1e-9, true)) -- Improve numerical stability\r\n  noiseModule:add(nn.Log())\r\n  noiseModule:add(nn.MulConstant(-1, true))\r\n  noiseModule:add(nn.AddConstant(1e-9, true)) -- Improve numerical stability\r\n  noiseModule:add(nn.Log())\r\n  noiseModule:add(nn.MulConstant(-1, true))\r\n  \r\n  -- Create sampler q(z) = G(z) = softmax((log(\u03c0) + \u03b5)/\u03c4) (reparametrization trick)\r\n  local sampler = nn.Sequential()\r\n  local samplerInternal = nn.ConcatTable()\r\n  samplerInternal:add(nn.Identity()) -- Unnormalised log probabilities log(\u03c0)\r\n  samplerInternal:add(noiseModule) -- Create noise \u03b5\r\n  sampler:add(samplerInternal)\r\n  sampler:add(nn.CAddTable())\r\n  self.temperature = nn.MulConstant(1 / self.tau, true) -- Temperature \u03c4 for softmax\r\n  sampler:add(self.temperature)\r\n  sampler:add(nn.View(-1, self.k)) -- Resize to work over k\r\n  sampler:add(nn.SoftMax())\r\n  sampler:add(nn.View(-1, self.N * self.k)) -- Resize back\r\n```"}