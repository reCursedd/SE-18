{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144935326", "pull_request_review_id": 69661699, "id": 144935326, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDkzNTMyNg==", "diff_hunk": "@@ -54,18 +54,18 @@ __global__ void spatialDepthwiseConvolutionUpdateOutput(\n         if ((h_in >= 0) && (h_in < inputHeight) && (w_in >= 0) && (w_in < inputWidth)) {\n           const IndexType offset = ((n * inputChannels + inputChannel) * inputHeight + h_in) *\n                                     inputWidth + w_in;\n-          value = THCNumerics<T>::add(\n+          value = THCNumerics<AccT>::add(\n             value,\n-            THCNumerics<T>::mul(weight.data()[weightOffset], input.data()[offset]));\n+            ScalarConvert<T, AccT>::to(THCNumerics<T>::mul(weight.data()[weightOffset], input.data()[offset])));", "path": "torch/lib/THCUNN/SpatialDepthwiseConvolution.cu", "position": null, "original_position": 26, "commit_id": "65cc6f18f7ad5eb23a300b5b7715dc6ea2282b5d", "original_commit_id": "a05baf8302b9a18c58c9f3644f1aab4132386b19", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "It will be better to ScalarConvert weight.data()[weightOffset] and input.data()[offset] to AccT (no op for float and double, will be done anyway by THCNumerics<T>::mul for halfs anyway), and just multiply them (or do THCNumerics<AccT>::mul). The way it is now, for halfs there's an unnecessary conversion to half (in THCNumerics<T>::mul) and back (in ScalarConvert<T,AccT>), that is also losing accuracy. ", "created_at": "2017-10-16T18:51:29Z", "updated_at": "2018-11-23T15:35:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/3057#discussion_r144935326", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3057", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144935326"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3057#discussion_r144935326"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3057"}}, "body_html": "<p>It will be better to ScalarConvert weight.data()[weightOffset] and input.data()[offset] to AccT (no op for float and double, will be done anyway by THCNumerics::mul for halfs anyway), and just multiply them (or do THCNumerics::mul). The way it is now, for halfs there's an unnecessary conversion to half (in THCNumerics::mul) and back (in ScalarConvert&lt;T,AccT&gt;), that is also losing accuracy.</p>", "body_text": "It will be better to ScalarConvert weight.data()[weightOffset] and input.data()[offset] to AccT (no op for float and double, will be done anyway by THCNumerics::mul for halfs anyway), and just multiply them (or do THCNumerics::mul). The way it is now, for halfs there's an unnecessary conversion to half (in THCNumerics::mul) and back (in ScalarConvert<T,AccT>), that is also losing accuracy."}