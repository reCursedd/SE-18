{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144647981", "pull_request_review_id": 69339437, "id": 144647981, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY0Nzk4MQ==", "diff_hunk": "@@ -0,0 +1,191 @@\n+// updateOutput, updateGradInput Kernels ported from Sergey Zagoruyko's pyinn, which itself was a\n+// port from Caffe\n+\n+#include \"THCUNN.h\"\n+#include \"THCDeviceTensor.cuh\"\n+#include \"THCDeviceTensorUtils.cuh\"\n+#include \"THCNumerics.cuh\"\n+#include \"THCReduceApplyUtils.cuh\"\n+#include \"THCSortUtils.cuh\"\n+#include \"THCTensorMathReduce.cuh\"\n+#include \"SharedMem.cuh\"\n+#include \"common.h\"\n+\n+template <typename T, typename IndexType>\n+__global__ void spatialDepthwiseConvolutionUpdateOutput(\n+    const THCDeviceTensor<T, 4> input,\n+    THCDeviceTensor<T, 4> output,\n+    const THCDeviceTensor<T, 4> weight,\n+    const THCDeviceTensor<T, 1> bias,\n+    bool biasEnabled,\n+    IndexType totalElements,\n+    const int outputChannels,\n+    const int depthwiseMultiplier,\n+    const int inputWidth, const int inputHeight,\n+    const int outputWidth, const int outputHeight,\n+    const int kernelWidth, const int kernelHeight,\n+    const int strideWidth, const int strideHeight,\n+    const int padWidth, const int padHeight,\n+    const int dilationWidth, const int dilationHeight)\n+{\n+  for (IndexType linearIndex = blockIdx.x * blockDim.x + threadIdx.x;\n+       linearIndex < totalElements;\n+       linearIndex += gridDim.x * blockDim.x) {\n+\n+    const int n = linearIndex / outputChannels / outputHeight / outputWidth;\n+    const int c = (linearIndex / outputHeight / outputWidth) % outputChannels;", "path": "torch/lib/THCUNN/SpatialDepthwiseConvolution.cu", "position": null, "original_position": 36, "commit_id": "65cc6f18f7ad5eb23a300b5b7715dc6ea2282b5d", "original_commit_id": "e322bc9f0ca6241150ff49ab4141a67b98530b15", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "body": "replacing divs by muls here might help `(linearIndex / (outputChannels*outputHeight*outputWidth)`. Or restructuring the code somewhat, so that you start dividing by outputWidth, and proceed to dividing intermediate results by outputHeight and outputChannels. Also, templatizing on depthwiseMultiplier might help? Same for other kernels. ", "created_at": "2017-10-13T20:16:43Z", "updated_at": "2018-11-23T15:35:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/3057#discussion_r144647981", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3057", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144647981"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3057#discussion_r144647981"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3057"}}, "body_html": "<p>replacing divs by muls here might help <code>(linearIndex / (outputChannels*outputHeight*outputWidth)</code>. Or restructuring the code somewhat, so that you start dividing by outputWidth, and proceed to dividing intermediate results by outputHeight and outputChannels. Also, templatizing on depthwiseMultiplier might help? Same for other kernels.</p>", "body_text": "replacing divs by muls here might help (linearIndex / (outputChannels*outputHeight*outputWidth). Or restructuring the code somewhat, so that you start dividing by outputWidth, and proceed to dividing intermediate results by outputHeight and outputChannels. Also, templatizing on depthwiseMultiplier might help? Same for other kernels."}