{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144693491", "pull_request_review_id": 69391176, "id": 144693491, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY5MzQ5MQ==", "diff_hunk": "@@ -0,0 +1,201 @@\n+#ifndef THC_GENERIC_FILE\n+#define THC_GENERIC_FILE \"generic/SpatialDepthwiseConvolution.cu\"\n+#else\n+\n+void THNN_(SpatialDepthwiseConvolution_updateOutput)(\n+                  THCState *state,\n+                  THCTensor *input,\n+                  THCTensor *output,\n+                  THCTensor *weight,\n+                  THCTensor *bias,\n+                  int kW, int kH,\n+                  int dW, int dH,\n+                  int padW, int padH,\n+                  int dilationW, int dilationH)\n+{\n+  THCUNN_assertSameGPU(state, 3, input, output, weight);\n+\n+  // Only handle 4D Input Tensors for now\n+  assert(THCTensor_(nDimension)(state, input) == 4);\n+  assert(THCTensor_(nDimension)(state, weight) == 4);\n+\n+  // We assume that the input and weight Tensors are shaped properly by\n+  // the caller, so we verify that here to some extent\n+\n+  // Weight Tensor is shape (output_channels, 1, kH, kW)\n+  assert(weight->size[1] == 1);\n+\n+  // Input Tensor is shape (N, input_channels, H, W)\n+  // We verify that the # of output_channels is a multiple of input_channels\n+  assert(weight->size[0] % input->size[1] == 0);\n+\n+  // Bias has same # of channels as output\n+  if (bias) {\n+    assert(bias->size[0] == weight->size[0]);", "path": "torch/lib/THCUNN/generic/SpatialDepthwiseConvolution.cu", "position": null, "original_position": 34, "commit_id": "65cc6f18f7ad5eb23a300b5b7715dc6ea2282b5d", "original_commit_id": "b832c53242f272f5cc86fb1e25385985a02ef098", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "use `THAssert`. `assert` is a no-op if the library is compiled with `-DNDEBUG` (common for release builds)", "created_at": "2017-10-14T12:43:57Z", "updated_at": "2018-11-23T15:35:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/3057#discussion_r144693491", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3057", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144693491"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3057#discussion_r144693491"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3057"}}, "body_html": "<p>use <code>THAssert</code>. <code>assert</code> is a no-op if the library is compiled with <code>-DNDEBUG</code> (common for release builds)</p>", "body_text": "use THAssert. assert is a no-op if the library is compiled with -DNDEBUG (common for release builds)"}