{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173891968", "pull_request_review_id": 103155737, "id": 173891968, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzg5MTk2OA==", "diff_hunk": "@@ -516,63 +625,12 @@ struct to_ir {\n       }\n       case TK_APPLY: {\n         auto apply = Apply(tree);\n-        if (function_table.count(apply.name().name()) > 0) {\n-          return emitFunctionCall(apply, output_size);\n-        } else if (apply.name().name() == \"print\") {\n-          expectOutputs(tree, output_size, 0);\n-          if (!apply.attributes().empty())\n-            throw ErrorReport(tree) << \"print doesn't accept any keyword arguments\";\n-          return emitNode(kPrint, tree->range(), getValues(apply.inputs()), 0,\n-                          AttributeMap{}, ListAttributeMap{})->outputs();\n-        } else {\n-          const auto& inputs = getValues(apply.inputs());\n-          NodeKind kind{apply.name().name()};\n-\n-          AttributeMap attributes{};\n-          ListAttributeMap list_attributes{};\n-          for (const auto& attr : apply.attributes()) {\n-            const auto& name = attr.name().name();\n-            const TreeRef& value = attr.value();\n-            // TODO: handle non-float attributes\n-            switch (value->kind()) {\n-              case TK_CONST: {\n-                auto v = value.get()->tree(0)->doubleValue();\n-                const auto& type = value.get()->tree(1)->stringValue();\n-                attributes.insert({name, {v, type}});\n-              } break;\n-              case TK_LIST: {\n-                std::vector<double> vs{};\n-                for (const auto& tree : value.get()->trees()) {\n-                  vs.push_back(tree->tree(0)->doubleValue());\n-                }\n-                const auto& type = value.get()->trees()[0]->tree(1)->stringValue();\n-                list_attributes.insert({name, {std::move(vs), type}});\n-              } break;\n-            default:\n-                throw ErrorReport(attr) << \"Unexpected kind of attribute value: \" << value->kind();\n-                break;\n-            }\n-          }\n-          auto n =\n-              emitNode(kind, apply.range(), inputs, output_size, attributes, list_attributes);\n-          std::vector<Value*> outputs = n->outputs();\n-          if (!hasTensorOp(n)) {\n-            // This will either throw or return a new node. We take\n-            // responsibility for inserting the node with inputs and outputs and\n-            // destroying the old node\n-            auto new_node = resolver.resolveCall(tree->range(), n);\n-            new_node->insertBefore(n);\n-            for (const auto& i : n->inputs()) {\n-              new_node->addInput(i);\n-            }\n-            for (size_t i = 0; i < n->outputs().size(); ++i) {\n-              new_node->addOutput();\n-            }\n-            n->destroy();\n-            n = new_node;\n-          }\n-          return n->outputs();\n+        auto inputs = getValues(apply.inputs());\n+        // the apply is directly an identifier 'foo'\n+        if(apply.callee().kind() == TK_VAR) {\n+          return emitApplyIdent(Var(apply.callee()).name(), inputs, apply.attributes(), output_size);", "path": "torch/csrc/jit/script/compiler.cpp", "position": 592, "original_position": 565, "commit_id": "ea6aa3491a3ed3df04c89336181fc62bbae67cd7", "original_commit_id": "1c077075a28c6808727b4d63ae7ac69659ccf869", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We temporarily need this for built-in functions, which get to skip the normal identifier resolution. What we should do is resolve all things like `torch.add` directly to their builtin call in python resolution. ", "created_at": "2018-03-12T17:59:14Z", "updated_at": "2018-11-23T15:40:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173891968", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173891968"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173891968"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5630"}}, "body_html": "<p>We temporarily need this for built-in functions, which get to skip the normal identifier resolution. What we should do is resolve all things like <code>torch.add</code> directly to their builtin call in python resolution.</p>", "body_text": "We temporarily need this for built-in functions, which get to skip the normal identifier resolution. What we should do is resolve all things like torch.add directly to their builtin call in python resolution.", "in_reply_to_id": 173660844}