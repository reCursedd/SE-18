{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173660322", "pull_request_review_id": 102606950, "id": 173660322, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY2MDMyMg==", "diff_hunk": "@@ -165,36 +166,124 @@ struct Environment {\n       captured_inputs.erase(captured_inputs.begin() + *ritr - skip_num);\n     }\n   }\n+  std::vector<std::string> definedVariables() {\n+    std::vector<std::string> result;\n+    for(auto & kv : value_table) {\n+      result.push_back(kv.first);\n+    }\n+    return result;\n+  }\n+private:\n+  ValueTable value_table;\n };\n \n+Node* emitBuiltinCall(\n+  SourceRange loc,\n+  Method& method,\n+  const std::string & name,\n+  at::ArrayRef<Value*> inputs,\n+  List<Attribute> attributes,\n+  size_t n_outputs) {\n+\n+  // we presume this is a call to a built-in function, and construct it\n+  NodeKind kind(name);\n+  auto graph = method.graph();\n+  auto n = graph->insertNode(graph->create(kind, inputs, n_outputs))\n+                ->setSourceLocation(std::make_shared<SourceRange>(loc));\n+\n+  for (const auto& attr : attributes) {\n+    const auto& name = attr.name().name();\n+    const Expr& value = attr.value();\n+    // TODO: handle non-float attributes\n+    switch (value.kind()) {\n+      case TK_CONST: {\n+        auto v = value.get()->tree(0)->doubleValue();\n+        const auto& type = value.get()->tree(1)->stringValue();\n+        if(type == \"f\")\n+          n->f_(Symbol(name), v);\n+        else\n+          n->i_(Symbol(name), v);\n+      } break;\n+      case TK_LIST_LITERAL: {\n+        std::vector<double> vs{};\n+        std::string type = \"f\"; // TODO: handle possibly mixed constants better\n+        for (const auto& tree : ListLiteral(value).inputs()) {\n+          vs.push_back(tree.get()->tree(0)->doubleValue());\n+          type = tree.get()->tree(1)->stringValue();\n+        }\n+        if(type == \"f\") {\n+          n->fs_(Symbol(name), std::move(vs));\n+        } else {\n+          n->is_(Symbol(name), std::vector<int64_t>(vs.begin(), vs.end()));\n+        }\n+      } break;\n+    default:\n+        throw ErrorReport(attr) << \"Unexpected kind of attribute value: \" << value.kind();\n+        break;\n+    }\n+  }\n+\n+  return n;\n+}\n+\n struct to_ir {\n   to_ir(\n-      FunctionDefinition& def,\n+      Def def,\n       FunctionTable& function_table,\n-      const Resolver& resolver)\n-      : def(def), function_table(function_table), resolver(resolver) {\n-    environment_stack = std::make_shared<Environment>(def.graph->block());\n-    // populate def->graph\n-    auto& tree = *def.tree;\n-    for (auto input : tree.params()) {\n-      auto& name = input.ident().name();\n-      environment_stack->setVar(name, def.graph->addInput(name));\n+      const Resolver& resolver,\n+      SugaredValuePtr self,\n+      Method& method) // method being constructed\n+      : method(method)\n+      , graph(method.graph())\n+      , def(def)\n+      , function_table(function_table)\n+      , resolver(resolver) {\n+    environment_stack = newFrame(graph->block());\n+    // inputs\n+    auto it = def.params().begin();\n+    auto end = def.params().end();\n+    if(self) {\n+      if(it == end)\n+        throw ErrorReport(def.params().range()) << \"methods must have a self argument\";\n+      environment_stack->setSugaredVar((*it).ident().name(), self);\n+      ++it;\n     }\n-\n-    auto stmts = tree.statements();\n+    for(;it != end; ++it) {\n+      auto& name = (*it).ident().name();\n+      environment_stack->setVar(name, graph->addInput(name));\n+    }\n+    // body\n+    auto stmts = def.statements();\n     auto stmts_begin = stmts.begin();\n     auto stmts_end = stmts.end();\n     if (stmts_begin == stmts_end)\n-      throw ErrorReport(tree) << \"functions need to have a non-empty body\";\n+      throw ErrorReport(def) << \"functions need to have a non-empty body\";\n     --stmts_end;\n     if ((*stmts_end).kind() != TK_RETURN)\n       throw ErrorReport(*stmts_end) << \"functions need to end with a return statement\";\n \n     emitStatements(stmts_begin, stmts_end);\n+\n+    // outputs\n     for (auto output : Return(*stmts_end).values()) {\n-      def.graph->registerOutput(emitExpr(output, 1)[0]);\n+      graph->registerOutput(emitExpr(output, 1)[0]);\n     }\n   }\n+\n+private:\n+  Method& method;\n+  std::shared_ptr<Graph> graph;\n+  Def def;\n+  FunctionTable& function_table;\n+  const Resolver& resolver;\n+\n+  // Singly-linked list of environments. This top element contains a member\n+  // `next` that points to the most immediate enclosing scope's value.\n+  std::shared_ptr<Environment> environment_stack;\n+\n+  std::shared_ptr<Environment> newFrame(Block * b, std::shared_ptr<Environment> next = nullptr) {", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 293, "commit_id": "ea6aa3491a3ed3df04c89336181fc62bbae67cd7", "original_commit_id": "1c077075a28c6808727b4d63ae7ac69659ccf869", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "What's the point of taking in `next` in this method? Shouldn't it just always be set to the current value of `environment_stack` (and it should be initialized to `nullptr` in the constructor)?", "created_at": "2018-03-11T16:18:27Z", "updated_at": "2018-11-23T15:40:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173660322", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173660322"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173660322"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5630"}}, "body_html": "<p>What's the point of taking in <code>next</code> in this method? Shouldn't it just always be set to the current value of <code>environment_stack</code> (and it should be initialized to <code>nullptr</code> in the constructor)?</p>", "body_text": "What's the point of taking in next in this method? Shouldn't it just always be set to the current value of environment_stack (and it should be initialized to nullptr in the constructor)?"}