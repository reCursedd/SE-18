{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173661038", "pull_request_review_id": 102606950, "id": 173661038, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY2MTAzOA==", "diff_hunk": "@@ -7,37 +7,77 @@\n #include \"torch/csrc/jit/pybind.h\"\n #include \"torch/csrc/jit/script/error_report.h\"\n #include \"torch/csrc/jit/script/tree_views.h\"\n+#include \"torch/csrc/jit/script/module.h\"\n \n namespace torch {\n namespace jit {\n namespace script {\n \n-struct Resolver {\n-  // Given an external call node where the signature does not correspond to an\n-  // existing ATen operator, this function returns a new node that calls into\n-  // the correct external op, or throws if that op cannot be found.\n-  //\n-  // The function simply instatntiates the new node and returns it. It is the\n-  // responsiblity of the caller to insert the node into the graph and delete\n-  // the original node.\n-  virtual Node* resolveCall(SourceRange location, Node* n) const {\n-    throw ErrorReport(location) << \"Unknown function \" << n->kind().toString();\n+// The AST can contain nodes like `self`, `self.b` or `python_fn` that\n+// are not first-class values in the graph representation, but instead\n+// will be desugared based on how they are used in the AST.\n+\n+// SugaredValue is used to temporarily represent these values in a way\n+// that separates their behavior from AST -> IR converter itself.\n+// This allows us to keep dependencies on python minimal.\n+\n+struct SugaredValue : public std::enable_shared_from_this<SugaredValue> {\n+  // what is this node? for error report (e.g. Module, python function)\n+  virtual std::string kind() const = 0;\n+  // what can we do with this thing?\n+\n+  // use it as a value e.g.  `this + 4`\n+  virtual Value * asValue(SourceRange loc, Method & m) {\n+    throw ErrorReport(loc) << kind() << \" cannot be used as a value\";\n+  }\n+\n+  // select an attribute on it, e.g. `this.field`\n+  virtual std::shared_ptr<SugaredValue> attr(SourceRange loc, Method & m, const std::string& field) {\n+    throw ErrorReport(loc) << \"attribute lookup is not defined on \" << kind();\n+  }\n+\n+  // call it like a function, e.g. `outputs = this(inputs)`\n+  virtual std::vector<Value*> call(\n+    SourceRange loc,\n+    Method & m,\n+    at::ArrayRef<Value*> inputs,\n+    List<Attribute> attributes,\n+    size_t n_outputs) {\n+    throw ErrorReport(loc) << \"cannot call a \" << kind();\n   }\n+  virtual ~SugaredValue() {}\n };\n \n-struct CompilationUnitImpl;\n-struct CompilationUnit {\n-  CompilationUnit();\n-  void define(const std::string& source, const Resolver& resolver);\n-  void defineFunction(const Def& def, const Resolver& resolver);\n-  std::shared_ptr<Graph> getGraph(const std::string& func_name);\n-  ~CompilationUnit();\n+// most things in the environment are just simple value types\n+// and not special python syntax sugar types\n+struct SimpleValue : public SugaredValue {\n+  SimpleValue(Value * value)\n+  : value(value) {}\n+  virtual std::string kind() const override {\n+    return \"value\";\n+  }\n+  virtual Value * asValue(SourceRange range, Method & m) override {\n+    return value;\n+  }\n+  virtual std::shared_ptr<SugaredValue> attr(SourceRange loc, Method & m, const std::string& field) override;", "path": "torch/csrc/jit/script/compiler.h", "position": 73, "original_position": 73, "commit_id": "ea6aa3491a3ed3df04c89336181fc62bbae67cd7", "original_commit_id": "1c077075a28c6808727b4d63ae7ac69659ccf869", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "a note saying that this will do the infix call desugaring would be nice (just one sentence).", "created_at": "2018-03-11T16:38:55Z", "updated_at": "2018-11-23T15:40:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173661038", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173661038"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173661038"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5630"}}, "body_html": "<p>a note saying that this will do the infix call desugaring would be nice (just one sentence).</p>", "body_text": "a note saying that this will do the infix call desugaring would be nice (just one sentence)."}