{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5630", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5630/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5630/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5630/events", "html_url": "https://github.com/pytorch/pytorch/pull/5630", "id": 303375521, "node_id": "MDExOlB1bGxSZXF1ZXN0MTczNjU5MTcx", "number": 5630, "title": "[jit] add a compiled script module", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-08T06:55:05Z", "updated_at": "2018-11-23T15:40:38Z", "closed_at": "2018-03-12T13:52:40Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "html_url": "https://github.com/pytorch/pytorch/pull/5630", "diff_url": "https://github.com/pytorch/pytorch/pull/5630.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5630.patch"}, "body_html": "<ul>\n<li>Add script::Module C++ class to represent script modules</li>\n<li>switch AST -&gt; IR conversion to work on Modules/Methods rather than raw graphs</li>\n<li>function-only AST -&gt; IR conversion is just a simplified case where there is<br>\nonly one module with a single method and no parameters.</li>\n<li>introduce SugaredValue in compiler.h to represent values in scope in a script<br>\nfunction that are not first-class and that get desugared. This is used to<br>\nrepresent the module's self parameter, as well as python function calls,<br>\nand method calls on tensor</li>\n<li>provide a Python ScriptModule that provides a nice API on top of script::Module<br>\nallowing for the definition of script modules with methods, parameters,<br>\nand submodules</li>\n</ul>\n<p>Not in this  PR but intended for the future:</p>\n<ul>\n<li>ScriptModule actually subclasses nn.Module, with most methods implemented</li>\n<li>Unification of tracedmodule and script module functionality into one container class.</li>\n</ul>", "body_text": "Add script::Module C++ class to represent script modules\nswitch AST -> IR conversion to work on Modules/Methods rather than raw graphs\nfunction-only AST -> IR conversion is just a simplified case where there is\nonly one module with a single method and no parameters.\nintroduce SugaredValue in compiler.h to represent values in scope in a script\nfunction that are not first-class and that get desugared. This is used to\nrepresent the module's self parameter, as well as python function calls,\nand method calls on tensor\nprovide a Python ScriptModule that provides a nice API on top of script::Module\nallowing for the definition of script modules with methods, parameters,\nand submodules\n\nNot in this  PR but intended for the future:\n\nScriptModule actually subclasses nn.Module, with most methods implemented\nUnification of tracedmodule and script module functionality into one container class.", "body": "* Add script::Module C++ class to represent script modules\r\n* switch AST -> IR conversion to work on Modules/Methods rather than raw graphs\r\n* function-only AST -> IR conversion is just a simplified case where there is\r\nonly one module with a single method and no parameters.\r\n* introduce SugaredValue in compiler.h to represent values in scope in a script\r\n  function that are not first-class and that get desugared. This is used to\r\n  represent the module's self parameter, as well as python function calls, \r\n  and method calls on tensor\r\n* provide a Python ScriptModule that provides a nice API on top of script::Module\r\n  allowing for the definition of script modules with methods, parameters,\r\n  and submodules\r\n\r\nNot in this  PR but intended for the future:\r\n* ScriptModule actually subclasses nn.Module, with most methods implemented\r\n* Unification of tracedmodule and script module functionality into one container class."}