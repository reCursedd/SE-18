{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173661309", "pull_request_review_id": 102606950, "id": 173661309, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY2MTMwOQ==", "diff_hunk": "@@ -722,82 +755,76 @@ struct to_ir {\n                Symbol(\"select\"),\n                loc,\n                {tensor},\n-               output_size,\n-               {{\"dim\", {0, \"LL\"}}, {\"index\", {idx, \"LL\"}}})\n-        ->outputs();\n+               output_size)\n+               ->i_(kdim, 0)\n+               ->i_(kindex, idx)\n+               ->outputs();\n   }\n \n-  FunctionDefinition& def; // the def being constructed\n-  FunctionTable& function_table;\n-  const Resolver& resolver;\n-\n-  // Singly-linked list of environments. This top element contains a member\n-  // `next` that points to the most immediate enclosing scope's value.\n-  std::shared_ptr<Environment> environment_stack;\n-\n- private:\n   Value* createConstant(const SourceRange& loc, const at::Tensor& val) {\n-    auto n = def.graph->createConstant(val);\n+    auto n = graph->createConstant(val);\n     n->setSourceLocation(std::make_shared<SourceRange>(loc));\n-    return def.graph->insertNode(n)->output();\n+    return graph->insertNode(n)->output();\n   }\n };\n \n-struct CompilationUnitImpl {\n-  CompilationUnitImpl() {}\n-  void defineFunction(const Def& def, const Resolver& resolver) {\n-    const auto& name = def.name().name();\n-\n-    if (functions.count(name) > 0) {\n-      throw ErrorReport(def) << name << \" already defined.\";\n+// support syntax sugar for x.foo(y, z) by allowing x.foo to return a\n+// callable value that will resolve to foo(x, y, z) when called.\n+std::shared_ptr<SugaredValue> SimpleValue::attr(SourceRange loc, Method & m, const std::string& field) {\n+  struct InfixCall : public SugaredValue {\n+    InfixCall(const std::string& field, Value* value)\n+    : field(field), value(value) {}\n+    std::string field;\n+    Value* value;\n+\n+    virtual std::string kind() const override {\n+      return \"builtin\";\n+    }\n+    virtual std::vector<Value*> call(\n+      SourceRange loc,\n+      Method & m,\n+      at::ArrayRef<Value*> inputs_,\n+      List<Attribute> attributes,\n+      size_t n_outputs) override {\n+        std::vector<Value*> inputs { value };\n+        inputs.insert(inputs.end(), inputs_.begin(), inputs_.end());\n+        Node * n = emitBuiltinCall(loc, m, field, inputs, attributes, n_outputs);\n+        if(!hasTensorOp(n)) {\n+          throw ErrorReport(loc) << \"unknown builtin op\";\n+        }\n+        return n->outputs();\n     }\n+  };\n+  return std::make_shared<InfixCall>(field, value);\n+}\n \n-    auto it = functions.emplace(name, FunctionDefinition{def}).first;\n-    to_ir(it->second, functions, resolver);\n-  }\n \n-  void define(const std::string& script, const Resolver& resolver) {\n-    Parser p(script);\n-    while (p.lexer().cur().kind != TK_EOF) {\n-      defineFunction(Def(p.parseFunction()), resolver);\n+void defineMethodsInModule(Module & m, const std::vector<Def>& definitions, const Resolver& resolver, SugaredValuePtr self) {\n+  FunctionTable table;\n+  for(auto def : definitions) {\n+    const std::string& name = def.name().name();\n+    Method& method = m.create_method(name);\n+    to_ir(def, table, resolver, self,  method);\n+    auto result = table.emplace(name, method);\n+    if(!result.second) {\n+      throw ErrorReport(def) << \"duplicate definition of function '\" << name << \"'\";", "path": "torch/csrc/jit/script/compiler.cpp", "position": 745, "original_position": 718, "commit_id": "ea6aa3491a3ed3df04c89336181fc62bbae67cd7", "original_commit_id": "1c077075a28c6808727b4d63ae7ac69659ccf869", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Worse - this also applies to class members, which generally almost never obey this rule", "created_at": "2018-03-11T16:45:52Z", "updated_at": "2018-11-23T15:40:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173661309", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173661309"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173661309"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5630"}}, "body_html": "<p>Worse - this also applies to class members, which generally almost never obey this rule</p>", "body_text": "Worse - this also applies to class members, which generally almost never obey this rule", "in_reply_to_id": 173660953}