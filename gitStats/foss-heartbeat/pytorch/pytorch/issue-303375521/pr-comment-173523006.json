{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173523006", "pull_request_review_id": 102606950, "id": 173523006, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzUyMzAwNg==", "diff_hunk": "@@ -15,48 +15,200 @@ using ResolutionCallback = std::function<py::function(std::string)>;\n #define VISIBILITY_HIDDEN __attribute__((visibility(\"hidden\")))\n #endif\n \n-struct VISIBILITY_HIDDEN PythonResolver : public Resolver {\n-  PythonResolver(ResolutionCallback rcb) : rcb(rcb) {}\n-\n-  Node* resolveCall(SourceRange location, Node* n) const override {\n-    AutoGIL ag;\n-    py::function func;\n-    func = rcb(n->kind().toString());\n-    auto* py_func = func.ptr();\n-    if (py_func == Py_None) {\n-      throw ErrorReport(location)\n-          << \"Unknown function \" << n->kind().toString();\n-    }\n+\n+\n+static void ensureSizeMatches(SourceRange loc, size_t expected, size_t actual, const std::string& what) {\n+  if(expected != actual) {\n+    throw ErrorReport(loc) << \"expected \" << expected << \" \" << what << \" but found \" << actual;\n+  }\n+}\n+\n+struct VISIBILITY_HIDDEN PythonValue : public SugaredValue {\n+  PythonValue(py::object self)\n+  : self(std::move(self)) {}\n+\n+  // call it like a function, e.g. `outputs = this(inputs)`\n+  virtual std::vector<Value*> call(SourceRange loc, Method & m, at::ArrayRef<Value*> inputs, List<Attribute> attributes, size_t n_outputs) override {\n+    ensureSizeMatches(loc, 0, attributes.size(), \"keyword arguments\");\n     // Release the function object so we can wrap it in a PythonOp\n-    auto fn_ptr = THPObjectPtr(func.release().ptr());\n-    std::string cconv(n->inputs().size(), 't');\n-    Node* new_node = n->owningGraph()->createPythonOp(\n-        std::move(fn_ptr), cconv, false, {}, {}, false);\n-    return new_node;\n+    Graph& g = *m.graph();\n+    py::object func = self;\n+    std::string cconv(inputs.size(), 't');\n+    Node* new_node = g.insertNode(g.createPythonOp(\n+      THPObjectPtr(func.release().ptr()), cconv, false, {}, {}, false));\n+    for(auto i : inputs)\n+      new_node->addInput(i);\n+    std::vector<Value*> outputs;\n+    for(size_t i = 0; i < n_outputs; ++i)\n+      outputs.push_back(new_node->addOutput());\n+    return outputs;\n   }\n \n-  ResolutionCallback rcb;\n+  virtual std::string kind() const override {\n+    return py::repr(self);\n+  }\n+private:\n+  py::object self;\n };\n \n+Resolver pythonResolver(ResolutionCallback rcb) {\n+  return [=](const std::string& name) -> std::shared_ptr<SugaredValue> {\n+      AutoGIL ag;\n+      py::object obj = rcb(name);\n+      if(obj.is(py::none())) {\n+        return nullptr;\n+      }\n+      return std::make_shared<PythonValue>(obj);\n+  };\n+}\n+\n+// defines how a modules/methods behave inside the script subset.", "path": "torch/csrc/jit/script/init.cpp", "position": null, "original_position": 69, "commit_id": "ea6aa3491a3ed3df04c89336181fc62bbae67cd7", "original_commit_id": "2f269870bdc09b72b8394146ce3018b5c563a014", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "typo: how a modules/methods", "created_at": "2018-03-09T18:01:38Z", "updated_at": "2018-11-23T15:40:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173523006", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173523006"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173523006"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5630"}}, "body_html": "<p>typo: how a modules/methods</p>", "body_text": "typo: how a modules/methods"}