{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173644122", "pull_request_review_id": 102871909, "id": 173644122, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzY0NDEyMg==", "diff_hunk": "@@ -621,29 +622,88 @@ def env(key):\n \n class CompilationUnit(object):\n     def __init__(self, lang=None, optimize=True):\n-        self.cu = torch._C.CompilationUnit()\n+        self.module = torch._C.ScriptModule(optimize)\n         if lang is not None:\n             self.define(lang, frame_id=3)\n-        self.execution_engines = {}\n         self.optimize = optimize\n \n     def define(self, lang, rcb=None, frame_id=2):\n         if not rcb:\n             rcb = createResolutionCallback(frame_id)\n-        self.cu.define(lang, rcb)\n+        self.module._define(lang, rcb, False)\n \n     def __getattr__(self, attr):\n-        if attr not in self.execution_engines:\n-            graph = self.cu.get_graph(attr)\n-            self.execution_engines[attr] = torch._C.GraphExecutor(graph, self.optimize)\n-        return self.execution_engines[attr]\n+        return self.module._get_method(attr)\n \n \n def script(fn):\n     rcb = createResolutionCallback()\n-    ast = torch.jit.frontend.get_jit_ast(fn)\n+    ast = get_jit_ast(fn)\n     graph = _jit_script_compile(ast, rcb)\n     return torch._C.GraphExecutor(graph, True)\n \n+\n+ScriptMethodStub = namedtuple('ScriptMethodStub', ('resolution_callback', 'ast'))\n+\n+\n+def script_method(fn):\n+    return ScriptMethodStub(createResolutionCallback(), get_jit_ast(fn))\n+\n+\n+class ScriptMeta(type(torch._C.ScriptModule)):\n+    # this has to inherit from pybind11's metaclass otherwise we get\n+    # issues because ScriptModule inherits from torch._C.ScriptModule,\n+    # a pybind11 type\n+    def __init__(cls, name, bases, attrs):\n+        # find all the script methods\n+        methods = []\n+        for k, v in sorted(attrs.items()):\n+            if isinstance(v, ScriptMethodStub):\n+                delattr(cls, k)\n+                methods.append(v)\n+        if len(methods) > 0 and '__init__' in attrs:\n+            # after the user's __init__ register all the script methods\n+            # with the module\n+            original_init = cls.__init__\n+\n+            def init_then_register(self, *args, **kwargs):\n+                original_init(self, *args, **kwargs)\n+                for m in methods:\n+                    self._create_method(m.ast, m.resolution_callback)\n+\n+            cls.__init__ = init_then_register\n+        return super(ScriptMeta, cls).__init__(name, bases, attrs)\n+\n+\n+class ScriptModule(with_metaclass(ScriptMeta, torch._C.ScriptModule)):", "path": "torch/jit/__init__.py", "position": 111, "original_position": 77, "commit_id": "ea6aa3491a3ed3df04c89336181fc62bbae67cd7", "original_commit_id": "2f269870bdc09b72b8394146ce3018b5c563a014", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Can we have a doc describing the general metaclass strategy here? Metaclasses are pretty unusual Python so a doc will help anyone who isn't a metaclass expert to work around this code.", "created_at": "2018-03-11T06:00:57Z", "updated_at": "2018-11-23T15:40:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173644122", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5630", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/173644122"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5630#discussion_r173644122"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5630"}}, "body_html": "<p>Can we have a doc describing the general metaclass strategy here? Metaclasses are pretty unusual Python so a doc will help anyone who isn't a metaclass expert to work around this code.</p>", "body_text": "Can we have a doc describing the general metaclass strategy here? Metaclasses are pretty unusual Python so a doc will help anyone who isn't a metaclass expert to work around this code."}