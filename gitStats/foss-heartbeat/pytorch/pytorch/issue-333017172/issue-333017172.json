{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8583", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8583/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8583/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8583/events", "html_url": "https://github.com/pytorch/pytorch/issues/8583", "id": 333017172, "node_id": "MDU6SXNzdWUzMzMwMTcxNzI=", "number": 8583, "title": "Combining indexing and item", "user": {"login": "Atcold", "id": 2119355, "node_id": "MDQ6VXNlcjIxMTkzNTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2119355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Atcold", "html_url": "https://github.com/Atcold", "followers_url": "https://api.github.com/users/Atcold/followers", "following_url": "https://api.github.com/users/Atcold/following{/other_user}", "gists_url": "https://api.github.com/users/Atcold/gists{/gist_id}", "starred_url": "https://api.github.com/users/Atcold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Atcold/subscriptions", "organizations_url": "https://api.github.com/users/Atcold/orgs", "repos_url": "https://api.github.com/users/Atcold/repos", "events_url": "https://api.github.com/users/Atcold/events{/privacy}", "received_events_url": "https://api.github.com/users/Atcold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-16T21:44:14Z", "updated_at": "2018-06-19T22:14:38Z", "closed_at": "2018-06-18T17:30:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>What about combining indexing and <code>item()</code> so that</p>\n<div class=\"highlight highlight-source-python\"><pre>one_d_tensor[index].item() <span class=\"pl-k\">is</span> one_d_tensor.item(index)</pre></div>", "body_text": "What about combining indexing and item() so that\none_d_tensor[index].item() is one_d_tensor.item(index)", "body": "What about combining indexing and `item()` so that\r\n```python\r\none_d_tensor[index].item() is one_d_tensor.item(index)\r\n```"}