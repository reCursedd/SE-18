{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5502", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5502/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5502/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5502/events", "html_url": "https://github.com/pytorch/pytorch/issues/5502", "id": 301531122, "node_id": "MDU6SXNzdWUzMDE1MzExMjI=", "number": 5502, "title": "pytorch clone could be faster", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-01T19:33:13Z", "updated_at": "2018-03-20T19:50:53Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>On a multicore system (dual socket XeonV4 of p3.16xlarge) it seems 10x faster to clone an array by adding 0 to it, than by calling clone</p>\n<p><a href=\"https://github.com/diux-dev/cluster/blob/master/yuxin_numpy/tf_numpy_benchmark.py\">https://github.com/diux-dev/cluster/blob/master/yuxin_numpy/tf_numpy_benchmark.py</a></p>\n<pre><code># Using 100 MB of data, times are in ms\npython tf_numpy_benchmark.py --benchmark=pytorch_add0 --allocator=tf --num-iters=101  \n# pytorch_add0                  :  28.2 GB/sec, min:  3.55, median:  4.00, mean:  4.10\npython tf_numpy_benchmark.py --benchmark=pytorch_clone --allocator=tf --num-iters=101    # 22.4 GB\n# pytorch_clone                  :   2.5 GB/sec, min: 40.45, median: 40.82, mean: 40.91\n\n</code></pre>\n<p>pytorch version: '0.3.0.post4'</p>", "body_text": "On a multicore system (dual socket XeonV4 of p3.16xlarge) it seems 10x faster to clone an array by adding 0 to it, than by calling clone\nhttps://github.com/diux-dev/cluster/blob/master/yuxin_numpy/tf_numpy_benchmark.py\n# Using 100 MB of data, times are in ms\npython tf_numpy_benchmark.py --benchmark=pytorch_add0 --allocator=tf --num-iters=101  \n# pytorch_add0                  :  28.2 GB/sec, min:  3.55, median:  4.00, mean:  4.10\npython tf_numpy_benchmark.py --benchmark=pytorch_clone --allocator=tf --num-iters=101    # 22.4 GB\n# pytorch_clone                  :   2.5 GB/sec, min: 40.45, median: 40.82, mean: 40.91\n\n\npytorch version: '0.3.0.post4'", "body": "On a multicore system (dual socket XeonV4 of p3.16xlarge) it seems 10x faster to clone an array by adding 0 to it, than by calling clone\r\n\r\nhttps://github.com/diux-dev/cluster/blob/master/yuxin_numpy/tf_numpy_benchmark.py\r\n\r\n```\r\n# Using 100 MB of data, times are in ms\r\npython tf_numpy_benchmark.py --benchmark=pytorch_add0 --allocator=tf --num-iters=101  \r\n# pytorch_add0                  :  28.2 GB/sec, min:  3.55, median:  4.00, mean:  4.10\r\npython tf_numpy_benchmark.py --benchmark=pytorch_clone --allocator=tf --num-iters=101    # 22.4 GB\r\n# pytorch_clone                  :   2.5 GB/sec, min: 40.45, median: 40.82, mean: 40.91\r\n\r\n```\r\n\r\npytorch version: '0.3.0.post4'"}