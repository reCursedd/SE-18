{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/419191057", "html_url": "https://github.com/pytorch/pytorch/pull/11332#issuecomment-419191057", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11332", "id": 419191057, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTE5MTA1Nw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-06T18:13:16Z", "updated_at": "2018-09-06T18:13:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The checker test is at<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/0ef2b318a21a34e754e3d050300a9ac114e6ac84/test/test_cuda.py#L1930-L1952\">pytorch/test/test_cuda.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 1930 to 1952\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/0ef2b318a21a34e754e3d050300a9ac114e6ac84\">0ef2b31</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1930\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1930\"></td>\n          <td id=\"LC1930\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_cuda_memory_leak_detection</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1931\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1931\"></td>\n          <td id=\"LC1931\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     l <span class=\"pl-k\">=</span> [] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1932\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1932\"></td>\n          <td id=\"LC1932\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1933\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1933\"></td>\n          <td id=\"LC1933\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-en\">@self.wrap_with_cuda_memory_check</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1934\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1934\"></td>\n          <td id=\"LC1934\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">no_leak</span>(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1935\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1935\"></td>\n          <td id=\"LC1935\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">pass</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1936\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1936\"></td>\n          <td id=\"LC1936\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1937\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1937\"></td>\n          <td id=\"LC1937\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-en\">@self.wrap_with_cuda_memory_check</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1938\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1938\"></td>\n          <td id=\"LC1938\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">leak_gpu0</span>(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1939\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1939\"></td>\n          <td id=\"LC1939\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         l.append(torch.tensor(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span>torch.device(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cuda:0<span class=\"pl-pds\">\"</span></span>))) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1940\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1940\"></td>\n          <td id=\"LC1940\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1941\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1941\"></td>\n          <td id=\"LC1941\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     no_leak() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1942\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1942\"></td>\n          <td id=\"LC1942\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1943\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1943\"></td>\n          <td id=\"LC1943\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.assertRaisesRegex(<span class=\"pl-c1\">AssertionError</span>, <span class=\"pl-sr\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">\"</span>leaked <span class=\"pl-c1\">\\d</span><span class=\"pl-k\">+</span> bytes CUDA memory on device 0<span class=\"pl-pds\">\"</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1944\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1944\"></td>\n          <td id=\"LC1944\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         leak_gpu0() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1945\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1945\"></td>\n          <td id=\"LC1945\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1946\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1946\"></td>\n          <td id=\"LC1946\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> <span class=\"pl-c1\">TEST_MULTIGPU</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1947\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1947\"></td>\n          <td id=\"LC1947\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-en\">@self.wrap_with_cuda_memory_check</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1948\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1948\"></td>\n          <td id=\"LC1948\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">def</span> <span class=\"pl-en\">leak_gpu1</span>(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1949\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1949\"></td>\n          <td id=\"LC1949\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             l.append(torch.tensor(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">device</span><span class=\"pl-k\">=</span>torch.device(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cuda:1<span class=\"pl-pds\">\"</span></span>))) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1950\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1950\"></td>\n          <td id=\"LC1950\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1951\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1951\"></td>\n          <td id=\"LC1951\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.assertRaisesRegex(<span class=\"pl-c1\">AssertionError</span>, <span class=\"pl-sr\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">\"</span>leaked <span class=\"pl-c1\">\\d</span><span class=\"pl-k\">+</span> bytes CUDA memory on device 1<span class=\"pl-pds\">\"</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1952\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1952\"></td>\n          <td id=\"LC1952\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             leak_gpu1() </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "The checker test is at\n\n  \n    \n      pytorch/test/test_cuda.py\n    \n    \n        Lines 1930 to 1952\n      in\n      0ef2b31\n    \n    \n    \n    \n\n        \n          \n           def test_cuda_memory_leak_detection(self): \n        \n\n        \n          \n               l = [] \n        \n\n        \n          \n            \n        \n\n        \n          \n               @self.wrap_with_cuda_memory_check \n        \n\n        \n          \n               def no_leak(): \n        \n\n        \n          \n                   pass \n        \n\n        \n          \n            \n        \n\n        \n          \n               @self.wrap_with_cuda_memory_check \n        \n\n        \n          \n               def leak_gpu0(): \n        \n\n        \n          \n                   l.append(torch.tensor(10, device=torch.device(\"cuda:0\"))) \n        \n\n        \n          \n            \n        \n\n        \n          \n               no_leak() \n        \n\n        \n          \n            \n        \n\n        \n          \n               with self.assertRaisesRegex(AssertionError, r\"leaked \\d+ bytes CUDA memory on device 0\"): \n        \n\n        \n          \n                   leak_gpu0() \n        \n\n        \n          \n            \n        \n\n        \n          \n               if TEST_MULTIGPU: \n        \n\n        \n          \n                   @self.wrap_with_cuda_memory_check \n        \n\n        \n          \n                   def leak_gpu1(): \n        \n\n        \n          \n                       l.append(torch.tensor(10, device=torch.device(\"cuda:1\"))) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   with self.assertRaisesRegex(AssertionError, r\"leaked \\d+ bytes CUDA memory on device 1\"): \n        \n\n        \n          \n                       leak_gpu1()", "body": "The checker test is at \r\nhttps://github.com/pytorch/pytorch/blob/0ef2b318a21a34e754e3d050300a9ac114e6ac84/test/test_cuda.py#L1930-L1952"}