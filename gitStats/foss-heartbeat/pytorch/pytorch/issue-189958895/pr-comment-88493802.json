{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/88493802", "pull_request_review_id": 9061645, "id": 88493802, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDkzODAy", "diff_hunk": "@@ -1533,6 +1877,33 @@ output | Same  | Output has the same shape as input\n     a Tensor of the same dimension and shape as the input\n \n <img src=\"image/sigmoid.png\" >\n+## SmoothL1Loss\n+\n+Creates a criterion that uses a squared term if the absolute \n+\n+element-wise error falls below 1 and an L1 term otherwise. \n+It is less sensitive to outliers than the `MSELoss` and in some cases \n+prevents exploding gradients (e.g. see \"Fast R-CNN\" paper by Ross Girshick).\n+\n+                          { 0.5 * (x_i - y_i)^2, if |x_i - y_i| < 1\n+    loss(x, y) = 1/n \\sum {\n+                          { |x_i - y_i| - 0.5,   otherwise\n+If `x` and `y` are `d`-dimensional `Tensor`s with a total of `n` elements, \n+the sum operation still operates over all the elements, and divides by `n`.\n+\n+The division by `n` can be avoided if one sets the internal variable \n+`sizeAverage` to `False`\n+## SoftMarginLoss\n+\n+Creates a criterion that optimizes a two-class classification \n+\n+logistic loss between input `x` (a `Tensor` of dimension `1`) and \n+target `y` (which is a tensor containing either `1`s or `-1`s).\n+\n+    loss(x, y) = sum_i (log(1 + exp(-y[i]*x[i]))) / x:nElement()\n+\n+The normalization by the number of elements in the input can be disabled by\n+setting `self.sizeAverage` to `False`.", "path": "docs/nn.md", "position": 466, "original_position": 470, "commit_id": "26d626a47c9c676af456ce6b6025ce5575ad4b2f", "original_commit_id": "9bc671dbc9166788396b86400e0a87414de7dea7", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "`sizeAverage`. Don't encourage people to modify the members if they can use the constructor\n", "created_at": "2016-11-17T16:44:56Z", "updated_at": "2018-11-23T15:31:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/225#discussion_r88493802", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/225", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/88493802"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/225#discussion_r88493802"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/225"}}, "body_html": "<p><code>sizeAverage</code>. Don't encourage people to modify the members if they can use the constructor</p>", "body_text": "sizeAverage. Don't encourage people to modify the members if they can use the constructor"}