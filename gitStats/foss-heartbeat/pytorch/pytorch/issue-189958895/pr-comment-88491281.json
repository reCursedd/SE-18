{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/88491281", "pull_request_review_id": 9061645, "id": 88491281, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDkxMjgx", "diff_hunk": "@@ -846,6 +979,56 @@ output | Same  | Output has the same shape as input\n     a Tensor of the same dimension and shape as the input\n \n <img src=\"image/htanh.png\" >\n+## HingeEmbeddingLoss\n+\n+Measures the loss given an input `x` which is a 1-dimensional vector \n+\n+and a label `y` (`1` or `-1`).\n+This is usually used for measuring whether two inputs are similar or dissimilar, \n+e.g. using the L1 pairwise distance, and is typically used for learning \n+nonlinear embeddings or semi-supervised learning.\n+\n+                     { x_i,                  if y_i ==  1\n+    loss(x, y) = 1/n {\n+                     { max(0, margin - x_i), if y_i == -1\n+\n+If `x` and `y` are `n`-dimensional `Tensor`s, the sum operation still \n+operates over all the elements, and divides by `n` \n+(this can be avoided if one sets the internal variable `sizeAverage` to `False`). \n+The `margin` has a default value of `1`, or can be set in the constructor.\n+## KLDivLoss\n+\n+The [Kullback-Leibler divergence](http://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence) Loss\n+\n+KL divergence is a useful distance measure for continuous distributions \n+and is often useful when performing direct regression over the space of\n+(discretely sampled) continuous output distributions.\n+As with ClassNLLLoss, the `input` given is expected to contain \n+_log-probabilities_, however unlike ClassNLLLoss, `input` is not \n+restricted to a 1D or 2D vector, because the criterion is applied element-wise.\n+\n+This criterion expects a `target` `Tensor` of the same size as the \n+`input` `Tensor`.\n+\n+The loss can be described as:\n+    loss(x, target) = 1/n \\sum(target_i * (log(target_i) - x_i))\n+\n+By default, the losses are averaged for each minibatch over observations \n+*as well as* over dimensions. However, if the field \n+`sizeAverage` is set to `false`, the losses are instead summed.\n+## L1Loss\n+\n+Creates a criterion that measures the mean absolute value of the \n+\n+element-wise difference between input `x` and target `y`:\n+\n+loss(x, y)  = 1/n \\sum |x_i - y_i|\n+\n+If `x` and `y` are `d`-dimensional `Tensor`s with a total of `n` elements, ", "path": "docs/nn.md", "position": null, "original_position": 243, "commit_id": "26d626a47c9c676af456ce6b6025ce5575ad4b2f", "original_commit_id": "9bc671dbc9166788396b86400e0a87414de7dea7", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "You're not referring to `d` anywhere so I'd just say that \"`x` and `y` can have an arbitrary shape (as long as it matches), ...\"\n", "created_at": "2016-11-17T16:34:33Z", "updated_at": "2018-11-23T15:31:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/225#discussion_r88491281", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/225", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/88491281"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/225#discussion_r88491281"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/225"}}, "body_html": "<p>You're not referring to <code>d</code> anywhere so I'd just say that \"<code>x</code> and <code>y</code> can have an arbitrary shape (as long as it matches), ...\"</p>", "body_text": "You're not referring to d anywhere so I'd just say that \"x and y can have an arbitrary shape (as long as it matches), ...\""}