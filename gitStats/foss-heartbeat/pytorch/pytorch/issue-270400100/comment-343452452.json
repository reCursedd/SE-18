{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/343452452", "html_url": "https://github.com/pytorch/pytorch/issues/3423#issuecomment-343452452", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3423", "id": 343452452, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzQ1MjQ1Mg==", "user": {"login": "KaiyangZhou", "id": 22972972, "node_id": "MDQ6VXNlcjIyOTcyOTcy", "avatar_url": "https://avatars3.githubusercontent.com/u/22972972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaiyangZhou", "html_url": "https://github.com/KaiyangZhou", "followers_url": "https://api.github.com/users/KaiyangZhou/followers", "following_url": "https://api.github.com/users/KaiyangZhou/following{/other_user}", "gists_url": "https://api.github.com/users/KaiyangZhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaiyangZhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaiyangZhou/subscriptions", "organizations_url": "https://api.github.com/users/KaiyangZhou/orgs", "repos_url": "https://api.github.com/users/KaiyangZhou/repos", "events_url": "https://api.github.com/users/KaiyangZhou/events{/privacy}", "received_events_url": "https://api.github.com/users/KaiyangZhou/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T11:43:23Z", "updated_at": "2017-11-10T11:44:31Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5770141\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alexpeys\">@alexpeys</a> You could add a custom torch.autograd.Function (<a href=\"url\">http://pytorch.org/docs/master/notes/extending.html#extending-torch-autograd</a>) to compute the forward of matrix determinant, as well as the backward to obtain the gradients wrt each element of the matrix.</p>\n<p>The codes would look like:</p>\n<pre><code>class Det(torch.autograd.Function):\n    \"\"\"\n    Matrix determinant. Input should be a square matrix\n    \"\"\"\n\n    @staticmethod\n    def forward(ctx, x):\n        output = torch.potrf(x).diag().prod()**2\n        output = torch.Tensor([output]).cuda() # remove .cuda() if you only use cpu\n        ctx.save_for_backward(x, output)\n        return output\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        x, output = ctx.saved_variables\n        grad_input = None\n\n        if ctx.needs_input_grad[0]:\n            grad_input = grad_output * output * x.inverse().t()\n\n        return grad_input\n</code></pre>\n<p>At test time, just use <code>Det.apply()</code> in the computational graph.</p>\n<p>To understand how the gradients are computed, please have a look at <a href=\"url\">https://en.wikipedia.org/wiki/Determinant#Derivative</a></p>", "body_text": "@alexpeys You could add a custom torch.autograd.Function (http://pytorch.org/docs/master/notes/extending.html#extending-torch-autograd) to compute the forward of matrix determinant, as well as the backward to obtain the gradients wrt each element of the matrix.\nThe codes would look like:\nclass Det(torch.autograd.Function):\n    \"\"\"\n    Matrix determinant. Input should be a square matrix\n    \"\"\"\n\n    @staticmethod\n    def forward(ctx, x):\n        output = torch.potrf(x).diag().prod()**2\n        output = torch.Tensor([output]).cuda() # remove .cuda() if you only use cpu\n        ctx.save_for_backward(x, output)\n        return output\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        x, output = ctx.saved_variables\n        grad_input = None\n\n        if ctx.needs_input_grad[0]:\n            grad_input = grad_output * output * x.inverse().t()\n\n        return grad_input\n\nAt test time, just use Det.apply() in the computational graph.\nTo understand how the gradients are computed, please have a look at https://en.wikipedia.org/wiki/Determinant#Derivative", "body": "@alexpeys You could add a custom torch.autograd.Function ([http://pytorch.org/docs/master/notes/extending.html#extending-torch-autograd](url)) to compute the forward of matrix determinant, as well as the backward to obtain the gradients wrt each element of the matrix.\r\n\r\nThe codes would look like:\r\n\r\n```\r\nclass Det(torch.autograd.Function):\r\n    \"\"\"\r\n    Matrix determinant. Input should be a square matrix\r\n    \"\"\"\r\n\r\n    @staticmethod\r\n    def forward(ctx, x):\r\n        output = torch.potrf(x).diag().prod()**2\r\n        output = torch.Tensor([output]).cuda() # remove .cuda() if you only use cpu\r\n        ctx.save_for_backward(x, output)\r\n        return output\r\n\r\n    @staticmethod\r\n    def backward(ctx, grad_output):\r\n        x, output = ctx.saved_variables\r\n        grad_input = None\r\n\r\n        if ctx.needs_input_grad[0]:\r\n            grad_input = grad_output * output * x.inverse().t()\r\n\r\n        return grad_input\r\n```\r\n\r\nAt test time, just use `Det.apply()` in the computational graph.\r\n\r\nTo understand how the gradients are computed, please have a look at [https://en.wikipedia.org/wiki/Determinant#Derivative](url)"}