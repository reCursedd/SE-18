{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144716391", "pull_request_review_id": 69414911, "id": 144716391, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDcxNjM5MQ==", "diff_hunk": "@@ -47,32 +77,61 @@\n   THHostStorage_(free)(cpu_storage);                           \\\n }\n \n-#define COPY_FROM_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+#define COPY_FROM_HALF_ARRAY_CUDA(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+{ \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);               \\\n+  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);   \\\n+  load_real *data = data_guard.get();                           \\\n+  for (size_t i=0; i<SIZE; i++) {                               \\\n+    data[i] = TH_half2float(arrdata[i]);                        \\\n+  }                                                             \\\n+  THHostStorage *cpu_storage =                                  \\\n+      THHostStorage_(newWithData)(data_guard.get(), SIZE);      \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                     \\\n+  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);     \\\n+  THHostStorage_(free)(cpu_storage);                            \\\n+}\n+\n+#define COPY_FROM_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE)     \\\n+{ \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                   \\\n+  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);       \\\n+  load_real *data = data_guard.get();                               \\\n+  for (size_t i=0; i<SIZE; i++) {                                   \\\n+    data[i] = arrdata[i];                                           \\\n+  }                                                                 \\\n+  THFloatStorage *cpu_storage =                                     \\\n+      THFloatStorage_newWithData(data_guard.get(), storage_size);   \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                         \\\n+  THCudaHalfStorage_copyFloat(LIBRARY_STATE STORAGE, cpu_storage);  \\\n+  THFloatStorage_free(cpu_storage);                                 \\\n+}\n+\n+#define COPY_FROM_HALF_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE)                        \\\n { \\\n-  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                  \\\n-  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);      \\\n-  load_real *data = data_guard.get();                              \\\n-  for (size_t i=0; i<SIZE; i++) {                                  \\\n-    data[i] = arrdata[i];                                          \\\n-  }                                                                \\\n-  THFloatStorage *cpu_storage =                                    \\\n-      THFloatStorage_newWithData(data_guard.get(), storage_size);  \\\n-  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                        \\\n-  THCudaHalfStorage_copyFloat(LIBRARY_STATE STORAGE, cpu_storage); \\\n-  THFloatStorage_free(cpu_storage);                                \\\n+  char *arrdata = (char*)PyArray_DATA(ARRAY);                                               \\\n+  cudaMemcpy(STORAGE->data, arrdata, SIZE * sizeof(float) / 2, cudaMemcpyHostToDevice);     \\", "path": "torch/csrc/generic/Tensor.cpp", "position": null, "original_position": 99, "commit_id": "4c2a17d2a6903d2b0f1b01bf9d7b961bed4fbb72", "original_commit_id": "87ff8269ff502ce548c7d0e07acf7510c096427d", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Hmm actually can you still make this overload use `THCStorage_(copyCPU)`? I'm a bit worried about stream handling. This completely ignores it, and using `THC` functions would make it consistent with all other cases for sure", "created_at": "2017-10-15T11:14:24Z", "updated_at": "2018-11-23T15:35:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/2953#discussion_r144716391", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2953", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/144716391"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2953#discussion_r144716391"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2953"}}, "body_html": "<p>Hmm actually can you still make this overload use <code>THCStorage_(copyCPU)</code>? I'm a bit worried about stream handling. This completely ignores it, and using <code>THC</code> functions would make it consistent with all other cases for sure</p>", "body_text": "Hmm actually can you still make this overload use THCStorage_(copyCPU)? I'm a bit worried about stream handling. This completely ignores it, and using THC functions would make it consistent with all other cases for sure"}