{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145940379", "pull_request_review_id": 70815250, "id": 145940379, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTk0MDM3OQ==", "diff_hunk": "@@ -23,56 +28,94 @@\n #define NUMPY_TYPE_ENUM NPY_UINT8\n #endif\n \n-#define COPY_FROM_ARRAY_CPU(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+\n+// COPY_FROM_ARRAY macros for Numpy -> TH assignment\n+//\n+// ELTYPE = data type of the Python array\n+// ARRAY = base pointer of the Python array\n+// STORAGE = pointer to a THStorage struct, type THStoragePtr\n+// SIZE = size in bytes of the array to copy\n+// CONVERSION = function to apply to each array element before assigning, for half<->float conversions\n+\n+#define COPY_FROM_ARRAY_CPU(ELTYPE, ARRAY, STORAGE, SIZE, CONVERSION)   \\\n+{ \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                       \\\n+  real *data = STORAGE->data;                                           \\\n+  for (size_t i=0; i<SIZE; i++) {                                       \\\n+    data[i] = CONVERSION(arrdata[i]);                                   \\\n+  }                                                                     \\\n+}\n+\n+#define COPY_FROM_HALF_ARRAY_CPU_HALF(ARRAY, STORAGE, SIZE) \\\n+{ \\\n+  char *arrdata = (char*)PyArray_DATA(ARRAY);               \\\n+  memcpy(STORAGE->data, arrdata, SIZE * 2);                 \\\n+}\n+\n+#ifdef THC_REAL_IS_HALF\n+#define COPY_FROM_ARRAY_CUDA(ELTYPE, ARRAY, STORAGE, SIZE, CONVERSION)  \\\n { \\\n-  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);         \\\n-  real *data = STORAGE->data;                             \\\n-  for (size_t i=0; i<SIZE; i++) {                         \\\n-    data[i] = arrdata[i];                                 \\\n-  }                                                       \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                       \\\n+  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);           \\\n+  load_real *data = data_guard.get();                                   \\\n+  for (size_t i=0; i<SIZE; i++) {                                       \\\n+    data[i] = arrdata[i];                                               \\\n+  }                                                                     \\\n+  THFloatStorage *cpu_storage =                                         \\\n+      THFloatStorage_newWithData(data_guard.get(), SIZE);               \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                             \\\n+  THCudaHalfStorage_copyFloat(LIBRARY_STATE STORAGE, cpu_storage);      \\\n+  THFloatStorage_free(cpu_storage);                                     \\\n }\n \n-#define COPY_FROM_ARRAY_CUDA(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+#else\n+#define COPY_FROM_ARRAY_CUDA(ELTYPE, ARRAY, STORAGE, SIZE, CONVERSION)  \\\n { \\\n-  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);              \\\n-  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);  \\\n-  load_real *data = data_guard.get();                          \\\n-  for (size_t i=0; i<SIZE; i++) {                              \\\n-    data[i] = arrdata[i];                                      \\\n-  }                                                            \\\n-  THHostStorage *cpu_storage =                                 \\\n-      THHostStorage_(newWithData)(data_guard.get(), SIZE);     \\\n-  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                    \\\n-  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);    \\\n-  THHostStorage_(free)(cpu_storage);                           \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                       \\\n+  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);           \\\n+  load_real *data = data_guard.get();                                   \\\n+  for (size_t i=0; i<SIZE; i++) {                                       \\\n+    data[i] = CONVERSION(arrdata[i]);                                   \\\n+  }                                                                     \\\n+  THHostStorage *cpu_storage =                                          \\\n+      THHostStorage_(newWithData)(data_guard.get(), SIZE);              \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                             \\\n+  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);             \\\n+  THHostStorage_(free)(cpu_storage);                                    \\\n }\n+#endif  // THC_REAL_IS_HALF\n \n-#define COPY_FROM_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+#define COPY_FROM_HALF_ARRAY_CUDA_HALF(ARRAY, STORAGE, SIZE)            \\\n { \\\n-  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                  \\\n-  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);      \\\n-  load_real *data = data_guard.get();                              \\\n-  for (size_t i=0; i<SIZE; i++) {                                  \\\n-    data[i] = arrdata[i];                                          \\\n-  }                                                                \\\n-  THFloatStorage *cpu_storage =                                    \\\n-      THFloatStorage_newWithData(data_guard.get(), storage_size);  \\\n-  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                        \\\n-  THCudaHalfStorage_copyFloat(LIBRARY_STATE STORAGE, cpu_storage); \\\n-  THFloatStorage_free(cpu_storage);                                \\\n+  THHalf *arrdata = (THHalf*)PyArray_DATA(ARRAY);                       \\\n+  THHostStorage *cpu_storage =                                          \\\n+      THHostStorage_(newWithData)(arrdata, SIZE);                       \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                             \\\n+  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);             \\", "path": "torch/csrc/generic/Tensor.cpp", "position": 115, "original_position": 115, "commit_id": "4c2a17d2a6903d2b0f1b01bf9d7b961bed4fbb72", "original_commit_id": "4f65954c64cb198d820a89b427fd0b0e1d7dd804", "user": {"login": "kohr-h", "id": 5030250, "node_id": "MDQ6VXNlcjUwMzAyNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5030250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kohr-h", "html_url": "https://github.com/kohr-h", "followers_url": "https://api.github.com/users/kohr-h/followers", "following_url": "https://api.github.com/users/kohr-h/following{/other_user}", "gists_url": "https://api.github.com/users/kohr-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/kohr-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kohr-h/subscriptions", "organizations_url": "https://api.github.com/users/kohr-h/orgs", "repos_url": "https://api.github.com/users/kohr-h/repos", "events_url": "https://api.github.com/users/kohr-h/events{/privacy}", "received_events_url": "https://api.github.com/users/kohr-h/received_events", "type": "User", "site_admin": false}, "body": "Now it's being freed.", "created_at": "2017-10-20T11:36:19Z", "updated_at": "2018-11-23T15:35:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/2953#discussion_r145940379", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2953", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145940379"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2953#discussion_r145940379"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2953"}}, "body_html": "<p>Now it's being freed.</p>", "body_text": "Now it's being freed.", "in_reply_to_id": 145811635}