{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145729493", "pull_request_review_id": 70572286, "id": 145729493, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTcyOTQ5Mw==", "diff_hunk": "@@ -47,32 +77,61 @@\n   THHostStorage_(free)(cpu_storage);                           \\\n }\n \n-#define COPY_FROM_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+#define COPY_FROM_HALF_ARRAY_CUDA(ELTYPE, ARRAY, STORAGE, SIZE) \\\n+{ \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);               \\\n+  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);   \\\n+  load_real *data = data_guard.get();                           \\\n+  for (size_t i=0; i<SIZE; i++) {                               \\\n+    data[i] = TH_half2float(arrdata[i]);                        \\\n+  }                                                             \\\n+  THHostStorage *cpu_storage =                                  \\\n+      THHostStorage_(newWithData)(data_guard.get(), SIZE);      \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                     \\\n+  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);     \\\n+  THHostStorage_(free)(cpu_storage);                            \\\n+}\n+\n+#define COPY_FROM_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE)     \\\n+{ \\\n+  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                   \\\n+  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);       \\\n+  load_real *data = data_guard.get();                               \\\n+  for (size_t i=0; i<SIZE; i++) {                                   \\\n+    data[i] = arrdata[i];                                           \\\n+  }                                                                 \\\n+  THFloatStorage *cpu_storage =                                     \\\n+      THFloatStorage_newWithData(data_guard.get(), storage_size);   \\\n+  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                         \\\n+  THCudaHalfStorage_copyFloat(LIBRARY_STATE STORAGE, cpu_storage);  \\\n+  THFloatStorage_free(cpu_storage);                                 \\\n+}\n+\n+#define COPY_FROM_HALF_ARRAY_CUDA_HALF(ELTYPE, ARRAY, STORAGE, SIZE)                        \\\n { \\\n-  ELTYPE *arrdata = (ELTYPE*)PyArray_DATA(ARRAY);                  \\\n-  std::unique_ptr<load_real> data_guard(new load_real[SIZE]);      \\\n-  load_real *data = data_guard.get();                              \\\n-  for (size_t i=0; i<SIZE; i++) {                                  \\\n-    data[i] = arrdata[i];                                          \\\n-  }                                                                \\\n-  THFloatStorage *cpu_storage =                                    \\\n-      THFloatStorage_newWithData(data_guard.get(), storage_size);  \\\n-  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                        \\\n-  THCudaHalfStorage_copyFloat(LIBRARY_STATE STORAGE, cpu_storage); \\\n-  THFloatStorage_free(cpu_storage);                                \\\n+  char *arrdata = (char*)PyArray_DATA(ARRAY);                                               \\\n+  cudaMemcpy(STORAGE->data, arrdata, SIZE * sizeof(float) / 2, cudaMemcpyHostToDevice);     \\", "path": "torch/csrc/generic/Tensor.cpp", "position": null, "original_position": 99, "commit_id": "4c2a17d2a6903d2b0f1b01bf9d7b961bed4fbb72", "original_commit_id": "87ff8269ff502ce548c7d0e07acf7510c096427d", "user": {"login": "kohr-h", "id": 5030250, "node_id": "MDQ6VXNlcjUwMzAyNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5030250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kohr-h", "html_url": "https://github.com/kohr-h", "followers_url": "https://api.github.com/users/kohr-h/followers", "following_url": "https://api.github.com/users/kohr-h/following{/other_user}", "gists_url": "https://api.github.com/users/kohr-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/kohr-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kohr-h/subscriptions", "organizations_url": "https://api.github.com/users/kohr-h/orgs", "repos_url": "https://api.github.com/users/kohr-h/repos", "events_url": "https://api.github.com/users/kohr-h/events{/privacy}", "received_events_url": "https://api.github.com/users/kohr-h/received_events", "type": "User", "site_admin": false}, "body": "I did this\r\n```C\r\n#define COPY_FROM_HALF_ARRAY_CUDA_HALF(ARRAY, STORAGE, SIZE)            \\\r\n{ \\\r\n  THHalf *arrdata = (THHalf*)PyArray_DATA(ARRAY);                       \\\r\n  std::unique_ptr<THHalf> data_guard(arrdata);                          \\\r\n  THHostStorage *cpu_storage =                                          \\\r\n      THHostStorage_(newWithData)(data_guard.get(), SIZE);              \\\r\n  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                             \\\r\n  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);             \\\r\n}\r\n```\r\nbut it segfaults. What's the proper way of using these functions?", "created_at": "2017-10-19T15:07:36Z", "updated_at": "2018-11-23T15:35:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/2953#discussion_r145729493", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2953", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145729493"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2953#discussion_r145729493"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2953"}}, "body_html": "<p>I did this</p>\n<div class=\"highlight highlight-source-c\"><pre>#<span class=\"pl-k\">define</span> <span class=\"pl-en\">COPY_FROM_HALF_ARRAY_CUDA_HALF</span>(<span class=\"pl-v\">ARRAY, STORAGE, SIZE</span>)            \\\n{ \\\n  THHalf *arrdata = (THHalf*)<span class=\"pl-c1\">PyArray_DATA</span>(ARRAY);                       \\\n  std::unique_ptr&lt;THHalf&gt; <span class=\"pl-c1\">data_guard</span>(arrdata);                          \\\n  THHostStorage *cpu_storage =                                          \\\n      <span class=\"pl-c1\">THHostStorage_</span>(newWithData)(data_guard.<span class=\"pl-c1\">get</span>(), SIZE);              \\\n  cpu_storage-&gt;<span class=\"pl-smi\">flag</span> &amp;= ~TH_STORAGE_FREEMEM;                             \\\n  <span class=\"pl-c1\">THCStorage_</span>(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);             \\\n}</pre></div>\n<p>but it segfaults. What's the proper way of using these functions?</p>", "body_text": "I did this\n#define COPY_FROM_HALF_ARRAY_CUDA_HALF(ARRAY, STORAGE, SIZE)            \\\n{ \\\n  THHalf *arrdata = (THHalf*)PyArray_DATA(ARRAY);                       \\\n  std::unique_ptr<THHalf> data_guard(arrdata);                          \\\n  THHostStorage *cpu_storage =                                          \\\n      THHostStorage_(newWithData)(data_guard.get(), SIZE);              \\\n  cpu_storage->flag &= ~TH_STORAGE_FREEMEM;                             \\\n  THCStorage_(copyCPU)(LIBRARY_STATE STORAGE, cpu_storage);             \\\n}\nbut it segfaults. What's the proper way of using these functions?", "in_reply_to_id": 144716391}