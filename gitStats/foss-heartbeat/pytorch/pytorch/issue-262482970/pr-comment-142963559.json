{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/142963559", "pull_request_review_id": 67404812, "id": 142963559, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mjk2MzU1OQ==", "diff_hunk": "@@ -206,12 +207,13 @@ THTensor* THPTensor_(fromNumpy)(PyObject *numpy_array) {\n     {\n       THStoragePtr storage(THStorage_(newWithSize)(LIBRARY_STATE storage_size));\n       switch (PyArray_TYPE(array)) {\n-        case NPY_DOUBLE: COPY_FROM_ARRAY(double,  array, storage, storage_size); break;\n-        case NPY_FLOAT:  COPY_FROM_ARRAY(float,   array, storage, storage_size); break;\n-        case NPY_INT64:  COPY_FROM_ARRAY(int64_t, array, storage, storage_size); break;\n-        case NPY_INT32:  COPY_FROM_ARRAY(int32_t, array, storage, storage_size); break;\n-        case NPY_INT16:  COPY_FROM_ARRAY(int16_t, array, storage, storage_size); break;\n-        case NPY_UINT8:  COPY_FROM_ARRAY(uint8_t, array, storage, storage_size); break;\n+        case NPY_DOUBLE: COPY_FROM_ARRAY(char, array, storage, storage_size); break;\n+        case NPY_FLOAT:  COPY_FROM_ARRAY(char, array, storage, storage_size); break;\n+        case NPY_HALF:   COPY_FROM_ARRAY(char, array, storage, storage_size); break;\n+        case NPY_INT64:  COPY_FROM_ARRAY(char, array, storage, storage_size); break;\n+        case NPY_INT32:  COPY_FROM_ARRAY(char, array, storage, storage_size); break;\n+        case NPY_INT16:  COPY_FROM_ARRAY(char, array, storage, storage_size); break;\n+        case NPY_UINT8:  COPY_FROM_ARRAY(char, array, storage, storage_size); break;", "path": "torch/csrc/generic/Tensor.cpp", "position": null, "original_position": 39, "commit_id": "4c2a17d2a6903d2b0f1b01bf9d7b961bed4fbb72", "original_commit_id": "9a00ba9ec3f11cbbb80f6cfbce6292ec37ac4e4c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's true, but actually I have no idea why the CUDA functions do what they do. CUDA version should also be a matter of allocating a CUDA tensor and then doing cudaMemcpy (there's no need to go through THC for this one). Can you update it? Thank you!", "created_at": "2017-10-05T14:58:30Z", "updated_at": "2018-11-23T15:35:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/2953#discussion_r142963559", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2953", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/142963559"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2953#discussion_r142963559"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2953"}}, "body_html": "<p>That's true, but actually I have no idea why the CUDA functions do what they do. CUDA version should also be a matter of allocating a CUDA tensor and then doing cudaMemcpy (there's no need to go through THC for this one). Can you update it? Thank you!</p>", "body_text": "That's true, but actually I have no idea why the CUDA functions do what they do. CUDA version should also be a matter of allocating a CUDA tensor and then doing cudaMemcpy (there's no need to go through THC for this one). Can you update it? Thank you!", "in_reply_to_id": 142957521}