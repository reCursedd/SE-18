{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/334161177", "html_url": "https://github.com/pytorch/pytorch/pull/2953#issuecomment-334161177", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2953", "id": 334161177, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDE2MTE3Nw==", "user": {"login": "kohr-h", "id": 5030250, "node_id": "MDQ6VXNlcjUwMzAyNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5030250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kohr-h", "html_url": "https://github.com/kohr-h", "followers_url": "https://api.github.com/users/kohr-h/followers", "following_url": "https://api.github.com/users/kohr-h/following{/other_user}", "gists_url": "https://api.github.com/users/kohr-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/kohr-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kohr-h/subscriptions", "organizations_url": "https://api.github.com/users/kohr-h/orgs", "repos_url": "https://api.github.com/users/kohr-h/repos", "events_url": "https://api.github.com/users/kohr-h/events{/privacy}", "received_events_url": "https://api.github.com/users/kohr-h/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-04T13:49:23Z", "updated_at": "2017-10-04T13:49:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Creeping towards a solution. The segfault was probably due to me assuming that <code>SIZE</code> in the <code>COPY_FROM_ARRAY_CPU</code> macro was in terms of number of elements, but really was in Bytes.<br>\nFor me segfaults are gone now.</p>\n<p>Still the <code>numpy()</code> method is not present in the <code>HalfTensor</code> class. I think the problem is that I use <code>NPY_HALF</code> as best guess, but it actually doesn't exist in pybind11. Hence the macro <code>NPY_TYPE_ENUM</code> is defined for <code>TH_REAL_IS_HALF</code> but expands to empty.<br>\nSeems I'm stuck again.</p>\n<p>Another minor issue is that the <code>assertEquals</code> check doesn't work for half tensors, it fails with this message:</p>\n<pre><code>Traceback (most recent call last):\n  File \"test/test_torch.py\", line 4202, in test_from_numpy\n    self.assertEqual(torch.from_numpy(array), torch.Tensor([1, 2, 3, 4]))\n  File \"/export/scratch1/kohr/git/pytorch/test/common.py\", line 215, in assertEqual\n    assertTensorsEqual(x, y)\n  File \"/export/scratch1/kohr/git/pytorch/test/common.py\", line 200, in assertTensorsEqual\n    nan_mask = a != a\n  File \"/export/scratch1/kohr/miniconda3/envs/torch-master/lib/python3.6/site-packages/torch/tensor.py\", line 351, in __ne__\n    return self.ne(other)\nAttributeError: 'torch.HalfTensor' object has no attribute 'ne'\n</code></pre>\n<p>I guess that check can just be done with a loop instead.</p>", "body_text": "Creeping towards a solution. The segfault was probably due to me assuming that SIZE in the COPY_FROM_ARRAY_CPU macro was in terms of number of elements, but really was in Bytes.\nFor me segfaults are gone now.\nStill the numpy() method is not present in the HalfTensor class. I think the problem is that I use NPY_HALF as best guess, but it actually doesn't exist in pybind11. Hence the macro NPY_TYPE_ENUM is defined for TH_REAL_IS_HALF but expands to empty.\nSeems I'm stuck again.\nAnother minor issue is that the assertEquals check doesn't work for half tensors, it fails with this message:\nTraceback (most recent call last):\n  File \"test/test_torch.py\", line 4202, in test_from_numpy\n    self.assertEqual(torch.from_numpy(array), torch.Tensor([1, 2, 3, 4]))\n  File \"/export/scratch1/kohr/git/pytorch/test/common.py\", line 215, in assertEqual\n    assertTensorsEqual(x, y)\n  File \"/export/scratch1/kohr/git/pytorch/test/common.py\", line 200, in assertTensorsEqual\n    nan_mask = a != a\n  File \"/export/scratch1/kohr/miniconda3/envs/torch-master/lib/python3.6/site-packages/torch/tensor.py\", line 351, in __ne__\n    return self.ne(other)\nAttributeError: 'torch.HalfTensor' object has no attribute 'ne'\n\nI guess that check can just be done with a loop instead.", "body": "Creeping towards a solution. The segfault was probably due to me assuming that `SIZE` in the `COPY_FROM_ARRAY_CPU` macro was in terms of number of elements, but really was in Bytes.\r\nFor me segfaults are gone now.\r\n\r\nStill the `numpy()` method is not present in the `HalfTensor` class. I think the problem is that I use `NPY_HALF` as best guess, but it actually doesn't exist in pybind11. Hence the macro `NPY_TYPE_ENUM` is defined for `TH_REAL_IS_HALF` but expands to empty. \r\nSeems I'm stuck again.\r\n\r\nAnother minor issue is that the `assertEquals` check doesn't work for half tensors, it fails with this message:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test/test_torch.py\", line 4202, in test_from_numpy\r\n    self.assertEqual(torch.from_numpy(array), torch.Tensor([1, 2, 3, 4]))\r\n  File \"/export/scratch1/kohr/git/pytorch/test/common.py\", line 215, in assertEqual\r\n    assertTensorsEqual(x, y)\r\n  File \"/export/scratch1/kohr/git/pytorch/test/common.py\", line 200, in assertTensorsEqual\r\n    nan_mask = a != a\r\n  File \"/export/scratch1/kohr/miniconda3/envs/torch-master/lib/python3.6/site-packages/torch/tensor.py\", line 351, in __ne__\r\n    return self.ne(other)\r\nAttributeError: 'torch.HalfTensor' object has no attribute 'ne'\r\n```\r\nI guess that check can just be done with a loop instead."}