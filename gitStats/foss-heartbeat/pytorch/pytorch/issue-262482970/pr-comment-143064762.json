{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143064762", "pull_request_review_id": 67523134, "id": 143064762, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzA2NDc2Mg==", "diff_hunk": "@@ -208,6 +209,7 @@ THTensor* THPTensor_(fromNumpy)(PyObject *numpy_array) {\n       switch (PyArray_TYPE(array)) {\n         case NPY_DOUBLE: COPY_FROM_ARRAY(double,  array, storage, storage_size); break;\n         case NPY_FLOAT:  COPY_FROM_ARRAY(float,   array, storage, storage_size); break;\n+        case NPY_HALF:   COPY_FROM_ARRAY(float,   array, storage, storage_size); break;", "path": "torch/csrc/generic/Tensor.cpp", "position": null, "original_position": 27, "commit_id": "4c2a17d2a6903d2b0f1b01bf9d7b961bed4fbb72", "original_commit_id": "344b1241c6e8eb91112dd3a3e62374ffa85b0387", "user": {"login": "kohr-h", "id": 5030250, "node_id": "MDQ6VXNlcjUwMzAyNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5030250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kohr-h", "html_url": "https://github.com/kohr-h", "followers_url": "https://api.github.com/users/kohr-h/followers", "following_url": "https://api.github.com/users/kohr-h/following{/other_user}", "gists_url": "https://api.github.com/users/kohr-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/kohr-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kohr-h/subscriptions", "organizations_url": "https://api.github.com/users/kohr-h/orgs", "repos_url": "https://api.github.com/users/kohr-h/repos", "events_url": "https://api.github.com/users/kohr-h/events{/privacy}", "received_events_url": "https://api.github.com/users/kohr-h/received_events", "type": "User", "site_admin": false}, "body": "You're right, it doesn't. The same applies unfortunately to CPU `memcpy` thing: When running\r\n```\r\na = np.ones(3, dtype='float32')\r\nx = torch.DoubleTensor(a)\r\n```\r\nthe result is garbage since memcpy doesn't care about data types. So that change was already a bummer. Is it a bug that that code is reached for incompatible dtypes?\r\nAnyhow, I don't know how half floats are handled on the CPU. Probably a special macro is needed for that case, too?", "created_at": "2017-10-05T21:42:50Z", "updated_at": "2018-11-23T15:35:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/2953#discussion_r143064762", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2953", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/143064762"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2953#discussion_r143064762"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2953"}}, "body_html": "<p>You're right, it doesn't. The same applies unfortunately to CPU <code>memcpy</code> thing: When running</p>\n<pre><code>a = np.ones(3, dtype='float32')\nx = torch.DoubleTensor(a)\n</code></pre>\n<p>the result is garbage since memcpy doesn't care about data types. So that change was already a bummer. Is it a bug that that code is reached for incompatible dtypes?<br>\nAnyhow, I don't know how half floats are handled on the CPU. Probably a special macro is needed for that case, too?</p>", "body_text": "You're right, it doesn't. The same applies unfortunately to CPU memcpy thing: When running\na = np.ones(3, dtype='float32')\nx = torch.DoubleTensor(a)\n\nthe result is garbage since memcpy doesn't care about data types. So that change was already a bummer. Is it a bug that that code is reached for incompatible dtypes?\nAnyhow, I don't know how half floats are handled on the CPU. Probably a special macro is needed for that case, too?", "in_reply_to_id": 143038324}