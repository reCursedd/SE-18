{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93937741", "pull_request_review_id": 14468691, "id": 93937741, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzOTM3NzQx", "diff_hunk": "@@ -1,70 +1,47 @@\n from torch.autograd import Function, NestedIOFunction, Variable\n-from torch._thnn import type2backend\n import torch.backends.cudnn as cudnn\n+from .. import functional as F\n try:\n     import torch.backends.cudnn.rnn\n except ImportError:\n     pass\n \n \n-# FIXME: write a proper function library\n-from .thnn import Tanh, Sigmoid, Threshold\n-from .linear import Linear\n-from .dropout import Dropout\n-\n-\n-def _wrap(fn, *args):\n-    def inner(*inner_args):\n-        return fn(*args)(*inner_args)\n-    return inner\n-tanh = _wrap(Tanh)\n-sigmoid = _wrap(Sigmoid)\n-ReLU = _wrap(Threshold, 0, 0, False)\n-\n-\n-# get around autograd's lack of None-handling\n-def linear(input, w, b):\n-    if b is not None:\n-        return Linear()(input, w, b)\n-    else:\n-        return Linear()(input, w)\n-\n-\n def RNNReLUCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-        hy = ReLU(linear(input, w_ih, b_ih) + linear(hidden, w_hh, b_hh))\n+        hy = F.relu(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n         return hy\n \n \n def RNNTanhCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-        hy = tanh(linear(input, w_ih, b_ih) + linear(hidden, w_hh, b_hh))\n+        hy = torch.tanh(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n         return hy\n \n \n def LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n         hx, cx = hidden\n-        gates = linear(input, w_ih, b_ih) + linear(hx, w_hh, b_hh)\n+        gates = F.linear(input, w_ih, b_ih) + F.linear(hx, w_hh, b_hh)\n         ingate, forgetgate, cellgate, outgate = gates.chunk(4, 1)\n \n-        ingate = sigmoid(ingate)\n-        forgetgate = sigmoid(forgetgate)\n-        cellgate = tanh(cellgate)\n-        outgate = sigmoid(outgate)\n+        ingate = torch.sigmoid(ingate)\n+        forgetgate = torch.sigmoid(forgetgate)\n+        cellgate = torch.tanh(cellgate)\n+        outgate = torch.sigmoid(outgate)\n \n         cy = (forgetgate * cx) + (ingate * cellgate)\n-        hy = outgate * tanh(cy)\n+        hy = outgate * torch.tanh(cy)\n \n         return hy, cy\n \n \n def GRUCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-        gi = linear(input, w_ih, b_ih)\n-        gh = linear(hidden, w_hh, b_hh)\n+        gi = F.linear(input, w_ih, b_ih)\n+        gh = F.linear(hidden, w_hh, b_hh)\n         i_r, i_i, i_n = gi.chunk(3, 1)\n         h_r, h_i, h_n = gh.chunk(3, 1)\n \n-        resetgate = sigmoid(i_r + h_r)\n-        inputgate = sigmoid(i_i + h_i)\n-        newgate = tanh(i_n + resetgate * h_n)\n+        resetgate = torch.sigmoid(i_r + h_r)", "path": "torch/nn/functions/rnn.py", "position": null, "original_position": 79, "commit_id": "0a50b8cbeb3edfcac15b65f12d922648ced195ba", "original_commit_id": "0afa4ccfe40bbdaadb6abde72724896a832160a8", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "can you use `F.sigmoid` in modules? I think that's the way we should recommend", "created_at": "2016-12-27T14:50:15Z", "updated_at": "2018-11-23T15:32:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/354#discussion_r93937741", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/354", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93937741"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/354#discussion_r93937741"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/354"}}, "body_html": "<p>can you use <code>F.sigmoid</code> in modules? I think that's the way we should recommend</p>", "body_text": "can you use F.sigmoid in modules? I think that's the way we should recommend"}