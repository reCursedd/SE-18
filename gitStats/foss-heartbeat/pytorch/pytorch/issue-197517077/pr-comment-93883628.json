{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93883628", "pull_request_review_id": 14416137, "id": 93883628, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzODgzNjI4", "diff_hunk": "@@ -0,0 +1,133 @@\n+import numbers\n+import torch\n+from . import functions\n+from .modules import utils\n+\n+# Convolution\n+\n+def conv1d(input, weight, bias=None, stride=1, padding=0, groups=1):\n+    state = functions.conv.Conv1d(stride, padding, groups)\n+    return bias and state(input, weight, bias) or state(input, weight)\n+\n+def conv2d(input, weight, bias=None, stride=1, padding=0, groups=1):\n+    state = functions.conv.Conv2d(stride, padding, groups)\n+    return bias and state(input, weight, bias) or state(input, weight)\n+\n+def conv3d(input, weight, bias=None, stride=1, padding=0, groups=1):\n+    state = functions.conv.Conv3d(stride, padding, groups)\n+    return bias and state(input, weight, bias) or state(input, weight)\n+\n+def conv2d_transpose(input, weight, bias=None, stride=1, padding=0, groups=1, out_pad=0):\n+    state = functions.conv.ConvTranspose2d(stride, padding, groups, out_pad)\n+    return bias and state(input, weight, bias) or state(input, weight)\n+\n+\n+# Pooling\n+\n+def avg_pool2d(input, kernel_size, stride=1, padding=0,\n+        ceil_mode=False, count_include_pad=True):\n+    return functions.thnn.AvgPool2d(kernel_size, stride, padding, ceil_mode)(input)\n+\n+def avg_pool3d(input, kernel_size, stride=1):\n+    return functions.thnn.AvgPool3d(kernel_size, stride)(input)\n+\n+\n+# share the same interface\n+def max_pool1d(input, kernel_size, stride=1, padding=0, dilation=1,\n+        ceil_mode=False, return_indices=False):\n+    return functions.thnn.MaxPool1d(kernel_size, stride, padding, dilation,\n+            return_indices, ceil_mode)(input)\n+\n+def max_pool2d(input, kernel_size, stride=1, padding=0, dilation=1,\n+        ceil_mode=False, return_indices=False):\n+    return functions.thnn.MaxPool2d(kernel_size, stride, padding, dilation,\n+            return_indices, ceil_mode)(input)\n+\n+def max_pool3d(input, kernel_size, stride=1, padding=0, dilation=1,\n+        ceil_mode=False, return_indices=False):\n+    return functions.thnn.MaxPool3d(kernel_size, stride, padding, dilation,\n+            return_indices, ceil_mode)(input)\n+\n+def lp_pool2d(input, norm_type, kernel_size, stride=None, ceil_mode=False):\n+    kw, kh = utils._pair(kernel_size)\n+    out = avg_pool2d(input.pow(norm_type), kernel_size, stride, 0, ceil_mode)\n+    return out.mul(kw * kh).pow(1./norm_type)\n+\n+\n+# Activation functions\n+\n+def dropout(input, p=0.5, training=False, inplace=False):\n+    return functions.dropout.Dropout(p, training, inplace)(input)\n+\n+def threshold(input, threshold, value, inplace=False):\n+    return functions.thnn.auto.Threshold(threshold, value, inplace)(input)\n+\n+def relu(input, inplace=False):\n+    return functions.thnn.auto.Threshold(0, 0, inplace)(input)\n+\n+def hardtanh(input, min_val=-1., max_val=1., inplace=False):\n+    return functions.thnn.auto.Hardtanh(min_val, max_val, inplace)(input)\n+\n+def relu6(input, inplace=False):\n+    return functions.thnn.auto.Hardtanh(0, 6, inplace)(input)\n+\n+def elu(input, alpha=1., inplace=False):\n+    return functions.thnn.auto.ELU(alpha, inplace)(input)\n+\n+def leaky_relu(input, negative_slope=1e-2, inplace=False):\n+    return functions.thnn.auto.LeakyReLU(negative_slope, inplace)(input)\n+\n+def prelu(input, weight):\n+    return functions.thnn.PReLU()(input, weight)\n+\n+def rrelu(input, lower=1./8, upper=1./3, training=False, inplace=False):\n+    return functions.thnn.RReLU(lower, upper, training, inplace)(input)\n+\n+def logsigmoid(input):\n+    return functions.thnn.LogSigmoid()(input)\n+\n+def hardshrink(input, lambd=0.5):\n+    return functions.thnn.auto.Hardshrink(lambd)(input)\n+\n+def tanhshrink(input):\n+    return input - torch.tanh(input)\n+\n+def softsign(input):\n+    return functions.activation.Softsign()(input)\n+\n+def softplus(input, beta=1, threshold=20):\n+    return functions.thnn.auto.Softplus(beta, threshold)(input)\n+\n+def softmin(input):\n+    return functions.thnn.Softmin()(input)\n+\n+def softmax(input):\n+    return functions.thnn.auto.Softmax()(input)\n+\n+def softshrink(input, lambd=0.5):\n+    return functions.thnn.auto.Softshrink(lambd)(input)\n+\n+def log_softmax(input):\n+    return functions.thnn.LogSoftmax()(input)\n+\n+", "path": "torch/nn/functional.py", "position": 333, "original_position": 113, "commit_id": "0a50b8cbeb3edfcac15b65f12d922648ced195ba", "original_commit_id": "bad1fbf7ab4c43504e39ff16d0c0ac43f558d6b5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think we should expose `tanh` and `sigmoid` in here too.", "created_at": "2016-12-26T20:27:45Z", "updated_at": "2018-11-23T15:32:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/354#discussion_r93883628", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/354", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93883628"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/354#discussion_r93883628"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/354"}}, "body_html": "<p>I think we should expose <code>tanh</code> and <code>sigmoid</code> in here too.</p>", "body_text": "I think we should expose tanh and sigmoid in here too."}