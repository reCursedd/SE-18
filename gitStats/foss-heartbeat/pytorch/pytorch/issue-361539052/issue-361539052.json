{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11847", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11847/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11847/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11847/events", "html_url": "https://github.com/pytorch/pytorch/issues/11847", "id": 361539052, "node_id": "MDU6SXNzdWUzNjE1MzkwNTI=", "number": 11847, "title": "bugs in EmbeddingBag cuda codes", "user": {"login": "marmorb", "id": 29618568, "node_id": "MDQ6VXNlcjI5NjE4NTY4", "avatar_url": "https://avatars0.githubusercontent.com/u/29618568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmorb", "html_url": "https://github.com/marmorb", "followers_url": "https://api.github.com/users/marmorb/followers", "following_url": "https://api.github.com/users/marmorb/following{/other_user}", "gists_url": "https://api.github.com/users/marmorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmorb/subscriptions", "organizations_url": "https://api.github.com/users/marmorb/orgs", "repos_url": "https://api.github.com/users/marmorb/repos", "events_url": "https://api.github.com/users/marmorb/events{/privacy}", "received_events_url": "https://api.github.com/users/marmorb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-09-19T01:08:30Z", "updated_at": "2018-11-02T17:22:50Z", "closed_at": "2018-11-02T17:22:50Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I can run this code normally through CPU. but got the Error <code>RuntimeError: cuda runtime error (9) : invalid configuration argument at /data/users/mabing/pytorch/aten/src/ATen/native/cuda/EmbeddingBag.cu:257 </code>when run <code>loss.backward().</code> through cuda().</p>\n<h2>Code example</h2>\n<pre><code>import torch.optim as optim\nimport torch\nimport torch.nn as nn\nimport numpy as np\nfrom scipy.special import expit\nimport os\nimport time\n\nclass SkipGramModel(nn.Module):\n    def __init__(self, component_size, word_size, dim):\n        super(SkipGramModel, self).__init__()\n        self.emb_size = dim\n        self.component_size = component_size\n        self.word_size = word_size\n        self.atten_layers = nn.Embedding(word_size,1)\n        self.u_embeddings = nn.EmbeddingBag(component_size,dim)\n        self.word_embeddings = nn.Embedding(word_size,dim,sparse=True)\n        self.v_embeddings = nn.Embedding(word_size,dim,sparse=True)\n        self.m = nn.Sigmoid()\n        self.init_emb()\n\n    def init_emb(self):\n        initrange = 0.5 / self.emb_size\n        self.word_embeddings.weight.data.uniform_(-initrange,initrange)\n        self.u_embeddings.weight.data.uniform_(-initrange, initrange)\n        self.v_embeddings.weight.data.uniform_(-0, 0)\n        atten = torch.zeros([self.word_size, 5])\n        atten[:, 0] += torch.log(torch.FloatTensor([4]))\n        self.atten_layers.weight.data = atten\n\n\n    def forward(self, word_in,component_in, word_out, offset):\n        char_in = torch.cuda.LongTensor(component_in[0])\n        redical_in = torch.cuda.LongTensor(component_in[1])\n        com1_in = torch.cuda.LongTensor(component_in[2])\n        com2_in = torch.cuda.LongTensor(component_in[3])\n        offset1 = torch.cuda.LongTensor(offset[0])\n        offset2 = torch.cuda.LongTensor(offset[1])\n        offset3 = torch.cuda.LongTensor(offset[2])\n        offset4 = torch.cuda.LongTensor(offset[3])\n        attention = torch.softmax(self.atten_layers(word_in),dim=-1).unsqueeze(1)\n        emb_uword = self.word_embeddings(word_in)\n        emb_char = self.u_embeddings(char_in,offset1)\n        emb_redical = self.u_embeddings(redical_in,offset2)\n        emb_com1 = self.u_embeddings(com1_in,offset3)\n        emb_com2 = self.u_embeddings(com2_in,offset4)\n        emb_all = torch.stack((emb_uword,emb_char,emb_redical,emb_com1,emb_com2),1)\n        emb_vword = self.v_embeddings(word_out)\n        emb_mixin = torch.bmm(attention,emb_all).squeeze(1)\n        score = torch.mul(emb_mixin, emb_vword)\n        score = torch.sum(score, dim=-1)\n        score = self.m(score)\n        return score\n\nif __name__ == '__main__':\n\n    model = SkipGramModel(364, 180, 100).cuda()\n    optimizer = optim.SGD(model.parameters(), lr=0.025)\n    Lossfunc = nn.BCELoss(reduction='sum')\n    for _ in range(100):\n        word_in = torch.cuda.LongTensor([2]*128)\n        word_out = torch.cuda.LongTensor([2]*128)\n        label = torch.cuda.FloatTensor([1]*128)\n        component_in = [[3,5],[2,4,5],[2,3,4],[]]\n        offset = [[0]*127+[1],[0]*127+[1],[0]*128,[0]*128]\n        outs = model.forward(word_in, component_in, word_out, offset)\n        loss = Lossfunc(outs, label)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n</code></pre>\n<h2>System Info</h2>\n<p>`Collecting environment information...<br>\nPyTorch version: 1.0.0a0+7f0dd24<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Ubuntu 16.04.5 LTS<br>\nGCC version: (Ubuntu 4.9.3-13ubuntu2) 4.9.3<br>\nCMake version: version 3.12.2</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: Could not collect<br>\nGPU models and configuration:<br>\nGPU 0: Tesla M40 24GB<br>\nGPU 1: Tesla M40 24GB<br>\nGPU 2: Tesla M40 24GB<br>\nGPU 3: Tesla M40 24GB</p>\n<p>Nvidia driver version: 384.130<br>\ncuDNN version: Probably one of the following:<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.21<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5<br>\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5<br>\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip] Could not collect<br>\n[conda] cuda80                    1.0                           0    soumith<br>\n[conda] cuda91                    1.0                  h4c16780_0    pytorch<br>\n[conda] pytorch                   0.4.1           py36_cuda8.0.61_cudnn7.1.2_1  [cuda80]  soumith<br>\n[conda] torch                     1.0.0a0+7f0dd24           <br>\n[conda] torch                     0.4.1                     <br>\n[conda] torchvision               0.1.9            py36h7584368_1    soumith<br>\n[conda] torchvision               0.2.1                     `</p>\n<ul>\n<li>PyTorch or Caffe2:  PyTorch</li>\n<li>How you installed PyTorch (conda, pip, source): source</li>\n<li>Build command you used (if compiling from source): <code>python setup.py install</code></li>\n<li>OS: Ubantu 16.04.5 LTS (Xenial Xerus)</li>\n<li>PyTorch version:0.4.1</li>\n<li>Python version:3.6.6</li>\n<li>CUDA/cuDNN version: 8.0.61</li>\n<li>GPU models and configuration:</li>\n<li>GCC version (if compiling from source): 4.9.3</li>\n<li>CMake version:3.12.2</li>\n<li>Versions of any other relevant libraries:</li>\n</ul>", "body_text": "Issue description\nI can run this code normally through CPU. but got the Error RuntimeError: cuda runtime error (9) : invalid configuration argument at /data/users/mabing/pytorch/aten/src/ATen/native/cuda/EmbeddingBag.cu:257 when run loss.backward(). through cuda().\nCode example\nimport torch.optim as optim\nimport torch\nimport torch.nn as nn\nimport numpy as np\nfrom scipy.special import expit\nimport os\nimport time\n\nclass SkipGramModel(nn.Module):\n    def __init__(self, component_size, word_size, dim):\n        super(SkipGramModel, self).__init__()\n        self.emb_size = dim\n        self.component_size = component_size\n        self.word_size = word_size\n        self.atten_layers = nn.Embedding(word_size,1)\n        self.u_embeddings = nn.EmbeddingBag(component_size,dim)\n        self.word_embeddings = nn.Embedding(word_size,dim,sparse=True)\n        self.v_embeddings = nn.Embedding(word_size,dim,sparse=True)\n        self.m = nn.Sigmoid()\n        self.init_emb()\n\n    def init_emb(self):\n        initrange = 0.5 / self.emb_size\n        self.word_embeddings.weight.data.uniform_(-initrange,initrange)\n        self.u_embeddings.weight.data.uniform_(-initrange, initrange)\n        self.v_embeddings.weight.data.uniform_(-0, 0)\n        atten = torch.zeros([self.word_size, 5])\n        atten[:, 0] += torch.log(torch.FloatTensor([4]))\n        self.atten_layers.weight.data = atten\n\n\n    def forward(self, word_in,component_in, word_out, offset):\n        char_in = torch.cuda.LongTensor(component_in[0])\n        redical_in = torch.cuda.LongTensor(component_in[1])\n        com1_in = torch.cuda.LongTensor(component_in[2])\n        com2_in = torch.cuda.LongTensor(component_in[3])\n        offset1 = torch.cuda.LongTensor(offset[0])\n        offset2 = torch.cuda.LongTensor(offset[1])\n        offset3 = torch.cuda.LongTensor(offset[2])\n        offset4 = torch.cuda.LongTensor(offset[3])\n        attention = torch.softmax(self.atten_layers(word_in),dim=-1).unsqueeze(1)\n        emb_uword = self.word_embeddings(word_in)\n        emb_char = self.u_embeddings(char_in,offset1)\n        emb_redical = self.u_embeddings(redical_in,offset2)\n        emb_com1 = self.u_embeddings(com1_in,offset3)\n        emb_com2 = self.u_embeddings(com2_in,offset4)\n        emb_all = torch.stack((emb_uword,emb_char,emb_redical,emb_com1,emb_com2),1)\n        emb_vword = self.v_embeddings(word_out)\n        emb_mixin = torch.bmm(attention,emb_all).squeeze(1)\n        score = torch.mul(emb_mixin, emb_vword)\n        score = torch.sum(score, dim=-1)\n        score = self.m(score)\n        return score\n\nif __name__ == '__main__':\n\n    model = SkipGramModel(364, 180, 100).cuda()\n    optimizer = optim.SGD(model.parameters(), lr=0.025)\n    Lossfunc = nn.BCELoss(reduction='sum')\n    for _ in range(100):\n        word_in = torch.cuda.LongTensor([2]*128)\n        word_out = torch.cuda.LongTensor([2]*128)\n        label = torch.cuda.FloatTensor([1]*128)\n        component_in = [[3,5],[2,4,5],[2,3,4],[]]\n        offset = [[0]*127+[1],[0]*127+[1],[0]*128,[0]*128]\n        outs = model.forward(word_in, component_in, word_out, offset)\n        loss = Lossfunc(outs, label)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\nSystem Info\n`Collecting environment information...\nPyTorch version: 1.0.0a0+7f0dd24\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Ubuntu 16.04.5 LTS\nGCC version: (Ubuntu 4.9.3-13ubuntu2) 4.9.3\nCMake version: version 3.12.2\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration:\nGPU 0: Tesla M40 24GB\nGPU 1: Tesla M40 24GB\nGPU 2: Tesla M40 24GB\nGPU 3: Tesla M40 24GB\nNvidia driver version: 384.130\ncuDNN version: Probably one of the following:\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.21\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] cuda80                    1.0                           0    soumith\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\n[conda] pytorch                   0.4.1           py36_cuda8.0.61_cudnn7.1.2_1  [cuda80]  soumith\n[conda] torch                     1.0.0a0+7f0dd24           \n[conda] torch                     0.4.1                     \n[conda] torchvision               0.1.9            py36h7584368_1    soumith\n[conda] torchvision               0.2.1                     `\n\nPyTorch or Caffe2:  PyTorch\nHow you installed PyTorch (conda, pip, source): source\nBuild command you used (if compiling from source): python setup.py install\nOS: Ubantu 16.04.5 LTS (Xenial Xerus)\nPyTorch version:0.4.1\nPython version:3.6.6\nCUDA/cuDNN version: 8.0.61\nGPU models and configuration:\nGCC version (if compiling from source): 4.9.3\nCMake version:3.12.2\nVersions of any other relevant libraries:", "body": "## Issue description\r\nI can run this code normally through CPU. but got the Error `RuntimeError: cuda runtime error (9) : invalid configuration argument at /data/users/mabing/pytorch/aten/src/ATen/native/cuda/EmbeddingBag.cu:257 `when run `loss.backward().` through cuda().\r\n## Code example\r\n\r\n```\r\nimport torch.optim as optim\r\nimport torch\r\nimport torch.nn as nn\r\nimport numpy as np\r\nfrom scipy.special import expit\r\nimport os\r\nimport time\r\n\r\nclass SkipGramModel(nn.Module):\r\n    def __init__(self, component_size, word_size, dim):\r\n        super(SkipGramModel, self).__init__()\r\n        self.emb_size = dim\r\n        self.component_size = component_size\r\n        self.word_size = word_size\r\n        self.atten_layers = nn.Embedding(word_size,1)\r\n        self.u_embeddings = nn.EmbeddingBag(component_size,dim)\r\n        self.word_embeddings = nn.Embedding(word_size,dim,sparse=True)\r\n        self.v_embeddings = nn.Embedding(word_size,dim,sparse=True)\r\n        self.m = nn.Sigmoid()\r\n        self.init_emb()\r\n\r\n    def init_emb(self):\r\n        initrange = 0.5 / self.emb_size\r\n        self.word_embeddings.weight.data.uniform_(-initrange,initrange)\r\n        self.u_embeddings.weight.data.uniform_(-initrange, initrange)\r\n        self.v_embeddings.weight.data.uniform_(-0, 0)\r\n        atten = torch.zeros([self.word_size, 5])\r\n        atten[:, 0] += torch.log(torch.FloatTensor([4]))\r\n        self.atten_layers.weight.data = atten\r\n\r\n\r\n    def forward(self, word_in,component_in, word_out, offset):\r\n        char_in = torch.cuda.LongTensor(component_in[0])\r\n        redical_in = torch.cuda.LongTensor(component_in[1])\r\n        com1_in = torch.cuda.LongTensor(component_in[2])\r\n        com2_in = torch.cuda.LongTensor(component_in[3])\r\n        offset1 = torch.cuda.LongTensor(offset[0])\r\n        offset2 = torch.cuda.LongTensor(offset[1])\r\n        offset3 = torch.cuda.LongTensor(offset[2])\r\n        offset4 = torch.cuda.LongTensor(offset[3])\r\n        attention = torch.softmax(self.atten_layers(word_in),dim=-1).unsqueeze(1)\r\n        emb_uword = self.word_embeddings(word_in)\r\n        emb_char = self.u_embeddings(char_in,offset1)\r\n        emb_redical = self.u_embeddings(redical_in,offset2)\r\n        emb_com1 = self.u_embeddings(com1_in,offset3)\r\n        emb_com2 = self.u_embeddings(com2_in,offset4)\r\n        emb_all = torch.stack((emb_uword,emb_char,emb_redical,emb_com1,emb_com2),1)\r\n        emb_vword = self.v_embeddings(word_out)\r\n        emb_mixin = torch.bmm(attention,emb_all).squeeze(1)\r\n        score = torch.mul(emb_mixin, emb_vword)\r\n        score = torch.sum(score, dim=-1)\r\n        score = self.m(score)\r\n        return score\r\n\r\nif __name__ == '__main__':\r\n\r\n    model = SkipGramModel(364, 180, 100).cuda()\r\n    optimizer = optim.SGD(model.parameters(), lr=0.025)\r\n    Lossfunc = nn.BCELoss(reduction='sum')\r\n    for _ in range(100):\r\n        word_in = torch.cuda.LongTensor([2]*128)\r\n        word_out = torch.cuda.LongTensor([2]*128)\r\n        label = torch.cuda.FloatTensor([1]*128)\r\n        component_in = [[3,5],[2,4,5],[2,3,4],[]]\r\n        offset = [[0]*127+[1],[0]*127+[1],[0]*128,[0]*128]\r\n        outs = model.forward(word_in, component_in, word_out, offset)\r\n        loss = Lossfunc(outs, label)\r\n        optimizer.zero_grad()\r\n        loss.backward()\r\n        optimizer.step()\r\n```\r\n\r\n## System Info\r\n`Collecting environment information...\r\nPyTorch version: 1.0.0a0+7f0dd24\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Ubuntu 16.04.5 LTS\r\nGCC version: (Ubuntu 4.9.3-13ubuntu2) 4.9.3\r\nCMake version: version 3.12.2\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: \r\nGPU 0: Tesla M40 24GB\r\nGPU 1: Tesla M40 24GB\r\nGPU 2: Tesla M40 24GB\r\nGPU 3: Tesla M40 24GB\r\n\r\nNvidia driver version: 384.130\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.6.0.21\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.4\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.0.5\r\n/usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] cuda80                    1.0                           0    soumith\r\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\r\n[conda] pytorch                   0.4.1           py36_cuda8.0.61_cudnn7.1.2_1  [cuda80]  soumith\r\n[conda] torch                     1.0.0a0+7f0dd24           <pip>\r\n[conda] torch                     0.4.1                     <pip>\r\n[conda] torchvision               0.1.9            py36h7584368_1    soumith\r\n[conda] torchvision               0.2.1                     <pip>`\r\n\r\n\r\n- PyTorch or Caffe2:  PyTorch\r\n- How you installed PyTorch (conda, pip, source): source\r\n- Build command you used (if compiling from source): `python setup.py install` \r\n- OS: Ubantu 16.04.5 LTS (Xenial Xerus)\r\n- PyTorch version:0.4.1\r\n- Python version:3.6.6\r\n- CUDA/cuDNN version: 8.0.61\r\n- GPU models and configuration:\r\n- GCC version (if compiling from source): 4.9.3\r\n- CMake version:3.12.2\r\n- Versions of any other relevant libraries:\r\n"}