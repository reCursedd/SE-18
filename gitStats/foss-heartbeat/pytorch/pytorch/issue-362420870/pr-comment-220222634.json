{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220222634", "pull_request_review_id": 158568107, "id": 220222634, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDIyMjYzNA==", "diff_hunk": "@@ -0,0 +1,66 @@\n+#pragma once\n+\n+#include <ATen/optional.h>\n+\n+#include <cstddef>\n+#include <vector>\n+\n+namespace torch {\n+namespace data {\n+namespace detail {\n+namespace sequencers {\n+template <typename R>\n+struct Sequencer {\n+  using ResultType = R;\n+  using ResultProducer = std::function<at::optional<ResultType>()>;\n+  virtual ~Sequencer() = default;\n+  virtual at::optional<ResultType> next(ResultProducer next_result) = 0;\n+};\n+\n+template <typename R>\n+struct NoSequencer : public Sequencer<R> {\n+  using typename Sequencer<R>::ResultType;\n+  using typename Sequencer<R>::ResultProducer;\n+  at::optional<ResultType> next(ResultProducer next_result) override {\n+    return next_result();\n+  }\n+};\n+\n+template <typename R>\n+struct OrderedSequencer : public Sequencer<R> {\n+  using typename Sequencer<R>::ResultType;\n+  using typename Sequencer<R>::ResultProducer;\n+\n+  explicit OrderedSequencer(size_t max_jobs) : buffer_(max_jobs) {}\n+\n+  at::optional<ResultType> next(ResultProducer next_result) override {\n+    while (true) {\n+      if (auto& maybe_result = buffer(next_sequence_number_)) {\n+        auto result = std::move(*maybe_result);\n+        buffer(next_sequence_number_++) = at::nullopt;\n+        return result;\n+      }\n+      if (auto result = next_result()) {\n+        if (result->sequence_number == next_sequence_number_) {\n+          ++next_sequence_number_;\n+          return result;\n+        }\n+        // Stash the result for later.\n+        buffer(result->sequence_number) = std::move(result);", "path": "torch/csrc/api/include/torch/data/detail/sequencers.h", "position": null, "original_position": 49, "commit_id": "2fabdad63c0bc48b26af6bf8d2e74513b09c97da", "original_commit_id": "d87492e397ef6bf55e2fc8782dfaefdd5aba9920", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you also `AT_ASSERT` that this value is not defined?", "created_at": "2018-09-25T14:44:30Z", "updated_at": "2018-11-23T15:51:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220222634", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220222634"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220222634"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11918"}}, "body_html": "<p>Can you also <code>AT_ASSERT</code> that this value is not defined?</p>", "body_text": "Can you also AT_ASSERT that this value is not defined?", "in_reply_to_id": 220220000}