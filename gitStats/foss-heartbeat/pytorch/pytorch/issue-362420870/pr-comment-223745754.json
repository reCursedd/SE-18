{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223745754", "pull_request_review_id": 162938843, "id": 223745754, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzc0NTc1NA==", "diff_hunk": "@@ -0,0 +1,81 @@\n+#pragma once\n+\n+#include <torch/tensor.h>\n+\n+#include <ATen/core/Error.h>\n+#include <ATen/core/optional.h>\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <mutex>\n+#include <queue>\n+\n+namespace torch {\n+namespace data {\n+namespace detail {\n+\n+/// A basic locked, blocking MPMC queue.\n+///\n+/// Every `push` and `pop` is guarded by a mutex. A condition variable is used\n+/// to communicate insertion of new elements, such that waiting threads will be\n+/// woken up if they are currently waiting inside a call to `pop()`.\n+///\n+/// Note that this data structure is written specifically for use with the\n+/// `DataLoader`. Its behavior is tailored to this use case and may not be\n+/// applicable to more general uses.\n+template <typename T>\n+class Queue {\n+ public:\n+  /// Pushes a new value to the back of the `Queue` and notifies one thread on\n+  /// the waiting side about this event.\n+  void push(T value) {\n+    {\n+      std::lock_guard<std::mutex> lock(mutex_);\n+      queue_.push(std::move(value));\n+    }\n+    cv_.notify_one();\n+  }\n+\n+  /// Blocks until at least one element is ready to be popped from the front of\n+  /// the queue. An optional `timeout` in seconds can be used to limit the time\n+  /// spent waiting for an element. If the wait times out, an exception is\n+  /// raised.\n+  T pop(optional<std::chrono::milliseconds> timeout = nullopt) {\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    if (timeout) {\n+      if (!cv_.wait_for(\n+              lock, *timeout, [this] { return !this->queue_.empty(); })) {\n+        AT_ERROR(\"Timeout in queue\");", "path": "torch/csrc/api/include/torch/data/detail/queue.h", "position": null, "original_position": 49, "commit_id": "2fabdad63c0bc48b26af6bf8d2e74513b09c97da", "original_commit_id": "0cf5d795bd8b96ac542039a8f612df1ce84602f2", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "That's not a super friendly error message", "created_at": "2018-10-09T15:14:59Z", "updated_at": "2018-11-23T15:52:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/11918#discussion_r223745754", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223745754"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11918#discussion_r223745754"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11918"}}, "body_html": "<p>That's not a super friendly error message</p>", "body_text": "That's not a super friendly error message"}