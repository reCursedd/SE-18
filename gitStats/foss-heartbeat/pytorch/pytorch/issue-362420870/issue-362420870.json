{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11918", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11918/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11918/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11918/events", "html_url": "https://github.com/pytorch/pytorch/pull/11918", "id": 362420870, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3MTQ2MTYw", "number": 11918, "title": "[C++ Frontend] Implement DataLoader", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-21T01:05:46Z", "updated_at": "2018-11-23T15:53:08Z", "closed_at": "2018-10-22T17:23:56Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "html_url": "https://github.com/pytorch/pytorch/pull/11918", "diff_url": "https://github.com/pytorch/pytorch/pull/11918.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11918.patch"}, "body_html": "<p>This PR implements a DataLoader API for the C++ frontend.</p>\n<p>The components present in this API largely match the Python API. It consists of:</p>\n<ul>\n<li><code>Dataset</code>s: Conceptually a function from a set of indices to a batch of examples;</li>\n<li><code>Transform</code>s: A functional transformation of a dataset. A <code>Map&lt;D, T&gt;</code> for Dataset <code>D</code> and transform <code>T</code> is itself a dataset;</li>\n<li><code>Sampler</code>s: Specify a strategy for generating indices for a new batch;</li>\n<li>A <code>DataLoader</code>, with the ability to automatically parallelize fetching of samples across multiple worker threads;</li>\n</ul>\n<p>Note that collation functions fall naturally out of the <code>Map&lt;Dataset, Transform&gt;</code> abstraction.</p>\n<p>Things that are missing right now that maybe should be added:</p>\n<ul>\n<li>Memory pinning for CUDA tensors</li>\n</ul>\n<p>The API was designed to be generalizable to almost any kind of dataset, transform or sampling strategy, while providing a convenient API out of the box. To achieve this, it is quite heavily templatized on various possible input types.</p>\n<p>There are many parts to this PR! Right now, I would like feedback on:</p>\n<ul>\n<li>Your impression of the general usability of the API;</li>\n<li>Your impression of which parts seem too complex or overthought;</li>\n<li>The implementation of the parallelization aspects of the DataLoader. I've followed the Python implementation in some matters, but also differ in others. I think my implementation is a little cleaner and decouples components slightly better than the Python dataloader.</li>\n</ul>\n<p>I haven't added too many comments yet, as this is fresh out of the oven. Let me know if anything is unclear from the code itself.</p>\n<p>There also aren't any tests yet. I will write a comprehensive test suite once we agree on the API and implementation.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8120856\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/teng-li\">@teng-li</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9845\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pietern\">@pietern</a></p>", "body_text": "This PR implements a DataLoader API for the C++ frontend.\nThe components present in this API largely match the Python API. It consists of:\n\nDatasets: Conceptually a function from a set of indices to a batch of examples;\nTransforms: A functional transformation of a dataset. A Map<D, T> for Dataset D and transform T is itself a dataset;\nSamplers: Specify a strategy for generating indices for a new batch;\nA DataLoader, with the ability to automatically parallelize fetching of samples across multiple worker threads;\n\nNote that collation functions fall naturally out of the Map<Dataset, Transform> abstraction.\nThings that are missing right now that maybe should be added:\n\nMemory pinning for CUDA tensors\n\nThe API was designed to be generalizable to almost any kind of dataset, transform or sampling strategy, while providing a convenient API out of the box. To achieve this, it is quite heavily templatized on various possible input types.\nThere are many parts to this PR! Right now, I would like feedback on:\n\nYour impression of the general usability of the API;\nYour impression of which parts seem too complex or overthought;\nThe implementation of the parallelization aspects of the DataLoader. I've followed the Python implementation in some matters, but also differ in others. I think my implementation is a little cleaner and decouples components slightly better than the Python dataloader.\n\nI haven't added too many comments yet, as this is fresh out of the oven. Let me know if anything is unclear from the code itself.\nThere also aren't any tests yet. I will write a comprehensive test suite once we agree on the API and implementation.\n@apaszke @ezyang @teng-li @pietern", "body": "This PR implements a DataLoader API for the C++ frontend.\r\n\r\nThe components present in this API largely match the Python API. It consists of:\r\n- `Dataset`s: Conceptually a function from a set of indices to a batch of examples;\r\n- `Transform`s: A functional transformation of a dataset. A `Map<D, T>` for Dataset `D` and transform `T` is itself a dataset;\r\n- `Sampler`s: Specify a strategy for generating indices for a new batch;\r\n- A `DataLoader`, with the ability to automatically parallelize fetching of samples across multiple worker threads;\r\n\r\nNote that collation functions fall naturally out of the `Map<Dataset, Transform>` abstraction.\r\n\r\nThings that are missing right now that maybe should be added:\r\n- Memory pinning for CUDA tensors\r\n\r\nThe API was designed to be generalizable to almost any kind of dataset, transform or sampling strategy, while providing a convenient API out of the box. To achieve this, it is quite heavily templatized on various possible input types. \r\n\r\nThere are many parts to this PR! Right now, I would like feedback on:\r\n- Your impression of the general usability of the API;\r\n- Your impression of which parts seem too complex or overthought;\r\n- The implementation of the parallelization aspects of the DataLoader. I've followed the Python implementation in some matters, but also differ in others. I think my implementation is a little cleaner and decouples components slightly better than the Python dataloader.\r\n\r\nI haven't added too many comments yet, as this is fresh out of the oven. Let me know if anything is unclear from the code itself.\r\n\r\nThere also aren't any tests yet. I will write a comprehensive test suite once we agree on the API and implementation.\r\n\r\n@apaszke @ezyang @teng-li @pietern"}