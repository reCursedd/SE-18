{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220218523", "pull_request_review_id": 158568107, "id": 220218523, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDIxODUyMw==", "diff_hunk": "@@ -0,0 +1,59 @@\n+#pragma once\n+\n+#include <ATen/Error.h>\n+#include <ATen/optional.h>\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <mutex>\n+#include <queue>\n+\n+namespace torch {\n+namespace data {\n+namespace detail {\n+template <typename T>\n+class Queue {\n+ public:\n+  void push(T&& value) {\n+    std::lock_guard<std::mutex> lock(mutex_);\n+    queue_.push(std::move(value));\n+    cv_.notify_one();\n+  }\n+\n+  T pop(at::optional<std::chrono::seconds> timeout = at::nullopt) {\n+    T value;\n+    {\n+      std::unique_lock<std::mutex> lock(mutex_);\n+      if (timeout) {\n+        if (!cv_.wait_for(\n+                lock, *timeout, [this] { return !this->queue_.empty(); })) {\n+          AT_ERROR(\"Timeout while waiting for job result\");\n+        }\n+      } else {\n+        cv_.wait(lock, [this] { return !this->queue_.empty(); });\n+      }\n+      assert(!queue_.empty());", "path": "torch/csrc/api/include/torch/data/detail/queue.h", "position": null, "original_position": 36, "commit_id": "2fabdad63c0bc48b26af6bf8d2e74513b09c97da", "original_commit_id": "d87492e397ef6bf55e2fc8782dfaefdd5aba9920", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Shouldn't we use `AT_ASSERT`? Also, this really is guaranteed by the code around, and it's a standard pattern.", "created_at": "2018-09-25T14:34:32Z", "updated_at": "2018-11-23T15:51:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220218523", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220218523"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220218523"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11918"}}, "body_html": "<p>Shouldn't we use <code>AT_ASSERT</code>? Also, this really is guaranteed by the code around, and it's a standard pattern.</p>", "body_text": "Shouldn't we use AT_ASSERT? Also, this really is guaranteed by the code around, and it's a standard pattern."}