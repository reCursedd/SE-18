{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220271398", "pull_request_review_id": 158641046, "id": 220271398, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDI3MTM5OA==", "diff_hunk": "@@ -0,0 +1,67 @@\n+#pragma once\n+\n+#include <torch/data/example.h>\n+#include <torch/detail/utils.h>\n+#include <torch/tensor.h>\n+\n+#include <ATen/core/ArrayRef.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace data {\n+namespace datasets {\n+template <typename S, typename T>\n+struct Map;\n+template <typename D, typename T>\n+Map<D, T> map(D&&, T&&);\n+} // namespace datasets\n+} // namespace data\n+} // namespace torch\n+\n+namespace torch {\n+namespace data {\n+namespace datasets {\n+\n+template <typename S, typename B = std::vector<Example<>>>\n+class BatchDataset {\n+ public:\n+  using Self = S;\n+  using BatchType = B;\n+\n+  virtual ~BatchDataset() = default;\n+\n+  virtual BatchType batch(ArrayRef<size_t> indices) = 0;\n+  virtual size_t size() const = 0;\n+\n+  template <typename TransformType>\n+  Map<Self, TransformType> map(TransformType transform) && {\n+    return datasets::map(\n+        std::move(static_cast<Self&>(*this)), std::move(transform));\n+  }\n+};\n+\n+template <typename S, typename E = Example<>, typename B = std::vector<E>>\n+class Dataset : public BatchDataset<S, B> {\n+ public:\n+  using typename BatchDataset<S, B>::BatchType;\n+  using ExampleType = E;\n+\n+  virtual ExampleType index(size_t index) = 0;", "path": "torch/csrc/api/include/torch/data/datasets/base.h", "position": null, "original_position": 54, "commit_id": "2fabdad63c0bc48b26af6bf8d2e74513b09c97da", "original_commit_id": "d87492e397ef6bf55e2fc8782dfaefdd5aba9920", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "The reason I don't use operator overloads, whether its `operator[]` for datasets or `operator()` for transforms, is that we need two overloads:\r\n1. One for batches,\r\n2. One for examples (which will often call the batch version).\r\nHaving two overloads makes inheritance less friendly, because of name hiding rules in C++. Basically, if you want to override one in your own subclass, you'd be hiding the other. So every subclass would need a line like `using BatchDataset<...>::operator()`.\r\n\r\nInstead, I just give the two overloads different names. That solves the problem. It's a little less sweet, but much easier on users.", "created_at": "2018-09-25T16:50:35Z", "updated_at": "2018-11-23T15:51:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220271398", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220271398"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220271398"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11918"}}, "body_html": "<p>The reason I don't use operator overloads, whether its <code>operator[]</code> for datasets or <code>operator()</code> for transforms, is that we need two overloads:</p>\n<ol>\n<li>One for batches,</li>\n<li>One for examples (which will often call the batch version).<br>\nHaving two overloads makes inheritance less friendly, because of name hiding rules in C++. Basically, if you want to override one in your own subclass, you'd be hiding the other. So every subclass would need a line like <code>using BatchDataset&lt;...&gt;::operator()</code>.</li>\n</ol>\n<p>Instead, I just give the two overloads different names. That solves the problem. It's a little less sweet, but much easier on users.</p>", "body_text": "The reason I don't use operator overloads, whether its operator[] for datasets or operator() for transforms, is that we need two overloads:\n\nOne for batches,\nOne for examples (which will often call the batch version).\nHaving two overloads makes inheritance less friendly, because of name hiding rules in C++. Basically, if you want to override one in your own subclass, you'd be hiding the other. So every subclass would need a line like using BatchDataset<...>::operator().\n\nInstead, I just give the two overloads different names. That solves the problem. It's a little less sweet, but much easier on users.", "in_reply_to_id": 220231081}