{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220232098", "pull_request_review_id": 158568107, "id": 220232098, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDIzMjA5OA==", "diff_hunk": "@@ -0,0 +1,50 @@\n+#pragma once\n+\n+#include <torch/data/example.h>\n+#include <torch/data/transforms/base.h>\n+#include <torch/data/transforms/lambda.h>\n+#include <torch/tensor.h>\n+\n+#include <functional>\n+#include <utility>\n+#include <vector>\n+\n+namespace torch {\n+namespace data {\n+namespace transforms {\n+\n+template <typename T, typename BatchType = std::vector<T>>\n+using Collation = BatchTransform<BatchType, T>;\n+\n+// A `Collate` allows passing a custom function to reduce/collate a batch\n+// into a single value.\n+template <typename T, typename BatchType = std::vector<T>>\n+using Collate = BatchLambda<BatchType, T>;\n+\n+template <typename E = Example<>>\n+struct Stack;\n+\n+template <>\n+struct Stack<Example<>> : public Collation<Example<>> {\n+  Example<> apply_batch(std::vector<Example<>> examples) override {\n+    std::vector<torch::Tensor> data, labels;\n+    data.reserve(examples.size());\n+    labels.reserve(examples.size());\n+    for (auto& example : examples) {\n+      data.push_back(std::move(example.data));\n+      labels.push_back(std::move(example.label));\n+    }\n+    return {torch::stack(data), torch::stack(labels)};\n+  }\n+};\n+\n+template <>\n+struct Stack<Tensor> : public Collation<Tensor> {\n+  Tensor apply_batch(std::vector<Tensor> tensors) override {\n+    return torch::stack(tensors);\n+  }\n+};", "path": "torch/csrc/api/include/torch/data/transforms/collate.h", "position": null, "original_position": 46, "commit_id": "2fabdad63c0bc48b26af6bf8d2e74513b09c97da", "original_commit_id": "d87492e397ef6bf55e2fc8782dfaefdd5aba9920", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice if we could have a bunch of default instances for a standard definition of `Collate` (like we do in Python). Sort of how `std::hash` already works with most common types.", "created_at": "2018-09-25T15:07:07Z", "updated_at": "2018-11-23T15:51:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220232098", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220232098"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220232098"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11918"}}, "body_html": "<p>It would be nice if we could have a bunch of default instances for a standard definition of <code>Collate</code> (like we do in Python). Sort of how <code>std::hash</code> already works with most common types.</p>", "body_text": "It would be nice if we could have a bunch of default instances for a standard definition of Collate (like we do in Python). Sort of how std::hash already works with most common types."}