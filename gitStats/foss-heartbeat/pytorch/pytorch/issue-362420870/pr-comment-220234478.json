{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220234478", "pull_request_review_id": 158568107, "id": 220234478, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDIzNDQ3OA==", "diff_hunk": "@@ -0,0 +1,119 @@\n+#include <torch/data/datasets/mnist.h>\n+\n+#include <torch/data/example.h>\n+#include <torch/tensor.h>\n+\n+#include <ATen/Error.h>\n+\n+#include <cstddef>\n+#include <fstream>\n+#include <string>\n+#include <vector>\n+\n+namespace torch {\n+namespace data {\n+namespace datasets {\n+namespace {\n+constexpr uint32_t kTrainSize = 60000;\n+constexpr uint32_t kTestSize = 10000;\n+constexpr uint32_t kImageMagicNumber = 2051;\n+constexpr uint32_t kLabelMagicNumber = 2049;\n+constexpr uint32_t kImageRows = 28;\n+constexpr uint32_t kImageColumns = 28;\n+constexpr const char* kTrainImagesFilename = \"train-images-idx3-ubyte\";\n+constexpr const char* kTrainLabelsFilename = \"train-labels-idx1-ubyte\";\n+constexpr const char* kTestImagesFilename = \"t10k-images-idx3-ubyte\";\n+constexpr const char* kTestLabelsFilename = \"t10k-labels-idx1-ubyte\";\n+\n+bool check_is_little_endian() {\n+  const uint32_t word = 1;\n+  return reinterpret_cast<const uint8_t*>(&word)[0] == 1;\n+}\n+\n+constexpr uint32_t flip_endianness(uint32_t value) {\n+  return ((value & 0xff) << 24) | ((value & 0xff00) << 8) |\n+      ((value & 0xff0000) >> 8) | ((value & 0xff000000) >> 24);\n+}\n+\n+uint32_t read_int32(std::ifstream& stream) {\n+  static const bool is_little_endian = check_is_little_endian();\n+  uint32_t value;\n+  AT_ASSERT(stream.read(reinterpret_cast<char*>(&value), sizeof value));\n+  return is_little_endian ? flip_endianness(value) : value;\n+}\n+\n+uint32_t expect_int32(std::ifstream& stream, uint32_t expected) {\n+  const auto value = read_int32(stream);\n+  // clang-format off\n+  AT_CHECK(value == expected,\n+      \"Expected to read number \", expected, \" but found \", value, \" instead\");\n+  // clang-format on\n+  return value;\n+}\n+\n+std::string join_paths(std::string head, std::string tail) {\n+  if (head.back() != '/') {\n+    head.push_back('/');\n+  }\n+  head += std::move(tail);\n+  return head;\n+}\n+\n+Tensor read_images(const std::string& root, bool train) {\n+  const auto path =\n+      join_paths(root, train ? kTrainImagesFilename : kTestImagesFilename);\n+  std::ifstream images(path, std::ios::binary);\n+  AT_CHECK(images, \"Error opening images file at \", path);\n+\n+  const auto count = train ? kTrainSize : kTestSize;\n+\n+  // From http://yann.lecun.com/exdb/mnist/\n+  expect_int32(images, kImageMagicNumber);\n+  expect_int32(images, count);\n+  expect_int32(images, kImageRows);\n+  expect_int32(images, kImageColumns);\n+\n+  std::vector<char> buffer(count * kImageRows * kImageColumns);\n+  images.read(buffer.data(), buffer.size());\n+\n+  return torch::from_blob(buffer.data(), buffer.size(), torch::kByte)\n+      .reshape({count, 1, kImageRows, kImageColumns})\n+      .to(torch::kFloat32)\n+      .div(255);\n+}\n+\n+Tensor read_labels(const std::string& root, bool train) {\n+  const auto path =\n+      join_paths(root, train ? kTrainLabelsFilename : kTestLabelsFilename);\n+  std::ifstream labels(path, std::ios::binary);\n+  AT_CHECK(labels, \"Error opening labels file at \", path);\n+\n+  const auto count = train ? kTrainSize : kTestSize;\n+\n+  expect_int32(labels, kLabelMagicNumber);\n+  expect_int32(labels, count);\n+\n+  std::vector<char> buffer(count);\n+  labels.read(buffer.data(), count);\n+  return torch::from_blob(buffer.data(), count, torch::kByte).to(torch::kInt64);", "path": "torch/csrc/api/src/data/datasets/mnist.cpp", "position": null, "original_position": 98, "commit_id": "2fabdad63c0bc48b26af6bf8d2e74513b09c97da", "original_commit_id": "d87492e397ef6bf55e2fc8782dfaefdd5aba9920", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Similar use-after-free.", "created_at": "2018-09-25T15:12:42Z", "updated_at": "2018-11-23T15:51:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220234478", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11918", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220234478"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11918#discussion_r220234478"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11918"}}, "body_html": "<p>Similar use-after-free.</p>", "body_text": "Similar use-after-free."}