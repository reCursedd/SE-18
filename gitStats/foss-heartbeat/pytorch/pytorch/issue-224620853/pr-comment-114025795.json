{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114025795", "pull_request_review_id": 35468271, "id": 114025795, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDAyNTc5NQ==", "diff_hunk": "@@ -0,0 +1,206 @@\n+import numpy as np\n+from bisect import bisect_right\n+from torch.optim.optimizer import Optimizer\n+\n+\n+class LambdaLR(object):\n+    def __init__(self, optimizer, base_lr, lr_lambda):\n+        self.optimizer = optimizer\n+        self.base_lr = base_lr\n+        self.lr_lambda = lr_lambda\n+\n+    def step(self, epoch):\n+        for param_group in self.optimizer.param_groups:\n+            param_group['lr'] = self.base_lr * self.lr_lambda(epoch)\n+\n+\n+class GroupLambdaLR(object):\n+    def __init__(self, optimizer, base_lrs, lr_lambdas):\n+        self.optimizer = optimizer\n+        self.base_lrs = base_lrs\n+        self.lr_lambdas = lr_lambdas\n+\n+    def step(self, epoch):\n+        for param_group, base_lr, lr_lambda in zip(\n+                self.optimizer.param_groups,\n+                self.base_lrs, self.lr_lambdas):\n+            param_group['lr'] = base_lr * lr_lambda(epoch)\n+\n+\n+class StepLR(LambdaLR):\n+    \"\"\"Set the learning rate to the base_lr decayed by gamma\n+    every step_size epochs.\n+\n+\n+    Example:\n+        >>> # lr = 0.05     if epoch < 30\n+        >>> # lr = 0.005    if 30 <= epoch < 60\n+        >>> # lr = 0.0005   if 60 <= epoch < 90\n+        >>> # ...\n+        >>> scheduler = StepLR(optimizer, base_lr=0.05, gamma=0.1, step_size=30)\n+        >>> for epoch in range(100):\n+        >>>     scheduler.step(epoch)\n+        >>>     train(...)\n+        >>>     validate(...)\n+    \"\"\"\n+\n+    def __init__(self, optimizer, base_lr=0.1, gamma=0.1, step_size=30):\n+        super(StepLR, self).__init__(optimizer, base_lr,\n+                                     lambda epoch: gamma ** (epoch // step_size))\n+\n+\n+class MultiStepLR(LambdaLR):\n+    \"\"\"Set the learning rate to the base_lr decayed by gamma\n+    once the number of epoch reaches one of the milestones.\n+\n+\n+    Example:\n+        >>> # lr = 0.05     if epoch < 30\n+        >>> # lr = 0.005    if 30 <= epoch < 80\n+        >>> # lr = 0.0005   if epoch >=80\n+        >>> scheduler = MultiStepLR(optimizer, base_lr=0.05, gamma=0.1, milestones=[30,80])\n+        >>> for epoch in range(100):\n+        >>>     scheduler.step(epoch)\n+        >>>     train(...)\n+        >>>     validate(...)\n+    \"\"\"\n+\n+    def __init__(self, optimizer, base_lr=0.1, gamma=0.1, milestones=(10, 20, 30)):\n+        milestones = sorted(milestones)\n+        super(MultiStepLR, self).__init__(optimizer, base_lr,\n+                                          lambda epoch: gamma ** bisect_right(milestones, epoch))\n+\n+\n+class ExponentialLR(LambdaLR):\n+    \"\"\"Set the learning rate to the initial LR decayed by gamma in\n+    every epoch.\"\"\"\n+\n+    def __init__(self, optimizer, base_lr, gamma):\n+        super(ExponentialLR, self).__init__(optimizer, base_lr,\n+                                            lambda epoch: gamma ** epoch)\n+\n+\n+class ReduceLROnPlateau(object):\n+    \"\"\"Reduce learning rate when a metric has stopped improving.\n+    Models often benefit from reducing the learning rate by a factor\n+    of 2-10 once learning stagnates. This scheduler reads a metrics\n+    quantity and if no improvement is seen for a 'patience' number\n+    of epochs, the learning rate is reduced.\n+\n+    Args:\n+        factor: factor by which the learning rate will\n+            be reduced. new_lr = lr * factor\n+        patience: number of epochs with no improvement\n+            after which learning rate will be reduced.\n+        verbose: int. 0: quiet, 1: update messages.\n+        mode: one of {min, max}. In `min` mode,", "path": "torch/optim/lr_scheduler.py", "position": null, "original_position": 96, "commit_id": "db59187201d18c203f084c8b288e07f7bd2a43aa", "original_commit_id": "eca2266556481e3c02427a27c3758b5af079786a", "user": {"login": "Jiaming-Liu", "id": 16099575, "node_id": "MDQ6VXNlcjE2MDk5NTc1", "avatar_url": "https://avatars3.githubusercontent.com/u/16099575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jiaming-Liu", "html_url": "https://github.com/Jiaming-Liu", "followers_url": "https://api.github.com/users/Jiaming-Liu/followers", "following_url": "https://api.github.com/users/Jiaming-Liu/following{/other_user}", "gists_url": "https://api.github.com/users/Jiaming-Liu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jiaming-Liu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jiaming-Liu/subscriptions", "organizations_url": "https://api.github.com/users/Jiaming-Liu/orgs", "repos_url": "https://api.github.com/users/Jiaming-Liu/repos", "events_url": "https://api.github.com/users/Jiaming-Liu/events{/privacy}", "received_events_url": "https://api.github.com/users/Jiaming-Liu/received_events", "type": "User", "site_admin": false}, "body": "I am not quite understanding this comment.  Max returns a value instead of a boolean. Also, making it an option would make it easier to understand. ", "created_at": "2017-04-28T21:46:35Z", "updated_at": "2018-11-23T15:33:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/1370#discussion_r114025795", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1370", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114025795"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1370#discussion_r114025795"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1370"}}, "body_html": "<p>I am not quite understanding this comment.  Max returns a value instead of a boolean. Also, making it an option would make it easier to understand.</p>", "body_text": "I am not quite understanding this comment.  Max returns a value instead of a boolean. Also, making it an option would make it easier to understand.", "in_reply_to_id": 114005593}