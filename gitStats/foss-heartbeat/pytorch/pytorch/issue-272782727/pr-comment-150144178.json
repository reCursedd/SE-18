{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150144178", "pull_request_review_id": 75652830, "id": 150144178, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDE0NDE3OA==", "diff_hunk": "@@ -19,20 +19,34 @@ bool isBroadcasting(Node *node) {\n   return broadcasting.count(node->kind());\n }\n \n-// When iterating over the dimension sizes, starting at the trailing dimension,\n-// the dimension sizes must either be equal, or one of them does not exist.\n+// First iterate over the 'from' tensor sizes. Ignore all leading and trailing\n+// dimensions that are simply one, since they can be trivially broadcasted.\n+// When iterating over the dimension sizes (with reduced 'from' tensor),\n+// starting at the trailing dimension, the dimension sizes must either be equal,\n+// or one of them does not exist.\n //\n //  equivalently:\n //\n // Test that 'from' is a suffix of 'to'.\n bool fusibleExpandTo(at::IntList from, at::IntList to) {\n-  auto f = from.rbegin();\n-  auto t = to.rbegin();\n-  for (; f != from.rend() && t != to.rend(); f++, t++) {\n-    // TODO: if 1->n expansion is supported, adjust this conditional.\n-    if (*f != *t) return false;\n+  ssize_t from_dim_start = 0, from_dim_end = from.size() - 1;\n+  while (from_dim_start < from.size() && from[from_dim_start] == 1) {\n+    from_dim_start++;\n   }\n-  return f == from.rend();\n+  while (from_dim_end > from_dim_start && from[from_dim_end] == 1) {\n+    from_dim_end--;\n+  }\n+\n+  ssize_t f = from_dim_end;\n+  ssize_t t = to.size() - 1;\n+  for (; f >= from_dim_start && t >= 0; --f, --t) {\n+    if (from[f] != to[t]) return false;\n+  }\n+\n+  // In the case that the 'to' tensor has leading ones in the same place that\n+  // the 'from' tensor does, f will be less than from_dim_start rather than\n+  // strictly equal. E.x.: to := [5, 1, 768] and from := [1, 1, 768]", "path": "torch/csrc/jit/passes/onnx/peephole.cpp", "position": 44, "original_position": 38, "commit_id": "d51ff7dbedfa5d08561f3d6a06ca7493b2d0e089", "original_commit_id": "f75be58f6f2b232a5e6c479ab8bbf9e7fb430f47", "user": {"login": "bddppq", "id": 9300575, "node_id": "MDQ6VXNlcjkzMDA1NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9300575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bddppq", "html_url": "https://github.com/bddppq", "followers_url": "https://api.github.com/users/bddppq/followers", "following_url": "https://api.github.com/users/bddppq/following{/other_user}", "gists_url": "https://api.github.com/users/bddppq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bddppq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bddppq/subscriptions", "organizations_url": "https://api.github.com/users/bddppq/orgs", "repos_url": "https://api.github.com/users/bddppq/repos", "events_url": "https://api.github.com/users/bddppq/events{/privacy}", "received_events_url": "https://api.github.com/users/bddppq/received_events", "type": "User", "site_admin": false}, "body": "The logic looks good to me. But I think you need to check `ndim(from) <= ndim(to)`, e.g. for `to :=  [5, 768], from := [1, 1, 768]` it should return `false`.", "created_at": "2017-11-10T02:54:58Z", "updated_at": "2018-11-23T15:36:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/3616#discussion_r150144178", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3616", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150144178"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3616#discussion_r150144178"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3616"}}, "body_html": "<p>The logic looks good to me. But I think you need to check <code>ndim(from) &lt;= ndim(to)</code>, e.g. for <code>to :=  [5, 768], from := [1, 1, 768]</code> it should return <code>false</code>.</p>", "body_text": "The logic looks good to me. But I think you need to check ndim(from) <= ndim(to), e.g. for to :=  [5, 768], from := [1, 1, 768] it should return false.", "in_reply_to_id": 150129420}