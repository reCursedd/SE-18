{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190406200", "pull_request_review_id": 122776003, "id": 190406200, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDQwNjIwMA==", "diff_hunk": "@@ -26,4 +35,37 @@ Tensor& eye_out_cuda(Tensor& result, int64_t n, int64_t m) {\n   return result;\n }\n \n+Tensor& randperm_out_cuda(Tensor& result, int64_t n, Generator* generator) {\n+  if (n < 0) {\n+    std::ostringstream oss;\n+    oss << \"n must be non-negative, got \" << n;\n+    throw std::runtime_error(oss.str());\n+  }\n+\n+  result.resize_({n});\n+\n+  if (n < 30000) {  // For small inputs, we offload it to CPU instead.\n+    auto result_cpu = result.type().toBackend(kCPU).tensor({n});\n+    randperm_out(result_cpu, n, generator);\n+    result = result.type().copy(result_cpu);", "path": "aten/src/ATen/native/cuda/TensorFactories.cu", "position": null, "original_position": 30, "commit_id": "5070abda6dfc0435f77d611710d0a5ee27a26bd3", "original_commit_id": "879219286fdbef1026b3d37319b416f8b7bb12d0", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "body": "Should we throw an error when `result.type()` is `half`? I saw the following when testing:\r\n```\r\n>>> import torch\r\n>>> cuda = torch.device('cuda:0')\r\n>>> res = torch.cuda.HalfTensor()\r\n>>> torch.randperm(100, out=res, device=cuda)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: randperm_out is not implemented for type torch.HalfTensor\r\n\r\n>>> torch.randperm(1000000, out=res, device=cuda)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: expected scalar type Long but found Half\r\n\r\n>>> res2 = torch.HalfTensor()\r\n>>> torch.randperm(100, out=res2)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: randperm_out is not implemented for type torch.HalfTensor\r\n```", "created_at": "2018-05-23T21:34:34Z", "updated_at": "2018-11-23T15:44:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/7606#discussion_r190406200", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7606", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/190406200"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7606#discussion_r190406200"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7606"}}, "body_html": "<p>Should we throw an error when <code>result.type()</code> is <code>half</code>? I saw the following when testing:</p>\n<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; cuda = torch.device('cuda:0')\n&gt;&gt;&gt; res = torch.cuda.HalfTensor()\n&gt;&gt;&gt; torch.randperm(100, out=res, device=cuda)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: randperm_out is not implemented for type torch.HalfTensor\n\n&gt;&gt;&gt; torch.randperm(1000000, out=res, device=cuda)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: expected scalar type Long but found Half\n\n&gt;&gt;&gt; res2 = torch.HalfTensor()\n&gt;&gt;&gt; torch.randperm(100, out=res2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: randperm_out is not implemented for type torch.HalfTensor\n</code></pre>", "body_text": "Should we throw an error when result.type() is half? I saw the following when testing:\n>>> import torch\n>>> cuda = torch.device('cuda:0')\n>>> res = torch.cuda.HalfTensor()\n>>> torch.randperm(100, out=res, device=cuda)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: randperm_out is not implemented for type torch.HalfTensor\n\n>>> torch.randperm(1000000, out=res, device=cuda)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: expected scalar type Long but found Half\n\n>>> res2 = torch.HalfTensor()\n>>> torch.randperm(100, out=res2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: randperm_out is not implemented for type torch.HalfTensor", "in_reply_to_id": 189950992}