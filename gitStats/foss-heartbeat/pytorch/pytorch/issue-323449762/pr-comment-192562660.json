{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192562660", "pull_request_review_id": 125369217, "id": 192562660, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU2MjY2MA==", "diff_hunk": "@@ -26,4 +36,54 @@ Tensor& eye_out_cuda(Tensor& result, int64_t n, int64_t m) {\n   return result;\n }\n \n+Tensor& randperm_out_cuda(Tensor& result, int64_t n, Generator* generator) {\n+  if (n < 0) {\n+    std::ostringstream oss;\n+    oss << \"n must be non-negative, got \" << n;\n+    throw std::runtime_error(oss.str());\n+  }\n+\n+  auto result_tmp = result;\n+  if (result.type().scalarType() == at::ScalarType::Half) {\n+    // Make sure n is within range of Half\n+    assert(Scalar(n).toHalf());", "path": "aten/src/ATen/native/cuda/TensorFactories.cu", "position": null, "original_position": 29, "commit_id": "5070abda6dfc0435f77d611710d0a5ee27a26bd3", "original_commit_id": "c3d8da53b447af62f0ff529f284f962981766f65", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Don't use `assert` directly. There are other macros in ATen for this (`AT_CHECK`), and you should provide a better error message. Also, why do we only do the range check for `Half` and not for all types?", "created_at": "2018-06-02T15:38:51Z", "updated_at": "2018-11-23T15:44:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/7606#discussion_r192562660", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7606", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/192562660"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7606#discussion_r192562660"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7606"}}, "body_html": "<p>Don't use <code>assert</code> directly. There are other macros in ATen for this (<code>AT_CHECK</code>), and you should provide a better error message. Also, why do we only do the range check for <code>Half</code> and not for all types?</p>", "body_text": "Don't use assert directly. There are other macros in ATen for this (AT_CHECK), and you should provide a better error message. Also, why do we only do the range check for Half and not for all types?"}