{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/389983603", "html_url": "https://github.com/pytorch/pytorch/pull/7606#issuecomment-389983603", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7606", "id": 389983603, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTk4MzYwMw==", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-17T19:35:40Z", "updated_at": "2018-05-17T19:35:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>New perf numbers with offloading to CPU for n &lt; 30000:</p>\n<pre><code>$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(10)'  'torch.randperm(10)'\n1000000 loops, best of 3: 1.4 usec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(10); torch.cuda.synchronize()'  'torch.randperm(10)'\n100000 loops, best of 3: 15.8 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(1000)' 'torch.randperm(1000)'\n100000 loops, best of 3: 16.9 usec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(1000); torch.cuda.synchronize()' 'torch.randperm(1000)'\n10000 loops, best of 3: 33.5 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(30000)' 'torch.randperm(30000)'\n1000 loops, best of 3: 473 usec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(30000); torch.cuda.synchronize()' 'torch.randperm(30000)'\n1000 loops, best of 3: 480 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(100000)' 'torch.randperm(100000)'\n1000 loops, best of 3: 1.63 msec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(100000); torch.cuda.synchronize()' 'torch.randperm(100000)'\n1000 loops, best of 3: 914 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(10000000)' 'torch.randperm(10000000)'\n10 loops, best of 3: 272 msec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(10000000); torch.cuda.synchronize()' 'torch.randperm(10000000)'\n100 loops, best of 3: 59.5 msec per loop\n</code></pre>\n<p>The difference for small inputs is mainly due to copying from CPU tensor to CUDA.</p>", "body_text": "New perf numbers with offloading to CPU for n < 30000:\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(10)'  'torch.randperm(10)'\n1000000 loops, best of 3: 1.4 usec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(10); torch.cuda.synchronize()'  'torch.randperm(10)'\n100000 loops, best of 3: 15.8 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(1000)' 'torch.randperm(1000)'\n100000 loops, best of 3: 16.9 usec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(1000); torch.cuda.synchronize()' 'torch.randperm(1000)'\n10000 loops, best of 3: 33.5 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(30000)' 'torch.randperm(30000)'\n1000 loops, best of 3: 473 usec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(30000); torch.cuda.synchronize()' 'torch.randperm(30000)'\n1000 loops, best of 3: 480 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(100000)' 'torch.randperm(100000)'\n1000 loops, best of 3: 1.63 msec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(100000); torch.cuda.synchronize()' 'torch.randperm(100000)'\n1000 loops, best of 3: 914 usec per loop\n\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(10000000)' 'torch.randperm(10000000)'\n10 loops, best of 3: 272 msec per loop\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(10000000); torch.cuda.synchronize()' 'torch.randperm(10000000)'\n100 loops, best of 3: 59.5 msec per loop\n\nThe difference for small inputs is mainly due to copying from CPU tensor to CUDA.", "body": "New perf numbers with offloading to CPU for n < 30000:\r\n\r\n```\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(10)'  'torch.randperm(10)'\r\n1000000 loops, best of 3: 1.4 usec per loop\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(10); torch.cuda.synchronize()'  'torch.randperm(10)'\r\n100000 loops, best of 3: 15.8 usec per loop\r\n\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(1000)' 'torch.randperm(1000)'\r\n100000 loops, best of 3: 16.9 usec per loop\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(1000); torch.cuda.synchronize()' 'torch.randperm(1000)'\r\n10000 loops, best of 3: 33.5 usec per loop\r\n\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(30000)' 'torch.randperm(30000)'\r\n1000 loops, best of 3: 473 usec per loop\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(30000); torch.cuda.synchronize()' 'torch.randperm(30000)'\r\n1000 loops, best of 3: 480 usec per loop\r\n\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(100000)' 'torch.randperm(100000)'\r\n1000 loops, best of 3: 1.63 msec per loop\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(100000); torch.cuda.synchronize()' 'torch.randperm(100000)'\r\n1000 loops, best of 3: 914 usec per loop\r\n\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.FloatTensor\"); torch.manual_seed(1); torch.randperm(10000000)' 'torch.randperm(10000000)'\r\n10 loops, best of 3: 272 msec per loop\r\n$ python -m timeit -s 'import torch; torch.set_default_tensor_type(\"torch.cuda.FloatTensor\"); torch.manual_seed(1); torch.randperm(10000000); torch.cuda.synchronize()' 'torch.randperm(10000000)'\r\n100 loops, best of 3: 59.5 msec per loop\r\n```\r\n\r\nThe difference for small inputs is mainly due to copying from CPU tensor to CUDA."}