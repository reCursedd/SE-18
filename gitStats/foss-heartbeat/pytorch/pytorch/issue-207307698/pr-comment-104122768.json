{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104122768", "pull_request_review_id": 24938958, "id": 104122768, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDEyMjc2OA==", "diff_hunk": "@@ -201,9 +226,32 @@ THCSTensor *THCSTensor_(newTranspose)(THCState *state, THCSTensor *self, int d1,\n  * reshaping methods\n  ******************************************************************************/\n \n+int THCSTensor_(isSameSizeAs)(THCState *state, const THCSTensor *self, const THCSTensor* src)\n+{\n+  int d;\n+  if (self->nDimensionI != src->nDimensionI || self->nDimensionV != src->nDimensionV)\n+    return 0;\n+  for(d = 0; d < self->nDimensionI + self->nDimensionV; ++d)\n+  {\n+    if(self->size[d] != src->size[d])\n+      return 0;\n+  }\n+  return 1;\n+}\n+\n THCSTensor *THCSTensor_(resize)(THCState *state, THCSTensor *self, THLongStorage *size)\n {\n-  THCSTensor_(rawResize)(state, self, size->size, size->data);\n+  THCSTensor_(rawResize)(state, self, size->size, 0, size->data);\n+  return self;\n+}\n+\n+THCSTensor *THCSTensor_(resizeAs)(THCState *state, THCSTensor *self, THCSTensor *src)\n+{\n+  if(!THCSTensor_(isSameSizeAs)(state, self, src)) {\n+    // TODO the reshaped tensor may contain out of bounds values\n+    // We may want to filter them out", "path": "torch/lib/THCS/generic/THCSTensor.c", "position": null, "original_position": 178, "commit_id": "d5a99574d20676583112f982ab429a1ea1ae1a5b", "original_commit_id": "27e053e0c70da19a221e7b9829edde4be2aa6a45", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "Right. Note that the sparse case is still more dangerous than the dense case: if you resize a dense tensor, you'll just get garbage values when trying to access them. For a sparse tensor, if the index values are garbage, then calling methods like \"to_dense\" will try to access regions of memory that are now out of bounds of the tensor (which *could* be ok if the values storage doesn't actually change. But that sounds like a dangerous assumption to make)", "created_at": "2017-03-03T10:06:22Z", "updated_at": "2018-11-23T15:32:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/735#discussion_r104122768", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/735", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104122768"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/735#discussion_r104122768"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/735"}}, "body_html": "<p>Right. Note that the sparse case is still more dangerous than the dense case: if you resize a dense tensor, you'll just get garbage values when trying to access them. For a sparse tensor, if the index values are garbage, then calling methods like \"to_dense\" will try to access regions of memory that are now out of bounds of the tensor (which <em>could</em> be ok if the values storage doesn't actually change. But that sounds like a dangerous assumption to make)</p>", "body_text": "Right. Note that the sparse case is still more dangerous than the dense case: if you resize a dense tensor, you'll just get garbage values when trying to access them. For a sparse tensor, if the index values are garbage, then calling methods like \"to_dense\" will try to access regions of memory that are now out of bounds of the tensor (which could be ok if the values storage doesn't actually change. But that sounds like a dangerous assumption to make)", "in_reply_to_id": 104001310}