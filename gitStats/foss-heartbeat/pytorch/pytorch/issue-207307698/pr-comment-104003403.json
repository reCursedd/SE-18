{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104003403", "pull_request_review_id": 24545390, "id": 104003403, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDAwMzQwMw==", "diff_hunk": "@@ -58,40 +75,57 @@ static void THSTensor_(rawInit)(THSTensor *self)\n   self->size = NULL;\n   self->indices = THLongTensor_new();\n   self->values = THTensor_(new)();\n-  self->nDimension = 0;\n+  self->nDimensionI = 0;\n+  self->nDimensionV = 0;\n   self->contiguous = 0;\n   self->nnz = 0;\n   // self->flag = TH_TENSOR_REFCOUNTED;\n }\n \n-static void THSTensor_(rawResize)(THSTensor *self, int nDim, long *size) {\n+static void THSTensor_(rawResize)(THSTensor *self, int nDimI, int nDimV, long *size) {\n   // Only resize valid sizes into tensor.\n-  self->size = THRealloc(self->size, sizeof(long)*nDim);\n+  self->size = THRealloc(self->size, sizeof(long)*(nDimI + nDimV));\n \n-  long d, nDim_ = 0;\n-  for (d = 0; d < nDim; d++)\n-    if (size[d] > 0)\n-      self->size[nDim_++] = size[d];\n-  self->nDimension = nDim_;\n+  long d, nDimI_ = 0, nDimV_ = 0;\n+  for (d = 0; d < nDimI; d++) {\n+    if (size[d] > 0) {\n+      self->size[nDimI_++] = size[d];\n+    }\n+  }\n+  for (d = nDimI; d < nDimI + nDimV; d++) {\n+    if (size[d] > 0) {\n+      self->size[nDimI_ + nDimV_++] = size[d];\n+    }\n+  }\n+  self->nDimensionI = nDimI_;\n+  self->nDimensionV = nDimV_;\n   self->contiguous = 0;\n }\n \n-THSTensor* THSTensor_(set)(THSTensor *self, THLongTensor *indices, THTensor *values) {\n-  // Note: Not like torch.set, this is an internal method\n-  THArgCheck(THLongTensor_nDimension(indices) == 2, 1,\n-      \"indices must be nDim x nnz\");\n-  THArgCheck(THTensor_(nDimension)(values) == 1, 2, \"values must nnz vector\");\n-  THArgCheck(THLongTensor_size(indices, 1) == THTensor_(size)(values, 0), 1,\n-      \"indices and values must have same nnz\");\n+// directly assign without cloning or retaining (internal method)\n+THSTensor* THSTensor_(move)(THSTensor *self, THLongTensor *indices, THTensor *values) {\n+  int empty = THTensor_(nDimension)(values) == 0;\n+  if (!empty) {\n+    THArgCheck(THLongTensor_nDimension(indices) == 2, 1,\n+        \"indices must be nDim x nnz\");\n+    THArgCheck(THLongTensor_size(indices, 1) == THTensor_(size)(values, 0), 1,\n+        \"indices and values must have same nnz\");\n+  }\n   THLongTensor_free(self->indices);\n   THTensor_(free)(self->values);\n-  self->indices = THLongTensor_newClone(indices);\n-  self->values = THTensor_(newClone)(values);\n-  self->nnz = THTensor_(size)(values, 0);\n+  self->indices = indices;\n+  self->values = values;\n+  self->nnz = empty ? 0 : THTensor_(size)(values, 0);\n \n   return self;\n }\n \n+THSTensor* THSTensor_(set)(THSTensor *self, THLongTensor *indices, THTensor *values) {\n+  // Note: Not like torch.set, this is an internal method", "path": "torch/lib/THS/generic/THSTensor.c", "position": null, "original_position": 123, "commit_id": "d5a99574d20676583112f982ab429a1ea1ae1a5b", "original_commit_id": "27e053e0c70da19a221e7b9829edde4be2aa6a45", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "can you rename it to `_set` to avoid confusion?", "created_at": "2017-03-02T19:06:18Z", "updated_at": "2018-11-23T15:32:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/735#discussion_r104003403", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/735", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104003403"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/735#discussion_r104003403"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/735"}}, "body_html": "<p>can you rename it to <code>_set</code> to avoid confusion?</p>", "body_text": "can you rename it to _set to avoid confusion?"}