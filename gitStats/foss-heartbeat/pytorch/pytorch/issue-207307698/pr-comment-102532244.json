{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/102532244", "pull_request_review_id": 23290871, "id": 102532244, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjUzMjI0NA==", "diff_hunk": "@@ -181,18 +419,38 @@ void THSTensor_(spcadd)(THTensor *r_, THTensor *dense, real value, THSTensor *sp\n   THTensor      *values = THSTensor_(values)(sparse);\n   THLongStorage *storage = THSTensor_(newSizeOf)(sparse);\n   long          *sizes = storage->data;\n+  long          nDim = THTensor_(nDimension)(dense);\n+  long          nDimI = THSTensor_(nDimensionI)(sparse);\n \n   THTensor_(resizeAs)(r_, dense);\n   THSTensor_(contiguous)(sparse);\n \n   if (r_ != dense) THTensor_(copy)(r_, dense);\n \n-#pragma omp parallel for private(k)\n-  for (k = 0; k < sparse->nnz; k++) {\n-    long index = r_->storageOffset;\n-    for (long d = 0; d < sparse->nDimension; d++)\n-      index += r_->stride[d] * THTensor_fastGet2d(indices, d, k);\n-    r_->storage->data[index]  += value * THTensor_fastGet1d(values, k);\n+\n+  if (nDim > nDimI) {\n+    THTensor *srcBuffer = THTensor_(new)();\n+    THTensor *dstBuffer = THTensor_(new)();\n+    #pragma omp parallel for private(k)\n+    for (k = 0; k < sparse->nnz; k++) {", "path": "torch/lib/THS/generic/THSTensorMath.c", "position": null, "original_position": 296, "commit_id": "d5a99574d20676583112f982ab429a1ea1ae1a5b", "original_commit_id": "8b65c9d3c1f52e0ffe3a0e60fb88987d3350ea6c", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Probably best to remove the `#pragma omp parallel for` in that case. It looks like there are race conditions.", "created_at": "2017-02-22T18:11:29Z", "updated_at": "2018-11-23T15:32:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/735#discussion_r102532244", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/735", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/102532244"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/735#discussion_r102532244"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/735"}}, "body_html": "<p>Probably best to remove the <code>#pragma omp parallel for</code> in that case. It looks like there are race conditions.</p>", "body_text": "Probably best to remove the #pragma omp parallel for in that case. It looks like there are race conditions.", "in_reply_to_id": 101145400}