{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104124066", "pull_request_review_id": 24938958, "id": 104124066, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDEyNDA2Ng==", "diff_hunk": "@@ -0,0 +1,653 @@\n+#ifndef THCS_GENERIC_FILE\n+#define THCS_GENERIC_FILE \"tensors/generic/THCSTensor.cpp\"\n+#else\n+\n+template<>\n+THCSTensor<real>::THCSTensor(THCState* state):\n+  tensor(THCSTensor_(new)(state)), state(state)\n+  {};\n+\n+template<>\n+THCSTensor<real>::THCSTensor(THCState* state, THCSRealTensor *wrapped):\n+  tensor(wrapped), state(state)\n+  {};\n+\n+template<>\n+THCSTensor<real>::~THCSTensor() {\n+  if (tensor)\n+    THCSTensor_(free)(state, tensor);\n+}\n+\n+template<>\n+auto THCSTensor<real>::clone() const -> THCSTensor* {\n+  return new THCSTensor(state, THCSTensor_(newClone)(state, tensor));\n+}\n+\n+template<>\n+auto THCSTensor<real>::clone_shallow() -> THCSTensor* {\n+  THCSTensor_(retain)(state, tensor);\n+  return new THCSTensor(state, tensor);\n+}\n+\n+template<>\n+auto THCSTensor<real>::contiguous() const -> std::unique_ptr<Tensor> {\n+  return std::unique_ptr<Tensor>(new THCSTensor(state, THCSTensor_(newContiguous)(state, tensor)));\n+}\n+\n+template<>\n+int THCSTensor<real>::nDim() const {\n+  return tensor->nDimensionI;\n+}\n+\n+template<>\n+auto THCSTensor<real>::sizes() const -> long_range {\n+  return std::vector<long>(tensor->size, tensor->size + tensor->nDimensionI);\n+}\n+\n+template<>\n+const long* THCSTensor<real>::rawSizes() const {\n+  return tensor->size;\n+}\n+\n+template<>\n+auto THCSTensor<real>::strides() const -> long_range {\n+  throw std::runtime_error(\"THCSTensor::strides() not supported\");\n+}\n+\n+template<>\n+const long* THCSTensor<real>::rawStrides() const {\n+  throw std::runtime_error(\"THCSTensor::rawStrides() not supported\");\n+}\n+\n+template<>\n+std::size_t THCSTensor<real>::storageOffset() const {\n+  throw std::runtime_error(\"THCSTensor::storageOffset() not supported\");\n+}\n+\n+template<>\n+std::size_t THCSTensor<real>::elementSize() const {\n+  return sizeof(real);\n+}\n+\n+template<>\n+long long THCSTensor<real>::numel() const {\n+  throw std::runtime_error(\"THCSTensor::numel not supported\");\n+}\n+\n+template<>\n+bool THCSTensor<real>::isContiguous() const {\n+  throw std::runtime_error(\"THCSTensor::isContiguous() not supported\");\n+}\n+\n+template<>\n+void* THCSTensor<real>::data() {\n+  throw std::runtime_error(\"THCSTensor::data() not supported\");\n+}\n+\n+template<>\n+const void* THCSTensor<real>::data() const {\n+  throw std::runtime_error(\"THCSTensor::data() not supported\");\n+}\n+\n+template<>\n+void* THCSTensor<real>::cdata() {\n+  return tensor;\n+}\n+\n+template<>\n+const void* THCSTensor<real>::cdata() const {\n+  return tensor;\n+}\n+\n+template<>\n+auto THCSTensor<real>::resize(const std::initializer_list<long> &new_size) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::resize(const std::vector<long> &new_size) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::resize(THLongStorage *size, THLongStorage *stride) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::resizeAs(const Tensor& src) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::resizeAs() not supported\");\n+}\n+\n+template<>\n+template<typename iterator>\n+auto THCSTensor<real>::resize(const iterator& begin, const iterator& end) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::resize() not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::set(const Tensor& src) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::set() not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::setStorage(const Storage& storage,\n+                                 ptrdiff_t storageOffset,\n+                                 const long_range& size,\n+                                 const long_range& stride) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::setStorage not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::setStorage(const Storage& storage,\n+                                 ptrdiff_t storageOffset,\n+                                 THLongStorage *size,\n+                                 THLongStorage *stride) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::setStorage not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::narrow(const Tensor& src,\n+                             int dimension,\n+                             long firstIndex,\n+                             long size) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::narrow not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::select(const Tensor& src, int dimension,\n+                             long sliceIndex) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::select not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::transpose(const Tensor& src, int dimension1,\n+                                int dimension2) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::transpose not supported\");\n+}\n+\n+\n+template<>\n+auto THCSTensor<real>::unfold(const Tensor& src, int dimension,\n+                             long size, long step) ->THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::unfold not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::squeeze(const Tensor& src, int dimension) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::squeeze not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::unsqueeze(const Tensor& src, int dimension) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::unsqueeze not supported\");\n+}\n+\n+#ifdef THCS_REAL_IS_HALF\n+#define cast_scalar(v) THC_float2half(v)\n+#define uncast_scalar(v) THC_half2float(v)\n+#else\n+#define cast_scalar(v) v\n+#define uncast_scalar(v) v\n+#endif\n+\n+template<>\n+auto THCSTensor<real>::fill(scalar_type value) -> THCSTensor& {\n+  throw std::runtime_error(\"THCSTensor::fill() not supported\");\n+}\n+\n+template<>\n+auto THCSTensor<real>::retain() -> THCSTensor& {\n+  THCSTensor_(retain)(state, tensor);\n+  return *this;\n+}\n+\n+template<>\n+auto THCSTensor<real>::free() -> THCSTensor& {\n+  THCSTensor_(free)(state, tensor);\n+  return *this;\n+}\n+\n+#define non_const_cast(tensor) const_cast<THCSTensor&>(dynamic_cast<const THCSTensor&>(tensor))", "path": "torch/lib/THPP/tensors/generic/THCSTensor.cpp", "position": null, "original_position": 211, "commit_id": "d5a99574d20676583112f982ab429a1ea1ae1a5b", "original_commit_id": "27e053e0c70da19a221e7b9829edde4be2aa6a45", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "this one slipped through the cracks during the last rebase, will update", "created_at": "2017-03-03T10:13:37Z", "updated_at": "2018-11-23T15:32:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/735#discussion_r104124066", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/735", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/104124066"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/735#discussion_r104124066"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/735"}}, "body_html": "<p>this one slipped through the cracks during the last rebase, will update</p>", "body_text": "this one slipped through the cracks during the last rebase, will update", "in_reply_to_id": 104002390}