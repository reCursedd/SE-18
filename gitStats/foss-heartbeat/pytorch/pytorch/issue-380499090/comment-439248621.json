{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/439248621", "html_url": "https://github.com/pytorch/pytorch/pull/13941#issuecomment-439248621", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13941", "id": 439248621, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTI0ODYyMQ==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-16T01:19:01Z", "updated_at": "2018-11-16T01:19:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> I've changed it to call <code>torch.ops.load_library</code> for you, if you set <code>is_python_module=False</code>. You can now write:</p>\n<div class=\"highlight highlight-source-python\"><pre>source <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'''</span></span>\n<span class=\"pl-s\">#include &lt;torch/script.h&gt;</span>\n<span class=\"pl-s\">torch::Tensor func(torch::Tensor x) { return x; }</span>\n<span class=\"pl-s\">static torch::jit::RegisterOperators r(\"test::func\", &amp;func);</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">'''</span></span>\ntorch.utils.cpp_extension.load_inline(\n    <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>is_python_module<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">cpp_sources</span><span class=\"pl-k\">=</span>source,\n    <span class=\"pl-v\">functions</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>func<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n    <span class=\"pl-v\">is_python_module</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n<span class=\"pl-c1\">self</span>.assertEqual(torch.ops.test.func(torch.eye(<span class=\"pl-c1\">5</span>)), torch.eye(<span class=\"pl-c1\">5</span>))</pre></div>\n<p>what do you think? Is the name reasonable?</p>", "body_text": "@t-vi @fmassa I've changed it to call torch.ops.load_library for you, if you set is_python_module=False. You can now write:\nsource = '''\n#include <torch/script.h>\ntorch::Tensor func(torch::Tensor x) { return x; }\nstatic torch::jit::RegisterOperators r(\"test::func\", &func);\n'''\ntorch.utils.cpp_extension.load_inline(\n    name=\"is_python_module\",\n    cpp_sources=source,\n    functions=\"func\",\n    verbose=True,\n    is_python_module=False)\nself.assertEqual(torch.ops.test.func(torch.eye(5)), torch.eye(5))\nwhat do you think? Is the name reasonable?", "body": "@t-vi @fmassa I've changed it to call `torch.ops.load_library` for you, if you set `is_python_module=False`. You can now write:\r\n\r\n```python\r\nsource = '''\r\n#include <torch/script.h>\r\ntorch::Tensor func(torch::Tensor x) { return x; }\r\nstatic torch::jit::RegisterOperators r(\"test::func\", &func);\r\n'''\r\ntorch.utils.cpp_extension.load_inline(\r\n    name=\"is_python_module\",\r\n    cpp_sources=source,\r\n    functions=\"func\",\r\n    verbose=True,\r\n    is_python_module=False)\r\nself.assertEqual(torch.ops.test.func(torch.eye(5)), torch.eye(5))\r\n```\r\n\r\nwhat do you think? Is the name reasonable?"}