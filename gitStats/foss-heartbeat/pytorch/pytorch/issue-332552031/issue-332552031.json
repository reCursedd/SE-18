{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8508", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8508/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8508/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8508/events", "html_url": "https://github.com/pytorch/pytorch/issues/8508", "id": 332552031, "node_id": "MDU6SXNzdWUzMzI1NTIwMzE=", "number": 8508, "title": "Crash with SIGFPE due to unhandled cases in distributions.MultivariateNormal", "user": {"login": "praveen-palanisamy", "id": 4770482, "node_id": "MDQ6VXNlcjQ3NzA0ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4770482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praveen-palanisamy", "html_url": "https://github.com/praveen-palanisamy", "followers_url": "https://api.github.com/users/praveen-palanisamy/followers", "following_url": "https://api.github.com/users/praveen-palanisamy/following{/other_user}", "gists_url": "https://api.github.com/users/praveen-palanisamy/gists{/gist_id}", "starred_url": "https://api.github.com/users/praveen-palanisamy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praveen-palanisamy/subscriptions", "organizations_url": "https://api.github.com/users/praveen-palanisamy/orgs", "repos_url": "https://api.github.com/users/praveen-palanisamy/repos", "events_url": "https://api.github.com/users/praveen-palanisamy/events{/privacy}", "received_events_url": "https://api.github.com/users/praveen-palanisamy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-14T20:26:28Z", "updated_at": "2018-06-25T22:07:27Z", "closed_at": "2018-06-25T22:07:27Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>With the scalar support in Tensor from PyTorch 0.4, <code>torch.distributions.MultivariateNormal</code> crashes if <code>loc</code> (mean of the distribution) is a scalar (0-dimensional Tensor) although such an input is currently valid .  It neither raises a <code>ValueError</code> in <code>torch.distributions.MultivariateNormal.__init__</code> nor is caught by the <code>real_vector</code> constraint on the <code>loc</code> argument.</p>\n<p>A minimal test code is below to reproduce the clueless SIGFPE crash.</p>\n<h2>Code example</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">Script to test/reproduce crashes with SIGFPE due to unhandled cases(scalar loc) in distributions.MultivariateNormal</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_univariate_scalar_input</span>(<span class=\"pl-smi\">loc</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-smi\">variance</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>):\n    mu <span class=\"pl-k\">=</span> torch.tensor(loc)\n    sigma <span class=\"pl-k\">=</span> torch.tensor(variance)\n    distribution <span class=\"pl-k\">=</span> torch.distributions.MultivariateNormal(mu, torch.eye(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> sigma)\n    sample <span class=\"pl-k\">=</span> distribution.sample()\n    <span class=\"pl-c1\">print</span>(sample)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_univariate_scalar_input_with_args_validation</span>(<span class=\"pl-smi\">loc</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-smi\">variance</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>):\n    mu <span class=\"pl-k\">=</span> torch.tensor(loc)\n    sigma <span class=\"pl-k\">=</span> torch.tensor(variance)\n    distribution <span class=\"pl-k\">=</span> torch.distributions.MultivariateNormal(mu, torch.eye(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> sigma, <span class=\"pl-v\">validate_args</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    sample <span class=\"pl-k\">=</span> distribution.sample()\n    <span class=\"pl-c1\">print</span>(sample)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_univariate_input</span>(<span class=\"pl-smi\">loc</span><span class=\"pl-k\">=</span>([<span class=\"pl-c1\">0.5</span>]), <span class=\"pl-smi\">variance</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>):\n    mu <span class=\"pl-k\">=</span> torch.tensor(loc)\n    sigma <span class=\"pl-k\">=</span> torch.tensor(variance)\n    distribution <span class=\"pl-k\">=</span> torch.distributions.MultivariateNormal(mu, torch.eye(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> sigma)\n    sample <span class=\"pl-k\">=</span> distribution.sample()\n    <span class=\"pl-c1\">print</span>(sample)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_univariate_input_with_args_validation</span>(<span class=\"pl-smi\">loc</span><span class=\"pl-k\">=</span>([<span class=\"pl-c1\">0.5</span>]), <span class=\"pl-smi\">variance</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>):\n    mu <span class=\"pl-k\">=</span> torch.tensor(loc)\n    sigma <span class=\"pl-k\">=</span> torch.tensor(variance)\n    distribution <span class=\"pl-k\">=</span> torch.distributions.MultivariateNormal(mu, torch.eye(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> sigma, <span class=\"pl-v\">validate_args</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    sample <span class=\"pl-k\">=</span> distribution.sample()\n    <span class=\"pl-c1\">print</span>(sample)\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n    test_univariate_scalar_input(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-v\">variance</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Crashes with Floating point exception (SIGFPE)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>test_univariate_scalar_input_with_args_validation(loc=0.5, variance=0.1)  #Crashes with Floating point exception (SIGFPE)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>test_univariate_input(loc=([0.5]), variance=0.1)  # Runs without errors. Haven't verified if samples are from the correct normal distribution</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>test_univariate_input_with_args_validation(loc=([0.5]), variance=0.1)  # Runs without errors. Haven't verified if samples are from the correct normal distribution</span>\n</pre></div>\n<p>I will be happy to submit a PR if you think this needs a fix.</p>\n<h2>System Info</h2>\n<ul>\n<li>PyTorch or Caffe2: PyTorch</li>\n<li>How you installed PyTorch (conda, pip, source): conda</li>\n<li>Build command you used (if compiling from source): NA</li>\n<li>OS: Ubuntu 16.04</li>\n<li>PyTorch version: 0.4.0</li>\n<li>Python version: 3.5.5</li>\n<li>CUDA/cuDNN version: NA</li>\n<li>GPU models and configuration: NA</li>\n<li>GCC version (if compiling from source): NA</li>\n<li>CMake version: NA</li>\n<li>Versions of any other relevant libraries: NA</li>\n</ul>", "body_text": "Issue description\nWith the scalar support in Tensor from PyTorch 0.4, torch.distributions.MultivariateNormal crashes if loc (mean of the distribution) is a scalar (0-dimensional Tensor) although such an input is currently valid .  It neither raises a ValueError in torch.distributions.MultivariateNormal.__init__ nor is caught by the real_vector constraint on the loc argument.\nA minimal test code is below to reproduce the clueless SIGFPE crash.\nCode example\n#!/usr/bin/env python\n\"\"\"\nScript to test/reproduce crashes with SIGFPE due to unhandled cases(scalar loc) in distributions.MultivariateNormal\n\"\"\"\nimport torch\n\ndef test_univariate_scalar_input(loc=0.5, variance=0.1):\n    mu = torch.tensor(loc)\n    sigma = torch.tensor(variance)\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma)\n    sample = distribution.sample()\n    print(sample)\n\ndef test_univariate_scalar_input_with_args_validation(loc=0.5, variance=0.1):\n    mu = torch.tensor(loc)\n    sigma = torch.tensor(variance)\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma, validate_args=True)\n    sample = distribution.sample()\n    print(sample)\n\ndef test_univariate_input(loc=([0.5]), variance=0.1):\n    mu = torch.tensor(loc)\n    sigma = torch.tensor(variance)\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma)\n    sample = distribution.sample()\n    print(sample)\n\ndef test_univariate_input_with_args_validation(loc=([0.5]), variance=0.1):\n    mu = torch.tensor(loc)\n    sigma = torch.tensor(variance)\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma, validate_args=True)\n    sample = distribution.sample()\n    print(sample)\n\n\nif __name__ == \"__main__\":\n    test_univariate_scalar_input(loc=0.5, variance=0.1)  # Crashes with Floating point exception (SIGFPE)\n    #test_univariate_scalar_input_with_args_validation(loc=0.5, variance=0.1)  #Crashes with Floating point exception (SIGFPE)\n    #test_univariate_input(loc=([0.5]), variance=0.1)  # Runs without errors. Haven't verified if samples are from the correct normal distribution\n    #test_univariate_input_with_args_validation(loc=([0.5]), variance=0.1)  # Runs without errors. Haven't verified if samples are from the correct normal distribution\n\nI will be happy to submit a PR if you think this needs a fix.\nSystem Info\n\nPyTorch or Caffe2: PyTorch\nHow you installed PyTorch (conda, pip, source): conda\nBuild command you used (if compiling from source): NA\nOS: Ubuntu 16.04\nPyTorch version: 0.4.0\nPython version: 3.5.5\nCUDA/cuDNN version: NA\nGPU models and configuration: NA\nGCC version (if compiling from source): NA\nCMake version: NA\nVersions of any other relevant libraries: NA", "body": "## Issue description\r\nWith the scalar support in Tensor from PyTorch 0.4, `torch.distributions.MultivariateNormal` crashes if `loc` (mean of the distribution) is a scalar (0-dimensional Tensor) although such an input is currently valid .  It neither raises a `ValueError` in `torch.distributions.MultivariateNormal.__init__` nor is caught by the `real_vector` constraint on the `loc` argument.\r\n\r\nA minimal test code is below to reproduce the clueless SIGFPE crash.\r\n## Code example\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\"\"\"\r\nScript to test/reproduce crashes with SIGFPE due to unhandled cases(scalar loc) in distributions.MultivariateNormal\r\n\"\"\"\r\nimport torch\r\n\r\ndef test_univariate_scalar_input(loc=0.5, variance=0.1):\r\n    mu = torch.tensor(loc)\r\n    sigma = torch.tensor(variance)\r\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma)\r\n    sample = distribution.sample()\r\n    print(sample)\r\n\r\ndef test_univariate_scalar_input_with_args_validation(loc=0.5, variance=0.1):\r\n    mu = torch.tensor(loc)\r\n    sigma = torch.tensor(variance)\r\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma, validate_args=True)\r\n    sample = distribution.sample()\r\n    print(sample)\r\n\r\ndef test_univariate_input(loc=([0.5]), variance=0.1):\r\n    mu = torch.tensor(loc)\r\n    sigma = torch.tensor(variance)\r\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma)\r\n    sample = distribution.sample()\r\n    print(sample)\r\n\r\ndef test_univariate_input_with_args_validation(loc=([0.5]), variance=0.1):\r\n    mu = torch.tensor(loc)\r\n    sigma = torch.tensor(variance)\r\n    distribution = torch.distributions.MultivariateNormal(mu, torch.eye(1) * sigma, validate_args=True)\r\n    sample = distribution.sample()\r\n    print(sample)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_univariate_scalar_input(loc=0.5, variance=0.1)  # Crashes with Floating point exception (SIGFPE)\r\n    #test_univariate_scalar_input_with_args_validation(loc=0.5, variance=0.1)  #Crashes with Floating point exception (SIGFPE)\r\n    #test_univariate_input(loc=([0.5]), variance=0.1)  # Runs without errors. Haven't verified if samples are from the correct normal distribution\r\n    #test_univariate_input_with_args_validation(loc=([0.5]), variance=0.1)  # Runs without errors. Haven't verified if samples are from the correct normal distribution\r\n\r\n```\r\nI will be happy to submit a PR if you think this needs a fix.\r\n\r\n## System Info\r\n- PyTorch or Caffe2: PyTorch\r\n- How you installed PyTorch (conda, pip, source): conda\r\n- Build command you used (if compiling from source): NA\r\n- OS: Ubuntu 16.04\r\n- PyTorch version: 0.4.0\r\n- Python version: 3.5.5\r\n- CUDA/cuDNN version: NA\r\n- GPU models and configuration: NA\r\n- GCC version (if compiling from source): NA\r\n- CMake version: NA\r\n- Versions of any other relevant libraries: NA\r\n"}