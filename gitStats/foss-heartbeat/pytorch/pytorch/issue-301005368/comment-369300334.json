{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/369300334", "html_url": "https://github.com/pytorch/pytorch/pull/5457#issuecomment-369300334", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5457", "id": 369300334, "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTMwMDMzNA==", "user": {"login": "pmitros", "id": 1427775, "node_id": "MDQ6VXNlcjE0Mjc3NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1427775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmitros", "html_url": "https://github.com/pmitros", "followers_url": "https://api.github.com/users/pmitros/followers", "following_url": "https://api.github.com/users/pmitros/following{/other_user}", "gists_url": "https://api.github.com/users/pmitros/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmitros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmitros/subscriptions", "organizations_url": "https://api.github.com/users/pmitros/orgs", "repos_url": "https://api.github.com/users/pmitros/repos", "events_url": "https://api.github.com/users/pmitros/events{/privacy}", "received_events_url": "https://api.github.com/users/pmitros/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-28T16:40:43Z", "updated_at": "2018-02-28T16:40:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I removed the images and added to the <code>Makefile</code>, as per your preferences. I modified the build scripts to skip over images which had already been built, which is good practice regardless, so it shouldn't add much to time.</p>\n<p>Regarding building docs locally, I'm more concerned about any local tools which interpret docstrings (IDEs, etc.). It'd be nice to have that just work. But half a meg is a decent chunk to add to a git repo, and that can grow if we decide to add illustrations more places. I take your point, though. <code>git</code> is surprisingly bad at handling bigger files (\"surprisingly\" since the data structures it uses scale to big files just fine).</p>\n<p>For reference:</p>\n<ul>\n<li>The images, uncompressed, are 525k</li>\n<li>The images, recompressed losslessly with trimage, are 352k. Lossy compression depends on the setting</li>\n<li>The repository is 40M for pytorch, 52M with submodules</li>\n<li>The repository once built is 2.6G</li>\n<li>Rebuilding the images takes 3.5 seconds</li>\n<li>Skipping over built images takes 1 second (load Python imports)</li>\n<li>Rebuilding HTML pages without images takes 11.8 seconds</li>\n</ul>", "body_text": "I removed the images and added to the Makefile, as per your preferences. I modified the build scripts to skip over images which had already been built, which is good practice regardless, so it shouldn't add much to time.\nRegarding building docs locally, I'm more concerned about any local tools which interpret docstrings (IDEs, etc.). It'd be nice to have that just work. But half a meg is a decent chunk to add to a git repo, and that can grow if we decide to add illustrations more places. I take your point, though. git is surprisingly bad at handling bigger files (\"surprisingly\" since the data structures it uses scale to big files just fine).\nFor reference:\n\nThe images, uncompressed, are 525k\nThe images, recompressed losslessly with trimage, are 352k. Lossy compression depends on the setting\nThe repository is 40M for pytorch, 52M with submodules\nThe repository once built is 2.6G\nRebuilding the images takes 3.5 seconds\nSkipping over built images takes 1 second (load Python imports)\nRebuilding HTML pages without images takes 11.8 seconds", "body": "I removed the images and added to the `Makefile`, as per your preferences. I modified the build scripts to skip over images which had already been built, which is good practice regardless, so it shouldn't add much to time.\r\n\r\nRegarding building docs locally, I'm more concerned about any local tools which interpret docstrings (IDEs, etc.). It'd be nice to have that just work. But half a meg is a decent chunk to add to a git repo, and that can grow if we decide to add illustrations more places. I take your point, though. `git` is surprisingly bad at handling bigger files (\"surprisingly\" since the data structures it uses scale to big files just fine).\r\n\r\nFor reference:\r\n\r\n* The images, uncompressed, are 525k\r\n* The images, recompressed losslessly with trimage, are 352k. Lossy compression depends on the setting\r\n* The repository is 40M for pytorch, 52M with submodules\r\n* The repository once built is 2.6G\r\n* Rebuilding the images takes 3.5 seconds\r\n* Skipping over built images takes 1 second (load Python imports)\r\n* Rebuilding HTML pages without images takes 11.8 seconds"}