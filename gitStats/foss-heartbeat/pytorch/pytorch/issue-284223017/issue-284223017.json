{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4318", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4318/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4318/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4318/events", "html_url": "https://github.com/pytorch/pytorch/pull/4318", "id": 284223017, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU5OTEyOTE5", "number": 4318, "title": "Fix btrifact for variables", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-22T18:17:03Z", "updated_at": "2017-12-23T22:32:28Z", "closed_at": "2017-12-23T19:08:29Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4318", "html_url": "https://github.com/pytorch/pytorch/pull/4318", "diff_url": "https://github.com/pytorch/pytorch/pull/4318.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4318.patch"}, "body_html": "<p><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #4217.\">Fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"282739000\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4217\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/4217/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/4217\">#4217</a></p>\n<p>This PR breaks <code>btrifact</code> into <code>btrifact</code> and <code>btrifact_with_info</code>. The cwrap declarations for for tensor and variable are different in that the <code>tensor.btrifact</code> in <code>TensorMath.cwrap</code> still allows <code>info</code> optional argument, and <code>var.btrifact</code> in <code>Decalaration.cwrap</code> always sets <code>info</code> as NULL. In <code>variable.py</code>, a python method <code>btrifact</code> is added to support old <code>info</code> optional argument behavior, but I added deprecation warning in favor of <code>btrifact_with_info</code>.</p>\n<p>I also modified <code>preprocess_declarations.py</code>'s <code>is_nullable</code> for optional tensor arguments with NULL default values. An example of input declarations is the old <code>btrifact</code>in <code>Declaration.cwrap</code>:</p>\n<pre lang=\"[[\"><code>  name: btrifact\n  cname: btrifact\n  types:\n    - floating_point\n  backends:\n    - CPU\n    - CUDA\n  variants:\n    - method\n    - function\n  return: argument 0,1\n  arguments:\n    - arg: THTensor* result\n      output: True\n    - arg: THIntegerTensor* pivots\n      output: True\n    - arg: THIntegerTensor* info\n      kwarg_only: True\n      default: NULL\n    - arg: bool pivot\n      kwarg_only: True\n      default: \"true\"\n    - THTensor* self\n]]\n</code></pre>\n<p>, which gets parsed into the following:</p>\n<pre><code>{..., 'options': [{'arguments': [..., \n{'kwarg_only': True, 'default': None, 'type': 'THInteger Tensor*', 'name': 'info'}, \n...] ...}\n</code></pre>", "body_text": "Fixes #4217\nThis PR breaks btrifact into btrifact and btrifact_with_info. The cwrap declarations for for tensor and variable are different in that the tensor.btrifact in TensorMath.cwrap still allows info optional argument, and var.btrifact in Decalaration.cwrap always sets info as NULL. In variable.py, a python method btrifact is added to support old info optional argument behavior, but I added deprecation warning in favor of btrifact_with_info.\nI also modified preprocess_declarations.py's is_nullable for optional tensor arguments with NULL default values. An example of input declarations is the old btrifactin Declaration.cwrap:\n  name: btrifact\n  cname: btrifact\n  types:\n    - floating_point\n  backends:\n    - CPU\n    - CUDA\n  variants:\n    - method\n    - function\n  return: argument 0,1\n  arguments:\n    - arg: THTensor* result\n      output: True\n    - arg: THIntegerTensor* pivots\n      output: True\n    - arg: THIntegerTensor* info\n      kwarg_only: True\n      default: NULL\n    - arg: bool pivot\n      kwarg_only: True\n      default: \"true\"\n    - THTensor* self\n]]\n\n, which gets parsed into the following:\n{..., 'options': [{'arguments': [..., \n{'kwarg_only': True, 'default': None, 'type': 'THInteger Tensor*', 'name': 'info'}, \n...] ...}", "body": "Fixes #4217 \r\n\r\nThis PR breaks `btrifact` into `btrifact` and `btrifact_with_info`. The cwrap declarations for for tensor and variable are different in that the `tensor.btrifact` in `TensorMath.cwrap` still allows `info` optional argument, and `var.btrifact` in `Decalaration.cwrap` always sets `info` as NULL. In `variable.py`, a python method `btrifact` is added to support old `info` optional argument behavior, but I added deprecation warning in favor of `btrifact_with_info`.\r\n\r\nI also modified `preprocess_declarations.py`'s `is_nullable` for optional tensor arguments with NULL default values. An example of input declarations is the old `btrifact`in `Declaration.cwrap`:\r\n```[[\r\n  name: btrifact\r\n  cname: btrifact\r\n  types:\r\n    - floating_point\r\n  backends:\r\n    - CPU\r\n    - CUDA\r\n  variants:\r\n    - method\r\n    - function\r\n  return: argument 0,1\r\n  arguments:\r\n    - arg: THTensor* result\r\n      output: True\r\n    - arg: THIntegerTensor* pivots\r\n      output: True\r\n    - arg: THIntegerTensor* info\r\n      kwarg_only: True\r\n      default: NULL\r\n    - arg: bool pivot\r\n      kwarg_only: True\r\n      default: \"true\"\r\n    - THTensor* self\r\n]]\r\n```\r\n\r\n, which gets parsed into the following:\r\n\r\n```\r\n{..., 'options': [{'arguments': [..., \r\n{'kwarg_only': True, 'default': None, 'type': 'THInteger Tensor*', 'name': 'info'}, \r\n...] ...}\r\n```"}