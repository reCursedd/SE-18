{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372454866", "html_url": "https://github.com/pytorch/pytorch/issues/3971#issuecomment-372454866", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3971", "id": 372454866, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQ1NDg2Ng==", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-12T20:40:10Z", "updated_at": "2018-03-12T20:40:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>No <code>.toInt()</code> will fail at runtime -- I was a bit unclear, sorry. The question is whether it's better to put the error into user code (<code>x[y.toInt()]</code>) or raise an error from within the library about <code>y.toInt()</code> failing inside <code>operator[]</code>. We'd also have to get rid of <code>operator[](int64_t)</code> because <code>int64_t</code> converts implicitly to <code>Scalar</code>, so the overloads would be ambiguous. That may add a bit of overhead from wrapping/unwrapping the ints</p>", "body_text": "No .toInt() will fail at runtime -- I was a bit unclear, sorry. The question is whether it's better to put the error into user code (x[y.toInt()]) or raise an error from within the library about y.toInt() failing inside operator[]. We'd also have to get rid of operator[](int64_t) because int64_t converts implicitly to Scalar, so the overloads would be ambiguous. That may add a bit of overhead from wrapping/unwrapping the ints", "body": "No `.toInt()` will fail at runtime -- I was a bit unclear, sorry. The question is whether it's better to put the error into user code (`x[y.toInt()]`) or raise an error from within the library about `y.toInt()` failing inside `operator[]`. We'd also have to get rid of `operator[](int64_t)` because `int64_t` converts implicitly to `Scalar`, so the overloads would be ambiguous. That may add a bit of overhead from wrapping/unwrapping the ints"}