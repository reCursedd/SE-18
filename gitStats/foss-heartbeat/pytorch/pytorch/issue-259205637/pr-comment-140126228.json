{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140126228", "pull_request_review_id": 64151271, "id": 140126228, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDEyNjIyOA==", "diff_hunk": "@@ -162,36 +162,76 @@ __global__ void cunn_LookupTable_accGradParametersKernel(\n   }\n }\n \n-/*\n- * Keep the norm of weight smaller than maxNorm\n- */\n template <typename Dtype, typename Acctype>\n-struct pow_v\n-{\n-  Acctype normType;\n-  pow_v(Dtype v) : normType(ScalarConvert<Dtype, Acctype>::to(v)) {}\n-  __host__ __device__\n-  Acctype operator()(const Dtype& x) const {\n+__device__\n+Acctype fast_pow(Dtype x, Acctype normType) {\n     Acctype xA = ScalarConvert<Dtype, Acctype>::to(x);\n     if (normType == 1)\n       return std::abs(xA);\n     else if (normType == 2)\n       return xA * xA;\n     else\n       return std::pow(std::abs(xA), normType);\n-  }\n-};\n+}\n+\n+template <typename Dtype>\n+__device__\n+Dtype get_padded_value(Dtype *weight_ptr, THCIndex_t idx, int64_t dim) \n+{\n+  if (idx < dim)\n+    return weight_ptr[idx];\n+  else\n+    return 0;\n+}\n \n-template <typename T>\n-struct multiply_s\n+/* Calculate norms of the rows of weight_ptr given by idx_ptr and capture them in norms */\n+template <typename Dtype, typename Acctype>\n+__global__\n+void calculate_norms_and_renorm(Dtype *weight_ptr, THCIndex_t *idx_ptr, Dtype normType, \n+    Dtype maxNorm, Acctype normType_, int64_t dim)\n {\n-  T scale;\n-  multiply_s(T s) : scale(s) {}\n-  __host__ __device__\n-  T operator()(const T& x) const {\n-    return x * scale;\n+  // Some casting hacks since dynamic shared memory and templates don't work together:\n+  extern __shared__ __align__(sizeof(Acctype)) unsigned char smem[];\n+  Acctype *sdata = reinterpret_cast<Acctype *>(smem);\n+\n+  int64_t tid = threadIdx.x;\n+  int64_t idx = (idx_ptr[blockIdx.x] - TH_INDEX_BASE) * dim + tid;\n+\n+  // Do the initial exponents in the load\n+  // Shenanigans here since we need to work with a power-of-2 block size\n+  // effectively pad the matrix with zeroes if needed\n+  Acctype second;\n+  if (tid + blockDim.x > dim)", "path": "torch/lib/THCUNN/LookupTable.cu", "position": null, "original_position": 73, "commit_id": "c13c9ffa8c1229a94e9a8824ef3e0750bc428d45", "original_commit_id": "6490ce94a82690b1e4642f082ddc270a705fcba8", "user": {"login": "wickedfoo", "id": 1911637, "node_id": "MDQ6VXNlcjE5MTE2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1911637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wickedfoo", "html_url": "https://github.com/wickedfoo", "followers_url": "https://api.github.com/users/wickedfoo/followers", "following_url": "https://api.github.com/users/wickedfoo/following{/other_user}", "gists_url": "https://api.github.com/users/wickedfoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wickedfoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wickedfoo/subscriptions", "organizations_url": "https://api.github.com/users/wickedfoo/orgs", "repos_url": "https://api.github.com/users/wickedfoo/repos", "events_url": "https://api.github.com/users/wickedfoo/events{/privacy}", "received_events_url": "https://api.github.com/users/wickedfoo/received_events", "type": "User", "site_admin": false}, "body": "also, for loading with a fixed block size and with the block reduction function below, just use a block-stride loop to sum locally and then reduce.\r\n\r\nAlso, don't use the constants \"0\" and \"1\" etc., which won't work if this code is made to work on half or other types. Use THCNumerics, ScalarConvert etc. from cutorch instead. pow() should use that too:\r\n\r\n```\r\nAccType v = ScalarConvert<int, AccType>::to(0);\r\nfor (IndexType i = threadIdx.x; i < dim; i += blockDim.x) {\r\n  v += FastPow<DType, AccType, Norm>::pow(weight[i]);\r\n}\r\n\r\nv = reduceBlock<AccType, WhateverTheSumOpIs>(smem, ...);\r\n\r\nif (threadIdx.x == 0) {\r\n  sdata[0] = std::pow(v, THCNumerics<AccType>::div(ScalarConvert<int, Acctype>::to(1),\r\n             ScalarConvert<int, Acctype>::to(Norm));\r\n}\r\n```", "created_at": "2017-09-21T00:37:47Z", "updated_at": "2018-11-23T15:34:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/2803#discussion_r140126228", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2803", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140126228"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2803#discussion_r140126228"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2803"}}, "body_html": "<p>also, for loading with a fixed block size and with the block reduction function below, just use a block-stride loop to sum locally and then reduce.</p>\n<p>Also, don't use the constants \"0\" and \"1\" etc., which won't work if this code is made to work on half or other types. Use THCNumerics, ScalarConvert etc. from cutorch instead. pow() should use that too:</p>\n<pre><code>AccType v = ScalarConvert&lt;int, AccType&gt;::to(0);\nfor (IndexType i = threadIdx.x; i &lt; dim; i += blockDim.x) {\n  v += FastPow&lt;DType, AccType, Norm&gt;::pow(weight[i]);\n}\n\nv = reduceBlock&lt;AccType, WhateverTheSumOpIs&gt;(smem, ...);\n\nif (threadIdx.x == 0) {\n  sdata[0] = std::pow(v, THCNumerics&lt;AccType&gt;::div(ScalarConvert&lt;int, Acctype&gt;::to(1),\n             ScalarConvert&lt;int, Acctype&gt;::to(Norm));\n}\n</code></pre>", "body_text": "also, for loading with a fixed block size and with the block reduction function below, just use a block-stride loop to sum locally and then reduce.\nAlso, don't use the constants \"0\" and \"1\" etc., which won't work if this code is made to work on half or other types. Use THCNumerics, ScalarConvert etc. from cutorch instead. pow() should use that too:\nAccType v = ScalarConvert<int, AccType>::to(0);\nfor (IndexType i = threadIdx.x; i < dim; i += blockDim.x) {\n  v += FastPow<DType, AccType, Norm>::pow(weight[i]);\n}\n\nv = reduceBlock<AccType, WhateverTheSumOpIs>(smem, ...);\n\nif (threadIdx.x == 0) {\n  sdata[0] = std::pow(v, THCNumerics<AccType>::div(ScalarConvert<int, Acctype>::to(1),\n             ScalarConvert<int, Acctype>::to(Norm));\n}", "in_reply_to_id": 140124639}