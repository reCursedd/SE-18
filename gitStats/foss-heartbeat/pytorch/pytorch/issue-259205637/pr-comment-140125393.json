{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140125393", "pull_request_review_id": 64151271, "id": 140125393, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDEyNTM5Mw==", "diff_hunk": "@@ -172,27 +173,30 @@ void THNN_(LookupTable_renorm)(\n   int64_t stride = THCTensor_(stride)(state, weight, 0);\n \n   // get the unique indices\n-  thrust::device_ptr<real> weight_ptr(THCTensor_(data)(state, weight));\n   thrust::device_ptr<THCIndex_t> idx_ptr(THCIndexTensor_(data)(state, idx));\n   thrust::device_ptr<THCIndex_t> end_ptr(thrust::unique(idx_ptr, idx_ptr+numel));\n   numel = end_ptr - idx_ptr;\n \n-  pow_v<real, accreal> unary_pow(normType);\n-  thrust::plus<accreal> binary_plus;\n-  // numel << stride, since idx usually contains sparse row indices\n-  for (THCIndex_t i = 0; i < numel; i++)\n-  {\n-    THCIndex_t k = idx_ptr[i] - TH_INDEX_BASE;\n-    thrust::device_ptr<real> row_ptr = weight_ptr + k * stride;\n-    accreal norm = thrust::transform_reduce(row_ptr, row_ptr + stride,\n-      unary_pow, (accreal)0, binary_plus);\n-    norm = std::pow(norm, (accreal) (1.0 / normType));\n-    if (norm > ScalarConvert<real, accreal>::to(maxNorm))\n-    {\n-      multiply_s<real> unary_mul(ScalarConvert<accreal, real>::to(maxNorm / (norm + 1e-7)));\n-      thrust::transform(row_ptr, row_ptr + stride, row_ptr, unary_mul);\n-    }\n-  }\n+  real * weight_ptr_raw = THCTensor_(data)(state, weight);\n+  THCIndex_t * idx_ptr_raw = THCIndexTensor_(data)(state, idx);\n+\n+  THCIndex_t num_blocks = numel;\n+  // get the next highest power of 2 for algo correctness\n+  int64_t threads_per_block = stride - 1;\n+  threads_per_block |= threads_per_block >> 1;\n+  threads_per_block |= threads_per_block >> 2;\n+  threads_per_block |= threads_per_block >> 4;\n+  threads_per_block |= threads_per_block >> 8;\n+  threads_per_block |= threads_per_block >> 16;\n+  threads_per_block |= threads_per_block >> 32;\n+  threads_per_block++;\n+\n+  cudaProfilerStart();\n+  calculate_norms_and_renorm<real, accreal>\n+    <<<num_blocks, threads_per_block/2, threads_per_block * sizeof(accreal)>>>\n+    (weight_ptr_raw, idx_ptr_raw, normType, maxNorm, normType_, stride);\n+  cudaDeviceSynchronize();", "path": "torch/lib/THCUNN/generic/LookupTable.cu", "position": null, "original_position": 51, "commit_id": "c13c9ffa8c1229a94e9a8824ef3e0750bc428d45", "original_commit_id": "6490ce94a82690b1e4642f082ddc270a705fcba8", "user": {"login": "wickedfoo", "id": 1911637, "node_id": "MDQ6VXNlcjE5MTE2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1911637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wickedfoo", "html_url": "https://github.com/wickedfoo", "followers_url": "https://api.github.com/users/wickedfoo/followers", "following_url": "https://api.github.com/users/wickedfoo/following{/other_user}", "gists_url": "https://api.github.com/users/wickedfoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wickedfoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wickedfoo/subscriptions", "organizations_url": "https://api.github.com/users/wickedfoo/orgs", "repos_url": "https://api.github.com/users/wickedfoo/repos", "events_url": "https://api.github.com/users/wickedfoo/events{/privacy}", "received_events_url": "https://api.github.com/users/wickedfoo/received_events", "type": "User", "site_admin": false}, "body": "remove this", "created_at": "2017-09-21T00:30:18Z", "updated_at": "2018-11-23T15:34:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/2803#discussion_r140125393", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2803", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140125393"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2803#discussion_r140125393"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2803"}}, "body_html": "<p>remove this</p>", "body_text": "remove this"}