{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140124576", "pull_request_review_id": 64151271, "id": 140124576, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDEyNDU3Ng==", "diff_hunk": "@@ -162,36 +162,76 @@ __global__ void cunn_LookupTable_accGradParametersKernel(\n   }\n }\n \n-/*\n- * Keep the norm of weight smaller than maxNorm\n- */\n template <typename Dtype, typename Acctype>\n-struct pow_v\n-{\n-  Acctype normType;\n-  pow_v(Dtype v) : normType(ScalarConvert<Dtype, Acctype>::to(v)) {}\n-  __host__ __device__\n-  Acctype operator()(const Dtype& x) const {\n+__device__\n+Acctype fast_pow(Dtype x, Acctype normType) {\n     Acctype xA = ScalarConvert<Dtype, Acctype>::to(x);\n     if (normType == 1)\n       return std::abs(xA);\n     else if (normType == 2)\n       return xA * xA;\n     else\n       return std::pow(std::abs(xA), normType);\n-  }\n-};\n+}\n+\n+template <typename Dtype>\n+__device__\n+Dtype get_padded_value(Dtype *weight_ptr, THCIndex_t idx, int64_t dim) \n+{\n+  if (idx < dim)\n+    return weight_ptr[idx];\n+  else\n+    return 0;\n+}\n \n-template <typename T>\n-struct multiply_s\n+/* Calculate norms of the rows of weight_ptr given by idx_ptr and capture them in norms */\n+template <typename Dtype, typename Acctype>", "path": "torch/lib/THCUNN/LookupTable.cu", "position": null, "original_position": 52, "commit_id": "c13c9ffa8c1229a94e9a8824ef3e0750bc428d45", "original_commit_id": "6490ce94a82690b1e4642f082ddc270a705fcba8", "user": {"login": "wickedfoo", "id": 1911637, "node_id": "MDQ6VXNlcjE5MTE2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1911637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wickedfoo", "html_url": "https://github.com/wickedfoo", "followers_url": "https://api.github.com/users/wickedfoo/followers", "following_url": "https://api.github.com/users/wickedfoo/following{/other_user}", "gists_url": "https://api.github.com/users/wickedfoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wickedfoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wickedfoo/subscriptions", "organizations_url": "https://api.github.com/users/wickedfoo/orgs", "repos_url": "https://api.github.com/users/wickedfoo/repos", "events_url": "https://api.github.com/users/wickedfoo/events{/privacy}", "received_events_url": "https://api.github.com/users/wickedfoo/received_events", "type": "User", "site_admin": false}, "body": "template this kernel based on IndexType which is either `unsigned int` or `unsigned long`, as 64-bit integer math on the GPU is really slow, and at launch time figure out the maximum index that the kernel would need, and launch one version or the other based on this (you can find similar things in the cutorch code, there are utility functions for this).\r\n\r\nThen, use IndexType in the kernel instead of int64_t.\r\n", "created_at": "2017-09-21T00:23:32Z", "updated_at": "2018-11-23T15:34:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/2803#discussion_r140124576", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2803", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140124576"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2803#discussion_r140124576"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2803"}}, "body_html": "<p>template this kernel based on IndexType which is either <code>unsigned int</code> or <code>unsigned long</code>, as 64-bit integer math on the GPU is really slow, and at launch time figure out the maximum index that the kernel would need, and launch one version or the other based on this (you can find similar things in the cutorch code, there are utility functions for this).</p>\n<p>Then, use IndexType in the kernel instead of int64_t.</p>", "body_text": "template this kernel based on IndexType which is either unsigned int or unsigned long, as 64-bit integer math on the GPU is really slow, and at launch time figure out the maximum index that the kernel would need, and launch one version or the other based on this (you can find similar things in the cutorch code, there are utility functions for this).\nThen, use IndexType in the kernel instead of int64_t."}