{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/322926545", "html_url": "https://github.com/pytorch/pytorch/issues/2405#issuecomment-322926545", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2405", "id": 322926545, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjkyNjU0NQ==", "user": {"login": "lucabergamini", "id": 27865235, "node_id": "MDQ6VXNlcjI3ODY1MjM1", "avatar_url": "https://avatars1.githubusercontent.com/u/27865235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucabergamini", "html_url": "https://github.com/lucabergamini", "followers_url": "https://api.github.com/users/lucabergamini/followers", "following_url": "https://api.github.com/users/lucabergamini/following{/other_user}", "gists_url": "https://api.github.com/users/lucabergamini/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucabergamini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucabergamini/subscriptions", "organizations_url": "https://api.github.com/users/lucabergamini/orgs", "repos_url": "https://api.github.com/users/lucabergamini/repos", "events_url": "https://api.github.com/users/lucabergamini/events{/privacy}", "received_events_url": "https://api.github.com/users/lucabergamini/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-16T23:24:36Z", "updated_at": "2017-08-16T23:26:06Z", "author_association": "NONE", "body_html": "<p>I think it should work the same as indexing with a LongTensor, which works for the above cases in the same way numpy does.<br>\nIn fact the workaround I use in these cases is to employ <code>torch.nonzero</code> to convert the ByteTensor in a LongTensor to index the tensor as I expect (although it produces a new unit axis)</p>", "body_text": "I think it should work the same as indexing with a LongTensor, which works for the above cases in the same way numpy does.\nIn fact the workaround I use in these cases is to employ torch.nonzero to convert the ByteTensor in a LongTensor to index the tensor as I expect (although it produces a new unit axis)", "body": "I think it should work the same as indexing with a LongTensor, which works for the above cases in the same way numpy does.\r\nIn fact the workaround I use in these cases is to employ ```torch.nonzero``` to convert the ByteTensor in a LongTensor to index the tensor as I expect (although it produces a new unit axis) "}