{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/431654495", "html_url": "https://github.com/pytorch/pytorch/issues/2#issuecomment-431654495", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2", "id": 431654495, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTY1NDQ5NQ==", "user": {"login": "black-puppydog", "id": 189241, "node_id": "MDQ6VXNlcjE4OTI0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/189241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/black-puppydog", "html_url": "https://github.com/black-puppydog", "followers_url": "https://api.github.com/users/black-puppydog/followers", "following_url": "https://api.github.com/users/black-puppydog/following{/other_user}", "gists_url": "https://api.github.com/users/black-puppydog/gists{/gist_id}", "starred_url": "https://api.github.com/users/black-puppydog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/black-puppydog/subscriptions", "organizations_url": "https://api.github.com/users/black-puppydog/orgs", "repos_url": "https://api.github.com/users/black-puppydog/repos", "events_url": "https://api.github.com/users/black-puppydog/events{/privacy}", "received_events_url": "https://api.github.com/users/black-puppydog/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-21T09:51:31Z", "updated_at": "2018-10-21T09:52:22Z", "author_association": "NONE", "body_html": "<p>Indeed, pypi gives a different picture.<br>\nAfter figuring out how to use bigquery (had to select \"legacy\" sql...) I played around with it a bit.<br>\nI aggregated the python/torch version numbers to only make the distinction between major python versions (2/3) and minor pytorch versions (i.e. ignoring postfixes such as \"post1\").</p>\n<pre><code>SELECT\n  REGEXP_EXTRACT(file.version, r'^([0-9](?:\\.[0-9]+)*)') as version,\n  REGEXP_EXTRACT(details.python, r'^([2-3])\\.[0-9].') as python_major,\n  COUNT(*) as total_downloads,\nFROM\n  TABLE_DATE_RANGE(\n    [the-psf:pypi.downloads],\n    TIMESTAMP(\"20180615\"),\n    TIMESTAMP(\"20181015\")\n  )\nWHERE\n  file.project in ('torch')\n--   AND (file.version = '0.4.0' OR file.version = '0.4.1')\nGROUP BY \n  version, python_major\nORDER BY version, python_major ASC\n</code></pre>\n<p>Ignoring the requests that have no python version set (assuming they're distributed like the other downloads) that puts python 2 at about <strong>24%</strong> for the <code>0.4.0</code> and <code>0.4.1</code> releases. So yeah, arguably still relevant. But is seems to be changing, finally. <g-emoji class=\"g-emoji\" alias=\"tada\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png\">\ud83c\udf89</g-emoji></p>", "body_text": "Indeed, pypi gives a different picture.\nAfter figuring out how to use bigquery (had to select \"legacy\" sql...) I played around with it a bit.\nI aggregated the python/torch version numbers to only make the distinction between major python versions (2/3) and minor pytorch versions (i.e. ignoring postfixes such as \"post1\").\nSELECT\n  REGEXP_EXTRACT(file.version, r'^([0-9](?:\\.[0-9]+)*)') as version,\n  REGEXP_EXTRACT(details.python, r'^([2-3])\\.[0-9].') as python_major,\n  COUNT(*) as total_downloads,\nFROM\n  TABLE_DATE_RANGE(\n    [the-psf:pypi.downloads],\n    TIMESTAMP(\"20180615\"),\n    TIMESTAMP(\"20181015\")\n  )\nWHERE\n  file.project in ('torch')\n--   AND (file.version = '0.4.0' OR file.version = '0.4.1')\nGROUP BY \n  version, python_major\nORDER BY version, python_major ASC\n\nIgnoring the requests that have no python version set (assuming they're distributed like the other downloads) that puts python 2 at about 24% for the 0.4.0 and 0.4.1 releases. So yeah, arguably still relevant. But is seems to be changing, finally. \ud83c\udf89", "body": "Indeed, pypi gives a different picture.\r\nAfter figuring out how to use bigquery (had to select \"legacy\" sql...) I played around with it a bit.\r\nI aggregated the python/torch version numbers to only make the distinction between major python versions (2/3) and minor pytorch versions (i.e. ignoring postfixes such as \"post1\").\r\n\r\n```\r\nSELECT\r\n  REGEXP_EXTRACT(file.version, r'^([0-9](?:\\.[0-9]+)*)') as version,\r\n  REGEXP_EXTRACT(details.python, r'^([2-3])\\.[0-9].') as python_major,\r\n  COUNT(*) as total_downloads,\r\nFROM\r\n  TABLE_DATE_RANGE(\r\n    [the-psf:pypi.downloads],\r\n    TIMESTAMP(\"20180615\"),\r\n    TIMESTAMP(\"20181015\")\r\n  )\r\nWHERE\r\n  file.project in ('torch')\r\n--   AND (file.version = '0.4.0' OR file.version = '0.4.1')\r\nGROUP BY \r\n  version, python_major\r\nORDER BY version, python_major ASC\r\n```\r\n\r\nIgnoring the requests that have no python version set (assuming they're distributed like the other downloads) that puts python 2 at about **24%** for the `0.4.0` and `0.4.1` releases. So yeah, arguably still relevant. But is seems to be changing, finally. :tada:"}