{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209073267", "pull_request_review_id": 145017219, "id": 209073267, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTA3MzI2Nw==", "diff_hunk": "@@ -0,0 +1,76 @@\n+#pragma once\n+\n+#include <cuda.h>\n+#include <limits.h>\n+\n+// CUDANumerics.cuh is a holder for mathematical functions that are either\n+// not in the std namespace or are specialized for compilation\n+// with CUDA NVCC or CUDA NVRTC or ROCm HIP. This header is derived from the\n+// legacy THCNumerics.cuh.\n+\n+namespace at{\n+\n+template <typename T>\n+struct numeric_limits {\n+};\n+\n+// WARNING: the following at::numeric_limits definitions are there only to support\n+//          HIP compilation for the moment. Use std::numeric_limits if you are not\n+//          compiling for ROCm.\n+//          from @colesbury: \"The functions on numeric_limits aren't marked with \n+//          __device__ which is why they don't work with ROCm. CUDA allows them \n+//          because they're constexpr.\"\n+template <>\n+struct numeric_limits<uint8_t> {\n+  static inline __host__ __device__ uint8_t lowest() { return 0; }\n+  static inline __host__ __device__ uint8_t max() { return UCHAR_MAX; }", "path": "aten/src/ATen/cuda/CUDANumerics.cuh", "position": null, "original_position": 26, "commit_id": "076eb84f56369b3c1e4b1ee96961e3327aaa445c", "original_commit_id": "d0bc610cc8dc12b386e3a3768e3af15b751cec90", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I think we should prefer the macros from stdint.h (UINT8_MAX instead of UCHAR_MAX, INT64_MAX instead of LONG_MAX).  Mostly I'm concerned about mismatch on 32-bit platforms.\r\n\r\nhttp://tigcc.ticalc.org/doc/stdint.html", "created_at": "2018-08-09T20:46:11Z", "updated_at": "2018-11-23T15:49:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/10301#discussion_r209073267", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10301", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209073267"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10301#discussion_r209073267"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10301"}}, "body_html": "<p>I think we should prefer the macros from stdint.h (UINT8_MAX instead of UCHAR_MAX, INT64_MAX instead of LONG_MAX).  Mostly I'm concerned about mismatch on 32-bit platforms.</p>\n<p><a href=\"http://tigcc.ticalc.org/doc/stdint.html\" rel=\"nofollow\">http://tigcc.ticalc.org/doc/stdint.html</a></p>", "body_text": "I think we should prefer the macros from stdint.h (UINT8_MAX instead of UCHAR_MAX, INT64_MAX instead of LONG_MAX).  Mostly I'm concerned about mismatch on 32-bit platforms.\nhttp://tigcc.ticalc.org/doc/stdint.html"}