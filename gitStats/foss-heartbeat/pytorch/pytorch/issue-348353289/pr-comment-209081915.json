{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209081915", "pull_request_review_id": 145029388, "id": 209081915, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTA4MTkxNQ==", "diff_hunk": "@@ -0,0 +1,78 @@\n+#define CATCH_CONFIG_MAIN\n+#include \"catch.hpp\"\n+\n+#include \"ATen/ATen.h\"\n+#include \"ATen/cuda/CUDANumerics.cuh\"\n+#include \"cuda.h\"\n+#include \"cuda_fp16.h\"\n+#include \"cuda_runtime.h\"\n+\n+#include <assert.h>\n+\n+using namespace at;\n+\n+__host__ __device__ void test(){\n+  \n+  // test half construction and implicit conversions in device\n+  assert(Half(3) == Half(3.0f));\n+  assert(static_cast<Half>(3.0f) == Half(3.0f));\n+  // there is no float <=> __half implicit conversion\n+  assert(static_cast<Half>(3.0f) == 3.0f);\n+\n+  // asserting if the  functions used on \n+  // half types give almost equivalent results when using\n+  //  functions on double.\n+  // The purpose of these asserts are to test the device side\n+  // half API for the common mathematical functions.\n+  // Note: When calling std math functions from device, don't\n+  // use the std namespace, but just \"::\" so that the function\n+  // gets resolved from nvcc math_functions.hpp", "path": "aten/src/ATen/test/cuda_half_test.cu", "position": 34, "original_position": 29, "commit_id": "076eb84f56369b3c1e4b1ee96961e3327aaa445c", "original_commit_id": "d0bc610cc8dc12b386e3a3768e3af15b751cec90", "user": {"login": "syed-ahmed", "id": 8906225, "node_id": "MDQ6VXNlcjg5MDYyMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8906225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syed-ahmed", "html_url": "https://github.com/syed-ahmed", "followers_url": "https://api.github.com/users/syed-ahmed/followers", "following_url": "https://api.github.com/users/syed-ahmed/following{/other_user}", "gists_url": "https://api.github.com/users/syed-ahmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/syed-ahmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syed-ahmed/subscriptions", "organizations_url": "https://api.github.com/users/syed-ahmed/orgs", "repos_url": "https://api.github.com/users/syed-ahmed/repos", "events_url": "https://api.github.com/users/syed-ahmed/events{/privacy}", "received_events_url": "https://api.github.com/users/syed-ahmed/received_events", "type": "User", "site_admin": false}, "body": "I think I was getting errors in the CI which says something like `__host__` function called from `__host__ __device__` is not allowed and then a following trace of a __builtin* function called with the corresponding `std::*` function. I assumed that when using std:: qualifier in `__device__`, it's resolving from `cmath` which calls `__builtin*` vs, resolving from nvcc header `/usr/local/cuda/include/crt/math_functions.hpp` which marks the std:: functions with `__host__ __device__`.", "created_at": "2018-08-09T21:17:11Z", "updated_at": "2018-11-23T15:49:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/10301#discussion_r209081915", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10301", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209081915"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10301#discussion_r209081915"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10301"}}, "body_html": "<p>I think I was getting errors in the CI which says something like <code>__host__</code> function called from <code>__host__ __device__</code> is not allowed and then a following trace of a __builtin* function called with the corresponding <code>std::*</code> function. I assumed that when using std:: qualifier in <code>__device__</code>, it's resolving from <code>cmath</code> which calls <code>__builtin*</code> vs, resolving from nvcc header <code>/usr/local/cuda/include/crt/math_functions.hpp</code> which marks the std:: functions with <code>__host__ __device__</code>.</p>", "body_text": "I think I was getting errors in the CI which says something like __host__ function called from __host__ __device__ is not allowed and then a following trace of a __builtin* function called with the corresponding std::* function. I assumed that when using std:: qualifier in __device__, it's resolving from cmath which calls __builtin* vs, resolving from nvcc header /usr/local/cuda/include/crt/math_functions.hpp which marks the std:: functions with __host__ __device__.", "in_reply_to_id": 209077778}