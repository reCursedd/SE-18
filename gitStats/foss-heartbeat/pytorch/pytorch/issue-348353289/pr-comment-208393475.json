{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208393475", "pull_request_review_id": 144194717, "id": 208393475, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODM5MzQ3NQ==", "diff_hunk": "@@ -188,6 +188,137 @@ inline AT_HOSTDEVICE Half operator/(int a, Half b) {\n } // namespace at\n \n namespace std {\n+  \n+// specializing std for common mathematical functions to be used with at::Half.\n+// For most of this functions the cmath header/math_functions.hpp in cuda \n+// would call the corresponding float specialization. \n+// However, here we are calling the float functions\n+// directly to save one API call, like it's been done in the old THCNumerics.cuh\n+// Also note that some of these functions might not have been used in the library\n+// at all. However, keeping all the function definitions to provide backward\n+// compatibility\n+\n+inline AT_HOSTDEVICE at::Half lgamma(at::Half a) {", "path": "aten/src/ATen/core/Half-inl.h", "position": null, "original_position": 14, "commit_id": "076eb84f56369b3c1e4b1ee96961e3327aaa445c", "original_commit_id": "b2b66c7c966debee5ffeefd76117a42526252ea6", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I don't think we should add these overloads. With a few exceptions, it's undefined behavior to add declarations to namespace `std`. (This does not meet any of the exceptions)\r\n\r\nhttps://en.cppreference.com/w/cpp/language/extending_std", "created_at": "2018-08-07T21:35:54Z", "updated_at": "2018-11-23T15:48:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/10301#discussion_r208393475", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10301", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208393475"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10301#discussion_r208393475"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10301"}}, "body_html": "<p>I don't think we should add these overloads. With a few exceptions, it's undefined behavior to add declarations to namespace <code>std</code>. (This does not meet any of the exceptions)</p>\n<p><a href=\"https://en.cppreference.com/w/cpp/language/extending_std\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/language/extending_std</a></p>", "body_text": "I don't think we should add these overloads. With a few exceptions, it's undefined behavior to add declarations to namespace std. (This does not meet any of the exceptions)\nhttps://en.cppreference.com/w/cpp/language/extending_std"}