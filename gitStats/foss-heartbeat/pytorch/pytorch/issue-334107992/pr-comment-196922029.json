{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196922029", "pull_request_review_id": 130563226, "id": 196922029, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkyMjAyOQ==", "diff_hunk": "@@ -434,15 +490,37 @@ at::optional<std::vector<Value*>> tryMatchSchema(\n       NamedValue v = *positional_inputs[i];\n       const auto& arg = schema.arguments[i];\n \n-      // implicit conversion from List[Tensor] -> Tensor for when the argument\n+      // An IntList[1] is a union of int and IntList.\n+      // Reinterpret an int as an \"IntList\" (a tensor)\n+      if (isIntUsedAsIntList(v.value, arg)) {\n+        if (v.value->node()->kind() == prim::Constant) {\n+          // peephole optimization where we make a Tensor rather than\n+          // a prim::TupleConstruct to wrap the int\n+          auto* node = v.value->node();\n+          v.value = createConstant(graph, loc, node->t(attr::value));\n+        } else {\n+          auto* node = graph.insertNode(graph.create(prim::TupleConstruct, { v.value }));\n+          std::vector<TypePtr> tmp = { IntType::get() };\n+          v.value = node->output()->setType(std::make_shared<TupleType>(tmp));\n+        }\n+      }\n+\n+      // implicit conversion from List[int] -> Tensor for when the argument\n       // is an IntList in aten, for things like x.expand(sizes=[3,4,5])\n       if(arg.attribute_info &&\n          arg.attribute_info->kind == AttributeKind::is &&\n-         v.value->type()->isSubtypeOf(*ListType::ofTensors())) {\n+         v.value->type()->isSubtypeOf(*ListType::ofInts())) {\n         auto unpacked = createTupleUnpack(v.value);\n         v.value = createStack(graph, loc, unpacked);\n       }\n \n+      // implicit conversion from Tensor to Python Number\n+      // FIXME: remove this when we support passing numbers into script fns\n+      if (v.value->type()->isSubtypeOf(*DynamicType::get()) &&", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 111, "commit_id": "5eda0ceda38ead73ca63cfaf60091a2d55c6eef0", "original_commit_id": "416c80cde11c348807ca5d62140f18dcbaa6a296", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Use `isTensorSubtype`? It's much more readable than this expression", "created_at": "2018-06-20T19:56:17Z", "updated_at": "2018-11-23T15:45:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/8687#discussion_r196922029", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8687", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196922029"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8687#discussion_r196922029"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8687"}}, "body_html": "<p>Use <code>isTensorSubtype</code>? It's much more readable than this expression</p>", "body_text": "Use isTensorSubtype? It's much more readable than this expression"}