{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196956030", "pull_request_review_id": 130604697, "id": 196956030, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk1NjAzMA==", "diff_hunk": "@@ -6,20 +6,21 @@ ModelProto {\n     GraphProto {\n       name: \"torch-jit-export\"\n       inputs: [{name: \"x.1\", type:Tensor dims: 1 2 3}]\n-      outputs: [{name: \"4\", type:Tensor dims: 1 2 3}]\n+      outputs: [{name: \"5\", type:Tensor dims: 1 2 3}]\n       initializers: []\n       nodes: [\n         Node {type: \"ReduceSum\", inputs: [x.1], outputs: [1], attributes: [{ name: 'keepdims', type: int, value: 0}]},\n         Node {type: \"Constant\", inputs: [], outputs: [2], attributes: [{ name: 'value', type: tensor, value:TensorProto shape: []}]},\n-        Node {type: \"Greater\", inputs: [1,2], outputs: [3], attributes: []},\n-        Node {type: \"If\", inputs: [3], outputs: [4], attributes: [{ name: 'then_branch', type: graph, value:\n+        Node {type: \"ATen\", inputs: [2,1], outputs: [3], attributes: [{ name: 'operator', type: string, value: 'type_as'}]},", "path": "test/expect/TestScript.test_onnx_export_script_module_if.expect", "position": null, "original_position": 12, "commit_id": "5eda0ceda38ead73ca63cfaf60091a2d55c6eef0", "original_commit_id": "416c80cde11c348807ca5d62140f18dcbaa6a296", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "Yes, I believe so. The form `expr > 0` seems pretty common and would be expected to work for anyone used to implicit conversions. Can we solve this restricted case by doing a peephole optimization that matches (Constant -> type_as) and cast the Constant node to the expected type? If `expr` is dynamic, we're probably screwed though", "created_at": "2018-06-20T21:59:48Z", "updated_at": "2018-11-23T15:45:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/8687#discussion_r196956030", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8687", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196956030"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8687#discussion_r196956030"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8687"}}, "body_html": "<p>Yes, I believe so. The form <code>expr &gt; 0</code> seems pretty common and would be expected to work for anyone used to implicit conversions. Can we solve this restricted case by doing a peephole optimization that matches (Constant -&gt; type_as) and cast the Constant node to the expected type? If <code>expr</code> is dynamic, we're probably screwed though</p>", "body_text": "Yes, I believe so. The form expr > 0 seems pretty common and would be expected to work for anyone used to implicit conversions. Can we solve this restricted case by doing a peephole optimization that matches (Constant -> type_as) and cast the Constant node to the expected type? If expr is dynamic, we're probably screwed though", "in_reply_to_id": 196886221}