{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196927012", "pull_request_review_id": 130570172, "id": 196927012, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjkyNzAxMg==", "diff_hunk": "@@ -1509,17 +1555,19 @@ def func(a, b):\n \n     def test_script_for_in_range(self):\n         def fn():\n-            c = 0\n+            c = FIXME_zerol()\n             for i in range(100):\n                 c += i\n             return c\n         self.checkScript(fn, (), outputs=4950, optimize=True)\n \n     def test_script_for_in_range_dynamic(self):\n         def fn():\n-            c = 0\n+            c = FIXME_zerol()", "path": "test/test_jit.py", "position": 168, "original_position": 118, "commit_id": "5eda0ceda38ead73ca63cfaf60091a2d55c6eef0", "original_commit_id": "416c80cde11c348807ca5d62140f18dcbaa6a296", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "Yes, the 0 literal is broken for a number of reasons. In this particular case the problem is that `for i in range(100)` assigns `i` a TensorType. In the above test (test_script_for_in_range), we're using `c` as the accumulator and adding `i` to `c`.\r\n\r\nIf we assign `c = 0` originally, `c` has type IntType. However, `i` has some tensor type, and we disallow reassigning variables to things that have unrelated types. This can be fixed when the `range(...)` expression gives an IntType.\r\n\r\nI can add more comments to the code if you think that is fine", "created_at": "2018-06-20T20:13:41Z", "updated_at": "2018-11-23T15:45:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/8687#discussion_r196927012", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8687", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196927012"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8687#discussion_r196927012"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8687"}}, "body_html": "<p>Yes, the 0 literal is broken for a number of reasons. In this particular case the problem is that <code>for i in range(100)</code> assigns <code>i</code> a TensorType. In the above test (test_script_for_in_range), we're using <code>c</code> as the accumulator and adding <code>i</code> to <code>c</code>.</p>\n<p>If we assign <code>c = 0</code> originally, <code>c</code> has type IntType. However, <code>i</code> has some tensor type, and we disallow reassigning variables to things that have unrelated types. This can be fixed when the <code>range(...)</code> expression gives an IntType.</p>\n<p>I can add more comments to the code if you think that is fine</p>", "body_text": "Yes, the 0 literal is broken for a number of reasons. In this particular case the problem is that for i in range(100) assigns i a TensorType. In the above test (test_script_for_in_range), we're using c as the accumulator and adding i to c.\nIf we assign c = 0 originally, c has type IntType. However, i has some tensor type, and we disallow reassigning variables to things that have unrelated types. This can be fixed when the range(...) expression gives an IntType.\nI can add more comments to the code if you think that is fine", "in_reply_to_id": 196923839}