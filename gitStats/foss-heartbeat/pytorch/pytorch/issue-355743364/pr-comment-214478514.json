{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214478514", "pull_request_review_id": 151552749, "id": 214478514, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ3ODUxNA==", "diff_hunk": "@@ -135,21 +135,23 @@ class Conv1d(_ConvNd):\n \n     Shape:\n         - Input: :math:`(N, C_{in}, L_{in})`\n-        - Output: :math:`(N, C_{out}, L_{out})` where\n+        - Output: :math:`(N, C_{out}, L_{out})`, where\n \n           .. math::\n               L_{out} = \\left\\lfloor\\frac{L_{in} + 2 \\times \\text{padding} - \\text{dilation}\n                         \\times (\\text{kernel\\_size} - 1) - 1}{\\text{stride}} + 1\\right\\rfloor\n \n     Attributes:\n         weight (Tensor): the learnable weights of the module of shape\n-            (out_channels, in_channels, kernel_size). The values of these weights are sampled from\n-            :math:`\\mathcal{U}(-\\sqrt{k}, \\sqrt{k})` where\n-            :math:`k = \\frac{1}{\\text{in\\_channels} * \\text{kernel\\_size}}`\n+                         :math:`(\\text{out\\_channels}, \\text{in\\_channels}, \\text{kernel\\_size})`.", "path": "torch/nn/modules/conv.py", "position": null, "original_position": 45, "commit_id": "71e293191e25a18fe464e735c4dd728750eca0c8", "original_commit_id": "dc56d647a43f59f80490c00361ca191df37d5b7f", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "will it be better to have `(C_out, C_in, K)` so that it is consistent to docs above?", "created_at": "2018-08-31T21:24:11Z", "updated_at": "2018-11-23T15:50:30Z", "html_url": "https://github.com/pytorch/pytorch/pull/11106#discussion_r214478514", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11106", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214478514"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11106#discussion_r214478514"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11106"}}, "body_html": "<p>will it be better to have <code>(C_out, C_in, K)</code> so that it is consistent to docs above?</p>", "body_text": "will it be better to have (C_out, C_in, K) so that it is consistent to docs above?"}