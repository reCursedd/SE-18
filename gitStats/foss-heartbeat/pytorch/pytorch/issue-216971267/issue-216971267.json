{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1102", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1102/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1102/events", "html_url": "https://github.com/pytorch/pytorch/pull/1102", "id": 216971267, "node_id": "MDExOlB1bGxSZXF1ZXN0MTEyNTg0ODU5", "number": 1102, "title": "Cwrap arg assign", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-25T12:32:13Z", "updated_at": "2018-11-23T15:32:51Z", "closed_at": "2017-03-26T11:53:28Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/1102", "html_url": "https://github.com/pytorch/pytorch/pull/1102", "diff_url": "https://github.com/pytorch/pytorch/pull/1102.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/1102.patch"}, "body_html": "<p>My first <code>cwrap</code> PR, thorough review needed !</p>\n<p>Extend cwrap stucture to assign the arguments to variables named <code>arg_*</code> before the function call.<br>\nThis simplifies the <code>before_call</code> that can now access directly the arguments (the previous behaviour with <code>${arg0}</code> is still allowed right now for backward compatibility).<br>\nAlso allows the <code>before_call</code> to modify the arguments!!</p>\n<p>Also <span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #146.\">fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"184324316\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/146\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/146/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/146\">#146</a> as the unpacking is done before.</p>\n<p>Sample before:</p>\n<div class=\"highlight highlight-source-c++\"><pre>      PyThreadState *_save = <span class=\"pl-c1\">NULL</span>;\n      <span class=\"pl-k\">try</span> {\n        <span class=\"pl-k\">long</span> ndim = ((THPTensor*)self)-&gt;<span class=\"pl-smi\">cdata</span>-&gt;<span class=\"pl-smi\">nDimension</span>;\n        <span class=\"pl-c1\">THPUtils_assert</span>(ndim == <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t_() expects a 2D tensor, but self is %ldD<span class=\"pl-pds\">\"</span></span>, ndim);\n        \n        Py_UNBLOCK_THREADS;\n        <span class=\"pl-c1\">THTensor_</span>(transpose)(<span class=\"pl-c1\">LIBRARY_STATE</span> ((THPTensor*)self)-&gt;<span class=\"pl-smi\">cdata</span>, ((THPTensor*)self)-&gt;<span class=\"pl-smi\">cdata</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>);\n        Py_BLOCK_THREADS;\n        <span class=\"pl-c1\">Py_INCREF</span>(self);\n        <span class=\"pl-k\">return</span> (PyObject*)self;\n      } <span class=\"pl-k\">catch</span> (...) {\n        <span class=\"pl-k\">if</span> (_save) {\n          Py_BLOCK_THREADS;\n        }\n        <span class=\"pl-k\">throw</span>;\n      }</pre></div>\n<p>Sample after:</p>\n<div class=\"highlight highlight-source-c++\"><pre>      THTensor* arg_self = ((THPTensor*)self)-&gt;cdata;\n      \n      PyThreadState *_save = <span class=\"pl-c1\">NULL</span>;\n      <span class=\"pl-k\">try</span> {\n        <span class=\"pl-k\">long</span> ndim = arg_self-&gt;<span class=\"pl-smi\">nDimension</span>;\n        <span class=\"pl-c1\">THPUtils_assert</span>(ndim == <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t_() expects a 2D tensor, but self is %ldD<span class=\"pl-pds\">\"</span></span>, ndim);\n        \n        Py_UNBLOCK_THREADS;\n        <span class=\"pl-c1\">THTensor_</span>(transpose)(LIBRARY_STATE arg_self, arg_self, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>);\n        Py_BLOCK_THREADS;\n        <span class=\"pl-c1\">Py_INCREF</span>(self);\n        <span class=\"pl-k\">return</span> (PyObject*)self;\n      } <span class=\"pl-k\">catch</span> (...) {\n        <span class=\"pl-k\">if</span> (_save) {\n          Py_BLOCK_THREADS;\n        }\n        <span class=\"pl-k\">throw</span>;\n      }</pre></div>", "body_text": "My first cwrap PR, thorough review needed !\nExtend cwrap stucture to assign the arguments to variables named arg_* before the function call.\nThis simplifies the before_call that can now access directly the arguments (the previous behaviour with ${arg0} is still allowed right now for backward compatibility).\nAlso allows the before_call to modify the arguments!!\nAlso fixes #146 as the unpacking is done before.\nSample before:\n      PyThreadState *_save = NULL;\n      try {\n        long ndim = ((THPTensor*)self)->cdata->nDimension;\n        THPUtils_assert(ndim == 2, \"t_() expects a 2D tensor, but self is %ldD\", ndim);\n        \n        Py_UNBLOCK_THREADS;\n        THTensor_(transpose)(LIBRARY_STATE ((THPTensor*)self)->cdata, ((THPTensor*)self)->cdata, 0, 1);\n        Py_BLOCK_THREADS;\n        Py_INCREF(self);\n        return (PyObject*)self;\n      } catch (...) {\n        if (_save) {\n          Py_BLOCK_THREADS;\n        }\n        throw;\n      }\nSample after:\n      THTensor* arg_self = ((THPTensor*)self)->cdata;\n      \n      PyThreadState *_save = NULL;\n      try {\n        long ndim = arg_self->nDimension;\n        THPUtils_assert(ndim == 2, \"t_() expects a 2D tensor, but self is %ldD\", ndim);\n        \n        Py_UNBLOCK_THREADS;\n        THTensor_(transpose)(LIBRARY_STATE arg_self, arg_self, 0, 1);\n        Py_BLOCK_THREADS;\n        Py_INCREF(self);\n        return (PyObject*)self;\n      } catch (...) {\n        if (_save) {\n          Py_BLOCK_THREADS;\n        }\n        throw;\n      }", "body": "My first `cwrap` PR, thorough review needed !\r\n\r\nExtend cwrap stucture to assign the arguments to variables named `arg_*` before the function call.\r\nThis simplifies the `before_call` that can now access directly the arguments (the previous behaviour with `${arg0}` is still allowed right now for backward compatibility).\r\nAlso allows the `before_call` to modify the arguments!!\r\n\r\nAlso fixes #146 as the unpacking is done before.\r\n\r\nSample before:\r\n```cpp\r\n      PyThreadState *_save = NULL;\r\n      try {\r\n        long ndim = ((THPTensor*)self)->cdata->nDimension;\r\n        THPUtils_assert(ndim == 2, \"t_() expects a 2D tensor, but self is %ldD\", ndim);\r\n        \r\n        Py_UNBLOCK_THREADS;\r\n        THTensor_(transpose)(LIBRARY_STATE ((THPTensor*)self)->cdata, ((THPTensor*)self)->cdata, 0, 1);\r\n        Py_BLOCK_THREADS;\r\n        Py_INCREF(self);\r\n        return (PyObject*)self;\r\n      } catch (...) {\r\n        if (_save) {\r\n          Py_BLOCK_THREADS;\r\n        }\r\n        throw;\r\n      }\r\n```\r\n\r\nSample after:\r\n```cpp\r\n      THTensor* arg_self = ((THPTensor*)self)->cdata;\r\n      \r\n      PyThreadState *_save = NULL;\r\n      try {\r\n        long ndim = arg_self->nDimension;\r\n        THPUtils_assert(ndim == 2, \"t_() expects a 2D tensor, but self is %ldD\", ndim);\r\n        \r\n        Py_UNBLOCK_THREADS;\r\n        THTensor_(transpose)(LIBRARY_STATE arg_self, arg_self, 0, 1);\r\n        Py_BLOCK_THREADS;\r\n        Py_INCREF(self);\r\n        return (PyObject*)self;\r\n      } catch (...) {\r\n        if (_save) {\r\n          Py_BLOCK_THREADS;\r\n        }\r\n        throw;\r\n      }\r\n```"}