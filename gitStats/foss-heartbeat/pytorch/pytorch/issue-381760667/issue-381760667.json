{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14120", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14120/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14120/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14120/events", "html_url": "https://github.com/pytorch/pytorch/pull/14120", "id": 381760667, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxNjU1OTY5", "number": 14120, "title": "[jit] Allow undefined tensors as constants", "user": {"login": "driazati", "id": 9407960, "node_id": "MDQ6VXNlcjk0MDc5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9407960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/driazati", "html_url": "https://github.com/driazati", "followers_url": "https://api.github.com/users/driazati/followers", "following_url": "https://api.github.com/users/driazati/following{/other_user}", "gists_url": "https://api.github.com/users/driazati/gists{/gist_id}", "starred_url": "https://api.github.com/users/driazati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/driazati/subscriptions", "organizations_url": "https://api.github.com/users/driazati/orgs", "repos_url": "https://api.github.com/users/driazati/repos", "events_url": "https://api.github.com/users/driazati/events{/privacy}", "received_events_url": "https://api.github.com/users/driazati/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-16T21:09:09Z", "updated_at": "2018-11-21T00:55:54Z", "closed_at": "2018-11-21T00:55:54Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/14120", "html_url": "https://github.com/pytorch/pytorch/pull/14120", "diff_url": "https://github.com/pytorch/pytorch/pull/14120.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/14120.patch"}, "body_html": "<p>This PR inserts <code>prim::None</code> constants for undefined tensors. This comes in the standard library if an <code>Optional[Tensor]</code> is statically determined to be <code>None</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-en\">@torch.jit.script</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">fn</span>(<span class=\"pl-smi\">x</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n    <span class=\"pl-c\"># <span class=\"pl-c\">type:</span> <span class=\"pl-c\">(</span><span class=\"pl-c\">Optional</span><span class=\"pl-c\">[</span><span class=\"pl-c\">Tensor</span><span class=\"pl-c\">])</span> <span class=\"pl-c\">-&gt;</span> <span class=\"pl-c\">Tensor</span></span>\n    <span class=\"pl-k\">return</span> torch.jit._unwrap_optional(x)\n\n<span class=\"pl-en\">@torch.jit.script</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">fn2</span>():\n    <span class=\"pl-c\"># <span class=\"pl-c\">type:</span> <span class=\"pl-c\">()</span> <span class=\"pl-c\">-&gt;</span> <span class=\"pl-c\">Tensor</span></span>\n    <span class=\"pl-k\">return</span> fn()</pre></div>", "body_text": "This PR inserts prim::None constants for undefined tensors. This comes in the standard library if an Optional[Tensor] is statically determined to be None:\n@torch.jit.script\ndef fn(x=None):\n    # type: (Optional[Tensor]) -> Tensor\n    return torch.jit._unwrap_optional(x)\n\n@torch.jit.script\ndef fn2():\n    # type: () -> Tensor\n    return fn()", "body": "This PR inserts `prim::None` constants for undefined tensors. This comes in the standard library if an `Optional[Tensor]` is statically determined to be `None`:\r\n\r\n```python\r\n@torch.jit.script\r\ndef fn(x=None):\r\n    # type: (Optional[Tensor]) -> Tensor\r\n    return torch.jit._unwrap_optional(x)\r\n\r\n@torch.jit.script\r\ndef fn2():\r\n    # type: () -> Tensor\r\n    return fn()\r\n```\r\n\r\n"}