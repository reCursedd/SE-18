{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177593452", "pull_request_review_id": 107492775, "id": 177593452, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzU5MzQ1Mg==", "diff_hunk": "@@ -0,0 +1,100 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/ExpandUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+\n+template <template<typename> class, typename, typename, template<template<typename> class, typename, typename> class>\n+struct CmpOpScalar {};\n+\n+// Comparators have special cases for integral tensors and floating scalars due to\n+// the floating scalars being automatically cast to integral types during the comparison\n+template<typename scalar_out, typename scalar, template<template<typename> class, typename, typename> class CmpOpImpl>\n+struct CmpOpScalar<std::less, scalar_out, scalar, CmpOpImpl> {\n+  static void apply(at::Tensor& ret, const at::Tensor& self, at::Scalar other) {\n+    if (isIntegralType(self.type().scalarType()) && other.isFloatingPoint()) {\n+      auto other_double = other.to<double>();\n+      auto other_long = other.to<int64_t>();\n+      if (other_double != other_long) {\n+        other = at::Scalar(ceil(other_double));", "path": "aten/src/ATen/TensorCompare.h", "position": 23, "original_position": 19, "commit_id": "da6b60d7c716fb9b9fe5052edcdaf4204c8d3cef", "original_commit_id": "6c7e02efcf18d3c6006c365a15bd761c179cd132", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "body": "It shouldn't matter because we're gonna cast the value to the correct type in the CmpOpImpl.", "created_at": "2018-03-27T22:38:57Z", "updated_at": "2018-11-23T15:41:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/5394#discussion_r177593452", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5394", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177593452"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5394#discussion_r177593452"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5394"}}, "body_html": "<p>It shouldn't matter because we're gonna cast the value to the correct type in the CmpOpImpl.</p>", "body_text": "It shouldn't matter because we're gonna cast the value to the correct type in the CmpOpImpl.", "in_reply_to_id": 175297602}