{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170416462", "pull_request_review_id": 99107742, "id": 170416462, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDQxNjQ2Mg==", "diff_hunk": "@@ -55,5 +55,161 @@ Tensor _s_where_cpu(const Tensor& condition, const Tensor& self, const Tensor& o\n   return ret;\n }\n \n+template <typename scalar>\n+struct LeOp {\n+  static void apply(Tensor& ret, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<scalar>();\n+    CPU_tensor_apply2<uint8_t, scalar>(ret, self,\n+        [other_val](uint8_t& ret_val, scalar self_val) {\n+        ret_val = self_val <= other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct GeOp {\n+  static void apply(Tensor& ret, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<scalar>();\n+    CPU_tensor_apply2<uint8_t, scalar>(ret, self,\n+        [other_val](uint8_t& ret_val, scalar self_val) {\n+        ret_val = self_val >= other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct EqOp {\n+  static void apply(Tensor& ret, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<scalar>();\n+    CPU_tensor_apply2<uint8_t, scalar>(ret, self,\n+        [other_val](uint8_t& ret_val, scalar self_val) {\n+        ret_val = self_val == other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct NeOp {\n+  static void apply(Tensor& ret, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<scalar>();\n+    CPU_tensor_apply2<uint8_t, scalar>(ret, self,\n+        [other_val](uint8_t& ret_val, scalar self_val) {\n+        ret_val = self_val != other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct LeOpDouble {\n+  static void apply(Tensor& result, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<double>();\n+    CPU_tensor_apply2<uint8_t, scalar>(result, self,\n+        [other_val](uint8_t& result_val, scalar self_val) {\n+        result_val = convert<scalar, double>(self_val) <= other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct GeOpDouble {\n+  static void apply(Tensor& result, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<double>();\n+    CPU_tensor_apply2<uint8_t, scalar>(result, self,\n+        [other_val](uint8_t& result_val, scalar self_val) {\n+        result_val = convert<scalar, double>(self_val) >= other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct EqOpDouble {\n+  static void apply(Tensor& result, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<double>();\n+    CPU_tensor_apply2<uint8_t, scalar>(result, self,\n+        [other_val](uint8_t& result_val, scalar self_val) {\n+        result_val = convert<scalar, double>(self_val) == other_val;\n+      }\n+    );\n+  }\n+};\n+\n+template <typename scalar>\n+struct NeOpDouble {\n+  static void apply(Tensor& result, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<double>();\n+    CPU_tensor_apply2<uint8_t, scalar>(result, self,\n+        [other_val](uint8_t& result_val, scalar self_val) {\n+        result_val = convert<scalar, double>(self_val) != other_val;\n+      }\n+    );\n+  }\n+};", "path": "aten/src/ATen/native/TensorCompare.cpp", "position": null, "original_position": 98, "commit_id": "da6b60d7c716fb9b9fe5052edcdaf4204c8d3cef", "original_commit_id": "fca135c84494d1205481fb81c5ad8e7d81877834", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "We should be using templates for those ops. They all differ in a single line.", "created_at": "2018-02-24T09:10:01Z", "updated_at": "2018-11-23T15:39:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/5394#discussion_r170416462", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5394", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170416462"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5394#discussion_r170416462"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5394"}}, "body_html": "<p>We should be using templates for those ops. They all differ in a single line.</p>", "body_text": "We should be using templates for those ops. They all differ in a single line."}