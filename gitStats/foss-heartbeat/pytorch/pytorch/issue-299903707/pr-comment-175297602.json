{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175297602", "pull_request_review_id": 104805588, "id": 175297602, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI5NzYwMg==", "diff_hunk": "@@ -0,0 +1,100 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/Dispatch.h\"\n+#include \"ATen/ExpandUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+\n+\n+template <template<typename> class, typename, typename, template<template<typename> class, typename, typename> class>\n+struct CmpOpScalar {};\n+\n+// Comparators have special cases for integral tensors and floating scalars due to\n+// the floating scalars being automatically cast to integral types during the comparison\n+template<typename scalar_out, typename scalar, template<template<typename> class, typename, typename> class CmpOpImpl>\n+struct CmpOpScalar<std::less, scalar_out, scalar, CmpOpImpl> {\n+  static void apply(at::Tensor& ret, const at::Tensor& self, at::Scalar other) {\n+    if (isIntegralType(self.type().scalarType()) && other.isFloatingPoint()) {\n+      auto other_double = other.to<double>();\n+      auto other_long = other.to<int64_t>();\n+      if (other_double != other_long) {\n+        other = at::Scalar(ceil(other_double));", "path": "aten/src/ATen/TensorCompare.h", "position": 23, "original_position": 19, "commit_id": "da6b60d7c716fb9b9fe5052edcdaf4204c8d3cef", "original_commit_id": "6c7e02efcf18d3c6006c365a15bd761c179cd132", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Don't we want to cast the `ceil(other_double)` to `int64_t` or sth? Won't this remain a floating point scalar if we leave it as is?", "created_at": "2018-03-18T17:55:36Z", "updated_at": "2018-11-23T15:40:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/5394#discussion_r175297602", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5394", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175297602"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5394#discussion_r175297602"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5394"}}, "body_html": "<p>Don't we want to cast the <code>ceil(other_double)</code> to <code>int64_t</code> or sth? Won't this remain a floating point scalar if we leave it as is?</p>", "body_text": "Don't we want to cast the ceil(other_double) to int64_t or sth? Won't this remain a floating point scalar if we leave it as is?"}