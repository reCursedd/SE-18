{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177674058", "pull_request_review_id": 107585507, "id": 177674058, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzY3NDA1OA==", "diff_hunk": "@@ -4786,6 +4786,33 @@ def test_equal(self):\n         self.assertTrue(torch.equal(s1, s3))\n         self.assertFalse(torch.equal(s1, s4))\n \n+    def test_comparator_integral_tensor_floating_scalar(self):\n+        t = torch.LongTensor([-2, -1, 0, 1, 2])\n+        self.assertEqual(t.lt(0.5), [1, 1, 1, 0, 0])\n+        self.assertEqual(t.lt(-0.5), [1, 1, 0, 0, 0])\n+        self.assertEqual(t.gt(0.5), [0, 0, 0, 1, 1])\n+        self.assertEqual(t.gt(-0.5), [0, 0, 1, 1, 1])\n+        self.assertEqual(t.ge(0.5), [0, 0, 0, 1, 1])\n+        self.assertEqual(t.ge(-0.5), [0, 0, 1, 1, 1])\n+        self.assertEqual(t.le(0.5), [1, 1, 1, 0, 0])\n+        self.assertEqual(t.le(-0.5), [1, 1, 0, 0, 0])\n+        self.assertEqual(t.eq(0.5), [0, 0, 0, 0, 0])\n+        self.assertEqual(t.ne(0.5), [1, 1, 1, 1, 1])\n+\n+    @unittest.skipIf(not torch.cuda.is_available(), 'no CUDA')\n+    def test_comparator_integral_tensor_floating_scalar_cuda(self):\n+        t = torch.LongTensor([-2, -1, 0, 1, 2]).cuda()\n+        self.assertEqual(t.lt(0.5), [1, 1, 1, 0, 0])\n+        self.assertEqual(t.lt(-0.5), [1, 1, 0, 0, 0])\n+        self.assertEqual(t.gt(0.5), [0, 0, 0, 1, 1])\n+        self.assertEqual(t.gt(-0.5), [0, 0, 1, 1, 1])\n+        self.assertEqual(t.ge(0.5), [0, 0, 0, 1, 1])\n+        self.assertEqual(t.ge(-0.5), [0, 0, 1, 1, 1])\n+        self.assertEqual(t.le(0.5), [1, 1, 1, 0, 0])\n+        self.assertEqual(t.le(-0.5), [1, 1, 0, 0, 0])\n+        self.assertEqual(t.eq(0.5), [0, 0, 0, 0, 0])\n+        self.assertEqual(t.ne(0.5), [1, 1, 1, 1, 1])", "path": "test/test_torch.py", "position": 16, "original_position": 29, "commit_id": "da6b60d7c716fb9b9fe5052edcdaf4204c8d3cef", "original_commit_id": "a965d758aec4c39af65b6c2a7ed9e5247fadb8bd", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "These two tests are identical. A better way would be to write a helper that takes a `dtype`, and change these methods to:\r\n```python\r\ndef test_comparator_integral_tensor_floating_scalar(self):\r\n    self._test_comparator_integral_tensor(torch.long) # or torch.cuda.long in CUDA test\r\n```", "created_at": "2018-03-28T08:30:58Z", "updated_at": "2018-11-23T15:41:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/5394#discussion_r177674058", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5394", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177674058"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5394#discussion_r177674058"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5394"}}, "body_html": "<p>These two tests are identical. A better way would be to write a helper that takes a <code>dtype</code>, and change these methods to:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">test_comparator_integral_tensor_floating_scalar</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">self</span>._test_comparator_integral_tensor(torch.long) <span class=\"pl-c\"><span class=\"pl-c\">#</span> or torch.cuda.long in CUDA test</span></pre></div>", "body_text": "These two tests are identical. A better way would be to write a helper that takes a dtype, and change these methods to:\ndef test_comparator_integral_tensor_floating_scalar(self):\n    self._test_comparator_integral_tensor(torch.long) # or torch.cuda.long in CUDA test"}