{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170939854", "pull_request_review_id": 99704385, "id": 170939854, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDkzOTg1NA==", "diff_hunk": "@@ -24,5 +26,95 @@ Tensor _s_where_cuda(const Tensor& condition, const Tensor& self, const Tensor&\n   return ret;\n }\n \n+template<template<typename T> class Comparator, typename scalar>\n+struct CmpOpCUDA {\n+  static void apply(Tensor& ret, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<scalar>();\n+    cuda::CUDA_tensor_apply2<uint8_t, scalar>(ret, self,\n+        [other_val] __device__ (uint8_t& ret_val, const scalar& self_val) {\n+        ret_val = Comparator<scalar>()(self_val, other_val);\n+      }\n+    );\n+  }\n+};\n+\n+template<typename scalar>\n+using LeOpCUDA = CmpOpCUDA<std::less_equal, scalar>;\n+template<typename scalar>\n+using GeOpCUDA = CmpOpCUDA<std::greater_equal, scalar>;\n+template<typename scalar>\n+using EqOpCUDA = CmpOpCUDA<std::equal_to, scalar>;\n+template<typename scalar>\n+using NeOpCUDA = CmpOpCUDA<std::not_equal_to, scalar>;\n+\n+template<template<typename T> class Comparator, typename scalar>\n+struct CmpOpDoubleCUDA {\n+  static void apply(Tensor& result, const Tensor& self, Scalar other) {\n+    auto other_val = other.to<double>();\n+    cuda::CUDA_tensor_apply2<uint8_t, scalar>(result, self,\n+        [other_val] __device__ (uint8_t& result_val, const scalar& self_val) {\n+        result_val = Comparator<double>()(ScalarConvert<scalar, double>::to(self_val), other_val);", "path": "aten/src/ATen/native/cuda/TensorCompare.cu", "position": null, "original_position": 40, "commit_id": "da6b60d7c716fb9b9fe5052edcdaf4204c8d3cef", "original_commit_id": "9e33b0e198e0d227b329d6db70c4de7d621a8506", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I wonder if we shouldn't use instead [`THCNumerics` for that](https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCNumerics.cuh#L21-L26)", "created_at": "2018-02-27T14:31:45Z", "updated_at": "2018-11-23T15:40:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/5394#discussion_r170939854", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5394", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/170939854"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5394#discussion_r170939854"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5394"}}, "body_html": "<p>I wonder if we shouldn't use instead <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THC/THCNumerics.cuh#L21-L26\"><code>THCNumerics</code> for that</a></p>", "body_text": "I wonder if we shouldn't use instead THCNumerics for that", "in_reply_to_id": 170929271}