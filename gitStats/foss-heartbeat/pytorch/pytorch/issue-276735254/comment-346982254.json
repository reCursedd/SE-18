{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/346982254", "html_url": "https://github.com/pytorch/pytorch/issues/3868#issuecomment-346982254", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3868", "id": 346982254, "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njk4MjI1NA==", "user": {"login": "xinyuwufei", "id": 6299086, "node_id": "MDQ6VXNlcjYyOTkwODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6299086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinyuwufei", "html_url": "https://github.com/xinyuwufei", "followers_url": "https://api.github.com/users/xinyuwufei/followers", "following_url": "https://api.github.com/users/xinyuwufei/following{/other_user}", "gists_url": "https://api.github.com/users/xinyuwufei/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinyuwufei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinyuwufei/subscriptions", "organizations_url": "https://api.github.com/users/xinyuwufei/orgs", "repos_url": "https://api.github.com/users/xinyuwufei/repos", "events_url": "https://api.github.com/users/xinyuwufei/events{/privacy}", "received_events_url": "https://api.github.com/users/xinyuwufei/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-26T03:54:23Z", "updated_at": "2017-11-26T04:26:25Z", "author_association": "NONE", "body_html": "<p>Really thanks for the clarification!<br>\nActually, I do want to differentiate the operation, I tried to use the var directly but run into the in-place error, I thought use var.data would do the trick, now I realize is wrong.</p>\n<p>I saw the there is a fix on the forum is to use the clone() method, but I could not figure out how to get it works. Below is my current draft:</p>\n<div class=\"highlight highlight-source-python\"><pre>        <span class=\"pl-k\">for</span> key, values <span class=\"pl-k\">in</span> location.items():\n            <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> values:\n                zero_one_mat <span class=\"pl-k\">=</span> np.zeros(<span class=\"pl-c1\">self</span>.vocab_dim,<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n                zero_one_mat[statistics_hardcoded.yunjiao_stat[v[<span class=\"pl-c1\">1</span>]]] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>.\n                zero_one_mat <span class=\"pl-k\">=</span> Variable(torch.from_numpy(zero_one_mat).cuda())\n\n               <span class=\"pl-c\"><span class=\"pl-c\">#</span> x = outs[key].clone() # outs is a list containing vars</span>\n                x <span class=\"pl-k\">=</span> outs[key]\n                x[v[<span class=\"pl-c1\">0</span>]]<span class=\"pl-k\">=</span> x[v[<span class=\"pl-c1\">0</span>]] <span class=\"pl-k\">*</span> zero_one_mat\n                norm <span class=\"pl-k\">=</span> torch.sum(x[v[<span class=\"pl-c1\">0</span>]])\n                x[v[<span class=\"pl-c1\">0</span>]] <span class=\"pl-k\">=</span> x[v[<span class=\"pl-c1\">0</span>]] <span class=\"pl-k\">/</span> norm\n                outs[key] <span class=\"pl-k\">=</span> x  \n        <span class=\"pl-k\">return</span> outs</pre></div>\n<p>any idea to solve this issue?</p>\n<p>Thanks</p>", "body_text": "Really thanks for the clarification!\nActually, I do want to differentiate the operation, I tried to use the var directly but run into the in-place error, I thought use var.data would do the trick, now I realize is wrong.\nI saw the there is a fix on the forum is to use the clone() method, but I could not figure out how to get it works. Below is my current draft:\n        for key, values in location.items():\n            for v in values:\n                zero_one_mat = np.zeros(self.vocab_dim,dtype=np.float32)\n                zero_one_mat[statistics_hardcoded.yunjiao_stat[v[1]]] = 1.\n                zero_one_mat = Variable(torch.from_numpy(zero_one_mat).cuda())\n\n               # x = outs[key].clone() # outs is a list containing vars\n                x = outs[key]\n                x[v[0]]= x[v[0]] * zero_one_mat\n                norm = torch.sum(x[v[0]])\n                x[v[0]] = x[v[0]] / norm\n                outs[key] = x  \n        return outs\nany idea to solve this issue?\nThanks", "body": "Really thanks for the clarification!\r\nActually, I do want to differentiate the operation, I tried to use the var directly but run into the in-place error, I thought use var.data would do the trick, now I realize is wrong.\r\n\r\nI saw the there is a fix on the forum is to use the clone() method, but I could not figure out how to get it works. Below is my current draft:\r\n```python\r\n        for key, values in location.items():\r\n            for v in values:\r\n                zero_one_mat = np.zeros(self.vocab_dim,dtype=np.float32)\r\n                zero_one_mat[statistics_hardcoded.yunjiao_stat[v[1]]] = 1.\r\n                zero_one_mat = Variable(torch.from_numpy(zero_one_mat).cuda())\r\n\r\n               # x = outs[key].clone() # outs is a list containing vars\r\n                x = outs[key]\r\n                x[v[0]]= x[v[0]] * zero_one_mat\r\n                norm = torch.sum(x[v[0]])\r\n                x[v[0]] = x[v[0]] / norm\r\n                outs[key] = x  \r\n        return outs\r\n```\r\n\r\nany idea to solve this issue?\r\n\r\nThanks\r\n  "}