{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3868", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3868/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3868/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3868/events", "html_url": "https://github.com/pytorch/pytorch/issues/3868", "id": 276735254, "node_id": "MDU6SXNzdWUyNzY3MzUyNTQ=", "number": 3868, "title": "variable advanced indexing with assignment", "user": {"login": "xinyuwufei", "id": 6299086, "node_id": "MDQ6VXNlcjYyOTkwODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6299086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinyuwufei", "html_url": "https://github.com/xinyuwufei", "followers_url": "https://api.github.com/users/xinyuwufei/followers", "following_url": "https://api.github.com/users/xinyuwufei/following{/other_user}", "gists_url": "https://api.github.com/users/xinyuwufei/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinyuwufei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinyuwufei/subscriptions", "organizations_url": "https://api.github.com/users/xinyuwufei/orgs", "repos_url": "https://api.github.com/users/xinyuwufei/repos", "events_url": "https://api.github.com/users/xinyuwufei/events{/privacy}", "received_events_url": "https://api.github.com/users/xinyuwufei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-25T08:25:04Z", "updated_at": "2017-11-26T12:49:15Z", "closed_at": "2017-11-25T16:11:56Z", "author_association": "NONE", "body_html": "<p>pytorch version: 0.4.0a0+6dc1fc7 wich cudnn support<br>\nOS: Mac OS 10.12</p>\n<p>I'm new to the pytorch, I found a issue when variable.data is failed to assign when the case likes:</p>\n<ul>\n<li>out[0,:].data = torch.mul(out[0,:].data,zero_one_mat), see details below:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np</pre></div>\n<div class=\"highlight highlight-source-python\"><pre>out<span class=\"pl-k\">=</span>np.array([[<span class=\"pl-c1\">5.5737e-08</span>,<span class=\"pl-c1\">1.2218e-07</span>]],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n<span class=\"pl-c1\">print</span>(out)\nout <span class=\"pl-k\">=</span> Variable(torch.from_numpy(out).cuda())\n<span class=\"pl-c1\">print</span>(out)</pre></div>\n<pre><code>[[  5.57370008e-08   1.22179998e-07]]\nVariable containing:\n1.00000e-07 *\n  0.5574  1.2218\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n</code></pre>\n<div class=\"highlight highlight-source-python\"><pre>zero_one_mat <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>),<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nzero_one_mat[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>.\nzero_one_mat <span class=\"pl-k\">=</span> torch.from_numpy(zero_one_mat).cuda()\n<span class=\"pl-c1\">print</span>(zero_one_mat)</pre></div>\n<pre><code> 1  0\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n</code></pre>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>wrong result:<span class=\"pl-pds\">'</span></span>)\n\nout[<span class=\"pl-c1\">0</span>,:].data <span class=\"pl-k\">=</span> torch.mul(out[<span class=\"pl-c1\">0</span>,:].data,zero_one_mat)\n<span class=\"pl-c1\">print</span>(out.data)\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>**************<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>correct result:<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(torch.mul(out[<span class=\"pl-c1\">0</span>,:].data,zero_one_mat))\n\n<span class=\"pl-c1\">print</span>(torch.mul(out.data[<span class=\"pl-c1\">0</span>,:],zero_one_mat))\n\nout.data[<span class=\"pl-c1\">0</span>,:] <span class=\"pl-k\">=</span> torch.mul(out[<span class=\"pl-c1\">0</span>,:].data,zero_one_mat)\n<span class=\"pl-c1\">print</span>(out.data)\n\nout<span class=\"pl-k\">=</span>np.array([[<span class=\"pl-c1\">5.5737e-08</span>,<span class=\"pl-c1\">1.2218e-07</span>]],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nout <span class=\"pl-k\">=</span> Variable(torch.from_numpy(out).cuda())\nout.data[<span class=\"pl-c1\">0</span>,:] <span class=\"pl-k\">=</span> torch.mul(out.data[<span class=\"pl-c1\">0</span>,:],zero_one_mat)\n<span class=\"pl-c1\">print</span>(out.data)\n\nout<span class=\"pl-k\">=</span>np.array([[<span class=\"pl-c1\">5.5737e-08</span>,<span class=\"pl-c1\">1.2218e-07</span>]],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nout <span class=\"pl-k\">=</span> Variable(torch.from_numpy(out).cuda())\ntorch.mul(out[<span class=\"pl-c1\">0</span>,:].data,zero_one_mat,<span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>out[<span class=\"pl-c1\">0</span>,:].data)\n<span class=\"pl-c1\">print</span>(out.data)\n\nout<span class=\"pl-k\">=</span>np.array([[<span class=\"pl-c1\">5.5737e-08</span>,<span class=\"pl-c1\">1.2218e-07</span>]],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nout <span class=\"pl-k\">=</span> Variable(torch.from_numpy(out).cuda())\ntorch.mul(out.data[<span class=\"pl-c1\">0</span>,:],zero_one_mat,<span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>out[<span class=\"pl-c1\">0</span>,:].data)\n<span class=\"pl-c1\">print</span>(out.data)\n\nout<span class=\"pl-k\">=</span>np.array([[<span class=\"pl-c1\">5.5737e-08</span>,<span class=\"pl-c1\">1.2218e-07</span>]],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nout <span class=\"pl-k\">=</span> Variable(torch.from_numpy(out).cuda())\ntorch.mul(out.data[<span class=\"pl-c1\">0</span>,:],zero_one_mat,<span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>out.data[<span class=\"pl-c1\">0</span>,:])\n<span class=\"pl-c1\">print</span>(out.data)\n\nout<span class=\"pl-k\">=</span>np.array([[<span class=\"pl-c1\">5.5737e-08</span>,<span class=\"pl-c1\">1.2218e-07</span>]],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nout <span class=\"pl-k\">=</span> Variable(torch.from_numpy(out).cuda())\ntorch.mul(out[<span class=\"pl-c1\">0</span>,:].data,zero_one_mat,<span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>out.data[<span class=\"pl-c1\">0</span>,:])\n<span class=\"pl-c1\">print</span>(out.data)</pre></div>\n<pre><code>wrong result:\n\n1.00000e-07 *\n  0.5574  1.2218\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n**************\ncorrect result:\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n</code></pre>", "body_text": "pytorch version: 0.4.0a0+6dc1fc7 wich cudnn support\nOS: Mac OS 10.12\nI'm new to the pytorch, I found a issue when variable.data is failed to assign when the case likes:\n\nout[0,:].data = torch.mul(out[0,:].data,zero_one_mat), see details below:\n\nimport torch\nfrom torch.autograd import Variable\nimport numpy as np\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\nprint(out)\nout = Variable(torch.from_numpy(out).cuda())\nprint(out)\n[[  5.57370008e-08   1.22179998e-07]]\nVariable containing:\n1.00000e-07 *\n  0.5574  1.2218\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\nzero_one_mat = np.zeros((1,2),dtype=np.float32)\nzero_one_mat[0,0] = 1.\nzero_one_mat = torch.from_numpy(zero_one_mat).cuda()\nprint(zero_one_mat)\n 1  0\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\nprint('wrong result:')\n\nout[0,:].data = torch.mul(out[0,:].data,zero_one_mat)\nprint(out.data)\n\nprint('**************')\nprint('correct result:')\nprint(torch.mul(out[0,:].data,zero_one_mat))\n\nprint(torch.mul(out.data[0,:],zero_one_mat))\n\nout.data[0,:] = torch.mul(out[0,:].data,zero_one_mat)\nprint(out.data)\n\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\nout = Variable(torch.from_numpy(out).cuda())\nout.data[0,:] = torch.mul(out.data[0,:],zero_one_mat)\nprint(out.data)\n\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\nout = Variable(torch.from_numpy(out).cuda())\ntorch.mul(out[0,:].data,zero_one_mat,out=out[0,:].data)\nprint(out.data)\n\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\nout = Variable(torch.from_numpy(out).cuda())\ntorch.mul(out.data[0,:],zero_one_mat,out=out[0,:].data)\nprint(out.data)\n\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\nout = Variable(torch.from_numpy(out).cuda())\ntorch.mul(out.data[0,:],zero_one_mat,out=out.data[0,:])\nprint(out.data)\n\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\nout = Variable(torch.from_numpy(out).cuda())\ntorch.mul(out[0,:].data,zero_one_mat,out=out.data[0,:])\nprint(out.data)\nwrong result:\n\n1.00000e-07 *\n  0.5574  1.2218\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n**************\ncorrect result:\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]\n\n\n1.00000e-08 *\n  5.5737  0.0000\n[torch.cuda.FloatTensor of size 1x2 (GPU 0)]", "body": " pytorch version: 0.4.0a0+6dc1fc7 wich cudnn support\r\n OS: Mac OS 10.12\r\n\r\nI'm new to the pytorch, I found a issue when variable.data is failed to assign when the case likes:\r\n* out[0,:].data = torch.mul(out[0,:].data,zero_one_mat), see details below:\r\n\r\n```python\r\nimport torch\r\nfrom torch.autograd import Variable\r\nimport numpy as np\r\n```\r\n\r\n\r\n```python\r\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\r\nprint(out)\r\nout = Variable(torch.from_numpy(out).cuda())\r\nprint(out)\r\n```\r\n\r\n    [[  5.57370008e-08   1.22179998e-07]]\r\n    Variable containing:\r\n    1.00000e-07 *\r\n      0.5574  1.2218\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n\r\n\r\n```python\r\nzero_one_mat = np.zeros((1,2),dtype=np.float32)\r\nzero_one_mat[0,0] = 1.\r\nzero_one_mat = torch.from_numpy(zero_one_mat).cuda()\r\nprint(zero_one_mat)\r\n```\r\n\r\n\r\n     1  0\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n\r\n\r\n```python\r\nprint('wrong result:')\r\n\r\nout[0,:].data = torch.mul(out[0,:].data,zero_one_mat)\r\nprint(out.data)\r\n\r\nprint('**************')\r\nprint('correct result:')\r\nprint(torch.mul(out[0,:].data,zero_one_mat))\r\n\r\nprint(torch.mul(out.data[0,:],zero_one_mat))\r\n\r\nout.data[0,:] = torch.mul(out[0,:].data,zero_one_mat)\r\nprint(out.data)\r\n\r\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\r\nout = Variable(torch.from_numpy(out).cuda())\r\nout.data[0,:] = torch.mul(out.data[0,:],zero_one_mat)\r\nprint(out.data)\r\n\r\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\r\nout = Variable(torch.from_numpy(out).cuda())\r\ntorch.mul(out[0,:].data,zero_one_mat,out=out[0,:].data)\r\nprint(out.data)\r\n\r\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\r\nout = Variable(torch.from_numpy(out).cuda())\r\ntorch.mul(out.data[0,:],zero_one_mat,out=out[0,:].data)\r\nprint(out.data)\r\n\r\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\r\nout = Variable(torch.from_numpy(out).cuda())\r\ntorch.mul(out.data[0,:],zero_one_mat,out=out.data[0,:])\r\nprint(out.data)\r\n\r\nout=np.array([[5.5737e-08,1.2218e-07]],dtype=np.float32)\r\nout = Variable(torch.from_numpy(out).cuda())\r\ntorch.mul(out[0,:].data,zero_one_mat,out=out.data[0,:])\r\nprint(out.data)\r\n```\r\n\r\n    wrong result:\r\n\r\n    1.00000e-07 *\r\n      0.5574  1.2218\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n    \r\n    **************\r\n    correct result:\r\n    \r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]\r\n\r\n\r\n    1.00000e-08 *\r\n      5.5737  0.0000\r\n    [torch.cuda.FloatTensor of size 1x2 (GPU 0)]"}